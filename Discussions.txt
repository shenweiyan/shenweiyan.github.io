{'date': '2025-05-06 18:00:55.132017+08:00', 'nodes': [{'title': '语雀天使', 'number': 148, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/148', 'createdAt': '2025-04-30T08:11:02Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T08:11:03Z', 'body': '从 2018 年开始接触语雀，一路走来把自己记过的各种文档都托管到了语雀，从原来的写给自己看方便自己查阅，到今天逐步面向大家公开交流，这是最大的变化。\n\n<!-- more -->\n\n![71bacefe8f8723f9fb80df1dae35f02.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FjymRUVCcoqMDJQzoNAL60HGnj3v.jpeg)\n\n![image.png](https://shub.weiyan.tech/yuque/elog-notebook-img/FtSri7LrQFUK5QjFeBtuhW6_e1BV.png)\n\n一路走来，也折腾过语雀以外的很多笔记/在线文档平台，但最终还是选择了语雀。\n\n[只要能坚持下来就是好博客](https://mp.weixin.qq.com/s/-QuX-z4KlBNXUiRT92uVOA)\n\n[语雀图片与七牛云之间的迁移同步](https://mp.weixin.qq.com/s/F4eu2rK6aiyVrsX_sJldPw)\n\n[快速拥有自己的博客，语雀或许是不错的选择](https://mp.weixin.qq.com/s/ntOMVcsqfgDK_B7go16hcw)\n\n到今天（2021 年 10 月 14 日）个人在语雀一共写了 700 多篇文档，400 多篇是公开的，300 多个关注者，很平淡的一些数据。\n\n在 2021 年 9 月 26 日的[**语雀知识大会**](https://www.yuque.com/yuque/blog/iaidt8)上收到了另外一个社会身份，叫**首批语雀天使**，成为了幸运的 1/15，算是对这些年默默码字的一个肯定。\n![f3fa91b08ac80f46be1eeef6754f42b.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FsMA0G3DdG27_-nKrWT47BMwcOF5.jpeg)\n![240b78a46751eec3d3f0a335a75456d.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FlHRIckh5mJ7PFZFz2Y1Qb2n0vt1.jpeg)\n今天，终于收到了官方送的礼物，上几张图~\n![71bacefe8f8723f9fb80df1dae35f02.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FjymRUVCcoqMDJQzoNAL60HGnj3v.jpeg) ![ff8c02f34eb75882b81aae4b3024e4e.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FnHN_g1qbAiZzaYON80lBraD16PH.jpeg)\n未来不敢承诺什么，但至少还会坚持码码字，不管技术的还是生活，吐槽的还是失意的，若干年后当你回头看看你一路写过的东西，应该会有的心情吧。就好像你现在回去看看你当年 QQ 空间的日志一样，或许会有很多感触！\n\n而且，最值得期待的语雀移动端 APP 在今年下半年也要出来了，你还有什么好犹豫呢？\n\n和我一起，在语雀记录和沉淀你的点滴吧！', 'bodyText': '从 2018 年开始接触语雀，一路走来把自己记过的各种文档都托管到了语雀，从原来的写给自己看方便自己查阅，到今天逐步面向大家公开交流，这是最大的变化。\n\n\n\n一路走来，也折腾过语雀以外的很多笔记/在线文档平台，但最终还是选择了语雀。\n只要能坚持下来就是好博客\n语雀图片与七牛云之间的迁移同步\n快速拥有自己的博客，语雀或许是不错的选择\n到今天（2021 年 10 月 14 日）个人在语雀一共写了 700 多篇文档，400 多篇是公开的，300 多个关注者，很平淡的一些数据。\n在 2021 年 9 月 26 日的语雀知识大会上收到了另外一个社会身份，叫首批语雀天使，成为了幸运的 1/15，算是对这些年默默码字的一个肯定。\n\n\n今天，终于收到了官方送的礼物，上几张图~\n \n未来不敢承诺什么，但至少还会坚持码码字，不管技术的还是生活，吐槽的还是失意的，若干年后当你回头看看你一路写过的东西，应该会有的心情吧。就好像你现在回去看看你当年 QQ 空间的日志一样，或许会有很多感触！\n而且，最值得期待的语雀移动端 APP 在今年下半年也要出来了，你还有什么好犹豫呢？\n和我一起，在语雀记录和沉淀你的点滴吧！', 'bodyHTML': '<p dir="auto">从 2018 年开始接触语雀，一路走来把自己记过的各种文档都托管到了语雀，从原来的写给自己看方便自己查阅，到今天逐步面向大家公开交流，这是最大的变化。</p>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/9134a3bcfd3be6a7ca69565d10e52a2be3349c9bccadb8bead45c4749e01a20e/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466a796d52555643636f714d444a517a6f4e414c363048476e6a33762e6a706567"><img src="https://camo.githubusercontent.com/9134a3bcfd3be6a7ca69565d10e52a2be3349c9bccadb8bead45c4749e01a20e/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466a796d52555643636f714d444a517a6f4e414c363048476e6a33762e6a706567" alt="71bacefe8f8723f9fb80df1dae35f02.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FjymRUVCcoqMDJQzoNAL60HGnj3v.jpeg" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b51d1ea2eb68a111f22597c0b7ed9e0478f503455c7fbf3ec4b3a974757e9a82/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4674537269374c725146554b35516a46654274756857365f653142562e706e67"><img src="https://camo.githubusercontent.com/b51d1ea2eb68a111f22597c0b7ed9e0478f503455c7fbf3ec4b3a974757e9a82/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4674537269374c725146554b35516a46654274756857365f653142562e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FtSri7LrQFUK5QjFeBtuhW6_e1BV.png" style="max-width: 100%;"></a></p>\n<p dir="auto">一路走来，也折腾过语雀以外的很多笔记/在线文档平台，但最终还是选择了语雀。</p>\n<p dir="auto"><a href="https://mp.weixin.qq.com/s/-QuX-z4KlBNXUiRT92uVOA" rel="nofollow">只要能坚持下来就是好博客</a></p>\n<p dir="auto"><a href="https://mp.weixin.qq.com/s/F4eu2rK6aiyVrsX_sJldPw" rel="nofollow">语雀图片与七牛云之间的迁移同步</a></p>\n<p dir="auto"><a href="https://mp.weixin.qq.com/s/ntOMVcsqfgDK_B7go16hcw" rel="nofollow">快速拥有自己的博客，语雀或许是不错的选择</a></p>\n<p dir="auto">到今天（2021 年 10 月 14 日）个人在语雀一共写了 700 多篇文档，400 多篇是公开的，300 多个关注者，很平淡的一些数据。</p>\n<p dir="auto">在 2021 年 9 月 26 日的<a href="https://www.yuque.com/yuque/blog/iaidt8" rel="nofollow"><strong>语雀知识大会</strong></a>上收到了另外一个社会身份，叫<strong>首批语雀天使</strong>，成为了幸运的 1/15，算是对这些年默默码字的一个肯定。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/6861224d13093f1b89df3128bb08849f34266690e1fff34ffba7d0ca480746e1/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46734d4130473344644732375f2d6e4b7257543437424d77634f46352e6a706567"><img src="https://camo.githubusercontent.com/6861224d13093f1b89df3128bb08849f34266690e1fff34ffba7d0ca480746e1/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46734d4130473344644732375f2d6e4b7257543437424d77634f46352e6a706567" alt="f3fa91b08ac80f46be1eeef6754f42b.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FsMA0G3DdG27_-nKrWT47BMwcOF5.jpeg" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/9b5f82f81965b54d315d3c05d9affe560bf7d08839854398c93b52811195f9db/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466c485249636b68356d4a3750465a467a3259315162326e307674312e6a706567"><img src="https://camo.githubusercontent.com/9b5f82f81965b54d315d3c05d9affe560bf7d08839854398c93b52811195f9db/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466c485249636b68356d4a3750465a467a3259315162326e307674312e6a706567" alt="240b78a46751eec3d3f0a335a75456d.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FlHRIckh5mJ7PFZFz2Y1Qb2n0vt1.jpeg" style="max-width: 100%;"></a><br>\n今天，终于收到了官方送的礼物，上几张图~<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/9134a3bcfd3be6a7ca69565d10e52a2be3349c9bccadb8bead45c4749e01a20e/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466a796d52555643636f714d444a517a6f4e414c363048476e6a33762e6a706567"><img src="https://camo.githubusercontent.com/9134a3bcfd3be6a7ca69565d10e52a2be3349c9bccadb8bead45c4749e01a20e/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466a796d52555643636f714d444a517a6f4e414c363048476e6a33762e6a706567" alt="71bacefe8f8723f9fb80df1dae35f02.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FjymRUVCcoqMDJQzoNAL60HGnj3v.jpeg" style="max-width: 100%;"></a> <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/12270a10993adcfa5cfd0f712f46e38d43be1e9ab33b18690763cbc1999bdf6c/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466e484e5f6731716241695a7a61594f4e38306c42726144313650482e6a706567"><img src="https://camo.githubusercontent.com/12270a10993adcfa5cfd0f712f46e38d43be1e9ab33b18690763cbc1999bdf6c/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466e484e5f6731716241695a7a61594f4e38306c42726144313650482e6a706567" alt="ff8c02f34eb75882b81aae4b3024e4e.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FnHN_g1qbAiZzaYON80lBraD16PH.jpeg" style="max-width: 100%;"></a><br>\n未来不敢承诺什么，但至少还会坚持码码字，不管技术的还是生活，吐槽的还是失意的，若干年后当你回头看看你一路写过的东西，应该会有的心情吧。就好像你现在回去看看你当年 QQ 空间的日志一样，或许会有很多感触！</p>\n<p dir="auto">而且，最值得期待的语雀移动端 APP 在今年下半年也要出来了，你还有什么好犹豫呢？</p>\n<p dir="auto">和我一起，在语雀记录和沉淀你的点滴吧！</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.5-语雀'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '语雀目录的一些困惑', 'number': 147, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/147', 'createdAt': '2025-04-30T08:11:01Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T08:11:03Z', 'body': '语雀的目录应该是语雀的一大特色，像书本一样清晰明了的结构的确能解决一些问题，但是随着文档越来越多，使用起来感觉越来越臃肿——最起码会有目录编排的逻辑困惑（我应该怎么系统设置我的目录？）。\n\n<!-- more -->\n\n[语雀知识库文档分类的纠结](https://www.yuque.com/shenweiyan/mind/whnegc?view=doc_embed)\n\n还有的就是目录层级太多，上下滚动，或者在看某一篇文档时，有种不知道自己在哪里的错觉。不清楚整个目录的逻辑是什么样的。\n![image.png](https://shub.weiyan.tech/yuque/elog-notebook-img/FlqfKANn6DQsTEDdoTNQ21a76R8D.png)\n\n所以，还是想要类似的一个目录，虽然觉得官方不可能会支持，但想想总是可以的。如果可以支持多种目录样式，这对于没有系统分类的人来说应该算一种福利吧。\n![image.png](https://shub.weiyan.tech/yuque/elog-notebook-img/FuAD9wruzOFqtCy4QqXPuvxNSUxJ.png)\n\n回到现有目录结构，认真想一下，一旦你的知识库目录想好了（可能要花不少时间去思考：知识库核心是什么，放什么内容，按照什么标准来划分层级......），后面的书写就会很顺理成章。其实就是先想好大纲，理清思路，再进行写作。\n![a557c65ea2805ab271fe885b00284f0.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FpQ3iwTyae-7t-zZOzpbeUcOhgY-.jpeg)\n\n对于现有的目录结构，更喜欢 [Mybase](http://www.wjjsoft.com/mybase_cn.html) 这种树形大纲、树形标签样式的。\n![](https://shub.weiyan.tech/yuque/elog-notebook-img/Foz3UT1eeeM40gp0KS4gw-oB7HmO.png)\n![](https://shub.weiyan.tech/yuque/elog-notebook-img/Fot8QZF_MhgiUHR1ooyarNtdmzzw.jpeg)', 'bodyText': '语雀的目录应该是语雀的一大特色，像书本一样清晰明了的结构的确能解决一些问题，但是随着文档越来越多，使用起来感觉越来越臃肿——最起码会有目录编排的逻辑困惑（我应该怎么系统设置我的目录？）。\n\n语雀知识库文档分类的纠结\n还有的就是目录层级太多，上下滚动，或者在看某一篇文档时，有种不知道自己在哪里的错觉。不清楚整个目录的逻辑是什么样的。\n\n所以，还是想要类似的一个目录，虽然觉得官方不可能会支持，但想想总是可以的。如果可以支持多种目录样式，这对于没有系统分类的人来说应该算一种福利吧。\n\n回到现有目录结构，认真想一下，一旦你的知识库目录想好了（可能要花不少时间去思考：知识库核心是什么，放什么内容，按照什么标准来划分层级......），后面的书写就会很顺理成章。其实就是先想好大纲，理清思路，再进行写作。\n\n对于现有的目录结构，更喜欢 Mybase 这种树形大纲、树形标签样式的。', 'bodyHTML': '<p dir="auto">语雀的目录应该是语雀的一大特色，像书本一样清晰明了的结构的确能解决一些问题，但是随着文档越来越多，使用起来感觉越来越臃肿——最起码会有目录编排的逻辑困惑（我应该怎么系统设置我的目录？）。</p>\n\n<p dir="auto"><a href="https://www.yuque.com/shenweiyan/mind/whnegc?view=doc_embed" rel="nofollow">语雀知识库文档分类的纠结</a></p>\n<p dir="auto">还有的就是目录层级太多，上下滚动，或者在看某一篇文档时，有种不知道自己在哪里的错觉。不清楚整个目录的逻辑是什么样的。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/679ec24f7a82574a00f487de41c17b7ebe81474cc08e8e85d3c8d7eca6a3c651/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466c71664b414e6e36445173544544646f544e5132316137365238442e706e67"><img src="https://camo.githubusercontent.com/679ec24f7a82574a00f487de41c17b7ebe81474cc08e8e85d3c8d7eca6a3c651/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466c71664b414e6e36445173544544646f544e5132316137365238442e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FlqfKANn6DQsTEDdoTNQ21a76R8D.png" style="max-width: 100%;"></a></p>\n<p dir="auto">所以，还是想要类似的一个目录，虽然觉得官方不可能会支持，但想想总是可以的。如果可以支持多种目录样式，这对于没有系统分类的人来说应该算一种福利吧。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/96d1712b7fad59345be7a77e6f0122884a10de1706a064c38618d74f1a459ebf/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46754144397772757a4f467174437934517158507576784e5355784a2e706e67"><img src="https://camo.githubusercontent.com/96d1712b7fad59345be7a77e6f0122884a10de1706a064c38618d74f1a459ebf/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46754144397772757a4f467174437934517158507576784e5355784a2e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FuAD9wruzOFqtCy4QqXPuvxNSUxJ.png" style="max-width: 100%;"></a></p>\n<p dir="auto">回到现有目录结构，认真想一下，一旦你的知识库目录想好了（可能要花不少时间去思考：知识库核心是什么，放什么内容，按照什么标准来划分层级......），后面的书写就会很顺理成章。其实就是先想好大纲，理清思路，再进行写作。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/09d9b8922acd59981a5bfcf6203ca9e3e65b5a132aaf4be412351c6b69436946/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f467051336977547961652d37742d7a5a4f7a70626555634f6867592d2e6a706567"><img src="https://camo.githubusercontent.com/09d9b8922acd59981a5bfcf6203ca9e3e65b5a132aaf4be412351c6b69436946/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f467051336977547961652d37742d7a5a4f7a70626555634f6867592d2e6a706567" alt="a557c65ea2805ab271fe885b00284f0.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FpQ3iwTyae-7t-zZOzpbeUcOhgY-.jpeg" style="max-width: 100%;"></a></p>\n<p dir="auto">对于现有的目录结构，更喜欢 <a href="http://www.wjjsoft.com/mybase_cn.html" rel="nofollow">Mybase</a> 这种树形大纲、树形标签样式的。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/880330180df47b9afcf45769a8cb6586167645b2f14443c400c00fdc3e99704c/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466f7a335554316565654d34306770304b533467772d6f4237486d4f2e706e67"><img src="https://camo.githubusercontent.com/880330180df47b9afcf45769a8cb6586167645b2f14443c400c00fdc3e99704c/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466f7a335554316565654d34306770304b533467772d6f4237486d4f2e706e67" alt="" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Foz3UT1eeeM40gp0KS4gw-oB7HmO.png" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/0e832fdd1c97c0b605de1ea62911807e03c670311fbb8d4cf80d79bfc69bcfa0/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466f7438515a465f4d686769554852316f6f7961724e74646d7a7a772e6a706567"><img src="https://camo.githubusercontent.com/0e832fdd1c97c0b605de1ea62911807e03c670311fbb8d4cf80d79bfc69bcfa0/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466f7438515a465f4d686769554852316f6f7961724e74646d7a7a772e6a706567" alt="" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Fot8QZF_MhgiUHR1ooyarNtdmzzw.jpeg" style="max-width: 100%;"></a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.5-语雀'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '2021 中秋之行', 'number': 146, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/146', 'createdAt': '2025-04-30T08:11:00Z', 'lastEditedAt': '2025-04-30T08:32:30Z', 'updatedAt': '2025-04-30T08:32:30Z', 'body': '2021 年的中秋跟以往有点不一样，没有和国庆连在一起而是中间隔了将近一周多的时间。因此，对有些人九月份的假期安排可能有些尴尬。但是，对于不喜欢假期的我，还算不错。\r\n\r\n<!-- more -->\r\n\r\n![image.png](https://shub.weiyan.tech/yuque/elog-notebook-img/FnCWM4YstHfatKu0YpuzFSmH4IvO.png)\r\n\r\n## 出发前\r\n\r\n差不多一个月前就收到了岳父岳母的提醒：今年中秋前后老家新房子入住，回家一趟。所以，今年的中秋基本没有什么额外的 Plan B，就是回家，回家，回家！\r\n\r\n到了回家前一周（12 号）前后才最终确定新屋最终入住的日期，于是把回家时间成了 16 号返程，19 号回来。\r\n\r\n于是，开始请假、约车、确定回去的人、收拾东西、准备红包等等。怕小孩子在家里无所事事还专门给她下了好几部动画片（现在回想起来还真有点想多了），甚至把她最喜欢的几个玩具都带上了！\r\n\r\n## 出发\r\n\r\n16 号一大早，坐上小舅子的车，一路狂奔，踏上归程。早 7:30 出发到下午 14:00 左右，终于回到。\r\n\r\n## 月是故乡圆\r\n\r\n回家的头天，除了认人打招呼就是准备晚上的入住。\r\n\r\n顾不上归途的疲累，一切感觉还很新鲜。欣慰的是小孩子终于找到可以一起玩的小伙伴，对她来说这一次的回来，是会说话会走路后第一次回家见外公外婆，虽然认生，但总归是开心的。\r\n![6e3304f3d1c9307d33647f1f2fbf4eb.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FhMKTJ5jWZuvc5QUAUQspIhUeIO5.jpeg)![e54572ebca3f235bf52509c67ceb6d7.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/Fpj8sXMzXA8PhwWdDCHCEU96J7RH.jpeg)\r\n挂大红花球、贴对联粘利是，凌晨 12 点 10 分整，新房子入住。老家的新房子入住很讲究仪式，拿锅、抬桌子、挑水、挑担、......，也算是再一次见识了。\r\n\r\n第二天的入伙宴，认人打招呼、接待、聊天，真心是身心疲惫、忙碌又热闹的一天，整个人都快累趴了。\r\n\r\n第三天，吃吃喝喝，终于可以歇歇！\r\n![0f97b4e7203804e514f7d112225e587.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/Fsn3Zc2v6LTJ5qknKbcwM6DhVJ_4.jpeg) ![efaa0bdb9278004378998c852eae7f0.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FnWyIhqzRqlVPLrQH5iUUhLqxS2V.jpeg)\r\n第四天，带着一堆孩子浩浩荡荡出来高州县城逛了一天。又折回到现住的家休息了半天（相比老家的闷热，还是这里干净舒服）。\r\n![9ae0f51d40605ef0350fa5f1fa18e15.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FpUkGIcqmlgmw1gyjCeHlZGj_74y.jpeg) ![465f58f85811452af118257f2ddd0cc.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FtFoT_mlS6cKniVfdSALzbsxVf-C.jpeg)\r\n第五天，出发上来广州。同车是一个空军维修员的退伍老兵，一路听他讲了很多部队的事情，很是开眼界。\r\n\r\n中秋前的这趟回家，算是极其疲惫的一次。不管怎么说，在家乡看到一些人，经历了一些事。相比城市的喧嚣，农村小县城的安静温馨很能勾起我们一些久远的往事，想起十几年前在一中读书的点滴，想起自己许久未曾回去过的老家，想起自己这些年来的经历，时光飞逝年轻不在，不免心生感叹！\r\n\r\n值得一提的是，在老家接到了过过的电话，说通过了语雀天使计划的复试，后续会有专属礼物和官方认证聘书。除此以外，又收到了 CNGB 寄给我猛犸象信息（这里真心要感谢我曾经的同事小游姐给我送的这个这么有意义的礼物） ，心里很是高兴。\r\n\r\n语雀作为我记录和沉淀生活使用最多的平台，走到今天，我接受了它，它也认可了我，通过语雀天使计划的复试是这个独特中秋佳节的最大惊喜。\r\n\r\n我在 CNGB 从实习到工作呆了 4 年多，认识了一批非常可爱的华大人，度过了一段非常有意义和开心的时光，在这里祝福老东家的小伙伴们中秋节日快乐！', 'bodyText': '2021 年的中秋跟以往有点不一样，没有和国庆连在一起而是中间隔了将近一周多的时间。因此，对有些人九月份的假期安排可能有些尴尬。但是，对于不喜欢假期的我，还算不错。\n\n\n出发前\n差不多一个月前就收到了岳父岳母的提醒：今年中秋前后老家新房子入住，回家一趟。所以，今年的中秋基本没有什么额外的 Plan B，就是回家，回家，回家！\n到了回家前一周（12 号）前后才最终确定新屋最终入住的日期，于是把回家时间成了 16 号返程，19 号回来。\n于是，开始请假、约车、确定回去的人、收拾东西、准备红包等等。怕小孩子在家里无所事事还专门给她下了好几部动画片（现在回想起来还真有点想多了），甚至把她最喜欢的几个玩具都带上了！\n出发\n16 号一大早，坐上小舅子的车，一路狂奔，踏上归程。早 7:30 出发到下午 14:00 左右，终于回到。\n月是故乡圆\n回家的头天，除了认人打招呼就是准备晚上的入住。\n顾不上归途的疲累，一切感觉还很新鲜。欣慰的是小孩子终于找到可以一起玩的小伙伴，对她来说这一次的回来，是会说话会走路后第一次回家见外公外婆，虽然认生，但总归是开心的。\n\n挂大红花球、贴对联粘利是，凌晨 12 点 10 分整，新房子入住。老家的新房子入住很讲究仪式，拿锅、抬桌子、挑水、挑担、......，也算是再一次见识了。\n第二天的入伙宴，认人打招呼、接待、聊天，真心是身心疲惫、忙碌又热闹的一天，整个人都快累趴了。\n第三天，吃吃喝喝，终于可以歇歇！\n \n第四天，带着一堆孩子浩浩荡荡出来高州县城逛了一天。又折回到现住的家休息了半天（相比老家的闷热，还是这里干净舒服）。\n \n第五天，出发上来广州。同车是一个空军维修员的退伍老兵，一路听他讲了很多部队的事情，很是开眼界。\n中秋前的这趟回家，算是极其疲惫的一次。不管怎么说，在家乡看到一些人，经历了一些事。相比城市的喧嚣，农村小县城的安静温馨很能勾起我们一些久远的往事，想起十几年前在一中读书的点滴，想起自己许久未曾回去过的老家，想起自己这些年来的经历，时光飞逝年轻不在，不免心生感叹！\n值得一提的是，在老家接到了过过的电话，说通过了语雀天使计划的复试，后续会有专属礼物和官方认证聘书。除此以外，又收到了 CNGB 寄给我猛犸象信息（这里真心要感谢我曾经的同事小游姐给我送的这个这么有意义的礼物） ，心里很是高兴。\n语雀作为我记录和沉淀生活使用最多的平台，走到今天，我接受了它，它也认可了我，通过语雀天使计划的复试是这个独特中秋佳节的最大惊喜。\n我在 CNGB 从实习到工作呆了 4 年多，认识了一批非常可爱的华大人，度过了一段非常有意义和开心的时光，在这里祝福老东家的小伙伴们中秋节日快乐！', 'bodyHTML': '<p dir="auto">2021 年的中秋跟以往有点不一样，没有和国庆连在一起而是中间隔了将近一周多的时间。因此，对有些人九月份的假期安排可能有些尴尬。但是，对于不喜欢假期的我，还算不错。</p>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/393848784411d1148a5f9a7b0dc0526ba6e0383e0a227f4444ab8aabaa32e6c1/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466e43574d34597374486661744b75305970757a46536d483449764f2e706e67"><img src="https://camo.githubusercontent.com/393848784411d1148a5f9a7b0dc0526ba6e0383e0a227f4444ab8aabaa32e6c1/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466e43574d34597374486661744b75305970757a46536d483449764f2e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FnCWM4YstHfatKu0YpuzFSmH4IvO.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">出发前</h2>\n<p dir="auto">差不多一个月前就收到了岳父岳母的提醒：今年中秋前后老家新房子入住，回家一趟。所以，今年的中秋基本没有什么额外的 Plan B，就是回家，回家，回家！</p>\n<p dir="auto">到了回家前一周（12 号）前后才最终确定新屋最终入住的日期，于是把回家时间成了 16 号返程，19 号回来。</p>\n<p dir="auto">于是，开始请假、约车、确定回去的人、收拾东西、准备红包等等。怕小孩子在家里无所事事还专门给她下了好几部动画片（现在回想起来还真有点想多了），甚至把她最喜欢的几个玩具都带上了！</p>\n<h2 dir="auto">出发</h2>\n<p dir="auto">16 号一大早，坐上小舅子的车，一路狂奔，踏上归程。早 7:30 出发到下午 14:00 左右，终于回到。</p>\n<h2 dir="auto">月是故乡圆</h2>\n<p dir="auto">回家的头天，除了认人打招呼就是准备晚上的入住。</p>\n<p dir="auto">顾不上归途的疲累，一切感觉还很新鲜。欣慰的是小孩子终于找到可以一起玩的小伙伴，对她来说这一次的回来，是会说话会走路后第一次回家见外公外婆，虽然认生，但总归是开心的。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/a2305fa319cf5ab99860c92490ad2cfea41b5ae0fdab905d37129bf1ffe4ff95/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46684d4b544a356a575a757663355155415551737049685565494f352e6a706567"><img src="https://camo.githubusercontent.com/a2305fa319cf5ab99860c92490ad2cfea41b5ae0fdab905d37129bf1ffe4ff95/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46684d4b544a356a575a757663355155415551737049685565494f352e6a706567" alt="6e3304f3d1c9307d33647f1f2fbf4eb.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FhMKTJ5jWZuvc5QUAUQspIhUeIO5.jpeg" style="max-width: 100%;"></a><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/882748d7b203f1213f71a616dae08fc1c9fd4137779affea7578b0ff09ed7be8/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46706a3873584d7a584138506877576444434843455539364a3752482e6a706567"><img src="https://camo.githubusercontent.com/882748d7b203f1213f71a616dae08fc1c9fd4137779affea7578b0ff09ed7be8/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46706a3873584d7a584138506877576444434843455539364a3752482e6a706567" alt="e54572ebca3f235bf52509c67ceb6d7.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Fpj8sXMzXA8PhwWdDCHCEU96J7RH.jpeg" style="max-width: 100%;"></a><br>\n挂大红花球、贴对联粘利是，凌晨 12 点 10 分整，新房子入住。老家的新房子入住很讲究仪式，拿锅、抬桌子、挑水、挑担、......，也算是再一次见识了。</p>\n<p dir="auto">第二天的入伙宴，认人打招呼、接待、聊天，真心是身心疲惫、忙碌又热闹的一天，整个人都快累趴了。</p>\n<p dir="auto">第三天，吃吃喝喝，终于可以歇歇！<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/038994baf4109f85f1da2c3edb2c24f91095b18fb35669bf16337825613cd1fd/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46736e335a633276364c544a35716b6e4b6263774d364468564a5f342e6a706567"><img src="https://camo.githubusercontent.com/038994baf4109f85f1da2c3edb2c24f91095b18fb35669bf16337825613cd1fd/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46736e335a633276364c544a35716b6e4b6263774d364468564a5f342e6a706567" alt="0f97b4e7203804e514f7d112225e587.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Fsn3Zc2v6LTJ5qknKbcwM6DhVJ_4.jpeg" style="max-width: 100%;"></a> <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/7d0e266ab68f48bd03f55783fad9bfde003dab845cb45c480283c69283816ccf/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466e57794968717a52716c56504c72514835695555684c71785332562e6a706567"><img src="https://camo.githubusercontent.com/7d0e266ab68f48bd03f55783fad9bfde003dab845cb45c480283c69283816ccf/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466e57794968717a52716c56504c72514835695555684c71785332562e6a706567" alt="efaa0bdb9278004378998c852eae7f0.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FnWyIhqzRqlVPLrQH5iUUhLqxS2V.jpeg" style="max-width: 100%;"></a><br>\n第四天，带着一堆孩子浩浩荡荡出来高州县城逛了一天。又折回到现住的家休息了半天（相比老家的闷热，还是这里干净舒服）。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/44aa9c8e5edb17b1594a8af35dcf8bdc1abd449492785b56f98b378118d479b0/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4670556b474963716d6c676d773167796a4365486c5a476a5f3734792e6a706567"><img src="https://camo.githubusercontent.com/44aa9c8e5edb17b1594a8af35dcf8bdc1abd449492785b56f98b378118d479b0/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4670556b474963716d6c676d773167796a4365486c5a476a5f3734792e6a706567" alt="9ae0f51d40605ef0350fa5f1fa18e15.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FpUkGIcqmlgmw1gyjCeHlZGj_74y.jpeg" style="max-width: 100%;"></a> <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/9886477f4e7a651b653273ca726398f72dff4ddf5fa8fd7d19b399244cbf0e34/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4674466f545f6d6c5336634b6e6956666453414c7a62737856662d432e6a706567"><img src="https://camo.githubusercontent.com/9886477f4e7a651b653273ca726398f72dff4ddf5fa8fd7d19b399244cbf0e34/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4674466f545f6d6c5336634b6e6956666453414c7a62737856662d432e6a706567" alt="465f58f85811452af118257f2ddd0cc.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FtFoT_mlS6cKniVfdSALzbsxVf-C.jpeg" style="max-width: 100%;"></a><br>\n第五天，出发上来广州。同车是一个空军维修员的退伍老兵，一路听他讲了很多部队的事情，很是开眼界。</p>\n<p dir="auto">中秋前的这趟回家，算是极其疲惫的一次。不管怎么说，在家乡看到一些人，经历了一些事。相比城市的喧嚣，农村小县城的安静温馨很能勾起我们一些久远的往事，想起十几年前在一中读书的点滴，想起自己许久未曾回去过的老家，想起自己这些年来的经历，时光飞逝年轻不在，不免心生感叹！</p>\n<p dir="auto">值得一提的是，在老家接到了过过的电话，说通过了语雀天使计划的复试，后续会有专属礼物和官方认证聘书。除此以外，又收到了 CNGB 寄给我猛犸象信息（这里真心要感谢我曾经的同事小游姐给我送的这个这么有意义的礼物） ，心里很是高兴。</p>\n<p dir="auto">语雀作为我记录和沉淀生活使用最多的平台，走到今天，我接受了它，它也认可了我，通过语雀天使计划的复试是这个独特中秋佳节的最大惊喜。</p>\n<p dir="auto">我在 CNGB 从实习到工作呆了 4 年多，认识了一批非常可爱的华大人，度过了一段非常有意义和开心的时光，在这里祝福老东家的小伙伴们中秋节日快乐！</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.5-语雀'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '肘关节骨折', 'number': 145, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/145', 'createdAt': '2025-04-30T08:10:59Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T08:11:01Z', 'body': '小孩子玩蹦蹦床不小心把手摔伤了，X 光拍片后诊断为骨折，需要打石膏治疗处理，脑补一下已经远去的解剖学知识。\n\n<!-- more -->\n\n## 固定支架\n\n关于骨折后的保守治疗是打石膏还是使用固定支架，可以参考这篇文章：\n\n[骨折后，保守治疗选择石膏固定，还是支具固定？](https://mp.weixin.qq.com/s?src=11&timestamp=1626836127&ver=3203&signature=5b*nem1TitY8KA1w6pJUR5TVVE7IjFVSP5mB7SOM2RGt8Tv0CgHeROa6IiHeV6bIuK7AdFYSl7WEc19XLArp0dPBhWEJBIWDz6VO4bQmAtGppxpClMFBVh-R3uG3OmOW&new=1)\n\n> **根据骨折的稳定程度决定，稳定性好的骨折，可以采取支具固定；需要手法复位后再固定的，或者容易发生移位的骨折，建议打石膏固定，但可以缩短石膏固定的时间。比如常规石膏固定一个半月，可以石膏固定 3 周后改成支具固定。**\n\n![image.png](https://shub.weiyan.tech/yuque/elog-notebook-img/FiensyyCY5JDCzGinx1RmUPgCblG.png)![image.png](https://shub.weiyan.tech/yuque/elog-notebook-img/FhfwByktPr8Pf084YmPglSO0e4D2.png)\n\n## 肘关节解剖图\n\n肘关节（elbow joint）是由肱骨下端与桡骨上端构成的复关节，包括三个关节：\n\n(1) 肱尺关节 （humeroulnar joint）：由肱骨滑车和尺骨滑车切迹构成。\n![image.png](https://shub.weiyan.tech/yuque/elog-notebook-img/FlUF-EqlwGmYtSDHydq_IlI4BbLm.png)\n\n(2) 肱桡关节（humeroradial joint）：由肱骨小头和桡骨关节凹构成。\n(3) 桡尺近侧关节（proximal radioulnar joint）：由桡骨环状关节面和尺骨桡切迹构成。\n![image.png](https://shub.weiyan.tech/yuque/elog-notebook-img/Fpfdat_I-Yyk4zmR27f_qiKLjg-w.png)\n\n上述 3 个关节包在一个关节囊内，肘关节囊前、后壁薄而松弛，两侧壁厚而紧张，并有韧带加强囊的后壁最薄弱，故常见桡、尺两骨向后脱位，移向肱骨的后上方。\n![image.png](https://shub.weiyan.tech/yuque/elog-notebook-img/Fr-fmJUm3BnNndwQi0OpxgMPyMwZ.png)\n\n## 人体全身骨骼挂图\n\n![高清人体全身骨骼挂图(双语).jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FjNy1VJvBVZJd3cqoFTRBRf7eCEF.jpeg)\n\n## 骨折的一些基础知识\n\n### 骨裂和骨折\n\n> 按程度不同，骨折可以分为不全骨折（断裂一部分，没全断）和完全骨折（全部断了）。完全骨折又分为无移位骨折和有移位骨折。**在很多人的认知中，不全骨折和无移位的完全骨折被归类为骨裂，但它们其实都是骨折**。\n\n> 骨裂往往由较小的暴力引起，没有明显移位，通常不需要手术治疗，只需要石膏、夹板、支具等外固定措施治疗就足够了。\n\n> 来源：郭树章，人卫健康《[骨折与骨裂有没有区别，骨裂是不是骨折？](https://mp.weixin.qq.com/s/Jgv1mBOY2p4q2LehbdJdag)》\n\n### 青枝骨折\n\n> 青枝骨折多见于儿童，“青枝”两个是借用来的，在植物的青嫩枝条中，常常会见到折而不断的情况。儿童的骨骼中含有较多的有机物，外面包裹的骨外膜由特别的厚，因此在力学上就具有很好的弹性和韧性，不容易折断，遭受暴力发生骨折就会出现与植物青枝一样折而不断的情况，骨科医生就把这种特殊的骨折称之为青枝骨折。\n\n> 由于青枝骨折时，骨骼虽“折”却仍然未“断”，因而一般都属于稳定骨折，通常是不需要手术治疗的。四肢骨的青枝骨折用石膏外固定治疗都有很好的效果。\n\n> 来源：百度健康医典，《[青枝骨折](https://www.baidu.com/bh/dict/ydxx_10940239469362560976?tab=%E6%A6%82%E8%BF%B0&title=%E9%9D%92%E6%9E%9D%E9%AA%A8%E6%8A%98&contentid=ydxx_10940239469362560976&query=%E9%9D%92%E6%9E%9D%E9%AA%A8%E6%8A%98&sf_ref=dict_home&from=dicta)》\n\n## 石膏后一些注意事项\n\n青枝骨折常常发生在儿童，主要就是由于骨折之后骨折没有出现完全的断裂，就像植物的青嫩条枝一样，常常出现折而不断的情况，对于这种骨折一般积极的进行保守治疗就会得到很好的缓解。\n\n需要积极的进行手法复位，然后进行石膏固定，一般固定的时间大约在 3-4 周。在进行石膏固定的时候，肢体要处于功能位。石膏固定之后要多注意休息 3-7 天，有利于骨折部位的固定和康复。\n\n### 注意观察血液循环\n\n因骨折或手术肢体肿胀，石膏弹性较差，肢体受到石膏压迫易出现循环障碍，所以石膏固定后患者及家属应严密观察石膏固定肢体末端(如手、足)的变化，**如果肢体末端出现皮肤苍白、青紫或皮肤温度降低，应该及时返院复诊。**\n\n- **抬高患肢可促进血液回流，有利于消肿和缓解疼痛。**适当地活动肢体末端，可以促进血液循环，缓解肿胀。同时，如果患肢出现**麻木、疼痛加重、感觉减退、脉搏减弱等现象**应及时复诊。\n\n- **石膏固定期间，尽量减少出汗，生活在干燥、凉爽的环境中。**石膏固定的肢体血液循环差，天气冷时要注意石膏固定部位保暖，以防冻伤**。**\n\n### 别沾水\n\n无论石膏支具是不是防水材料，都建议别沾水。因为，即便是防水的玻璃纤维材料，遇水多了也会可能影响其机械强度。更重要的是，水分一旦进入石膏和皮肤之间，就会引起各种不适，比如：瘙痒、有异味，而且很难再完全干燥。甚至还会出现：局部细菌感染、浸渍、溃疡、皮疹以及接触性皮炎等。\n\n### 石膏过松及时更换\n\n如出现石膏过松，应及时更换石膏。\n\n### 没有被固定的部位适度活动\n\n所有不能动的关节，医生已经使用石膏固定好了，你也动不了了。而那些可以活动的关节，骨科医生都会刻意的不固定，以方便患者活动。\n\n比如脚踝扭伤，石膏一般都不会固定脚趾头和膝关节，这样患者可以通过活动脚趾头和膝关节来促进血液循环，并预防僵硬。\n\n再比如，腕关节骨折，石膏一般不只固定手腕子，不会固定手指、胳膊肘和肩关节，这样就是为了让患者可以活动手指头、胳膊肘和肩关节。\n\n## 需要立即去医院的情况\n\n在医院用石膏、夹板、支具等固定后，一般医生会叮嘱一段时间后来复查，比如每周或每月。但是，如果出现以下 4 点，您可千万别等了，立即去医院吧：\n\n（1）严重的肿胀疼痛，或肿胀疼痛逐渐加重；\n（2）肢体远端（手指或足趾）无法活动，或者颜色、温度改变，比如变紫，发白，变冷等；\n（3）出现了石膏松动、过紧、裂开或折断，石膏被浸湿且无法使之干燥；\n（4）石膏下皮肤有溃疡或裂口。\n\n## 参考资料\n\n- 《[打完石膏回家，要特别注意这 4 个细节](https://mp.weixin.qq.com/s?src=11&timestamp=1626833733&ver=3203&signature=lw2bN5bePM1E8wH-3dd0svniMgEjoYPGtHWsbOzOY-rTYexXgyiTpQDtfg3sbRN21-TaSL47j2dcRVC7U8-dww-gom9ytf02M7mZex9ASaal-HOlciq3qLl2rvTAdh9r&new=1)》，玖玖骨科，微信公众号\n- 《[打了石膏想洗澡？如何保持石膏干燥](https://mp.weixin.qq.com/s?src=11&timestamp=1626834716&ver=3203&signature=ofejkSNPeSCf1Ai2jkJCf79eRcqzsMSdLDqODcWbdM**xNct*06b0UTWSYuZMgSs6voER8jVvcCOE5ZnRcJ7oJrZVdNuzfThGvfKchbNOBmoMEO05fV5fdFp0L27MT3-&new=1)》，骨科时间"，微信公众号\n- 《[骨折、骨裂傻傻分不清楚？一文教你区分！](https://mp.weixin.qq.com/s?src=11&timestamp=1626832526&ver=3203&signature=lw2bN5bePM1E8wH-3dd0svniMgEjoYPGtHWsbOzOY-rwz2SVMCzxuGlmI9SR4iAXUCajRR0DNVbQVSLbU5bsdpEzqAQask5oPeXYFSERyewYK*CHpmnEENjv*BJKHsWP&new=1)》，玖玖骨科，微信公众号\n- 郭树章，《[骨折与骨裂有没有区别，骨裂是不是骨折？](https://mp.weixin.qq.com/s/Jgv1mBOY2p4q2LehbdJdag)》，人卫健康，微信公众号\n- 《[青枝骨折](https://www.baidu.com/bh/dict/ydxx_10940239469362560976?tab=%E6%A6%82%E8%BF%B0&title=%E9%9D%92%E6%9E%9D%E9%AA%A8%E6%8A%98&contentid=ydxx_10940239469362560976&query=%E9%9D%92%E6%9E%9D%E9%AA%A8%E6%8A%98&sf_ref=dict_home&from=dicta)》，百度健康医典\n- 张昶，《[科普一下：骨折并不等于骨头断成两截！](https://mp.weixin.qq.com/s?src=11&timestamp=1626832526&ver=3203&signature=Md1Pd80D2PPkcrBDkvWOoLu3iPTeTDOSa-nXkhMLroNC62Nx29*XfohLlgXF2LNPkg6yKxV715STq1gaegEuHMJ5P4p1OLQ4TJ9mgQv6tgJcNgnhatuN8TEsSwGxhI8f&new=1)》，骨伤疼痛专家张昶博士，微信公众号\n- 《[儿童常见肘关节骨折](https://mp.weixin.qq.com/s?src=11&timestamp=1626830352&ver=3203&signature=lw2bN5bePM1E8wH-3dd0svniMgEjoYPGtHWsbOzOY-qoXjJXXBCuF1A93OP*rZvhpbkftwyoZKpj5Usq5eU*go0G1B49RxR3A3c7mmsdWeu-SJBZDBRANOsO-jPH0JkA&new=1)》，玖玖骨科，微信公众号\n- 《[手把手教你看儿童肘关节骨折](https://mp.weixin.qq.com/s?src=11&timestamp=1626830065&ver=3203&signature=7gxCbrFZayPSh*J9nuFw7bMd0Y8W9JiTSC2dOQC089HU55GdXYmVBMdjsTVCR0GLUMDfX9Q*Hp9gf3OlCQvah34EQzaUnlHpeJiUTVU2gnzLGLT*ZwBO8nUnP1jvR0Wo&new=1)》，医学影像服务中心，微信公众号', 'bodyText': '小孩子玩蹦蹦床不小心把手摔伤了，X 光拍片后诊断为骨折，需要打石膏治疗处理，脑补一下已经远去的解剖学知识。\n\n固定支架\n关于骨折后的保守治疗是打石膏还是使用固定支架，可以参考这篇文章：\n骨折后，保守治疗选择石膏固定，还是支具固定？\n\n根据骨折的稳定程度决定，稳定性好的骨折，可以采取支具固定；需要手法复位后再固定的，或者容易发生移位的骨折，建议打石膏固定，但可以缩短石膏固定的时间。比如常规石膏固定一个半月，可以石膏固定 3 周后改成支具固定。\n\n\n肘关节解剖图\n肘关节（elbow joint）是由肱骨下端与桡骨上端构成的复关节，包括三个关节：\n(1) 肱尺关节 （humeroulnar joint）：由肱骨滑车和尺骨滑车切迹构成。\n\n(2) 肱桡关节（humeroradial joint）：由肱骨小头和桡骨关节凹构成。\n(3) 桡尺近侧关节（proximal radioulnar joint）：由桡骨环状关节面和尺骨桡切迹构成。\n\n上述 3 个关节包在一个关节囊内，肘关节囊前、后壁薄而松弛，两侧壁厚而紧张，并有韧带加强囊的后壁最薄弱，故常见桡、尺两骨向后脱位，移向肱骨的后上方。\n\n人体全身骨骼挂图\n\n骨折的一些基础知识\n骨裂和骨折\n\n按程度不同，骨折可以分为不全骨折（断裂一部分，没全断）和完全骨折（全部断了）。完全骨折又分为无移位骨折和有移位骨折。在很多人的认知中，不全骨折和无移位的完全骨折被归类为骨裂，但它们其实都是骨折。\n\n\n骨裂往往由较小的暴力引起，没有明显移位，通常不需要手术治疗，只需要石膏、夹板、支具等外固定措施治疗就足够了。\n\n\n来源：郭树章，人卫健康《骨折与骨裂有没有区别，骨裂是不是骨折？》\n\n青枝骨折\n\n青枝骨折多见于儿童，“青枝”两个是借用来的，在植物的青嫩枝条中，常常会见到折而不断的情况。儿童的骨骼中含有较多的有机物，外面包裹的骨外膜由特别的厚，因此在力学上就具有很好的弹性和韧性，不容易折断，遭受暴力发生骨折就会出现与植物青枝一样折而不断的情况，骨科医生就把这种特殊的骨折称之为青枝骨折。\n\n\n由于青枝骨折时，骨骼虽“折”却仍然未“断”，因而一般都属于稳定骨折，通常是不需要手术治疗的。四肢骨的青枝骨折用石膏外固定治疗都有很好的效果。\n\n\n来源：百度健康医典，《青枝骨折》\n\n石膏后一些注意事项\n青枝骨折常常发生在儿童，主要就是由于骨折之后骨折没有出现完全的断裂，就像植物的青嫩条枝一样，常常出现折而不断的情况，对于这种骨折一般积极的进行保守治疗就会得到很好的缓解。\n需要积极的进行手法复位，然后进行石膏固定，一般固定的时间大约在 3-4 周。在进行石膏固定的时候，肢体要处于功能位。石膏固定之后要多注意休息 3-7 天，有利于骨折部位的固定和康复。\n注意观察血液循环\n因骨折或手术肢体肿胀，石膏弹性较差，肢体受到石膏压迫易出现循环障碍，所以石膏固定后患者及家属应严密观察石膏固定肢体末端(如手、足)的变化，如果肢体末端出现皮肤苍白、青紫或皮肤温度降低，应该及时返院复诊。\n\n\n抬高患肢可促进血液回流，有利于消肿和缓解疼痛。适当地活动肢体末端，可以促进血液循环，缓解肿胀。同时，如果患肢出现麻木、疼痛加重、感觉减退、脉搏减弱等现象应及时复诊。\n\n\n石膏固定期间，尽量减少出汗，生活在干燥、凉爽的环境中。石膏固定的肢体血液循环差，天气冷时要注意石膏固定部位保暖，以防冻伤。\n\n\n别沾水\n无论石膏支具是不是防水材料，都建议别沾水。因为，即便是防水的玻璃纤维材料，遇水多了也会可能影响其机械强度。更重要的是，水分一旦进入石膏和皮肤之间，就会引起各种不适，比如：瘙痒、有异味，而且很难再完全干燥。甚至还会出现：局部细菌感染、浸渍、溃疡、皮疹以及接触性皮炎等。\n石膏过松及时更换\n如出现石膏过松，应及时更换石膏。\n没有被固定的部位适度活动\n所有不能动的关节，医生已经使用石膏固定好了，你也动不了了。而那些可以活动的关节，骨科医生都会刻意的不固定，以方便患者活动。\n比如脚踝扭伤，石膏一般都不会固定脚趾头和膝关节，这样患者可以通过活动脚趾头和膝关节来促进血液循环，并预防僵硬。\n再比如，腕关节骨折，石膏一般不只固定手腕子，不会固定手指、胳膊肘和肩关节，这样就是为了让患者可以活动手指头、胳膊肘和肩关节。\n需要立即去医院的情况\n在医院用石膏、夹板、支具等固定后，一般医生会叮嘱一段时间后来复查，比如每周或每月。但是，如果出现以下 4 点，您可千万别等了，立即去医院吧：\n（1）严重的肿胀疼痛，或肿胀疼痛逐渐加重；\n（2）肢体远端（手指或足趾）无法活动，或者颜色、温度改变，比如变紫，发白，变冷等；\n（3）出现了石膏松动、过紧、裂开或折断，石膏被浸湿且无法使之干燥；\n（4）石膏下皮肤有溃疡或裂口。\n参考资料\n\n《打完石膏回家，要特别注意这 4 个细节》，玖玖骨科，微信公众号\n《打了石膏想洗澡？如何保持石膏干燥》，骨科时间"，微信公众号\n《骨折、骨裂傻傻分不清楚？一文教你区分！》，玖玖骨科，微信公众号\n郭树章，《骨折与骨裂有没有区别，骨裂是不是骨折？》，人卫健康，微信公众号\n《青枝骨折》，百度健康医典\n张昶，《科普一下：骨折并不等于骨头断成两截！》，骨伤疼痛专家张昶博士，微信公众号\n《儿童常见肘关节骨折》，玖玖骨科，微信公众号\n《手把手教你看儿童肘关节骨折》，医学影像服务中心，微信公众号', 'bodyHTML': '<p dir="auto">小孩子玩蹦蹦床不小心把手摔伤了，X 光拍片后诊断为骨折，需要打石膏治疗处理，脑补一下已经远去的解剖学知识。</p>\n\n<h2 dir="auto">固定支架</h2>\n<p dir="auto">关于骨折后的保守治疗是打石膏还是使用固定支架，可以参考这篇文章：</p>\n<p dir="auto"><a href="https://mp.weixin.qq.com/s?src=11&amp;timestamp=1626836127&amp;ver=3203&amp;signature=5b*nem1TitY8KA1w6pJUR5TVVE7IjFVSP5mB7SOM2RGt8Tv0CgHeROa6IiHeV6bIuK7AdFYSl7WEc19XLArp0dPBhWEJBIWDz6VO4bQmAtGppxpClMFBVh-R3uG3OmOW&amp;new=1" rel="nofollow">骨折后，保守治疗选择石膏固定，还是支具固定？</a></p>\n<blockquote>\n<p dir="auto"><strong>根据骨折的稳定程度决定，稳定性好的骨折，可以采取支具固定；需要手法复位后再固定的，或者容易发生移位的骨折，建议打石膏固定，但可以缩短石膏固定的时间。比如常规石膏固定一个半月，可以石膏固定 3 周后改成支具固定。</strong></p>\n</blockquote>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/a1de8c148d1121b04bd4174af77fdfc4c76894e0b6deb14aaba023799fefc4af/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4669656e7379794359354a44437a47696e7831526d55506743626c472e706e67"><img src="https://camo.githubusercontent.com/a1de8c148d1121b04bd4174af77fdfc4c76894e0b6deb14aaba023799fefc4af/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4669656e7379794359354a44437a47696e7831526d55506743626c472e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FiensyyCY5JDCzGinx1RmUPgCblG.png" style="max-width: 100%;"></a><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/c62fb36576df277166b7ab1cda83911b207e359eb9106b9903bc8be8ad8906e5/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4668667742796b745072385066303834596d50676c534f30653444322e706e67"><img src="https://camo.githubusercontent.com/c62fb36576df277166b7ab1cda83911b207e359eb9106b9903bc8be8ad8906e5/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4668667742796b745072385066303834596d50676c534f30653444322e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FhfwByktPr8Pf084YmPglSO0e4D2.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">肘关节解剖图</h2>\n<p dir="auto">肘关节（elbow joint）是由肱骨下端与桡骨上端构成的复关节，包括三个关节：</p>\n<p dir="auto">(1) 肱尺关节 （humeroulnar joint）：由肱骨滑车和尺骨滑车切迹构成。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/59b276814fa6575a0f6de8951cc9b69239c24baaf00b6878ec29e1aa7b73b442/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466c55462d45716c77476d59745344487964715f496c493442624c6d2e706e67"><img src="https://camo.githubusercontent.com/59b276814fa6575a0f6de8951cc9b69239c24baaf00b6878ec29e1aa7b73b442/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466c55462d45716c77476d59745344487964715f496c493442624c6d2e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FlUF-EqlwGmYtSDHydq_IlI4BbLm.png" style="max-width: 100%;"></a></p>\n<p dir="auto">(2) 肱桡关节（humeroradial joint）：由肱骨小头和桡骨关节凹构成。<br>\n(3) 桡尺近侧关节（proximal radioulnar joint）：由桡骨环状关节面和尺骨桡切迹构成。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/5f546797da407fa4c1f8a512450d9ad3faf6c74e31344fa78bf20ff3675d0767/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4670666461745f492d59796b347a6d523237665f71694b4c6a672d772e706e67"><img src="https://camo.githubusercontent.com/5f546797da407fa4c1f8a512450d9ad3faf6c74e31344fa78bf20ff3675d0767/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4670666461745f492d59796b347a6d523237665f71694b4c6a672d772e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Fpfdat_I-Yyk4zmR27f_qiKLjg-w.png" style="max-width: 100%;"></a></p>\n<p dir="auto">上述 3 个关节包在一个关节囊内，肘关节囊前、后壁薄而松弛，两侧壁厚而紧张，并有韧带加强囊的后壁最薄弱，故常见桡、尺两骨向后脱位，移向肱骨的后上方。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/88b9205a2d0ae03604d3c1e19eb8e834c079337a96b4b87e69af277adb46f44e/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46722d666d4a556d33426e4e6e64775169304f7078674d50794d775a2e706e67"><img src="https://camo.githubusercontent.com/88b9205a2d0ae03604d3c1e19eb8e834c079337a96b4b87e69af277adb46f44e/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46722d666d4a556d33426e4e6e64775169304f7078674d50794d775a2e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Fr-fmJUm3BnNndwQi0OpxgMPyMwZ.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">人体全身骨骼挂图</h2>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/0d06646dbe91b520d4e274d79fdf8e37bfcdb98724f8d74db57a827b00227308/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466a4e7931564a7642565a4a643363716f46545242526637654345462e6a706567"><img src="https://camo.githubusercontent.com/0d06646dbe91b520d4e274d79fdf8e37bfcdb98724f8d74db57a827b00227308/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466a4e7931564a7642565a4a643363716f46545242526637654345462e6a706567" alt="高清人体全身骨骼挂图(双语).jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FjNy1VJvBVZJd3cqoFTRBRf7eCEF.jpeg" style="max-width: 100%;"></a></p>\n<h2 dir="auto">骨折的一些基础知识</h2>\n<h3 dir="auto">骨裂和骨折</h3>\n<blockquote>\n<p dir="auto">按程度不同，骨折可以分为不全骨折（断裂一部分，没全断）和完全骨折（全部断了）。完全骨折又分为无移位骨折和有移位骨折。<strong>在很多人的认知中，不全骨折和无移位的完全骨折被归类为骨裂，但它们其实都是骨折</strong>。</p>\n</blockquote>\n<blockquote>\n<p dir="auto">骨裂往往由较小的暴力引起，没有明显移位，通常不需要手术治疗，只需要石膏、夹板、支具等外固定措施治疗就足够了。</p>\n</blockquote>\n<blockquote>\n<p dir="auto">来源：郭树章，人卫健康《<a href="https://mp.weixin.qq.com/s/Jgv1mBOY2p4q2LehbdJdag" rel="nofollow">骨折与骨裂有没有区别，骨裂是不是骨折？</a>》</p>\n</blockquote>\n<h3 dir="auto">青枝骨折</h3>\n<blockquote>\n<p dir="auto">青枝骨折多见于儿童，“青枝”两个是借用来的，在植物的青嫩枝条中，常常会见到折而不断的情况。儿童的骨骼中含有较多的有机物，外面包裹的骨外膜由特别的厚，因此在力学上就具有很好的弹性和韧性，不容易折断，遭受暴力发生骨折就会出现与植物青枝一样折而不断的情况，骨科医生就把这种特殊的骨折称之为青枝骨折。</p>\n</blockquote>\n<blockquote>\n<p dir="auto">由于青枝骨折时，骨骼虽“折”却仍然未“断”，因而一般都属于稳定骨折，通常是不需要手术治疗的。四肢骨的青枝骨折用石膏外固定治疗都有很好的效果。</p>\n</blockquote>\n<blockquote>\n<p dir="auto">来源：百度健康医典，《<a href="https://www.baidu.com/bh/dict/ydxx_10940239469362560976?tab=%E6%A6%82%E8%BF%B0&amp;title=%E9%9D%92%E6%9E%9D%E9%AA%A8%E6%8A%98&amp;contentid=ydxx_10940239469362560976&amp;query=%E9%9D%92%E6%9E%9D%E9%AA%A8%E6%8A%98&amp;sf_ref=dict_home&amp;from=dicta" rel="nofollow">青枝骨折</a>》</p>\n</blockquote>\n<h2 dir="auto">石膏后一些注意事项</h2>\n<p dir="auto">青枝骨折常常发生在儿童，主要就是由于骨折之后骨折没有出现完全的断裂，就像植物的青嫩条枝一样，常常出现折而不断的情况，对于这种骨折一般积极的进行保守治疗就会得到很好的缓解。</p>\n<p dir="auto">需要积极的进行手法复位，然后进行石膏固定，一般固定的时间大约在 3-4 周。在进行石膏固定的时候，肢体要处于功能位。石膏固定之后要多注意休息 3-7 天，有利于骨折部位的固定和康复。</p>\n<h3 dir="auto">注意观察血液循环</h3>\n<p dir="auto">因骨折或手术肢体肿胀，石膏弹性较差，肢体受到石膏压迫易出现循环障碍，所以石膏固定后患者及家属应严密观察石膏固定肢体末端(如手、足)的变化，<strong>如果肢体末端出现皮肤苍白、青紫或皮肤温度降低，应该及时返院复诊。</strong></p>\n<ul dir="auto">\n<li>\n<p dir="auto"><strong>抬高患肢可促进血液回流，有利于消肿和缓解疼痛。适当地活动肢体末端，可以促进血液循环，缓解肿胀。同时，如果患肢出现麻木、疼痛加重、感觉减退、脉搏减弱等现象</strong>应及时复诊。</p>\n</li>\n<li>\n<p dir="auto"><strong>石膏固定期间，尽量减少出汗，生活在干燥、凉爽的环境中。石膏固定的肢体血液循环差，天气冷时要注意石膏固定部位保暖，以防冻伤。</strong></p>\n</li>\n</ul>\n<h3 dir="auto">别沾水</h3>\n<p dir="auto">无论石膏支具是不是防水材料，都建议别沾水。因为，即便是防水的玻璃纤维材料，遇水多了也会可能影响其机械强度。更重要的是，水分一旦进入石膏和皮肤之间，就会引起各种不适，比如：瘙痒、有异味，而且很难再完全干燥。甚至还会出现：局部细菌感染、浸渍、溃疡、皮疹以及接触性皮炎等。</p>\n<h3 dir="auto">石膏过松及时更换</h3>\n<p dir="auto">如出现石膏过松，应及时更换石膏。</p>\n<h3 dir="auto">没有被固定的部位适度活动</h3>\n<p dir="auto">所有不能动的关节，医生已经使用石膏固定好了，你也动不了了。而那些可以活动的关节，骨科医生都会刻意的不固定，以方便患者活动。</p>\n<p dir="auto">比如脚踝扭伤，石膏一般都不会固定脚趾头和膝关节，这样患者可以通过活动脚趾头和膝关节来促进血液循环，并预防僵硬。</p>\n<p dir="auto">再比如，腕关节骨折，石膏一般不只固定手腕子，不会固定手指、胳膊肘和肩关节，这样就是为了让患者可以活动手指头、胳膊肘和肩关节。</p>\n<h2 dir="auto">需要立即去医院的情况</h2>\n<p dir="auto">在医院用石膏、夹板、支具等固定后，一般医生会叮嘱一段时间后来复查，比如每周或每月。但是，如果出现以下 4 点，您可千万别等了，立即去医院吧：</p>\n<p dir="auto">（1）严重的肿胀疼痛，或肿胀疼痛逐渐加重；<br>\n（2）肢体远端（手指或足趾）无法活动，或者颜色、温度改变，比如变紫，发白，变冷等；<br>\n（3）出现了石膏松动、过紧、裂开或折断，石膏被浸湿且无法使之干燥；<br>\n（4）石膏下皮肤有溃疡或裂口。</p>\n<h2 dir="auto">参考资料</h2>\n<ul dir="auto">\n<li>《<a href="https://mp.weixin.qq.com/s?src=11&amp;timestamp=1626833733&amp;ver=3203&amp;signature=lw2bN5bePM1E8wH-3dd0svniMgEjoYPGtHWsbOzOY-rTYexXgyiTpQDtfg3sbRN21-TaSL47j2dcRVC7U8-dww-gom9ytf02M7mZex9ASaal-HOlciq3qLl2rvTAdh9r&amp;new=1" rel="nofollow">打完石膏回家，要特别注意这 4 个细节</a>》，玖玖骨科，微信公众号</li>\n<li>《<a href="https://mp.weixin.qq.com/s?src=11&amp;timestamp=1626834716&amp;ver=3203&amp;signature=ofejkSNPeSCf1Ai2jkJCf79eRcqzsMSdLDqODcWbdM**xNct*06b0UTWSYuZMgSs6voER8jVvcCOE5ZnRcJ7oJrZVdNuzfThGvfKchbNOBmoMEO05fV5fdFp0L27MT3-&amp;new=1" rel="nofollow">打了石膏想洗澡？如何保持石膏干燥</a>》，骨科时间"，微信公众号</li>\n<li>《<a href="https://mp.weixin.qq.com/s?src=11&amp;timestamp=1626832526&amp;ver=3203&amp;signature=lw2bN5bePM1E8wH-3dd0svniMgEjoYPGtHWsbOzOY-rwz2SVMCzxuGlmI9SR4iAXUCajRR0DNVbQVSLbU5bsdpEzqAQask5oPeXYFSERyewYK*CHpmnEENjv*BJKHsWP&amp;new=1" rel="nofollow">骨折、骨裂傻傻分不清楚？一文教你区分！</a>》，玖玖骨科，微信公众号</li>\n<li>郭树章，《<a href="https://mp.weixin.qq.com/s/Jgv1mBOY2p4q2LehbdJdag" rel="nofollow">骨折与骨裂有没有区别，骨裂是不是骨折？</a>》，人卫健康，微信公众号</li>\n<li>《<a href="https://www.baidu.com/bh/dict/ydxx_10940239469362560976?tab=%E6%A6%82%E8%BF%B0&amp;title=%E9%9D%92%E6%9E%9D%E9%AA%A8%E6%8A%98&amp;contentid=ydxx_10940239469362560976&amp;query=%E9%9D%92%E6%9E%9D%E9%AA%A8%E6%8A%98&amp;sf_ref=dict_home&amp;from=dicta" rel="nofollow">青枝骨折</a>》，百度健康医典</li>\n<li>张昶，《<a href="https://mp.weixin.qq.com/s?src=11&amp;timestamp=1626832526&amp;ver=3203&amp;signature=Md1Pd80D2PPkcrBDkvWOoLu3iPTeTDOSa-nXkhMLroNC62Nx29*XfohLlgXF2LNPkg6yKxV715STq1gaegEuHMJ5P4p1OLQ4TJ9mgQv6tgJcNgnhatuN8TEsSwGxhI8f&amp;new=1" rel="nofollow">科普一下：骨折并不等于骨头断成两截！</a>》，骨伤疼痛专家张昶博士，微信公众号</li>\n<li>《<a href="https://mp.weixin.qq.com/s?src=11&amp;timestamp=1626830352&amp;ver=3203&amp;signature=lw2bN5bePM1E8wH-3dd0svniMgEjoYPGtHWsbOzOY-qoXjJXXBCuF1A93OP*rZvhpbkftwyoZKpj5Usq5eU*go0G1B49RxR3A3c7mmsdWeu-SJBZDBRANOsO-jPH0JkA&amp;new=1" rel="nofollow">儿童常见肘关节骨折</a>》，玖玖骨科，微信公众号</li>\n<li>《<a href="https://mp.weixin.qq.com/s?src=11&amp;timestamp=1626830065&amp;ver=3203&amp;signature=7gxCbrFZayPSh*J9nuFw7bMd0Y8W9JiTSC2dOQC089HU55GdXYmVBMdjsTVCR0GLUMDfX9Q*Hp9gf3OlCQvah34EQzaUnlHpeJiUTVU2gnzLGLT*ZwBO8nUnP1jvR0Wo&amp;new=1" rel="nofollow">手把手教你看儿童肘关节骨折</a>》，医学影像服务中心，微信公众号</li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.5-语雀'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '疫情下的广州', 'number': 144, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/144', 'createdAt': '2025-04-30T08:10:58Z', 'lastEditedAt': '2025-04-30T08:27:31Z', 'updatedAt': '2025-04-30T08:27:31Z', 'body': '2021 年，从 5 月 21 号以来，新冠疫情开始在广州出现反弹并引起了广泛的关注。——广州本次疫情肇始于 5 月 21 日，广州荔湾区陆续出现确诊病例和无症状感染者，成为此次疫情复发的核心区域。\r\n\r\n<!-- more -->\r\n\r\n![新冠防护](https://shub.weiyan.tech/yuque/elog-notebook-img/FgQa3Gs43JyUxwje5VTsiNY5IyXT.jpeg)\r\n\r\n由于一直工作生活在黄埔区，对荔湾区、南沙区的新冠疫情也没有太大的关注。在 6 月 7 日前，遛娃、打球、逛逛万达，还是一切照旧，只是自觉的把活动范围缩小到了所在的小区附近。\r\n\r\n到了 6 月 8 日，收到了[通知](http://wglj.gz.gov.cn/xxgk/gzdt/tzgsgg/content/post_7320215.html)，**要严格公共文化旅游场所疫情防控**，于是电影院、剧院、KTV、网吧都暂停了营业，各种吃饭的地方也开始**限制堂食服务**。    \r\n![广州市文化广电旅游局关于进一步加强文化广电旅游业疫情防控工作的通知.png](https://shub.weiyan.tech/yuque/elog-notebook-img/Fnkgi5WbDiCC-q5TQMsmQC24rB_H.png)    \r\n\r\n最直观的影响是：\r\n\r\n- 去楼下的肯德基，不能堂食了！\r\n- 不可以去网吧玩自己最喜欢的游戏！\r\n- 很多地方撤销了餐椅座位，像楼下的喜洋洋、旁边的肯德基、麦当劳等等！\r\n- 孩子每天去的万达宝贝王、红孩子都暂停营业，现只能在家、楼下滑梯玩！\r\n\r\n关于核酸检测，2021 年 6 月 4 日小区开始了第一轮全员核酸检测，由于缺乏排队经验+刚好是周五，从下班回到家 18 点开始排队折腾到 20 点以后才把一家 4 口的核酸搞完！\r\n![49aee5f8a483015c75cebe440dd10b2.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/Fh0y1NZkTXHOXI1L4pBdk5fpBw57.jpeg)\r\n![405efbf96251389a76964630b216213.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/Fto1hbZsf_kPzPWNBMYl7W-67_I9.jpeg)\r\n相比个人的辛苦，真心要感谢无私奉献帮助我们的广大医务工作者和那些志愿者们！\r\n\r\n最后，想说一下的是端午节最后一天黄埔区联和社区临时通宵检测核酸！\r\n\r\n事情缘由是小区附近的龙光峰景华庭、万科城科景路发现异常（具体什么情况众说纷纭，有人说是发现核酸阳性人员；有人说是密切接触者在其他区核酸检测阳性，出于安全考虑对原居住地封锁排查；......）。\r\n\r\n后来才知道真实情况，其实是这样的：[黄埔为何新增 2 个封闭重点场所？有病例发病前一周曾临时居住！联和街道管控区今开展第二轮核酸检测](https://mp.weixin.qq.com/s/7r6XQpCQqdXuZKwt9szxkA)。\r\n![image.png](https://shub.weiyan.tech/yuque/elog-notebook-img/FiX8O7C7HR6s88nCOnQvwpUYXHmw.png)\r\n![image.png](https://shub.weiyan.tech/yuque/elog-notebook-img/Fpwpkik6Ly5AauN9rmKLMlxg4_iE.png)\r\n这是距离新冠战场最近的一次核酸排查，由于最早就看到了信息，一早就去楼下的核酸检测点排队去了。\r\n\r\n本来通知的是 19 点开始，不知道什么原因一直等到差不多 19:40 左右才开始，而且这次的检测也由原来的 10 人一组调整为 5 人一组，所幸的是相比前两次，这一次临检增加了多个核酸的检测点，效率提升了很多！\r\n[![image.png](https://shub.weiyan.tech/yuque/elog-notebook-img/FkCySO1eJfP32jctok_nl5xLc4ve.png)](https://mp.weixin.qq.com/s/y4xx_aVk_7sz2hBWW_HIZw)\r\n关于广州的疫情反弹：\r\n\r\n- 广东是疫情期间入境人数最多的省份，而境外输入是疫情传播的一个主要环境，恰恰很多境外游客的第一落地点广州，广东扛住了这大多数的风险。\r\n\r\n- 广东疫情无症状感染者多，这些人往往不知道自己感染了病毒，但却有同样的传播能力，还有部分新增感染者曾隐瞒行程也让筛查难度加大，给疫情增添了难度。但是广东的防控一直做的很好，并且没有更进一步扩大传播范围。\r\n\r\n- 专家研判分析认为，随着行之有效的聚集性疫情处置措施落实到位，本次广州疫情呈现阳性感染者逐渐减少的走势，疫情防控形势已经趋于缓和，在向着非常积极的方向发展，疫情处于可控状态，但不排除还会有散在病例发生的可能。\r\n\r\n广东的防控一直做的很好，并且没有更进一步扩大传播范围。专家认为，广东疫情用不了多长时间，就会得到一个很好的控制。建议大家非必要不离穗，暂不外出旅游，减少疫情传播的风险，共同努力争取疫情早日结束。\r\n\r\n感谢广大医务工作者和志愿者们，疫情期间不乱跑，减少出行，一起加油，一起努力！\r\n![image.png](https://shub.weiyan.tech/yuque/elog-notebook-img/FgXYFUyv07iayiY2sO2BWkWmVLgt.png)', 'bodyText': '2021 年，从 5 月 21 号以来，新冠疫情开始在广州出现反弹并引起了广泛的关注。——广州本次疫情肇始于 5 月 21 日，广州荔湾区陆续出现确诊病例和无症状感染者，成为此次疫情复发的核心区域。\n\n\n由于一直工作生活在黄埔区，对荔湾区、南沙区的新冠疫情也没有太大的关注。在 6 月 7 日前，遛娃、打球、逛逛万达，还是一切照旧，只是自觉的把活动范围缩小到了所在的小区附近。\n到了 6 月 8 日，收到了通知，要严格公共文化旅游场所疫情防控，于是电影院、剧院、KTV、网吧都暂停了营业，各种吃饭的地方也开始限制堂食服务。\n\n最直观的影响是：\n\n去楼下的肯德基，不能堂食了！\n不可以去网吧玩自己最喜欢的游戏！\n很多地方撤销了餐椅座位，像楼下的喜洋洋、旁边的肯德基、麦当劳等等！\n孩子每天去的万达宝贝王、红孩子都暂停营业，现只能在家、楼下滑梯玩！\n\n关于核酸检测，2021 年 6 月 4 日小区开始了第一轮全员核酸检测，由于缺乏排队经验+刚好是周五，从下班回到家 18 点开始排队折腾到 20 点以后才把一家 4 口的核酸搞完！\n\n\n相比个人的辛苦，真心要感谢无私奉献帮助我们的广大医务工作者和那些志愿者们！\n最后，想说一下的是端午节最后一天黄埔区联和社区临时通宵检测核酸！\n事情缘由是小区附近的龙光峰景华庭、万科城科景路发现异常（具体什么情况众说纷纭，有人说是发现核酸阳性人员；有人说是密切接触者在其他区核酸检测阳性，出于安全考虑对原居住地封锁排查；......）。\n后来才知道真实情况，其实是这样的：黄埔为何新增 2 个封闭重点场所？有病例发病前一周曾临时居住！联和街道管控区今开展第二轮核酸检测。\n\n\n这是距离新冠战场最近的一次核酸排查，由于最早就看到了信息，一早就去楼下的核酸检测点排队去了。\n本来通知的是 19 点开始，不知道什么原因一直等到差不多 19:40 左右才开始，而且这次的检测也由原来的 10 人一组调整为 5 人一组，所幸的是相比前两次，这一次临检增加了多个核酸的检测点，效率提升了很多！\n\n关于广州的疫情反弹：\n\n\n广东是疫情期间入境人数最多的省份，而境外输入是疫情传播的一个主要环境，恰恰很多境外游客的第一落地点广州，广东扛住了这大多数的风险。\n\n\n广东疫情无症状感染者多，这些人往往不知道自己感染了病毒，但却有同样的传播能力，还有部分新增感染者曾隐瞒行程也让筛查难度加大，给疫情增添了难度。但是广东的防控一直做的很好，并且没有更进一步扩大传播范围。\n\n\n专家研判分析认为，随着行之有效的聚集性疫情处置措施落实到位，本次广州疫情呈现阳性感染者逐渐减少的走势，疫情防控形势已经趋于缓和，在向着非常积极的方向发展，疫情处于可控状态，但不排除还会有散在病例发生的可能。\n\n\n广东的防控一直做的很好，并且没有更进一步扩大传播范围。专家认为，广东疫情用不了多长时间，就会得到一个很好的控制。建议大家非必要不离穗，暂不外出旅游，减少疫情传播的风险，共同努力争取疫情早日结束。\n感谢广大医务工作者和志愿者们，疫情期间不乱跑，减少出行，一起加油，一起努力！', 'bodyHTML': '<p dir="auto">2021 年，从 5 月 21 号以来，新冠疫情开始在广州出现反弹并引起了广泛的关注。——广州本次疫情肇始于 5 月 21 日，广州荔湾区陆续出现确诊病例和无症状感染者，成为此次疫情复发的核心区域。</p>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/22d3cd2fdbc7cbc8ce5ae133d2fb3627c2061a578555d966940d76834dad21f7/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4667516133477334334a795578776a6535565473694e5935497958542e6a706567"><img src="https://camo.githubusercontent.com/22d3cd2fdbc7cbc8ce5ae133d2fb3627c2061a578555d966940d76834dad21f7/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4667516133477334334a795578776a6535565473694e5935497958542e6a706567" alt="新冠防护" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FgQa3Gs43JyUxwje5VTsiNY5IyXT.jpeg" style="max-width: 100%;"></a></p>\n<p dir="auto">由于一直工作生活在黄埔区，对荔湾区、南沙区的新冠疫情也没有太大的关注。在 6 月 7 日前，遛娃、打球、逛逛万达，还是一切照旧，只是自觉的把活动范围缩小到了所在的小区附近。</p>\n<p dir="auto">到了 6 月 8 日，收到了<a href="http://wglj.gz.gov.cn/xxgk/gzdt/tzgsgg/content/post_7320215.html" rel="nofollow">通知</a>，<strong>要严格公共文化旅游场所疫情防控</strong>，于是电影院、剧院、KTV、网吧都暂停了营业，各种吃饭的地方也开始<strong>限制堂食服务</strong>。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/f7b711cb1dec0e4cae0e76a01cb962a7af688702277d3a2369bb4b506c2d5b93/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466e6b6769355762446943432d713554514d736d5143323472425f482e706e67"><img src="https://camo.githubusercontent.com/f7b711cb1dec0e4cae0e76a01cb962a7af688702277d3a2369bb4b506c2d5b93/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466e6b6769355762446943432d713554514d736d5143323472425f482e706e67" alt="广州市文化广电旅游局关于进一步加强文化广电旅游业疫情防控工作的通知.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Fnkgi5WbDiCC-q5TQMsmQC24rB_H.png" style="max-width: 100%;"></a></p>\n<p dir="auto">最直观的影响是：</p>\n<ul dir="auto">\n<li>去楼下的肯德基，不能堂食了！</li>\n<li>不可以去网吧玩自己最喜欢的游戏！</li>\n<li>很多地方撤销了餐椅座位，像楼下的喜洋洋、旁边的肯德基、麦当劳等等！</li>\n<li>孩子每天去的万达宝贝王、红孩子都暂停营业，现只能在家、楼下滑梯玩！</li>\n</ul>\n<p dir="auto">关于核酸检测，2021 年 6 月 4 日小区开始了第一轮全员核酸检测，由于缺乏排队经验+刚好是周五，从下班回到家 18 点开始排队折腾到 20 点以后才把一家 4 口的核酸搞完！<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/e85bdd8a1c63682ccc4386575e02ab1f29a44c2acfa6487ec585cf1c7c6830b9/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46683079314e5a6b5458484f5849314c347042646b356670427735372e6a706567"><img src="https://camo.githubusercontent.com/e85bdd8a1c63682ccc4386575e02ab1f29a44c2acfa6487ec585cf1c7c6830b9/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46683079314e5a6b5458484f5849314c347042646b356670427735372e6a706567" alt="49aee5f8a483015c75cebe440dd10b2.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Fh0y1NZkTXHOXI1L4pBdk5fpBw57.jpeg" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/f9e8d8889e0499502084b4ba3d63b58cb899f7c3e524f36f34a5bb409790ac5b/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46746f3168625a73665f6b507a50574e424d596c37572d36375f49392e6a706567"><img src="https://camo.githubusercontent.com/f9e8d8889e0499502084b4ba3d63b58cb899f7c3e524f36f34a5bb409790ac5b/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46746f3168625a73665f6b507a50574e424d596c37572d36375f49392e6a706567" alt="405efbf96251389a76964630b216213.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Fto1hbZsf_kPzPWNBMYl7W-67_I9.jpeg" style="max-width: 100%;"></a><br>\n相比个人的辛苦，真心要感谢无私奉献帮助我们的广大医务工作者和那些志愿者们！</p>\n<p dir="auto">最后，想说一下的是端午节最后一天黄埔区联和社区临时通宵检测核酸！</p>\n<p dir="auto">事情缘由是小区附近的龙光峰景华庭、万科城科景路发现异常（具体什么情况众说纷纭，有人说是发现核酸阳性人员；有人说是密切接触者在其他区核酸检测阳性，出于安全考虑对原居住地封锁排查；......）。</p>\n<p dir="auto">后来才知道真实情况，其实是这样的：<a href="https://mp.weixin.qq.com/s/7r6XQpCQqdXuZKwt9szxkA" rel="nofollow">黄埔为何新增 2 个封闭重点场所？有病例发病前一周曾临时居住！联和街道管控区今开展第二轮核酸检测</a>。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/3cf6884deda85627669207b88adb3a066c0aae5b7521f17304bf5e0bd01613d6/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466958384f3743374852367338386e434f6e51767770555958486d772e706e67"><img src="https://camo.githubusercontent.com/3cf6884deda85627669207b88adb3a066c0aae5b7521f17304bf5e0bd01613d6/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466958384f3743374852367338386e434f6e51767770555958486d772e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FiX8O7C7HR6s88nCOnQvwpUYXHmw.png" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/45fd5f51e42e36085b3080b985a055a606e504be91e06c04a73028d4ca4740ce/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f467077706b696b364c79354161754e39726d4b4c4d6c7867345f69452e706e67"><img src="https://camo.githubusercontent.com/45fd5f51e42e36085b3080b985a055a606e504be91e06c04a73028d4ca4740ce/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f467077706b696b364c79354161754e39726d4b4c4d6c7867345f69452e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Fpwpkik6Ly5AauN9rmKLMlxg4_iE.png" style="max-width: 100%;"></a><br>\n这是距离新冠战场最近的一次核酸排查，由于最早就看到了信息，一早就去楼下的核酸检测点排队去了。</p>\n<p dir="auto">本来通知的是 19 点开始，不知道什么原因一直等到差不多 19:40 左右才开始，而且这次的检测也由原来的 10 人一组调整为 5 人一组，所幸的是相比前两次，这一次临检增加了多个核酸的检测点，效率提升了很多！<br>\n<a href="https://mp.weixin.qq.com/s/y4xx_aVk_7sz2hBWW_HIZw" rel="nofollow"><img src="https://camo.githubusercontent.com/5b57d36bcd9aafc46daa0a395605d6dfd832e0591e7a77eae812f09a5297ae83/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466b4379534f31654a665033326a63746f6b5f6e6c35784c633476652e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FkCySO1eJfP32jctok_nl5xLc4ve.png" style="max-width: 100%;"></a><br>\n关于广州的疫情反弹：</p>\n<ul dir="auto">\n<li>\n<p dir="auto">广东是疫情期间入境人数最多的省份，而境外输入是疫情传播的一个主要环境，恰恰很多境外游客的第一落地点广州，广东扛住了这大多数的风险。</p>\n</li>\n<li>\n<p dir="auto">广东疫情无症状感染者多，这些人往往不知道自己感染了病毒，但却有同样的传播能力，还有部分新增感染者曾隐瞒行程也让筛查难度加大，给疫情增添了难度。但是广东的防控一直做的很好，并且没有更进一步扩大传播范围。</p>\n</li>\n<li>\n<p dir="auto">专家研判分析认为，随着行之有效的聚集性疫情处置措施落实到位，本次广州疫情呈现阳性感染者逐渐减少的走势，疫情防控形势已经趋于缓和，在向着非常积极的方向发展，疫情处于可控状态，但不排除还会有散在病例发生的可能。</p>\n</li>\n</ul>\n<p dir="auto">广东的防控一直做的很好，并且没有更进一步扩大传播范围。专家认为，广东疫情用不了多长时间，就会得到一个很好的控制。建议大家非必要不离穗，暂不外出旅游，减少疫情传播的风险，共同努力争取疫情早日结束。</p>\n<p dir="auto">感谢广大医务工作者和志愿者们，疫情期间不乱跑，减少出行，一起加油，一起努力！<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/d30d6d958cf9c9f665f0b1d782e0cb33d9938fde6105a9b11d8167d70d964c38/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46675859465579763037696179695932734f3242576b576d564c67742e706e67"><img src="https://camo.githubusercontent.com/d30d6d958cf9c9f665f0b1d782e0cb33d9938fde6105a9b11d8167d70d964c38/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46675859465579763037696179695932734f3242576b576d564c67742e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FgXYFUyv07iayiY2sO2BWkWmVLgt.png" style="max-width: 100%;"></a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.5-语雀'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '五一喜与乐', 'number': 143, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/143', 'createdAt': '2025-04-30T08:10:57Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T08:10:58Z', 'body': '从 2020 年初到 2021 年年初，将近整整一年，受疫情影响，大多数人基本都没怎么出行，好不容易等到了今年的五一黄金周，国内疫情好转，于是"报复性出游"出来了。\n\n<!-- more -->\n\n### 第一天，打球喝酒\n\n第一天，哪都没去。早上带着娃，把公交地铁超市都兜了一圈。\n![image.png](https://shub.weiyan.tech/yuque/elog-notebook-img/li3mhmoER9OMehBlU7rtc7YXnJyP.png)\n下午，羽毛球。完了，万达小聚，吃饭喝酒聊天，好久没喝的这么开心了 😆😍\n![image.png](https://shub.weiyan.tech/yuque/elog-notebook-img/lqeZE36cEUqOCKO3Ro_Q-GQFcEWY.png)\n\n### 第二天，万田生态公园\n\n增城的这个生态公园，面积是挺大的，人也不是很多，环境还算可以。不足的是树木有点小，可以乘凉的地方也少，太阳晒天气热的时候让人很抓狂，此外，**打车极其非常不方便！！！**\n\n地方还算可以，但如果搭上一个喜欢抬杠像麻雀一样吱吱不停的人，真心大煞风景！\n\n### 第三天，广医\n\n阴雨开始，一早陪老婆去广医五院开始 B 超+血检，从早上折腾到下午 2 点多，身心俱疲。整个五一假期最心塞的一天！！！\n\n### 第四天，爬山打球\n\n老婆一直叨念不休的火炉山之行终于成行。一路上吃吃玩玩走走停停，总算波澜不惊。天气阴晴，空气极好，路上人也不多。虽大多数时间抱着娃拾阶而上，体力相比上一次公司团建好上不少。\n![](https://shub.weiyan.tech/yuque/elog-notebook-img/lunXPcdsCJH67a2Z27N-LfDOab-s.jpeg)\n最后，虽然没吃上老婆最喜欢的羊排（一般秋冬季才有的吃），但烧鸡和开胃的酸萝卜也是蛮好吃的。\n\n傍晚，晚来风急，一场昏天黑地的暴雨差点把既定的羽毛球活动给泡汤掉！球馆 PK，2:1 赢下了一场挑战赛，让人倍感开心和振奋！\n\n### 第五天，充电休息\n\n最后一天，回归充电学习，明天又是新的一天！\n\n总的来说，今年的五一过的还算满意。五天的假期，时间说长不长说短不短，没有给高速公路添堵，没有挥霍浪费。难得的是，一家三口终于可以开开心心的出去走了几圈，老妈子也如愿以偿出去串了一下亲戚，波澜不惊，岁月安好。\n\n平淡，简单，最好！', 'bodyText': '从 2020 年初到 2021 年年初，将近整整一年，受疫情影响，大多数人基本都没怎么出行，好不容易等到了今年的五一黄金周，国内疫情好转，于是"报复性出游"出来了。\n\n第一天，打球喝酒\n第一天，哪都没去。早上带着娃，把公交地铁超市都兜了一圈。\n\n下午，羽毛球。完了，万达小聚，吃饭喝酒聊天，好久没喝的这么开心了 😆😍\n\n第二天，万田生态公园\n增城的这个生态公园，面积是挺大的，人也不是很多，环境还算可以。不足的是树木有点小，可以乘凉的地方也少，太阳晒天气热的时候让人很抓狂，此外，打车极其非常不方便！！！\n地方还算可以，但如果搭上一个喜欢抬杠像麻雀一样吱吱不停的人，真心大煞风景！\n第三天，广医\n阴雨开始，一早陪老婆去广医五院开始 B 超+血检，从早上折腾到下午 2 点多，身心俱疲。整个五一假期最心塞的一天！！！\n第四天，爬山打球\n老婆一直叨念不休的火炉山之行终于成行。一路上吃吃玩玩走走停停，总算波澜不惊。天气阴晴，空气极好，路上人也不多。虽大多数时间抱着娃拾阶而上，体力相比上一次公司团建好上不少。\n\n最后，虽然没吃上老婆最喜欢的羊排（一般秋冬季才有的吃），但烧鸡和开胃的酸萝卜也是蛮好吃的。\n傍晚，晚来风急，一场昏天黑地的暴雨差点把既定的羽毛球活动给泡汤掉！球馆 PK，2:1 赢下了一场挑战赛，让人倍感开心和振奋！\n第五天，充电休息\n最后一天，回归充电学习，明天又是新的一天！\n总的来说，今年的五一过的还算满意。五天的假期，时间说长不长说短不短，没有给高速公路添堵，没有挥霍浪费。难得的是，一家三口终于可以开开心心的出去走了几圈，老妈子也如愿以偿出去串了一下亲戚，波澜不惊，岁月安好。\n平淡，简单，最好！', 'bodyHTML': '<p dir="auto">从 2020 年初到 2021 年年初，将近整整一年，受疫情影响，大多数人基本都没怎么出行，好不容易等到了今年的五一黄金周，国内疫情好转，于是"报复性出游"出来了。</p>\n\n<h3 dir="auto">第一天，打球喝酒</h3>\n<p dir="auto">第一天，哪都没去。早上带着娃，把公交地铁超市都兜了一圈。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/14b02ead11aa6f816181d262c12ceefb565ac90b06ce1c429ee40e55291291e0/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f6c69336d686d6f4552394f4d6568426c55377274633759586e4a79502e706e67"><img src="https://camo.githubusercontent.com/14b02ead11aa6f816181d262c12ceefb565ac90b06ce1c429ee40e55291291e0/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f6c69336d686d6f4552394f4d6568426c55377274633759586e4a79502e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/li3mhmoER9OMehBlU7rtc7YXnJyP.png" style="max-width: 100%;"></a><br>\n下午，羽毛球。完了，万达小聚，吃饭喝酒聊天，好久没喝的这么开心了 😆😍<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/76bcb2f7525d97a3120091c73f3dd6aba21fc5e80b3b6137eeae258f7051ddf0/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f6c71655a453336634555714f434b4f33526f5f512d475146634557592e706e67"><img src="https://camo.githubusercontent.com/76bcb2f7525d97a3120091c73f3dd6aba21fc5e80b3b6137eeae258f7051ddf0/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f6c71655a453336634555714f434b4f33526f5f512d475146634557592e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/lqeZE36cEUqOCKO3Ro_Q-GQFcEWY.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">第二天，万田生态公园</h3>\n<p dir="auto">增城的这个生态公园，面积是挺大的，人也不是很多，环境还算可以。不足的是树木有点小，可以乘凉的地方也少，太阳晒天气热的时候让人很抓狂，此外，<strong>打车极其非常不方便！！！</strong></p>\n<p dir="auto">地方还算可以，但如果搭上一个喜欢抬杠像麻雀一样吱吱不停的人，真心大煞风景！</p>\n<h3 dir="auto">第三天，广医</h3>\n<p dir="auto">阴雨开始，一早陪老婆去广医五院开始 B 超+血检，从早上折腾到下午 2 点多，身心俱疲。整个五一假期最心塞的一天！！！</p>\n<h3 dir="auto">第四天，爬山打球</h3>\n<p dir="auto">老婆一直叨念不休的火炉山之行终于成行。一路上吃吃玩玩走走停停，总算波澜不惊。天气阴晴，空气极好，路上人也不多。虽大多数时间抱着娃拾阶而上，体力相比上一次公司团建好上不少。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/a339f6e36580d18411975fead7eff711ff31139045d23240e2bbd6e33577836b/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f6c756e5850636473434a48363761325a32374e2d4c66444f61622d732e6a706567"><img src="https://camo.githubusercontent.com/a339f6e36580d18411975fead7eff711ff31139045d23240e2bbd6e33577836b/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f6c756e5850636473434a48363761325a32374e2d4c66444f61622d732e6a706567" alt="" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/lunXPcdsCJH67a2Z27N-LfDOab-s.jpeg" style="max-width: 100%;"></a><br>\n最后，虽然没吃上老婆最喜欢的羊排（一般秋冬季才有的吃），但烧鸡和开胃的酸萝卜也是蛮好吃的。</p>\n<p dir="auto">傍晚，晚来风急，一场昏天黑地的暴雨差点把既定的羽毛球活动给泡汤掉！球馆 PK，2:1 赢下了一场挑战赛，让人倍感开心和振奋！</p>\n<h3 dir="auto">第五天，充电休息</h3>\n<p dir="auto">最后一天，回归充电学习，明天又是新的一天！</p>\n<p dir="auto">总的来说，今年的五一过的还算满意。五天的假期，时间说长不长说短不短，没有给高速公路添堵，没有挥霍浪费。难得的是，一家三口终于可以开开心心的出去走了几圈，老妈子也如愿以偿出去串了一下亲戚，波澜不惊，岁月安好。</p>\n<p dir="auto">平淡，简单，最好！</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.5-语雀'}, 'labels': {'nodes': [{'name': '语雀'}, {'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '电子产品魔怔', 'number': 142, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/142', 'createdAt': '2025-04-30T08:10:57Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T08:10:57Z', 'body': '最近一段时间，对手机、耳机、笔记本、键盘......又开始有点走火入魔的感觉，总想着去逛闲鱼，刷 V2EX 的交易频道。作为一个家庭奶爸，奈何囊肿羞涩，也只能是看看。\n\n发现几点有意思和诡异的事情。\n\n<!-- more -->\n\n1. 2020 年 6 月 23 日，在华为商场入手了一台荣耀 20 PRO（8+128）才 2089 大洋，现在在荣耀商城（2020 年 11 月中，荣耀从华为拆分出售）反而需要 2699，而且没货！难道是因为 6.18 促销？\n\n![image.png](https://shub.weiyan.tech/yuque/elog-notebook-img/FpzZbZZppRi0oju4m2EKoTIFv_vs.png)\n\n2. 受美国制裁，感觉华为很多手机都处于缺货状态，甚至拆分出来后的荣耀很多手机也缺货。\n\n3. 3 月中，给老婆入手了一台 Redmi Note 9（8+128），发现 MINUI 在流畅度上跟华为的 EMUI 的确有一定差距，6000 毫安的电池居然比上一部荣耀 Play3 4000 毫安续航更差。第一次入手小米，体验略差。\n\n4. Type-c 耳机有没有什么转接头可以插到 3.5mm 的手机耳机接口，发现目前貌似只有这一种的转接头，或者是 Type-c 转 USB 的！\n\n![](https://shub.weiyan.tech/yuque/elog-notebook-img/FiK7dE_WbvLv7MJjCRgSA5AA47_y.jpeg)\n\n5. 对于手机，自己更愿意接受 2000 以内的，最多不超过 3000。更关心拍照好和长续航的表现。\n\n6. 上一部 iPhone 6S 用到最后，续航和信号都大打折扣，苹果好用是好用，贵！\n\n7. 对于耳机，半入耳最舒服，更喜欢长续航的蓝牙耳机，要求不高，了解不多，持续关注一下。', 'bodyText': '最近一段时间，对手机、耳机、笔记本、键盘......又开始有点走火入魔的感觉，总想着去逛闲鱼，刷 V2EX 的交易频道。作为一个家庭奶爸，奈何囊肿羞涩，也只能是看看。\n发现几点有意思和诡异的事情。\n\n\n2020 年 6 月 23 日，在华为商场入手了一台荣耀 20 PRO（8+128）才 2089 大洋，现在在荣耀商城（2020 年 11 月中，荣耀从华为拆分出售）反而需要 2699，而且没货！难道是因为 6.18 促销？\n\n\n\n\n受美国制裁，感觉华为很多手机都处于缺货状态，甚至拆分出来后的荣耀很多手机也缺货。\n\n\n3 月中，给老婆入手了一台 Redmi Note 9（8+128），发现 MINUI 在流畅度上跟华为的 EMUI 的确有一定差距，6000 毫安的电池居然比上一部荣耀 Play3 4000 毫安续航更差。第一次入手小米，体验略差。\n\n\nType-c 耳机有没有什么转接头可以插到 3.5mm 的手机耳机接口，发现目前貌似只有这一种的转接头，或者是 Type-c 转 USB 的！\n\n\n\n\n\n对于手机，自己更愿意接受 2000 以内的，最多不超过 3000。更关心拍照好和长续航的表现。\n\n\n上一部 iPhone 6S 用到最后，续航和信号都大打折扣，苹果好用是好用，贵！\n\n\n对于耳机，半入耳最舒服，更喜欢长续航的蓝牙耳机，要求不高，了解不多，持续关注一下。', 'bodyHTML': '<p dir="auto">最近一段时间，对手机、耳机、笔记本、键盘......又开始有点走火入魔的感觉，总想着去逛闲鱼，刷 V2EX 的交易频道。作为一个家庭奶爸，奈何囊肿羞涩，也只能是看看。</p>\n<p dir="auto">发现几点有意思和诡异的事情。</p>\n\n<ol dir="auto">\n<li>2020 年 6 月 23 日，在华为商场入手了一台荣耀 20 PRO（8+128）才 2089 大洋，现在在荣耀商城（2020 年 11 月中，荣耀从华为拆分出售）反而需要 2699，而且没货！难道是因为 6.18 促销？</li>\n</ol>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/e89084ee5b841c67264b5b0a13a9d7531e81e1dbf21a8bec027d1c15d5553a0b/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46707a5a625a5a70705269306f6a75346d32454b6f544946765f76732e706e67"><img src="https://camo.githubusercontent.com/e89084ee5b841c67264b5b0a13a9d7531e81e1dbf21a8bec027d1c15d5553a0b/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46707a5a625a5a70705269306f6a75346d32454b6f544946765f76732e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FpzZbZZppRi0oju4m2EKoTIFv_vs.png" style="max-width: 100%;"></a></p>\n<ol start="2" dir="auto">\n<li>\n<p dir="auto">受美国制裁，感觉华为很多手机都处于缺货状态，甚至拆分出来后的荣耀很多手机也缺货。</p>\n</li>\n<li>\n<p dir="auto">3 月中，给老婆入手了一台 Redmi Note 9（8+128），发现 MINUI 在流畅度上跟华为的 EMUI 的确有一定差距，6000 毫安的电池居然比上一部荣耀 Play3 4000 毫安续航更差。第一次入手小米，体验略差。</p>\n</li>\n<li>\n<p dir="auto">Type-c 耳机有没有什么转接头可以插到 3.5mm 的手机耳机接口，发现目前貌似只有这一种的转接头，或者是 Type-c 转 USB 的！</p>\n</li>\n</ol>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/2b6d315eae7d8b6c0ac2ce485584ded24b50f1ad2d4e9ca18a52452d7450b46a/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46694b3764455f5762764c76374d4a6a435267534135414134375f792e6a706567"><img src="https://camo.githubusercontent.com/2b6d315eae7d8b6c0ac2ce485584ded24b50f1ad2d4e9ca18a52452d7450b46a/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46694b3764455f5762764c76374d4a6a435267534135414134375f792e6a706567" alt="" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FiK7dE_WbvLv7MJjCRgSA5AA47_y.jpeg" style="max-width: 100%;"></a></p>\n<ol start="5" dir="auto">\n<li>\n<p dir="auto">对于手机，自己更愿意接受 2000 以内的，最多不超过 3000。更关心拍照好和长续航的表现。</p>\n</li>\n<li>\n<p dir="auto">上一部 iPhone 6S 用到最后，续航和信号都大打折扣，苹果好用是好用，贵！</p>\n</li>\n<li>\n<p dir="auto">对于耳机，半入耳最舒服，更喜欢长续航的蓝牙耳机，要求不高，了解不多，持续关注一下。</p>\n</li>\n</ol>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.5-语雀'}, 'labels': {'nodes': [{'name': '语雀'}, {'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '2020 年年终总结', 'number': 141, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/141', 'createdAt': '2025-04-30T08:10:56Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T08:10:56Z', 'body': '2020 年，是一个不平凡的一年，在这里一年里，我们经历了新冠，见证了嫦五，看到动荡和不安，有经济熔断，有球王陨落，名人远去，有感动有泪水，我们也有收获。\n\n<!-- more -->\n\n## ✍️ 工作\n\n作为一个科学民工，2020 年的工作重心依旧停留在 Bio 与 IT 交叉的那几块，集群、Galaxy、生信，闲暇之余记录一下工作生活中的点滴，有经验有吐槽，平淡而又繁杂。\n\n## 😂 生活\n\n这一年更多的精力放在了家庭，入户、社保、带娃，磕磕碰碰之中更加感受到琐事之于工作的一些无奈。但总相信，这个世界里美好总要多过阴暗，欢乐总要多过苦难，还有很多事，值得我们一如既往的相信。\n\n2020 年最值得自豪的是，还有一个自己喜欢而且能一直坚持下来的运动——羽毛球。在新的场馆认识了另外一拨有着同样兴趣的球友，这样已经很满足！\n![](https://shub.weiyan.tech/yuque/elog-notebook-img/FmnD0ZMG0bgeW5W0GC64NBkK3A_c.webp)\n\n## ✒️ 公众号\n\n分享是一种态度，2020 年，我们不离不弃，在 **“BioIT 爱好者” **公众号一共推出 **39** 篇原创文章。\n\n这些文章，有生信的学习笔记，有集群服务器的运维经历，也有编程与可视化的一部分记录，甚至还有一部分热点与趣闻相关的科普。\n\n这一年，公众号综合了语雀、博客、简书、CSDN 推送了不少其他作者贡献的优秀文字，源于热爱，源于分享，特别感谢给我们公众号贡献了这些优秀原创文章的可爱作者们：**南希修炼中**，**小潤澤**，**biobin**，**佳名**，......，同样也要感谢一路支持我们公众号可爱读者们，正是因为你们，我们更有动力。\n\n## ▌2020\xa0 原创文章\n\n- [使用 coding.net 发布你的个人博客](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247490492&idx=1&sn=e55930b64a89f0c1c5e25b4482d7e0ca&chksm=fba078ecccd7f1fa9e58713becaef4374f08c68c79b8c92e55bf1a7b62afb128cac878c92f72&scene=21#wechat_redirect)\n- [测序数据学习笔记：bcl2fastq 安装](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247490302&idx=1&sn=56e5adc3d71ec248d8004b9d8a8bfd3e&chksm=fba079aeccd7f0b8294dd5930b09591196a6f7769c6b12042cb3af34841b5ba24978f9f8b052&scene=21#wechat_redirect)\n- [Galaxy Release_20.09 发布，新增多个数据上传组件](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247489077&idx=1&sn=a7b5c17cb160936a91ef3091c7f2ae78&chksm=fba07565ccd7fc733006dc8d2a45d0563225c4eecd1b2de785d2c0a8c5c72f94432a81af2eb0&scene=21#wechat_redirect)\n- [一次 HPC 病毒感染与解决经历](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247488605&idx=1&sn=94afff662d98c7dd7669b70343e5d1c4&chksm=fba0770dccd7fe1b6573f3569b424eb8469fceb1ef9021006e4ce8a1121f3f0cbd2ce80f4515&scene=21#wechat_redirect)\n- [腾讯云 cloudbase 云开发使用笔记](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247488558&idx=1&sn=c9641424f2239ebd9b39bb076a3cd51c&chksm=fba0777eccd7fe6896fc4eceac70d0603a78abc9699c2a556425a22fc8e3522df3da5c727348&scene=21#wechat_redirect)\n- [JupyterLab Server 搭建与使用笔记](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247488460&idx=1&sn=ad230f0a2eeae7ee0429f033a936cf1e&chksm=fba0709cccd7f98a278ff5971dd19cea6131a97fccf05e9f45f322213cd2077da3fa5390c9cd&scene=21#wechat_redirect)\n- [R 语言中 X11 相关的一些问题](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247488233&idx=1&sn=a40f395860bede8dd8d23cca0cc32127&chksm=fba071b9ccd7f8af0519955aa0ec99ed729f6491478d6db6567c080ca6ec248167d250f46663&scene=21#wechat_redirect)\n- [Linux 中多终端同步 history 记录](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247488186&idx=1&sn=78a3e7ede7c288bd17216c7435e8a048&chksm=fba071eaccd7f8fc71527d90b3bc3bed9c11fcfa20681163d4d3020d4948a35a0e6c3a84826c&scene=21#wechat_redirect)\n- [一个小清新的知识管理和问题讨论平台](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247488136&idx=1&sn=bdf46a2bd8139cc0e3adb47d9391171b&chksm=fba071d8ccd7f8ce7f910ea131ee10c58f534320fed2638ed42eadc8e2bf42c15e9a9ce196dd&scene=21#wechat_redirect)\n- [在 RedHat 使用 gdc-client 下载 TCGA 数据](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247488125&idx=1&sn=f42316431342f9f4d9fc334f5c660c5c&chksm=fba0712dccd7f83b5eaa03ae44f1e757cb69af0287cefa9a02d7524decc147e0c40080523931&scene=21#wechat_redirect)\n- [一个小团队使用的知识管理方案与工具](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247488084&idx=1&sn=f29255cac3760e0a4404d77e4853d8e6&chksm=fba07104ccd7f8127291964b39160a3b9e23b1fc55c9094a63cfe3ec685adcb3ce50ae11786b&scene=21#wechat_redirect)\n- [推荐一部青春搞笑悬疑电竞网络剧](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247488075&idx=1&sn=2ad4698e58eb5bf54168300c7be605d5&chksm=fba0711bccd7f80dfb867909c997c4cbaa2a2de8a2c9c154d1ffcf975adf7503b778e7ae2789&scene=21#wechat_redirect)\n- [吐槽 | 聊一聊公众号的那些事](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247487249&idx=1&sn=6756ba0c88fc3661212e4dbaaa09a6b2&chksm=fba06c41ccd7e557a4d4825bf7dc6c2ad5e4b5583a2b8a316bc4247ca51f1de8f1c69561bbb4&scene=21#wechat_redirect)\n- [ImageMagick 图像处理学习笔记](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247487240&idx=1&sn=4a7253f0daee2973455538614d491a35&chksm=fba06c58ccd7e54e9214df65dcdc4c4d0c29d27605b0433991ea45692d9d055d8a05f520816b&scene=21#wechat_redirect)\n- [Galaxy Release 20.05 发布，新增多项可视化体验](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247486927&idx=1&sn=183e1f3973bc3872cf4da8e343c409da&chksm=fba06e9fccd7e789eaf94865f1dadfcaeef20f56ffee1514e765820acd7dc0071ef7f9012382&scene=21#wechat_redirect)\n- [一款强大而实用的图片去水印神器](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247485861&idx=1&sn=8ed6241c76299f59d42126cf5699f96e&chksm=fba06af5ccd7e3e304d7ee0713e8d068854cff8fa077ca46036e7a7a3efd89154e9dd304396b&scene=21#wechat_redirect)\n- [在 Linux 和 Windows 下源码安装 Perl](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247485842&idx=1&sn=842a25b308ea697c058b240470268ad1&chksm=fba06ac2ccd7e3d4806f52b9d914d064ff3af70ce852292aae8c93aff4603a3a3a622a0af198&scene=21#wechat_redirect)\n- [R 语言关于 SSL 证书异常处理笔记](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247485818&idx=1&sn=e2efffb5d3745def43847ffa57fdd99c&chksm=fba06a2accd7e33ce6149be9d20d51ebf2b2bcc5cef3bd8591b44ffabe6e24f2efa3979c2689&scene=21#wechat_redirect)\n- [生信服务器入门级基本设置](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247485564&idx=1&sn=38b4e3598a79b03c5f684f6612a18200&chksm=fba06b2cccd7e23a49cde605dc7971436ae437a3779634c53a0dafdb57127c16d59f649c6218&scene=21#wechat_redirect)\n- [如何在 5 分钟内建立一个数据驱动的新型冠状病毒肺炎应用程序](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247485442&idx=1&sn=93a19d57b7d6e571fe5353e7613caadc&chksm=fba06b52ccd7e244053576516e64235090a8c3ea556c4b76fa876a3b334d3d077466533cb628&scene=21#wechat_redirect)\n- [顶级生物信息学 RSS 订阅源](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247485426&idx=1&sn=4a73eea4b3545f31305c95bd4491af12&chksm=fba064a2ccd7edb4d63adc1aefe82d62365a3b132de865ade9e30739076b33544d2a96da84b5&scene=21#wechat_redirect)\n- [使用镜像加速 Rtools 下载与安装](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247485163&idx=1&sn=47fa496e9006bc7bef2cb631392eedee&chksm=fba065bbccd7ecadb587a04d8234298ac1bbc14a22a65ccf6e6ebfce4da08c91c888199d91c8&scene=21#wechat_redirect)\n- [ggplot2 调整绘图区域大小](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247485120&idx=1&sn=fd89b8e93da6f0f37a4a6bd8aafb7c57&chksm=fba06590ccd7ec86c07582be02d0c3fc1ed0fa0415d69ae70fbb545881d109ea013e3c2085a2&scene=21#wechat_redirect)\n- [远程挂载 NFS 共享目录引发死机问题](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247485097&idx=1&sn=c393c45211ad691721f4a8946f30cee4&chksm=fba065f9ccd7ecefbfd3af178fa2a61f37e683989b6561bd6896a41f7722cbc3fc0ff1d06f38&scene=21#wechat_redirect)\n- [如何卸载 python setup.py install 安装的包？](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247485085&idx=1&sn=ea674d20ebd3a321f6a0d238f09bcd87&chksm=fba065cdccd7ecdbafae87ef5a9adf63344c3eee699a9d8c008083c19afc02ee70fc4fecb8c0&scene=21#wechat_redirect)\n- [小技巧 | 使用 mv 重命名文件无需两次键入文件名称](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247484830&idx=1&sn=c0ae8fb0543428766c8dc6a0f0a69fb8&chksm=fba066ceccd7efd8652730be5b3ae6bc22134c485d80337c0ea1ed16d7620b9d8192bda5fc14&scene=21#wechat_redirect)\n- [clusterProfiler 的 GO/KEGG 富集分析用法小结](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247484815&idx=1&sn=be6e85f20d163a80a9f62b896b0d1afb&chksm=fba066dfccd7efc9294b0f754ff0cb74500bd4456e7e75c3ea8163e7aacb6428356691297182&scene=21#wechat_redirect)\n- [R 语言绘制环状热图](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247484801&idx=1&sn=9798979c2c36f743aca214aa4a440bdd&chksm=fba066d1ccd7efc79d0087194e2633e65f4bab2a886c0d86db26c56337bb42dff06af8587936&scene=21#wechat_redirect)\n- [温故而知新，ggplot2 饼图的几点笔记](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247484795&idx=1&sn=d5f6de4a47e4a3bb593a8edcde395138&chksm=fba0662bccd7ef3d3347acd8a076e1716a6fb2c9347eea5819d8cedf240d787f4ebfcd936e2b&scene=21#wechat_redirect)\n- [预测 motif 的计算原理](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247484785&idx=1&sn=19f73fd6d772278ae3db90c600f32f81&chksm=fba06621ccd7ef37a07606ac05256327a2a9ee3648608bba69dff5448e6d54014e5926d5c9fe&scene=21#wechat_redirect)\n- [R 语言柱状图示例笔记](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247484759&idx=1&sn=c1f52a21a5e35f230cc5e91a7a3af6ee&chksm=fba06607ccd7ef111061e65718f3a2d5f52c5d77efdd3cd94fd81deab6d7e89a146869ee84df&scene=21#wechat_redirect)\n- [UpSetR 关联的 venneuler 包安装笔记](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247484755&idx=1&sn=8867c1439ab64bd3ef7dded256f042f0&chksm=fba06603ccd7ef1564d7ebe60b53d3b3f129194ff2d8353512ec6324bd330b74453d7b3f0c10&scene=21#wechat_redirect)\n- [R 语言画图中英文字体解决方案](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247484726&idx=1&sn=03c9c25b3e27bc9034d37c73cbb24f6c&chksm=fba06666ccd7ef70b743c1f9c89c1c4eee7b5c9cc2844892919c18ffb1043bf35db47748bf2b&scene=21#wechat_redirect)\n- [Galaxy 生信平台(四)：邮件与管理员配置](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247489358&idx=1&sn=7c22a5037028a0ca719b469671e33338&chksm=fba0741eccd7fd08e25edd0fea1aa45e1ca027b1b58f3df08c937c5df2d611f9f02c7e46ec63&scene=21#wechat_redirect)\n- [一款英文文章阅读翻译精品工具](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247484698&idx=1&sn=333b4b6ed240ff1a5807cf22c57403ce&chksm=fba0664accd7ef5c3e37025f98c84177c54c5ff17062f29cd80bdb083af214bda2e17acd1806&scene=21#wechat_redirect)\n- [QQ 邮箱设置自定义域名邮箱](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247484675&idx=1&sn=d61412eac916fcfd8a6fc1014d04225b&chksm=fba06653ccd7ef453a0501799139de1a2dfc774fe44f21e257ea70dec7fdeecb301f55790aa5&scene=21#wechat_redirect)\n- [吐槽一下微信公众号的赞赏号](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247484663&idx=1&sn=39d591ff27eddc19fed6f88d73072b87&chksm=fba067a7ccd7eeb197de199c2e2be1981a84184871fe0bc26dc7b4fb90a8cd3c60de2802c14e&scene=21#wechat_redirect)\n- [R EnhancedVolcano 绘制火山图](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247484644&idx=1&sn=357e7249e3360d5fccba268662686b2c&chksm=fba067b4ccd7eea27dbe1f446d914502d06d07471ca6eaa62aab03bdaa97ad9c27390a501873&scene=21#wechat_redirect)\n- [Galaxy 生信平台(三)：xlsx 上传与识别](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247484637&idx=1&sn=6621ed0c5c9d8f4b69d4231080f75d49&chksm=fba0678dccd7ee9b9fc9a904baddc09eae33e59e4423ad483cb11e3688d1322efdc0f4cd68f4&scene=21#wechat_redirect)\n\n## ▌2020\xa0 图文消息\n\n- [一个 \xa0coding.net 的 \xa0DevOps 全流程操作任务](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247489984&idx=1&sn=75ccf473af2248e533d560931b015fe9&chksm=fba07a90ccd7f386d2b929f09540154292a1ab49b428b721e94486a699d31616d841e43afae6&scene=21#wechat_redirect)\n- [安利一个 10 个月的语雀个人会员 VIP](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247489358&idx=1&sn=7c22a5037028a0ca719b469671e33338&chksm=fba0741eccd7fd08e25edd0fea1aa45e1ca027b1b58f3df08c937c5df2d611f9f02c7e46ec63&scene=21#wechat_redirect)\n- [发现了阿里云 OSS 对象存储的一个小 BUG](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247489354&idx=1&sn=94e248edb52d78829dcd5f084d9bdb3b&chksm=fba0741accd7fd0c28618a5254df2b4bc00f72644f3c44dbff95965e902b37d0fbd0737a703a&scene=21#wechat_redirect)\n- [感谢 preprocessCore 原作者的热心帮助](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247489081&idx=1&sn=ee1d602e5fd3d8c8349ddd9c165ed4b8&chksm=fba07569ccd7fc7fdfd35f8005504909758f3ed480c0cab200ba7c9d9b537223a1104443eef1&scene=21#wechat_redirect)\n- [云筏服务器 + Galaxy Project 的一些体验](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247488219&idx=1&sn=f9ac5f95747bd66f27ddfa8a2526d6b0&chksm=fba0718bccd7f89de6306984abc25ea07b4dca2b953e991245be4f1997ef4748c940c76670ce&scene=21#wechat_redirect)\n- [htop 和 bashtop 资源监视工具](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247488177&idx=1&sn=9644b7f3b4119932db23382c30023129&chksm=fba071e1ccd7f8f774fa31afa6c668009d7ed5a972a975ba90e3cb6a9a5b5891b5d9ce94df13&scene=21#wechat_redirect)\n- [Ensembl API 发现官网 MySQL server 异常](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247486934&idx=1&sn=10b6fd37b5b7ec2437410b02124ca68d&chksm=fba06e86ccd7e79090126a77a08d5924b46b641413614d48daa668adee702299aab808d3d081&scene=21#wechat_redirect)\n- [GitHub 经常看到 "WIP" 的分支是什么意思](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247485800&idx=1&sn=7d44b605586ff3a008a02831dbfdd0d5&chksm=fba06a38ccd7e32ead1f34d5cd4b1fa8c30df3ae3536585fb0705c104e537308699dfb5c52ce&scene=21#wechat_redirect)\n- [推特用户做了一个实验，特拉普发什么推特，他就发一样的内容](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247485796&idx=1&sn=83c1d3f2f299455c95dea3fbe101efe2&chksm=fba06a34ccd7e322deba4560aab4492e2b6deb015c8549d8a6f52c09e85f796cc8fd0b2a4f5c&scene=21#wechat_redirect)\n- [Galaxy Project 每个人都可以参与，并提交 PR](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247485702&idx=1&sn=51ca55510cb9fdaf0755b0ad4c726660&chksm=fba06a56ccd7e3409df83535d6c27c172b19bd471bf96396e2377e05386d83fa4ca7d4308055&scene=21#wechat_redirect)\n- [Galaxy Project 开启无需重启持续开发和运维设置](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247485480&idx=1&sn=b4a36078016c1c44006f9f4273291825&chksm=fba06b78ccd7e26e25abe221a2a1c865f4a9084b4ce8415d290ce20d5cf5178f3fc65d5f7673&scene=21#wechat_redirect)\n- [NAR\xa0 上关于 Galaxy 平台在几个独立面上的最新发展](http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&mid=2247484892&idx=1&sn=d21ca4504eb6a544de89c8328a8bf2c3&chksm=fba0668cccd7ef9a2e344128672d48b999ab6db69ffd7c8c6389d4141976a46d456f64683902&scene=21#wechat_redirect)\n\n公众号运营从来都不是一件容易的事情，尤其在追求流量的今天，更不用目前只有一个人在运营的公众号。2020 年，做了一些公众号推广，有人的地方就有江湖，在公众号这个江湖里，做了一些妥协，但不忘初心：\n\n- 商业化已经改变了写作的初衷。\n- 当写文章变成盈利的手段，那么，写出来的东西是没有灵魂的。\n\n人在看不见你更期望的路标时总是会变得消极。2021 年尚需更加努力，如果借用熊老师在 "素材学习分享周刊" 的三句话来总结一下今年，你的 2020 又是怎么样的呢？\n\n- **今年我最大的收获是/最开心的是？**\n- **今年我最遗憾的是？**\n- **此时的我想对一年前的自己说什么？**', 'bodyText': '2020 年，是一个不平凡的一年，在这里一年里，我们经历了新冠，见证了嫦五，看到动荡和不安，有经济熔断，有球王陨落，名人远去，有感动有泪水，我们也有收获。\n\n✍️ 工作\n作为一个科学民工，2020 年的工作重心依旧停留在 Bio 与 IT 交叉的那几块，集群、Galaxy、生信，闲暇之余记录一下工作生活中的点滴，有经验有吐槽，平淡而又繁杂。\n😂 生活\n这一年更多的精力放在了家庭，入户、社保、带娃，磕磕碰碰之中更加感受到琐事之于工作的一些无奈。但总相信，这个世界里美好总要多过阴暗，欢乐总要多过苦难，还有很多事，值得我们一如既往的相信。\n2020 年最值得自豪的是，还有一个自己喜欢而且能一直坚持下来的运动——羽毛球。在新的场馆认识了另外一拨有着同样兴趣的球友，这样已经很满足！\n\n✒️ 公众号\n分享是一种态度，2020 年，我们不离不弃，在 **“BioIT 爱好者” **公众号一共推出 39 篇原创文章。\n这些文章，有生信的学习笔记，有集群服务器的运维经历，也有编程与可视化的一部分记录，甚至还有一部分热点与趣闻相关的科普。\n这一年，公众号综合了语雀、博客、简书、CSDN 推送了不少其他作者贡献的优秀文字，源于热爱，源于分享，特别感谢给我们公众号贡献了这些优秀原创文章的可爱作者们：南希修炼中，小潤澤，biobin，佳名，......，同样也要感谢一路支持我们公众号可爱读者们，正是因为你们，我们更有动力。\n▌2020\xa0 原创文章\n\n使用 coding.net 发布你的个人博客\n测序数据学习笔记：bcl2fastq 安装\nGalaxy Release_20.09 发布，新增多个数据上传组件\n一次 HPC 病毒感染与解决经历\n腾讯云 cloudbase 云开发使用笔记\nJupyterLab Server 搭建与使用笔记\nR 语言中 X11 相关的一些问题\nLinux 中多终端同步 history 记录\n一个小清新的知识管理和问题讨论平台\n在 RedHat 使用 gdc-client 下载 TCGA 数据\n一个小团队使用的知识管理方案与工具\n推荐一部青春搞笑悬疑电竞网络剧\n吐槽 | 聊一聊公众号的那些事\nImageMagick 图像处理学习笔记\nGalaxy Release 20.05 发布，新增多项可视化体验\n一款强大而实用的图片去水印神器\n在 Linux 和 Windows 下源码安装 Perl\nR 语言关于 SSL 证书异常处理笔记\n生信服务器入门级基本设置\n如何在 5 分钟内建立一个数据驱动的新型冠状病毒肺炎应用程序\n顶级生物信息学 RSS 订阅源\n使用镜像加速 Rtools 下载与安装\nggplot2 调整绘图区域大小\n远程挂载 NFS 共享目录引发死机问题\n如何卸载 python setup.py install 安装的包？\n小技巧 | 使用 mv 重命名文件无需两次键入文件名称\nclusterProfiler 的 GO/KEGG 富集分析用法小结\nR 语言绘制环状热图\n温故而知新，ggplot2 饼图的几点笔记\n预测 motif 的计算原理\nR 语言柱状图示例笔记\nUpSetR 关联的 venneuler 包安装笔记\nR 语言画图中英文字体解决方案\nGalaxy 生信平台(四)：邮件与管理员配置\n一款英文文章阅读翻译精品工具\nQQ 邮箱设置自定义域名邮箱\n吐槽一下微信公众号的赞赏号\nR EnhancedVolcano 绘制火山图\nGalaxy 生信平台(三)：xlsx 上传与识别\n\n▌2020\xa0 图文消息\n\n一个 \xa0coding.net 的 \xa0DevOps 全流程操作任务\n安利一个 10 个月的语雀个人会员 VIP\n发现了阿里云 OSS 对象存储的一个小 BUG\n感谢 preprocessCore 原作者的热心帮助\n云筏服务器 + Galaxy Project 的一些体验\nhtop 和 bashtop 资源监视工具\nEnsembl API 发现官网 MySQL server 异常\nGitHub 经常看到 "WIP" 的分支是什么意思\n推特用户做了一个实验，特拉普发什么推特，他就发一样的内容\nGalaxy Project 每个人都可以参与，并提交 PR\nGalaxy Project 开启无需重启持续开发和运维设置\nNAR\xa0 上关于 Galaxy 平台在几个独立面上的最新发展\n\n公众号运营从来都不是一件容易的事情，尤其在追求流量的今天，更不用目前只有一个人在运营的公众号。2020 年，做了一些公众号推广，有人的地方就有江湖，在公众号这个江湖里，做了一些妥协，但不忘初心：\n\n商业化已经改变了写作的初衷。\n当写文章变成盈利的手段，那么，写出来的东西是没有灵魂的。\n\n人在看不见你更期望的路标时总是会变得消极。2021 年尚需更加努力，如果借用熊老师在 "素材学习分享周刊" 的三句话来总结一下今年，你的 2020 又是怎么样的呢？\n\n今年我最大的收获是/最开心的是？\n今年我最遗憾的是？\n此时的我想对一年前的自己说什么？', 'bodyHTML': '<p dir="auto">2020 年，是一个不平凡的一年，在这里一年里，我们经历了新冠，见证了嫦五，看到动荡和不安，有经济熔断，有球王陨落，名人远去，有感动有泪水，我们也有收获。</p>\n\n<h2 dir="auto">✍️ 工作</h2>\n<p dir="auto">作为一个科学民工，2020 年的工作重心依旧停留在 Bio 与 IT 交叉的那几块，集群、Galaxy、生信，闲暇之余记录一下工作生活中的点滴，有经验有吐槽，平淡而又繁杂。</p>\n<h2 dir="auto">😂 生活</h2>\n<p dir="auto">这一年更多的精力放在了家庭，入户、社保、带娃，磕磕碰碰之中更加感受到琐事之于工作的一些无奈。但总相信，这个世界里美好总要多过阴暗，欢乐总要多过苦难，还有很多事，值得我们一如既往的相信。</p>\n<p dir="auto">2020 年最值得自豪的是，还有一个自己喜欢而且能一直坚持下来的运动——羽毛球。在新的场馆认识了另外一拨有着同样兴趣的球友，这样已经很满足！<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/d7b81ba5228816f7f9914fc7af3ce2b77ee55df59e8bb321b990e7fb3e824c88/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466d6e44305a4d473062676557355730474336344e426b4b33415f632e77656270"><img src="https://camo.githubusercontent.com/d7b81ba5228816f7f9914fc7af3ce2b77ee55df59e8bb321b990e7fb3e824c88/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466d6e44305a4d473062676557355730474336344e426b4b33415f632e77656270" alt="" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FmnD0ZMG0bgeW5W0GC64NBkK3A_c.webp" style="max-width: 100%;"></a></p>\n<h2 dir="auto">✒️ 公众号</h2>\n<p dir="auto">分享是一种态度，2020 年，我们不离不弃，在 **“BioIT 爱好者” **公众号一共推出 <strong>39</strong> 篇原创文章。</p>\n<p dir="auto">这些文章，有生信的学习笔记，有集群服务器的运维经历，也有编程与可视化的一部分记录，甚至还有一部分热点与趣闻相关的科普。</p>\n<p dir="auto">这一年，公众号综合了语雀、博客、简书、CSDN 推送了不少其他作者贡献的优秀文字，源于热爱，源于分享，特别感谢给我们公众号贡献了这些优秀原创文章的可爱作者们：<strong>南希修炼中</strong>，<strong>小潤澤</strong>，<strong>biobin</strong>，<strong>佳名</strong>，......，同样也要感谢一路支持我们公众号可爱读者们，正是因为你们，我们更有动力。</p>\n<h2 dir="auto">▌2020\xa0 原创文章</h2>\n<ul dir="auto">\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247490492&amp;idx=1&amp;sn=e55930b64a89f0c1c5e25b4482d7e0ca&amp;chksm=fba078ecccd7f1fa9e58713becaef4374f08c68c79b8c92e55bf1a7b62afb128cac878c92f72&amp;scene=21#wechat_redirect" rel="nofollow">使用 coding.net 发布你的个人博客</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247490302&amp;idx=1&amp;sn=56e5adc3d71ec248d8004b9d8a8bfd3e&amp;chksm=fba079aeccd7f0b8294dd5930b09591196a6f7769c6b12042cb3af34841b5ba24978f9f8b052&amp;scene=21#wechat_redirect" rel="nofollow">测序数据学习笔记：bcl2fastq 安装</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247489077&amp;idx=1&amp;sn=a7b5c17cb160936a91ef3091c7f2ae78&amp;chksm=fba07565ccd7fc733006dc8d2a45d0563225c4eecd1b2de785d2c0a8c5c72f94432a81af2eb0&amp;scene=21#wechat_redirect" rel="nofollow">Galaxy Release_20.09 发布，新增多个数据上传组件</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247488605&amp;idx=1&amp;sn=94afff662d98c7dd7669b70343e5d1c4&amp;chksm=fba0770dccd7fe1b6573f3569b424eb8469fceb1ef9021006e4ce8a1121f3f0cbd2ce80f4515&amp;scene=21#wechat_redirect" rel="nofollow">一次 HPC 病毒感染与解决经历</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247488558&amp;idx=1&amp;sn=c9641424f2239ebd9b39bb076a3cd51c&amp;chksm=fba0777eccd7fe6896fc4eceac70d0603a78abc9699c2a556425a22fc8e3522df3da5c727348&amp;scene=21#wechat_redirect" rel="nofollow">腾讯云 cloudbase 云开发使用笔记</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247488460&amp;idx=1&amp;sn=ad230f0a2eeae7ee0429f033a936cf1e&amp;chksm=fba0709cccd7f98a278ff5971dd19cea6131a97fccf05e9f45f322213cd2077da3fa5390c9cd&amp;scene=21#wechat_redirect" rel="nofollow">JupyterLab Server 搭建与使用笔记</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247488233&amp;idx=1&amp;sn=a40f395860bede8dd8d23cca0cc32127&amp;chksm=fba071b9ccd7f8af0519955aa0ec99ed729f6491478d6db6567c080ca6ec248167d250f46663&amp;scene=21#wechat_redirect" rel="nofollow">R 语言中 X11 相关的一些问题</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247488186&amp;idx=1&amp;sn=78a3e7ede7c288bd17216c7435e8a048&amp;chksm=fba071eaccd7f8fc71527d90b3bc3bed9c11fcfa20681163d4d3020d4948a35a0e6c3a84826c&amp;scene=21#wechat_redirect" rel="nofollow">Linux 中多终端同步 history 记录</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247488136&amp;idx=1&amp;sn=bdf46a2bd8139cc0e3adb47d9391171b&amp;chksm=fba071d8ccd7f8ce7f910ea131ee10c58f534320fed2638ed42eadc8e2bf42c15e9a9ce196dd&amp;scene=21#wechat_redirect" rel="nofollow">一个小清新的知识管理和问题讨论平台</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247488125&amp;idx=1&amp;sn=f42316431342f9f4d9fc334f5c660c5c&amp;chksm=fba0712dccd7f83b5eaa03ae44f1e757cb69af0287cefa9a02d7524decc147e0c40080523931&amp;scene=21#wechat_redirect" rel="nofollow">在 RedHat 使用 gdc-client 下载 TCGA 数据</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247488084&amp;idx=1&amp;sn=f29255cac3760e0a4404d77e4853d8e6&amp;chksm=fba07104ccd7f8127291964b39160a3b9e23b1fc55c9094a63cfe3ec685adcb3ce50ae11786b&amp;scene=21#wechat_redirect" rel="nofollow">一个小团队使用的知识管理方案与工具</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247488075&amp;idx=1&amp;sn=2ad4698e58eb5bf54168300c7be605d5&amp;chksm=fba0711bccd7f80dfb867909c997c4cbaa2a2de8a2c9c154d1ffcf975adf7503b778e7ae2789&amp;scene=21#wechat_redirect" rel="nofollow">推荐一部青春搞笑悬疑电竞网络剧</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247487249&amp;idx=1&amp;sn=6756ba0c88fc3661212e4dbaaa09a6b2&amp;chksm=fba06c41ccd7e557a4d4825bf7dc6c2ad5e4b5583a2b8a316bc4247ca51f1de8f1c69561bbb4&amp;scene=21#wechat_redirect" rel="nofollow">吐槽 | 聊一聊公众号的那些事</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247487240&amp;idx=1&amp;sn=4a7253f0daee2973455538614d491a35&amp;chksm=fba06c58ccd7e54e9214df65dcdc4c4d0c29d27605b0433991ea45692d9d055d8a05f520816b&amp;scene=21#wechat_redirect" rel="nofollow">ImageMagick 图像处理学习笔记</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247486927&amp;idx=1&amp;sn=183e1f3973bc3872cf4da8e343c409da&amp;chksm=fba06e9fccd7e789eaf94865f1dadfcaeef20f56ffee1514e765820acd7dc0071ef7f9012382&amp;scene=21#wechat_redirect" rel="nofollow">Galaxy Release 20.05 发布，新增多项可视化体验</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247485861&amp;idx=1&amp;sn=8ed6241c76299f59d42126cf5699f96e&amp;chksm=fba06af5ccd7e3e304d7ee0713e8d068854cff8fa077ca46036e7a7a3efd89154e9dd304396b&amp;scene=21#wechat_redirect" rel="nofollow">一款强大而实用的图片去水印神器</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247485842&amp;idx=1&amp;sn=842a25b308ea697c058b240470268ad1&amp;chksm=fba06ac2ccd7e3d4806f52b9d914d064ff3af70ce852292aae8c93aff4603a3a3a622a0af198&amp;scene=21#wechat_redirect" rel="nofollow">在 Linux 和 Windows 下源码安装 Perl</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247485818&amp;idx=1&amp;sn=e2efffb5d3745def43847ffa57fdd99c&amp;chksm=fba06a2accd7e33ce6149be9d20d51ebf2b2bcc5cef3bd8591b44ffabe6e24f2efa3979c2689&amp;scene=21#wechat_redirect" rel="nofollow">R 语言关于 SSL 证书异常处理笔记</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247485564&amp;idx=1&amp;sn=38b4e3598a79b03c5f684f6612a18200&amp;chksm=fba06b2cccd7e23a49cde605dc7971436ae437a3779634c53a0dafdb57127c16d59f649c6218&amp;scene=21#wechat_redirect" rel="nofollow">生信服务器入门级基本设置</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247485442&amp;idx=1&amp;sn=93a19d57b7d6e571fe5353e7613caadc&amp;chksm=fba06b52ccd7e244053576516e64235090a8c3ea556c4b76fa876a3b334d3d077466533cb628&amp;scene=21#wechat_redirect" rel="nofollow">如何在 5 分钟内建立一个数据驱动的新型冠状病毒肺炎应用程序</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247485426&amp;idx=1&amp;sn=4a73eea4b3545f31305c95bd4491af12&amp;chksm=fba064a2ccd7edb4d63adc1aefe82d62365a3b132de865ade9e30739076b33544d2a96da84b5&amp;scene=21#wechat_redirect" rel="nofollow">顶级生物信息学 RSS 订阅源</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247485163&amp;idx=1&amp;sn=47fa496e9006bc7bef2cb631392eedee&amp;chksm=fba065bbccd7ecadb587a04d8234298ac1bbc14a22a65ccf6e6ebfce4da08c91c888199d91c8&amp;scene=21#wechat_redirect" rel="nofollow">使用镜像加速 Rtools 下载与安装</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247485120&amp;idx=1&amp;sn=fd89b8e93da6f0f37a4a6bd8aafb7c57&amp;chksm=fba06590ccd7ec86c07582be02d0c3fc1ed0fa0415d69ae70fbb545881d109ea013e3c2085a2&amp;scene=21#wechat_redirect" rel="nofollow">ggplot2 调整绘图区域大小</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247485097&amp;idx=1&amp;sn=c393c45211ad691721f4a8946f30cee4&amp;chksm=fba065f9ccd7ecefbfd3af178fa2a61f37e683989b6561bd6896a41f7722cbc3fc0ff1d06f38&amp;scene=21#wechat_redirect" rel="nofollow">远程挂载 NFS 共享目录引发死机问题</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247485085&amp;idx=1&amp;sn=ea674d20ebd3a321f6a0d238f09bcd87&amp;chksm=fba065cdccd7ecdbafae87ef5a9adf63344c3eee699a9d8c008083c19afc02ee70fc4fecb8c0&amp;scene=21#wechat_redirect" rel="nofollow">如何卸载 python setup.py install 安装的包？</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247484830&amp;idx=1&amp;sn=c0ae8fb0543428766c8dc6a0f0a69fb8&amp;chksm=fba066ceccd7efd8652730be5b3ae6bc22134c485d80337c0ea1ed16d7620b9d8192bda5fc14&amp;scene=21#wechat_redirect" rel="nofollow">小技巧 | 使用 mv 重命名文件无需两次键入文件名称</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247484815&amp;idx=1&amp;sn=be6e85f20d163a80a9f62b896b0d1afb&amp;chksm=fba066dfccd7efc9294b0f754ff0cb74500bd4456e7e75c3ea8163e7aacb6428356691297182&amp;scene=21#wechat_redirect" rel="nofollow">clusterProfiler 的 GO/KEGG 富集分析用法小结</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247484801&amp;idx=1&amp;sn=9798979c2c36f743aca214aa4a440bdd&amp;chksm=fba066d1ccd7efc79d0087194e2633e65f4bab2a886c0d86db26c56337bb42dff06af8587936&amp;scene=21#wechat_redirect" rel="nofollow">R 语言绘制环状热图</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247484795&amp;idx=1&amp;sn=d5f6de4a47e4a3bb593a8edcde395138&amp;chksm=fba0662bccd7ef3d3347acd8a076e1716a6fb2c9347eea5819d8cedf240d787f4ebfcd936e2b&amp;scene=21#wechat_redirect" rel="nofollow">温故而知新，ggplot2 饼图的几点笔记</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247484785&amp;idx=1&amp;sn=19f73fd6d772278ae3db90c600f32f81&amp;chksm=fba06621ccd7ef37a07606ac05256327a2a9ee3648608bba69dff5448e6d54014e5926d5c9fe&amp;scene=21#wechat_redirect" rel="nofollow">预测 motif 的计算原理</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247484759&amp;idx=1&amp;sn=c1f52a21a5e35f230cc5e91a7a3af6ee&amp;chksm=fba06607ccd7ef111061e65718f3a2d5f52c5d77efdd3cd94fd81deab6d7e89a146869ee84df&amp;scene=21#wechat_redirect" rel="nofollow">R 语言柱状图示例笔记</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247484755&amp;idx=1&amp;sn=8867c1439ab64bd3ef7dded256f042f0&amp;chksm=fba06603ccd7ef1564d7ebe60b53d3b3f129194ff2d8353512ec6324bd330b74453d7b3f0c10&amp;scene=21#wechat_redirect" rel="nofollow">UpSetR 关联的 venneuler 包安装笔记</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247484726&amp;idx=1&amp;sn=03c9c25b3e27bc9034d37c73cbb24f6c&amp;chksm=fba06666ccd7ef70b743c1f9c89c1c4eee7b5c9cc2844892919c18ffb1043bf35db47748bf2b&amp;scene=21#wechat_redirect" rel="nofollow">R 语言画图中英文字体解决方案</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247489358&amp;idx=1&amp;sn=7c22a5037028a0ca719b469671e33338&amp;chksm=fba0741eccd7fd08e25edd0fea1aa45e1ca027b1b58f3df08c937c5df2d611f9f02c7e46ec63&amp;scene=21#wechat_redirect" rel="nofollow">Galaxy 生信平台(四)：邮件与管理员配置</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247484698&amp;idx=1&amp;sn=333b4b6ed240ff1a5807cf22c57403ce&amp;chksm=fba0664accd7ef5c3e37025f98c84177c54c5ff17062f29cd80bdb083af214bda2e17acd1806&amp;scene=21#wechat_redirect" rel="nofollow">一款英文文章阅读翻译精品工具</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247484675&amp;idx=1&amp;sn=d61412eac916fcfd8a6fc1014d04225b&amp;chksm=fba06653ccd7ef453a0501799139de1a2dfc774fe44f21e257ea70dec7fdeecb301f55790aa5&amp;scene=21#wechat_redirect" rel="nofollow">QQ 邮箱设置自定义域名邮箱</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247484663&amp;idx=1&amp;sn=39d591ff27eddc19fed6f88d73072b87&amp;chksm=fba067a7ccd7eeb197de199c2e2be1981a84184871fe0bc26dc7b4fb90a8cd3c60de2802c14e&amp;scene=21#wechat_redirect" rel="nofollow">吐槽一下微信公众号的赞赏号</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247484644&amp;idx=1&amp;sn=357e7249e3360d5fccba268662686b2c&amp;chksm=fba067b4ccd7eea27dbe1f446d914502d06d07471ca6eaa62aab03bdaa97ad9c27390a501873&amp;scene=21#wechat_redirect" rel="nofollow">R EnhancedVolcano 绘制火山图</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247484637&amp;idx=1&amp;sn=6621ed0c5c9d8f4b69d4231080f75d49&amp;chksm=fba0678dccd7ee9b9fc9a904baddc09eae33e59e4423ad483cb11e3688d1322efdc0f4cd68f4&amp;scene=21#wechat_redirect" rel="nofollow">Galaxy 生信平台(三)：xlsx 上传与识别</a></li>\n</ul>\n<h2 dir="auto">▌2020\xa0 图文消息</h2>\n<ul dir="auto">\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247489984&amp;idx=1&amp;sn=75ccf473af2248e533d560931b015fe9&amp;chksm=fba07a90ccd7f386d2b929f09540154292a1ab49b428b721e94486a699d31616d841e43afae6&amp;scene=21#wechat_redirect" rel="nofollow">一个 \xa0coding.net 的 \xa0DevOps 全流程操作任务</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247489358&amp;idx=1&amp;sn=7c22a5037028a0ca719b469671e33338&amp;chksm=fba0741eccd7fd08e25edd0fea1aa45e1ca027b1b58f3df08c937c5df2d611f9f02c7e46ec63&amp;scene=21#wechat_redirect" rel="nofollow">安利一个 10 个月的语雀个人会员 VIP</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247489354&amp;idx=1&amp;sn=94e248edb52d78829dcd5f084d9bdb3b&amp;chksm=fba0741accd7fd0c28618a5254df2b4bc00f72644f3c44dbff95965e902b37d0fbd0737a703a&amp;scene=21#wechat_redirect" rel="nofollow">发现了阿里云 OSS 对象存储的一个小 BUG</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247489081&amp;idx=1&amp;sn=ee1d602e5fd3d8c8349ddd9c165ed4b8&amp;chksm=fba07569ccd7fc7fdfd35f8005504909758f3ed480c0cab200ba7c9d9b537223a1104443eef1&amp;scene=21#wechat_redirect" rel="nofollow">感谢 preprocessCore 原作者的热心帮助</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247488219&amp;idx=1&amp;sn=f9ac5f95747bd66f27ddfa8a2526d6b0&amp;chksm=fba0718bccd7f89de6306984abc25ea07b4dca2b953e991245be4f1997ef4748c940c76670ce&amp;scene=21#wechat_redirect" rel="nofollow">云筏服务器 + Galaxy Project 的一些体验</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247488177&amp;idx=1&amp;sn=9644b7f3b4119932db23382c30023129&amp;chksm=fba071e1ccd7f8f774fa31afa6c668009d7ed5a972a975ba90e3cb6a9a5b5891b5d9ce94df13&amp;scene=21#wechat_redirect" rel="nofollow">htop 和 bashtop 资源监视工具</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247486934&amp;idx=1&amp;sn=10b6fd37b5b7ec2437410b02124ca68d&amp;chksm=fba06e86ccd7e79090126a77a08d5924b46b641413614d48daa668adee702299aab808d3d081&amp;scene=21#wechat_redirect" rel="nofollow">Ensembl API 发现官网 MySQL server 异常</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247485800&amp;idx=1&amp;sn=7d44b605586ff3a008a02831dbfdd0d5&amp;chksm=fba06a38ccd7e32ead1f34d5cd4b1fa8c30df3ae3536585fb0705c104e537308699dfb5c52ce&amp;scene=21#wechat_redirect" rel="nofollow">GitHub 经常看到 "WIP" 的分支是什么意思</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247485796&amp;idx=1&amp;sn=83c1d3f2f299455c95dea3fbe101efe2&amp;chksm=fba06a34ccd7e322deba4560aab4492e2b6deb015c8549d8a6f52c09e85f796cc8fd0b2a4f5c&amp;scene=21#wechat_redirect" rel="nofollow">推特用户做了一个实验，特拉普发什么推特，他就发一样的内容</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247485702&amp;idx=1&amp;sn=51ca55510cb9fdaf0755b0ad4c726660&amp;chksm=fba06a56ccd7e3409df83535d6c27c172b19bd471bf96396e2377e05386d83fa4ca7d4308055&amp;scene=21#wechat_redirect" rel="nofollow">Galaxy Project 每个人都可以参与，并提交 PR</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247485480&amp;idx=1&amp;sn=b4a36078016c1c44006f9f4273291825&amp;chksm=fba06b78ccd7e26e25abe221a2a1c865f4a9084b4ce8415d290ce20d5cf5178f3fc65d5f7673&amp;scene=21#wechat_redirect" rel="nofollow">Galaxy Project 开启无需重启持续开发和运维设置</a></li>\n<li><a href="http://mp.weixin.qq.com/s?__biz=MzU1MDQwMTU5OQ==&amp;mid=2247484892&amp;idx=1&amp;sn=d21ca4504eb6a544de89c8328a8bf2c3&amp;chksm=fba0668cccd7ef9a2e344128672d48b999ab6db69ffd7c8c6389d4141976a46d456f64683902&amp;scene=21#wechat_redirect" rel="nofollow">NAR\xa0 上关于 Galaxy 平台在几个独立面上的最新发展</a></li>\n</ul>\n<p dir="auto">公众号运营从来都不是一件容易的事情，尤其在追求流量的今天，更不用目前只有一个人在运营的公众号。2020 年，做了一些公众号推广，有人的地方就有江湖，在公众号这个江湖里，做了一些妥协，但不忘初心：</p>\n<ul dir="auto">\n<li>商业化已经改变了写作的初衷。</li>\n<li>当写文章变成盈利的手段，那么，写出来的东西是没有灵魂的。</li>\n</ul>\n<p dir="auto">人在看不见你更期望的路标时总是会变得消极。2021 年尚需更加努力，如果借用熊老师在 "素材学习分享周刊" 的三句话来总结一下今年，你的 2020 又是怎么样的呢？</p>\n<ul dir="auto">\n<li><strong>今年我最大的收获是/最开心的是？</strong></li>\n<li><strong>今年我最遗憾的是？</strong></li>\n<li><strong>此时的我想对一年前的自己说什么？</strong></li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.5-语雀'}, 'labels': {'nodes': [{'name': '语雀'}, {'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '吐槽一下公众号的那些事', 'number': 140, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/140', 'createdAt': '2025-04-30T08:10:55Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T08:10:56Z', 'body': '微信公众号一直标榜 “再小的个体，也有自己的品牌”，这个也许是微信公众号上线的初衷。然而，有人的地方就有江湖，这个曾经看起来是个非常美好的事情，发展到现在，似乎也不见得那么十全十美。\n\n<!-- more -->\n\n![原作-抄袭-致敬区别.png](https://shub.weiyan.tech/yuque/elog-notebook-img/FhnSV5DLtc1qMO3I__R_wNZfzo5a.png)\n\n抛开一些大的槽点，今天要实锤几个公众号碰到的事情。\n\n1. 很多公众号为了阅读量，也有一些是出于专项问题处理，都创建了自己的讨论群，在讨论群明确规定不能发广告，可以理解；但是对转发其他公众号的非广告类文章却如临大敌，动不动踢人，自己却天天发本公众号的各种推文，着实有点小家子气！\n\n2. 对于一些从博客转载过来的文章，有一些公众号时不时玩小把戏，把转载声明藏到不起眼的文末；或者干脆迷迷糊糊的说什么文章来源于网络；甚至不做任何标注！如果文章的确是基于网络各种资料自己整理总结而来，还可以理解一下，如果的确有类似原文，却模糊化原创，这样的做法的确不可取。\n\n3. 最可恨的是，把一些未经原作者授权的文章标记为原创的侵权行为！前几天刚遇到类似的情况，本来已经跟原作者沟通过转载的事宜，却在转载那一刻发现被其他公众号把该文章标注为原创剽窃了过去，搞得所有想要转载该文章的人都要联系公众号开放白名单，真实可恨！欣慰的是，最后通过微信投诉成功，标记为原创的文章删稿。\n\n![原创.png](https://shub.weiyan.tech/yuque/elog-notebook-img/FqGqmAE7shH-b6kcONDAHCr0EY_t.png)\n\n4. 关于写文章挣钱，不多说，摘录几点酷壳网陈浩老师的原话！\n\n> 首先，如果你觉得在微信公众号上写技术文章是可以挣钱的，那么恐怕你搞错了，营销文是可以的，技术文章还是比较难的。\n>\n> 当然，你要挣点小钱是可以有的，但是，你需要写软文中植入广告，或是消费热点主题，比如前段时间的魏则西事件，有的公众号被打赏了一些钱。\n>\n> 老实说，这对我来说完全无感，因为，我的逻辑是这样的：**我觉得一个人有一定的影响力，其中有很大一部份原因来自他的独立性，如果我开始写软文了，相当于我把自己卖了**。\n\n> 所以，我现在从来不通过写文章挣钱，因为我会写代码，我还是通过我的技能挣钱，通过给一些公司做咨询、培训、企业服务挣钱，老实说，靠自己的能力挣钱，比写文章挣钱挣得多多了，因为我觉得，**像我写的这类的文章本来就是用来分享和传播的，不是用来挣钱的。写文章的目的是分享和影响，不是挣钱。**\n\n5. 私以为对于文章转载，标明原出处和作者是对文章和作者的一个基本尊重，不要找理由说找不到原作者。我从来没有见过有人靠抄袭和盗用别人文章而成功的，无非就是收获几个赞罢了。\n\n6. 商业化已经改变了很多人写作的初衷。\n\n7. 分享是一种态度，不仅仅是停留在嘴上。\n\n8. 有的人认认真真花时间写了好的文章，不管付费打赏，还是点赞支持，都无可厚非。\n\n9. 如果你的文章对读者有用，何必担心自己的粉丝被人家带跑，圈个墙也不见得能增加几个阅读量，开放的心态总比整天的提防要好。\n\n10. 如果你是奔着钱去的，当我什么都没说。\n\n最后，借用[思考问题的熊](http://kaopubear.top/)赵老师的一句话，希望自己在学习工作生活中尽心尽力有所收获，于人于己问心无愧。', 'bodyText': '微信公众号一直标榜 “再小的个体，也有自己的品牌”，这个也许是微信公众号上线的初衷。然而，有人的地方就有江湖，这个曾经看起来是个非常美好的事情，发展到现在，似乎也不见得那么十全十美。\n\n\n抛开一些大的槽点，今天要实锤几个公众号碰到的事情。\n\n\n很多公众号为了阅读量，也有一些是出于专项问题处理，都创建了自己的讨论群，在讨论群明确规定不能发广告，可以理解；但是对转发其他公众号的非广告类文章却如临大敌，动不动踢人，自己却天天发本公众号的各种推文，着实有点小家子气！\n\n\n对于一些从博客转载过来的文章，有一些公众号时不时玩小把戏，把转载声明藏到不起眼的文末；或者干脆迷迷糊糊的说什么文章来源于网络；甚至不做任何标注！如果文章的确是基于网络各种资料自己整理总结而来，还可以理解一下，如果的确有类似原文，却模糊化原创，这样的做法的确不可取。\n\n\n最可恨的是，把一些未经原作者授权的文章标记为原创的侵权行为！前几天刚遇到类似的情况，本来已经跟原作者沟通过转载的事宜，却在转载那一刻发现被其他公众号把该文章标注为原创剽窃了过去，搞得所有想要转载该文章的人都要联系公众号开放白名单，真实可恨！欣慰的是，最后通过微信投诉成功，标记为原创的文章删稿。\n\n\n\n\n关于写文章挣钱，不多说，摘录几点酷壳网陈浩老师的原话！\n\n\n首先，如果你觉得在微信公众号上写技术文章是可以挣钱的，那么恐怕你搞错了，营销文是可以的，技术文章还是比较难的。\n当然，你要挣点小钱是可以有的，但是，你需要写软文中植入广告，或是消费热点主题，比如前段时间的魏则西事件，有的公众号被打赏了一些钱。\n老实说，这对我来说完全无感，因为，我的逻辑是这样的：我觉得一个人有一定的影响力，其中有很大一部份原因来自他的独立性，如果我开始写软文了，相当于我把自己卖了。\n\n\n所以，我现在从来不通过写文章挣钱，因为我会写代码，我还是通过我的技能挣钱，通过给一些公司做咨询、培训、企业服务挣钱，老实说，靠自己的能力挣钱，比写文章挣钱挣得多多了，因为我觉得，像我写的这类的文章本来就是用来分享和传播的，不是用来挣钱的。写文章的目的是分享和影响，不是挣钱。\n\n\n\n私以为对于文章转载，标明原出处和作者是对文章和作者的一个基本尊重，不要找理由说找不到原作者。我从来没有见过有人靠抄袭和盗用别人文章而成功的，无非就是收获几个赞罢了。\n\n\n商业化已经改变了很多人写作的初衷。\n\n\n分享是一种态度，不仅仅是停留在嘴上。\n\n\n有的人认认真真花时间写了好的文章，不管付费打赏，还是点赞支持，都无可厚非。\n\n\n如果你的文章对读者有用，何必担心自己的粉丝被人家带跑，圈个墙也不见得能增加几个阅读量，开放的心态总比整天的提防要好。\n\n\n如果你是奔着钱去的，当我什么都没说。\n\n\n最后，借用思考问题的熊赵老师的一句话，希望自己在学习工作生活中尽心尽力有所收获，于人于己问心无愧。', 'bodyHTML': '<p dir="auto">微信公众号一直标榜 “再小的个体，也有自己的品牌”，这个也许是微信公众号上线的初衷。然而，有人的地方就有江湖，这个曾经看起来是个非常美好的事情，发展到现在，似乎也不见得那么十全十美。</p>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/e2c789d3a76642ea9a6e8e32ed9708a92d50cc678f2a2db7e8cffe944484c041/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46686e535635444c746331714d4f33495f5f525f774e5a667a6f35612e706e67"><img src="https://camo.githubusercontent.com/e2c789d3a76642ea9a6e8e32ed9708a92d50cc678f2a2db7e8cffe944484c041/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46686e535635444c746331714d4f33495f5f525f774e5a667a6f35612e706e67" alt="原作-抄袭-致敬区别.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FhnSV5DLtc1qMO3I__R_wNZfzo5a.png" style="max-width: 100%;"></a></p>\n<p dir="auto">抛开一些大的槽点，今天要实锤几个公众号碰到的事情。</p>\n<ol dir="auto">\n<li>\n<p dir="auto">很多公众号为了阅读量，也有一些是出于专项问题处理，都创建了自己的讨论群，在讨论群明确规定不能发广告，可以理解；但是对转发其他公众号的非广告类文章却如临大敌，动不动踢人，自己却天天发本公众号的各种推文，着实有点小家子气！</p>\n</li>\n<li>\n<p dir="auto">对于一些从博客转载过来的文章，有一些公众号时不时玩小把戏，把转载声明藏到不起眼的文末；或者干脆迷迷糊糊的说什么文章来源于网络；甚至不做任何标注！如果文章的确是基于网络各种资料自己整理总结而来，还可以理解一下，如果的确有类似原文，却模糊化原创，这样的做法的确不可取。</p>\n</li>\n<li>\n<p dir="auto">最可恨的是，把一些未经原作者授权的文章标记为原创的侵权行为！前几天刚遇到类似的情况，本来已经跟原作者沟通过转载的事宜，却在转载那一刻发现被其他公众号把该文章标注为原创剽窃了过去，搞得所有想要转载该文章的人都要联系公众号开放白名单，真实可恨！欣慰的是，最后通过微信投诉成功，标记为原创的文章删稿。</p>\n</li>\n</ol>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b902d8c96c18f5d49c114b88c780ed3d3353e58510def5755974b7c60b90b036/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f467147716d4145377368482d62366b634f4e44414843723045595f742e706e67"><img src="https://camo.githubusercontent.com/b902d8c96c18f5d49c114b88c780ed3d3353e58510def5755974b7c60b90b036/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f467147716d4145377368482d62366b634f4e44414843723045595f742e706e67" alt="原创.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FqGqmAE7shH-b6kcONDAHCr0EY_t.png" style="max-width: 100%;"></a></p>\n<ol start="4" dir="auto">\n<li>关于写文章挣钱，不多说，摘录几点酷壳网陈浩老师的原话！</li>\n</ol>\n<blockquote>\n<p dir="auto">首先，如果你觉得在微信公众号上写技术文章是可以挣钱的，那么恐怕你搞错了，营销文是可以的，技术文章还是比较难的。</p>\n<p dir="auto">当然，你要挣点小钱是可以有的，但是，你需要写软文中植入广告，或是消费热点主题，比如前段时间的魏则西事件，有的公众号被打赏了一些钱。</p>\n<p dir="auto">老实说，这对我来说完全无感，因为，我的逻辑是这样的：<strong>我觉得一个人有一定的影响力，其中有很大一部份原因来自他的独立性，如果我开始写软文了，相当于我把自己卖了</strong>。</p>\n</blockquote>\n<blockquote>\n<p dir="auto">所以，我现在从来不通过写文章挣钱，因为我会写代码，我还是通过我的技能挣钱，通过给一些公司做咨询、培训、企业服务挣钱，老实说，靠自己的能力挣钱，比写文章挣钱挣得多多了，因为我觉得，<strong>像我写的这类的文章本来就是用来分享和传播的，不是用来挣钱的。写文章的目的是分享和影响，不是挣钱。</strong></p>\n</blockquote>\n<ol start="5" dir="auto">\n<li>\n<p dir="auto">私以为对于文章转载，标明原出处和作者是对文章和作者的一个基本尊重，不要找理由说找不到原作者。我从来没有见过有人靠抄袭和盗用别人文章而成功的，无非就是收获几个赞罢了。</p>\n</li>\n<li>\n<p dir="auto">商业化已经改变了很多人写作的初衷。</p>\n</li>\n<li>\n<p dir="auto">分享是一种态度，不仅仅是停留在嘴上。</p>\n</li>\n<li>\n<p dir="auto">有的人认认真真花时间写了好的文章，不管付费打赏，还是点赞支持，都无可厚非。</p>\n</li>\n<li>\n<p dir="auto">如果你的文章对读者有用，何必担心自己的粉丝被人家带跑，圈个墙也不见得能增加几个阅读量，开放的心态总比整天的提防要好。</p>\n</li>\n<li>\n<p dir="auto">如果你是奔着钱去的，当我什么都没说。</p>\n</li>\n</ol>\n<p dir="auto">最后，借用<a href="http://kaopubear.top/" rel="nofollow">思考问题的熊</a>赵老师的一句话，希望自己在学习工作生活中尽心尽力有所收获，于人于己问心无愧。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.5-语雀'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '手续费和年利率', 'number': 139, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/139', 'createdAt': '2025-04-30T08:10:54Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T08:10:55Z', 'body': '相信很多人在使用信用卡刷卡之后，都会收到银行的热心短信甚至是电话，提醒用户可以使用分期还款的服务。而银行给出的理由是，分期有很多好处，比如可以延长信用卡的还款期，减轻短期资金压力，避免造成信用卡逾期等等。\n\n<!-- more -->\n\n![card-1.jpeg](https://shub.weiyan.tech/yuque/elog-notebook-img/FndCPBAg8LCuDmr4Xr_GVfSguPVC.jpeg)\n\n但是实际上银行也是无利不起早，如此热心肠的建议用户选择分期还款，显然没安好心。那么信用卡分期还款，对于银行来说究竟有什么好处呢?其实很简单，用户分期还款可以为银行带来收益，而最后还款日之前全额还款，银行从用户身上赚不到一毛钱。\n\n![card-2.jpeg](https://shub.weiyan.tech/yuque/elog-notebook-img/FqkTCnKfIvPFkQe8NYlcmsW61xt9.jpeg)\n\n从银行的角度来说，大力推广信用卡业务，最终还是为了实现盈利。而如果大部分的信用卡用户，都正常刷卡消费，按时还款，不超额不取现，也没有分期还款，一切都循规蹈矩，那么其中就不会产生任何费用，银行就真得成了慈善机构了。\n\n因为用户从信用卡透支的资金额度，这些借出去的钱对于银行来说，是在不停产生利息费用的，如果不能从信用卡用户身上赚钱，那么银行实际上是在亏损的；除此之外，还要算上银行信用卡业务部门的运营费用等等，恐怕都是一笔不小的开支。\n\n所以银行会想尽一切办法从信用卡用户身上获得收益，目前信用卡产生收益的途径，除了分期还款的手续费，还有信用卡提现手续费、信用卡年费、逾期利息和滞纳金。逾期产生的收益对于银行来说存在一定的风险，而年费和提现手续费的收入显然是非常有限的，因此分期还款收益，就成为了银行信用卡业务的最重要利润点。\n\n## 错误的年利率计算\n\n大多数银行信用卡账单分期，手续费约为 0.6%。一般人认为年利率也就是 0.6%\\*12=7.2%，乍一看不算高。以某银行信用卡 12000 元分 12 期为例，我们来看看信用卡分期手续费率到底有多高。\n\n- 每期（月）应还款的金额：本金为 12000/12=1000 元，手续费为 72。\n- 每月实际还款数：1000+12000*0.6%=1072，那么 12 期下来总共的利息就是 72*12=864，银行所谓的年息(年利率)也就是 864÷12000=7.2％。\n\n但是这样的计算方式是有问题的。这其中最重要的一点就是，**持卡人并非一直欠银行 12000 元，而是随着每月的还款，资金占用是一直在降低的。**最后一个月时，持卡人实际上只欠银行 1000 ，但是仍然要按照 12000 的全额的 0.6% 还手续费，仍须归还 1072 元。\n\n## 正确的年化利率计算\n\n假设贷款总额为 m，共分期 n 期，每期手续费 a%，实际年化利率为 b%。实际年化利率计算如下：\n\n1. 从最后一期到第一期，每期实际占用银行资金为 **1m/n**、**2m/n**、……、**nm/n**，共 n 期；\n2. 则总占用银行资金（以月为单位）为 **m/n** + **2m/n** + …… + **nm/n**，为 **(1+2+ …… +n)m/n**，简单的数列求和，化简后为 **(n+1)m/**2；\n3. n 期共还银行利息为 **m*a%*n**；\n4. 实际年化利率 **b% = amn%/m(n+1) /2 /12**，化简后为 **b = 24 _ a _ n / (n+1**)；\n\n所以实际年化利率是：**24 _ 每期手续费 a% _ 分期 n 期/(n+1) **；拿银行常见分期手续费每期 0.6% 来算，实际年利率：\n\n- 3 期为： 24 _ 0.6 _ 3 / 4 = 10.8%；\n- 6 期为： 24 _ 0.6 _ 6 / 7 = 12.34%；\n- 12 期为：24 _ 0.6 _ 12 / 13 = 13.29%；\n- 24 期为：24 _ 0.6 _ 24 / 25 = 13.82%；\n\n所以银行总是想办法让顾客分期，最少的 3 期分期，实际年化利率也要在 10% 以上。当然，大多数情况下，信用卡用户在有能力全额还款的情况下，都不会选择分期还款，但是也有一部分用户即使还得起，也禁不住银行的三言两语，认为反正银行的钱，不欠白不欠，反正也没有多少手续费，这种想法显然是大错特错了。\n\n## 息率和费率区别\n\n- 对于消费者，每个月还给银行的钱是不是都一样，如果不一样，哪个更划算？\n\n## 参考资料\n\n- 银行利率小编，《[银行贷款利息的把戏：你知道真正的银行贷款年化利率是多少吗？](https://www.yinhang123.net/dkzs/xiangguandaikuan/1173745.html)》，银行信息港\n- Quinn，《[信用卡分期的实际利息是多少？具体怎么计算？](https://www.zhihu.com/question/29996548)》，知乎', 'bodyText': '相信很多人在使用信用卡刷卡之后，都会收到银行的热心短信甚至是电话，提醒用户可以使用分期还款的服务。而银行给出的理由是，分期有很多好处，比如可以延长信用卡的还款期，减轻短期资金压力，避免造成信用卡逾期等等。\n\n\n但是实际上银行也是无利不起早，如此热心肠的建议用户选择分期还款，显然没安好心。那么信用卡分期还款，对于银行来说究竟有什么好处呢?其实很简单，用户分期还款可以为银行带来收益，而最后还款日之前全额还款，银行从用户身上赚不到一毛钱。\n\n从银行的角度来说，大力推广信用卡业务，最终还是为了实现盈利。而如果大部分的信用卡用户，都正常刷卡消费，按时还款，不超额不取现，也没有分期还款，一切都循规蹈矩，那么其中就不会产生任何费用，银行就真得成了慈善机构了。\n因为用户从信用卡透支的资金额度，这些借出去的钱对于银行来说，是在不停产生利息费用的，如果不能从信用卡用户身上赚钱，那么银行实际上是在亏损的；除此之外，还要算上银行信用卡业务部门的运营费用等等，恐怕都是一笔不小的开支。\n所以银行会想尽一切办法从信用卡用户身上获得收益，目前信用卡产生收益的途径，除了分期还款的手续费，还有信用卡提现手续费、信用卡年费、逾期利息和滞纳金。逾期产生的收益对于银行来说存在一定的风险，而年费和提现手续费的收入显然是非常有限的，因此分期还款收益，就成为了银行信用卡业务的最重要利润点。\n错误的年利率计算\n大多数银行信用卡账单分期，手续费约为 0.6%。一般人认为年利率也就是 0.6%*12=7.2%，乍一看不算高。以某银行信用卡 12000 元分 12 期为例，我们来看看信用卡分期手续费率到底有多高。\n\n每期（月）应还款的金额：本金为 12000/12=1000 元，手续费为 72。\n每月实际还款数：1000+120000.6%=1072，那么 12 期下来总共的利息就是 7212=864，银行所谓的年息(年利率)也就是 864÷12000=7.2％。\n\n但是这样的计算方式是有问题的。这其中最重要的一点就是，**持卡人并非一直欠银行 12000 元，而是随着每月的还款，资金占用是一直在降低的。**最后一个月时，持卡人实际上只欠银行 1000 ，但是仍然要按照 12000 的全额的 0.6% 还手续费，仍须归还 1072 元。\n正确的年化利率计算\n假设贷款总额为 m，共分期 n 期，每期手续费 a%，实际年化利率为 b%。实际年化利率计算如下：\n\n从最后一期到第一期，每期实际占用银行资金为 1m/n、2m/n、……、nm/n，共 n 期；\n则总占用银行资金（以月为单位）为 m/n + 2m/n + …… + nm/n，为 (1+2+ …… +n)m/n，简单的数列求和，化简后为 **(n+1)m/**2；\nn 期共还银行利息为 *m*a%n；\n实际年化利率 b% = amn%/m(n+1) /2 /12，化简后为 b = 24 _ a _ n / (n+1)；\n\n所以实际年化利率是：**24 _ 每期手续费 a% _ 分期 n 期/(n+1) **；拿银行常见分期手续费每期 0.6% 来算，实际年利率：\n\n3 期为： 24 _ 0.6 _ 3 / 4 = 10.8%；\n6 期为： 24 _ 0.6 _ 6 / 7 = 12.34%；\n12 期为：24 _ 0.6 _ 12 / 13 = 13.29%；\n24 期为：24 _ 0.6 _ 24 / 25 = 13.82%；\n\n所以银行总是想办法让顾客分期，最少的 3 期分期，实际年化利率也要在 10% 以上。当然，大多数情况下，信用卡用户在有能力全额还款的情况下，都不会选择分期还款，但是也有一部分用户即使还得起，也禁不住银行的三言两语，认为反正银行的钱，不欠白不欠，反正也没有多少手续费，这种想法显然是大错特错了。\n息率和费率区别\n\n对于消费者，每个月还给银行的钱是不是都一样，如果不一样，哪个更划算？\n\n参考资料\n\n银行利率小编，《银行贷款利息的把戏：你知道真正的银行贷款年化利率是多少吗？》，银行信息港\nQuinn，《信用卡分期的实际利息是多少？具体怎么计算？》，知乎', 'bodyHTML': '<p dir="auto">相信很多人在使用信用卡刷卡之后，都会收到银行的热心短信甚至是电话，提醒用户可以使用分期还款的服务。而银行给出的理由是，分期有很多好处，比如可以延长信用卡的还款期，减轻短期资金压力，避免造成信用卡逾期等等。</p>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/44c04aab5b4d780e121c1693a8a9d452b1ff7b6e8ec258ac8419495da9a102d0/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466e644350424167384c4375446d723458725f4756665367755056432e6a706567"><img src="https://camo.githubusercontent.com/44c04aab5b4d780e121c1693a8a9d452b1ff7b6e8ec258ac8419495da9a102d0/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466e644350424167384c4375446d723458725f4756665367755056432e6a706567" alt="card-1.jpeg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FndCPBAg8LCuDmr4Xr_GVfSguPVC.jpeg" style="max-width: 100%;"></a></p>\n<p dir="auto">但是实际上银行也是无利不起早，如此热心肠的建议用户选择分期还款，显然没安好心。那么信用卡分期还款，对于银行来说究竟有什么好处呢?其实很简单，用户分期还款可以为银行带来收益，而最后还款日之前全额还款，银行从用户身上赚不到一毛钱。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/73814e7c690d8eee17cf6d4afb79c10f50050658ae7cd457a2270e16945f7d8d/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46716b54436e4b66497650466b5165384e596c636d735736317874392e6a706567"><img src="https://camo.githubusercontent.com/73814e7c690d8eee17cf6d4afb79c10f50050658ae7cd457a2270e16945f7d8d/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46716b54436e4b66497650466b5165384e596c636d735736317874392e6a706567" alt="card-2.jpeg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FqkTCnKfIvPFkQe8NYlcmsW61xt9.jpeg" style="max-width: 100%;"></a></p>\n<p dir="auto">从银行的角度来说，大力推广信用卡业务，最终还是为了实现盈利。而如果大部分的信用卡用户，都正常刷卡消费，按时还款，不超额不取现，也没有分期还款，一切都循规蹈矩，那么其中就不会产生任何费用，银行就真得成了慈善机构了。</p>\n<p dir="auto">因为用户从信用卡透支的资金额度，这些借出去的钱对于银行来说，是在不停产生利息费用的，如果不能从信用卡用户身上赚钱，那么银行实际上是在亏损的；除此之外，还要算上银行信用卡业务部门的运营费用等等，恐怕都是一笔不小的开支。</p>\n<p dir="auto">所以银行会想尽一切办法从信用卡用户身上获得收益，目前信用卡产生收益的途径，除了分期还款的手续费，还有信用卡提现手续费、信用卡年费、逾期利息和滞纳金。逾期产生的收益对于银行来说存在一定的风险，而年费和提现手续费的收入显然是非常有限的，因此分期还款收益，就成为了银行信用卡业务的最重要利润点。</p>\n<h2 dir="auto">错误的年利率计算</h2>\n<p dir="auto">大多数银行信用卡账单分期，手续费约为 0.6%。一般人认为年利率也就是 0.6%*12=7.2%，乍一看不算高。以某银行信用卡 12000 元分 12 期为例，我们来看看信用卡分期手续费率到底有多高。</p>\n<ul dir="auto">\n<li>每期（月）应还款的金额：本金为 12000/12=1000 元，手续费为 72。</li>\n<li>每月实际还款数：1000+12000<em>0.6%=1072，那么 12 期下来总共的利息就是 72</em>12=864，银行所谓的年息(年利率)也就是 864÷12000=7.2％。</li>\n</ul>\n<p dir="auto">但是这样的计算方式是有问题的。这其中最重要的一点就是，**持卡人并非一直欠银行 12000 元，而是随着每月的还款，资金占用是一直在降低的。**最后一个月时，持卡人实际上只欠银行 1000 ，但是仍然要按照 12000 的全额的 0.6% 还手续费，仍须归还 1072 元。</p>\n<h2 dir="auto">正确的年化利率计算</h2>\n<p dir="auto">假设贷款总额为 m，共分期 n 期，每期手续费 a%，实际年化利率为 b%。实际年化利率计算如下：</p>\n<ol dir="auto">\n<li>从最后一期到第一期，每期实际占用银行资金为 <strong>1m/n</strong>、<strong>2m/n</strong>、……、<strong>nm/n</strong>，共 n 期；</li>\n<li>则总占用银行资金（以月为单位）为 <strong>m/n</strong> + <strong>2m/n</strong> + …… + <strong>nm/n</strong>，为 <strong>(1+2+ …… +n)m/n</strong>，简单的数列求和，化简后为 **(n+1)m/**2；</li>\n<li>n 期共还银行利息为 *<em>m*a%<em>n</em></em>；</li>\n<li>实际年化利率 <strong>b% = amn%/m(n+1) /2 /12</strong>，化简后为 <strong>b = 24 _ a _ n / (n+1</strong>)；</li>\n</ol>\n<p dir="auto">所以实际年化利率是：**24 _ 每期手续费 a% _ 分期 n 期/(n+1) **；拿银行常见分期手续费每期 0.6% 来算，实际年利率：</p>\n<ul dir="auto">\n<li>3 期为： 24 _ 0.6 _ 3 / 4 = 10.8%；</li>\n<li>6 期为： 24 _ 0.6 _ 6 / 7 = 12.34%；</li>\n<li>12 期为：24 _ 0.6 _ 12 / 13 = 13.29%；</li>\n<li>24 期为：24 _ 0.6 _ 24 / 25 = 13.82%；</li>\n</ul>\n<p dir="auto">所以银行总是想办法让顾客分期，最少的 3 期分期，实际年化利率也要在 10% 以上。当然，大多数情况下，信用卡用户在有能力全额还款的情况下，都不会选择分期还款，但是也有一部分用户即使还得起，也禁不住银行的三言两语，认为反正银行的钱，不欠白不欠，反正也没有多少手续费，这种想法显然是大错特错了。</p>\n<h2 dir="auto">息率和费率区别</h2>\n<ul dir="auto">\n<li>对于消费者，每个月还给银行的钱是不是都一样，如果不一样，哪个更划算？</li>\n</ul>\n<h2 dir="auto">参考资料</h2>\n<ul dir="auto">\n<li>银行利率小编，《<a href="https://www.yinhang123.net/dkzs/xiangguandaikuan/1173745.html" rel="nofollow">银行贷款利息的把戏：你知道真正的银行贷款年化利率是多少吗？</a>》，银行信息港</li>\n<li>Quinn，《<a href="https://www.zhihu.com/question/29996548" rel="nofollow">信用卡分期的实际利息是多少？具体怎么计算？</a>》，知乎</li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.5-语雀'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '吐槽一下微信公众号的赞赏号', 'number': 138, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/138', 'createdAt': '2025-04-30T08:10:53Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T08:10:54Z', 'body': '2018 年 6 月 6 号起，公众号每以同一作者名发表 3 篇或 3 篇以上的原创文章，即可创建一个赞赏账户，用于赞赏收款。同一公众号最多可以邀请开通 3 个赞赏账户。关于赞赏账户的创建和流程不多说，公众号平台官网的《[公众平台赞赏和喜欢作者功能介绍](https://kf.qq.com/faq/170110yueMvA170110iIn2uI.html)》上面有很详细的介绍，有两点值得注意。\n\n<!-- more -->\n\n创建赞赏账户需要实名认证，实名信息需要填写作者真实的姓名、身份证号码（实名信息不会对外展示），且需与当前操作的个人微信实名信息一致，提交后实名信息不支持修改，**每个人（以身份证统计）只能开通一个赞赏账户**。\n\n在“赞赏账户”小程序的管理端，点击名字 - “我的信息” - 名字，就可以进入改名流程。但是，请注意，跟微信号一样，**每个赞赏帐号只有一次修改名字的机会**，因此，再修改赞赏账户名称前请您慎重考虑！\n\n其实，微信公众号赞赏号比较坑爹的地方也就在这里。一是一个身份证只能开通一个赞赏账户；二是跟微信号一样，只有一次修改名字的机会。第二点想必大家会很熟悉，但是对于第一点还有一个非常隐藏的坑。\n\n就是，赞赏账户一旦创建，就无法关闭，也无法注销。至少目前是没办法注销和关闭的。就算你把你的微信号注销掉，已经创建的赞赏账号依然无法关闭和注销。\n\n个人觉得，这其实是一个非常恶心的做法。原微信号申请注销不能用了，在新注册的微信号中，原赞赏账户不但无法移交，也不能注销，还占用了本人身份证信息，以至于新的微信号即不能创建新的赞赏账户，也不能沿用原来的赞赏账户。\n\n我在《[不提供账号注销等于耍流氓](https://www.yuque.com/shenweiyan/cookbook/coding-cancel-account)》中聊到过，在腾讯云开发者平台合并后的 CODING 代码管理平台也是不提供账号注销的功能。不知道这是腾讯一贯以来的作风，还是技术原因。\n\n最后，贴个啪啪打脸的信息保护规定和上个图镇楼。顺便问一句，对于腾讯系的产品，大家都是怎么看的呢？\n\n《电信和互联网用户个人信息保护规定》（工业和信息化部令第 24 号）第九款第四款规定：“电信业务经营者、互联网信息服务提供者在用户终止使用电信服务或者互联网信息服务后，应当停止对用户个人信息的收集和使用，并为用户提供注销号码或账号的服务。”\n\n![加密排行榜.jpeg](https://shub.weiyan.tech/yuque/elog-notebook-img/FpvGiW6UG9GQL2ZH5BgzALf-16L3.jpeg)\n![ly.gif](https://shub.weiyan.tech/yuque/elog-notebook-img/FlMO8jnjfaW7QalT7nyPkxQ4d37w.gif)', 'bodyText': '2018 年 6 月 6 号起，公众号每以同一作者名发表 3 篇或 3 篇以上的原创文章，即可创建一个赞赏账户，用于赞赏收款。同一公众号最多可以邀请开通 3 个赞赏账户。关于赞赏账户的创建和流程不多说，公众号平台官网的《公众平台赞赏和喜欢作者功能介绍》上面有很详细的介绍，有两点值得注意。\n\n创建赞赏账户需要实名认证，实名信息需要填写作者真实的姓名、身份证号码（实名信息不会对外展示），且需与当前操作的个人微信实名信息一致，提交后实名信息不支持修改，每个人（以身份证统计）只能开通一个赞赏账户。\n在“赞赏账户”小程序的管理端，点击名字 - “我的信息” - 名字，就可以进入改名流程。但是，请注意，跟微信号一样，每个赞赏帐号只有一次修改名字的机会，因此，再修改赞赏账户名称前请您慎重考虑！\n其实，微信公众号赞赏号比较坑爹的地方也就在这里。一是一个身份证只能开通一个赞赏账户；二是跟微信号一样，只有一次修改名字的机会。第二点想必大家会很熟悉，但是对于第一点还有一个非常隐藏的坑。\n就是，赞赏账户一旦创建，就无法关闭，也无法注销。至少目前是没办法注销和关闭的。就算你把你的微信号注销掉，已经创建的赞赏账号依然无法关闭和注销。\n个人觉得，这其实是一个非常恶心的做法。原微信号申请注销不能用了，在新注册的微信号中，原赞赏账户不但无法移交，也不能注销，还占用了本人身份证信息，以至于新的微信号即不能创建新的赞赏账户，也不能沿用原来的赞赏账户。\n我在《不提供账号注销等于耍流氓》中聊到过，在腾讯云开发者平台合并后的 CODING 代码管理平台也是不提供账号注销的功能。不知道这是腾讯一贯以来的作风，还是技术原因。\n最后，贴个啪啪打脸的信息保护规定和上个图镇楼。顺便问一句，对于腾讯系的产品，大家都是怎么看的呢？\n《电信和互联网用户个人信息保护规定》（工业和信息化部令第 24 号）第九款第四款规定：“电信业务经营者、互联网信息服务提供者在用户终止使用电信服务或者互联网信息服务后，应当停止对用户个人信息的收集和使用，并为用户提供注销号码或账号的服务。”', 'bodyHTML': '<p dir="auto">2018 年 6 月 6 号起，公众号每以同一作者名发表 3 篇或 3 篇以上的原创文章，即可创建一个赞赏账户，用于赞赏收款。同一公众号最多可以邀请开通 3 个赞赏账户。关于赞赏账户的创建和流程不多说，公众号平台官网的《<a href="https://kf.qq.com/faq/170110yueMvA170110iIn2uI.html" rel="nofollow">公众平台赞赏和喜欢作者功能介绍</a>》上面有很详细的介绍，有两点值得注意。</p>\n\n<p dir="auto">创建赞赏账户需要实名认证，实名信息需要填写作者真实的姓名、身份证号码（实名信息不会对外展示），且需与当前操作的个人微信实名信息一致，提交后实名信息不支持修改，<strong>每个人（以身份证统计）只能开通一个赞赏账户</strong>。</p>\n<p dir="auto">在“赞赏账户”小程序的管理端，点击名字 - “我的信息” - 名字，就可以进入改名流程。但是，请注意，跟微信号一样，<strong>每个赞赏帐号只有一次修改名字的机会</strong>，因此，再修改赞赏账户名称前请您慎重考虑！</p>\n<p dir="auto">其实，微信公众号赞赏号比较坑爹的地方也就在这里。一是一个身份证只能开通一个赞赏账户；二是跟微信号一样，只有一次修改名字的机会。第二点想必大家会很熟悉，但是对于第一点还有一个非常隐藏的坑。</p>\n<p dir="auto">就是，赞赏账户一旦创建，就无法关闭，也无法注销。至少目前是没办法注销和关闭的。就算你把你的微信号注销掉，已经创建的赞赏账号依然无法关闭和注销。</p>\n<p dir="auto">个人觉得，这其实是一个非常恶心的做法。原微信号申请注销不能用了，在新注册的微信号中，原赞赏账户不但无法移交，也不能注销，还占用了本人身份证信息，以至于新的微信号即不能创建新的赞赏账户，也不能沿用原来的赞赏账户。</p>\n<p dir="auto">我在《<a href="https://www.yuque.com/shenweiyan/cookbook/coding-cancel-account" rel="nofollow">不提供账号注销等于耍流氓</a>》中聊到过，在腾讯云开发者平台合并后的 CODING 代码管理平台也是不提供账号注销的功能。不知道这是腾讯一贯以来的作风，还是技术原因。</p>\n<p dir="auto">最后，贴个啪啪打脸的信息保护规定和上个图镇楼。顺便问一句，对于腾讯系的产品，大家都是怎么看的呢？</p>\n<p dir="auto">《电信和互联网用户个人信息保护规定》（工业和信息化部令第 24 号）第九款第四款规定：“电信业务经营者、互联网信息服务提供者在用户终止使用电信服务或者互联网信息服务后，应当停止对用户个人信息的收集和使用，并为用户提供注销号码或账号的服务。”</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/c829168d1f8ed101b9a84bbb539c7320c17f83f4e18a3c05e2ea2d069bf80e7c/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4670764769573655473947514c325a483542677a414c662d31364c332e6a706567"><img src="https://camo.githubusercontent.com/c829168d1f8ed101b9a84bbb539c7320c17f83f4e18a3c05e2ea2d069bf80e7c/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4670764769573655473947514c325a483542677a414c662d31364c332e6a706567" alt="加密排行榜.jpeg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FpvGiW6UG9GQL2ZH5BgzALf-16L3.jpeg" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/1e8d9ad17c3ab46394a6df4d80b1ec81f2f2d9c9338dcf196fc2abcf550e368e/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466c4d4f386a6e6a6661573751616c54376e79506b785134643337772e676966"><img src="https://camo.githubusercontent.com/1e8d9ad17c3ab46394a6df4d80b1ec81f2f2d9c9338dcf196fc2abcf550e368e/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466c4d4f386a6e6a6661573751616c54376e79506b785134643337772e676966" alt="ly.gif" data-animated-image="" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FlMO8jnjfaW7QalT7nyPkxQ4d37w.gif" style="max-width: 100%;"></a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.5-语雀'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '动了谁的奶酪', 'number': 137, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/137', 'createdAt': '2025-04-30T08:10:52Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T08:10:53Z', 'body': '活在自媒体时代，每个人都在利用各种平台打造个人品牌，几乎每个人都在会选择微信公众号。流量为王的今天，粉丝就是一切，是动不得的奶酪。\n\n<!-- more -->\n\n个人觉得，不管任何平台，任何讨论组，个人宣传自己的文章都是可以被接受的，只要这些文章不是广告，只要不是恶意刷屏，只要没有明确的规则说禁止分享第三方的链接文章。\n\n一亩三分地内，如果真的动了你的奶酪，如果在你看来这就是广告，在没有任何沟通的情况下直接踢人，个人觉得这是极其野蛮的做法。\n\n现在的公众号都不容易，尤其是个人运营的公众号。奔着分享和交流学习的初心，内容至上，应该才是正道。\n\n今天在某交流群分享了一篇转载的 R 语言文章，没有任何沟通情况下直接被踢，有点想法，唠叨几句。', 'bodyText': '活在自媒体时代，每个人都在利用各种平台打造个人品牌，几乎每个人都在会选择微信公众号。流量为王的今天，粉丝就是一切，是动不得的奶酪。\n\n个人觉得，不管任何平台，任何讨论组，个人宣传自己的文章都是可以被接受的，只要这些文章不是广告，只要不是恶意刷屏，只要没有明确的规则说禁止分享第三方的链接文章。\n一亩三分地内，如果真的动了你的奶酪，如果在你看来这就是广告，在没有任何沟通的情况下直接踢人，个人觉得这是极其野蛮的做法。\n现在的公众号都不容易，尤其是个人运营的公众号。奔着分享和交流学习的初心，内容至上，应该才是正道。\n今天在某交流群分享了一篇转载的 R 语言文章，没有任何沟通情况下直接被踢，有点想法，唠叨几句。', 'bodyHTML': '<p dir="auto">活在自媒体时代，每个人都在利用各种平台打造个人品牌，几乎每个人都在会选择微信公众号。流量为王的今天，粉丝就是一切，是动不得的奶酪。</p>\n\n<p dir="auto">个人觉得，不管任何平台，任何讨论组，个人宣传自己的文章都是可以被接受的，只要这些文章不是广告，只要不是恶意刷屏，只要没有明确的规则说禁止分享第三方的链接文章。</p>\n<p dir="auto">一亩三分地内，如果真的动了你的奶酪，如果在你看来这就是广告，在没有任何沟通的情况下直接踢人，个人觉得这是极其野蛮的做法。</p>\n<p dir="auto">现在的公众号都不容易，尤其是个人运营的公众号。奔着分享和交流学习的初心，内容至上，应该才是正道。</p>\n<p dir="auto">今天在某交流群分享了一篇转载的 R 语言文章，没有任何沟通情况下直接被踢，有点想法，唠叨几句。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.5-语雀'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '心灵鸡汤', 'number': 136, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/136', 'createdAt': '2025-04-30T08:10:51Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T08:10:52Z', 'body': '现如今生活压力和成本越来越大，各种焦虑充斥，于是有了各种的心灵鸡汤，Chicken Soup。\n\n<!-- more -->\n\n三观正，内容积极的鸡汤偶尔看看未尝不可，但是每个人的经历不同，对鸡汤的解读也不一样。有一些你觉得很对你口味，可以让你瞬间能量满满的鸡汤，在别人眼里可能恰恰成了对他(她)含沙射影的矛头。\n\n所以，心灵的鸡汤，有空的时候可以看一看，权当调节一下情绪。但是，请记住不要在公众场合轻易去转发，尤其是微信、朋友圈之类的社交平台。', 'bodyText': '现如今生活压力和成本越来越大，各种焦虑充斥，于是有了各种的心灵鸡汤，Chicken Soup。\n\n三观正，内容积极的鸡汤偶尔看看未尝不可，但是每个人的经历不同，对鸡汤的解读也不一样。有一些你觉得很对你口味，可以让你瞬间能量满满的鸡汤，在别人眼里可能恰恰成了对他(她)含沙射影的矛头。\n所以，心灵的鸡汤，有空的时候可以看一看，权当调节一下情绪。但是，请记住不要在公众场合轻易去转发，尤其是微信、朋友圈之类的社交平台。', 'bodyHTML': '<p dir="auto">现如今生活压力和成本越来越大，各种焦虑充斥，于是有了各种的心灵鸡汤，Chicken Soup。</p>\n\n<p dir="auto">三观正，内容积极的鸡汤偶尔看看未尝不可，但是每个人的经历不同，对鸡汤的解读也不一样。有一些你觉得很对你口味，可以让你瞬间能量满满的鸡汤，在别人眼里可能恰恰成了对他(她)含沙射影的矛头。</p>\n<p dir="auto">所以，心灵的鸡汤，有空的时候可以看一看，权当调节一下情绪。但是，请记住不要在公众场合轻易去转发，尤其是微信、朋友圈之类的社交平台。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.5-语雀'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '写作与初衷', 'number': 135, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/135', 'createdAt': '2025-04-30T08:10:50Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T08:10:51Z', 'body': '关于写作原本的想法，只是想写点自己在学习、工作、生活上的一些心得和体会，把一些知识点记录下来。\n\n<!-- more -->\n\n![xiezuo2.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/Fu0vY5O4M2i5Lxxtta0VfcXuNCq5.jpeg)\n\n留言的初衷是，希望自己写下来的东西能够有人一起探讨。哪怕你把我的观点批评得一无是处也可以，哪怕你说我的句子狗屁不通也没关系，只要有评判，我相信总有一天我会变得更好。\n\n关于部分平台商业化的写作，只说两点：\n\n- 商业化已经改变了写作的初衷。\n- 当写文章变成盈利的手段，那么，写出来的东西是没有灵魂的。', 'bodyText': '关于写作原本的想法，只是想写点自己在学习、工作、生活上的一些心得和体会，把一些知识点记录下来。\n\n\n留言的初衷是，希望自己写下来的东西能够有人一起探讨。哪怕你把我的观点批评得一无是处也可以，哪怕你说我的句子狗屁不通也没关系，只要有评判，我相信总有一天我会变得更好。\n关于部分平台商业化的写作，只说两点：\n\n商业化已经改变了写作的初衷。\n当写文章变成盈利的手段，那么，写出来的东西是没有灵魂的。', 'bodyHTML': '<p dir="auto">关于写作原本的想法，只是想写点自己在学习、工作、生活上的一些心得和体会，把一些知识点记录下来。</p>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/9200e97bfb44d1c2b299dceec18cda9bfa7bbb0d8f6374577e21b0f1148ca96a/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4675307659354f344d3269354c78787474613056666358754e4371352e6a706567"><img src="https://camo.githubusercontent.com/9200e97bfb44d1c2b299dceec18cda9bfa7bbb0d8f6374577e21b0f1148ca96a/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4675307659354f344d3269354c78787474613056666358754e4371352e6a706567" alt="xiezuo2.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Fu0vY5O4M2i5Lxxtta0VfcXuNCq5.jpeg" style="max-width: 100%;"></a></p>\n<p dir="auto">留言的初衷是，希望自己写下来的东西能够有人一起探讨。哪怕你把我的观点批评得一无是处也可以，哪怕你说我的句子狗屁不通也没关系，只要有评判，我相信总有一天我会变得更好。</p>\n<p dir="auto">关于部分平台商业化的写作，只说两点：</p>\n<ul dir="auto">\n<li>商业化已经改变了写作的初衷。</li>\n<li>当写文章变成盈利的手段，那么，写出来的东西是没有灵魂的。</li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.5-语雀'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '战地之王', 'number': 134, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/134', 'createdAt': '2025-04-30T08:10:49Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T08:10:50Z', 'body': '作为战地之王《A.V.A》这一款游戏超过 10 年的老玩家，从国服于 2019 年 9 月 25 日 11:00:00 正式停止运营，到 2020 年开始进入台服，一直玩到现在，平淡无奇的生活也总能多了一点乐趣。\n\n<!-- more -->\n\n![2023.05.20.Sat. - 台服·极速危机](https://shub.weiyan.tech/yuque/elog-notebook-img/FmyzcrYd1zobC_Gc_fbMwM2TqQox.jpeg "2023.05.20.Sat. - 台服·极速危机")\n\n![2023.06.05.Sun. - 台服·生化危机.Adv](https://shub.weiyan.tech/yuque/elog-notebook-img/Fi1zAGARBgwaoPflLSoWDpfO0Gad.jpeg "2023.06.05.Sun. - 台服·生化危机.Adv")\n\n![台服·铜箱子](https://shub.weiyan.tech/yuque/elog-notebook-img/FplprU1jPMWJ8jdi3KG2EGLpgRqV.jpeg "台服·铜箱子")\n\n![Steam 国际服](https://shub.weiyan.tech/yuque/elog-notebook-img/Fsc7_k15ieP_RPERKnG5_i3Jaa-6.jpeg "Steam 国际服")', 'bodyText': '作为战地之王《A.V.A》这一款游戏超过 10 年的老玩家，从国服于 2019 年 9 月 25 日 11:00:00 正式停止运营，到 2020 年开始进入台服，一直玩到现在，平淡无奇的生活也总能多了一点乐趣。', 'bodyHTML': '<p dir="auto">作为战地之王《A.V.A》这一款游戏超过 10 年的老玩家，从国服于 2019 年 9 月 25 日 11:00:00 正式停止运营，到 2020 年开始进入台服，一直玩到现在，平淡无奇的生活也总能多了一点乐趣。</p>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/049bb90e8ac20de8959a9ee202f382d70e72c66ac0577b8eb96ffb0d9ad9683a/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466d797a63725964317a6f62435f47635f66624d774d325471516f782e6a706567"><img src="https://camo.githubusercontent.com/049bb90e8ac20de8959a9ee202f382d70e72c66ac0577b8eb96ffb0d9ad9683a/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466d797a63725964317a6f62435f47635f66624d774d325471516f782e6a706567" alt="2023.05.20.Sat. - 台服·极速危机" title="2023.05.20.Sat. - 台服·极速危机" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FmyzcrYd1zobC_Gc_fbMwM2TqQox.jpeg" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/ffa5968134fa675866e2925d280cd3e37f0cc68ff423e1dd74708d6451a75376/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4669317a41474152426777616f50666c4c536f574470664f304761642e6a706567"><img src="https://camo.githubusercontent.com/ffa5968134fa675866e2925d280cd3e37f0cc68ff423e1dd74708d6451a75376/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4669317a41474152426777616f50666c4c536f574470664f304761642e6a706567" alt="2023.06.05.Sun. - 台服·生化危机.Adv" title="2023.06.05.Sun. - 台服·生化危机.Adv" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Fi1zAGARBgwaoPflLSoWDpfO0Gad.jpeg" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/578b892f6081d8f39013a9f953d8c864c023be46449056acb35c985472772c48/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46706c707255316a504d574a386a6469334b473245474c70675271562e6a706567"><img src="https://camo.githubusercontent.com/578b892f6081d8f39013a9f953d8c864c023be46449056acb35c985472772c48/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46706c707255316a504d574a386a6469334b473245474c70675271562e6a706567" alt="台服·铜箱子" title="台服·铜箱子" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FplprU1jPMWJ8jdi3KG2EGLpgRqV.jpeg" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/96e2bfcf8e4442904f7f41d14a819f3093b9405392d8b816e540cd3e706ae14a/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f467363375f6b31356965505f525045524b6e47355f69334a61612d362e6a706567"><img src="https://camo.githubusercontent.com/96e2bfcf8e4442904f7f41d14a819f3093b9405392d8b816e540cd3e706ae14a/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f467363375f6b31356965505f525045524b6e47355f69334a61612d362e6a706567" alt="Steam 国际服" title="Steam 国际服" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Fsc7_k15ieP_RPERKnG5_i3Jaa-6.jpeg" style="max-width: 100%;"></a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.5-语雀'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '热成狗', 'number': 133, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/133', 'createdAt': '2025-04-30T08:10:48Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T08:10:49Z', 'body': '2023 年广州酷热的天气好像比以往都要更早一些，从 5 月中下旬气温就开始陡升，一直持续在 38° 左右 🌞🌞🌞\n\n如此酷热的天气，让一切都变成了无精打采，就连写个文章记个小记都懒得动笔了；加上 5 月下旬又严重的病毒性感冒了两次，好不容易缓过来后，整个人感觉都要蔫掉了。\n\n<!-- more -->\n\n![e549b5af315700a9b3e7747b1623398.png](https://shub.weiyan.tech/yuque/elog-notebook-img/FiqCEjITPiIwdeNGXLvHmuCbyWSG.png)\n\n顶着酷热，参加了女儿在幼儿园的第一个六一儿童节亲子活动 🏃\n\n顶着夕阳，陪着女儿开始轮滑从零到一的入门 🌞\n\n夏天就这样悄然而至，我们就只想吹着空调，吃着冰镇西瓜，窝在家里，闻着花露水，穿着人字拖，晃悠，晃悠 。。。', 'bodyText': '2023 年广州酷热的天气好像比以往都要更早一些，从 5 月中下旬气温就开始陡升，一直持续在 38° 左右 🌞🌞🌞\n如此酷热的天气，让一切都变成了无精打采，就连写个文章记个小记都懒得动笔了；加上 5 月下旬又严重的病毒性感冒了两次，好不容易缓过来后，整个人感觉都要蔫掉了。\n\n\n顶着酷热，参加了女儿在幼儿园的第一个六一儿童节亲子活动 🏃\n顶着夕阳，陪着女儿开始轮滑从零到一的入门 🌞\n夏天就这样悄然而至，我们就只想吹着空调，吃着冰镇西瓜，窝在家里，闻着花露水，穿着人字拖，晃悠，晃悠 。。。', 'bodyHTML': '<p dir="auto">2023 年广州酷热的天气好像比以往都要更早一些，从 5 月中下旬气温就开始陡升，一直持续在 38° 左右 🌞🌞🌞</p>\n<p dir="auto">如此酷热的天气，让一切都变成了无精打采，就连写个文章记个小记都懒得动笔了；加上 5 月下旬又严重的病毒性感冒了两次，好不容易缓过来后，整个人感觉都要蔫掉了。</p>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/43899887f9a4a6509acb0031d073154846723fafdd132e8825c0c10b0354e647/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46697143456a49545069497764654e47584c76486d754362795753472e706e67"><img src="https://camo.githubusercontent.com/43899887f9a4a6509acb0031d073154846723fafdd132e8825c0c10b0354e647/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46697143456a49545069497764654e47584c76486d754362795753472e706e67" alt="e549b5af315700a9b3e7747b1623398.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FiqCEjITPiIwdeNGXLvHmuCbyWSG.png" style="max-width: 100%;"></a></p>\n<p dir="auto">顶着酷热，参加了女儿在幼儿园的第一个六一儿童节亲子活动 🏃</p>\n<p dir="auto">顶着夕阳，陪着女儿开始轮滑从零到一的入门 🌞</p>\n<p dir="auto">夏天就这样悄然而至，我们就只想吹着空调，吃着冰镇西瓜，窝在家里，闻着花露水，穿着人字拖，晃悠，晃悠 。。。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.5-语雀'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '心目中完美的知识管理工具', 'number': 132, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/132', 'createdAt': '2025-04-30T08:10:47Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T08:10:48Z', 'body': '最近对于笔记和博客，内心又开始有点躁动了——语雀、Obsidian、Notion 是我最爱三个候选，有时候一直在它们之间摇摆不定。\n\n<!-- more -->\n\nV2EX 上《[有没有一种知识管理工具，满足这些特性？](https://www.v2ex.com/t/721418)》中作者列一些他心目中完美的知识管理工具，有一些共鸣：\n\n- 树状结构，代表了自己的知识体系。\n- 标签 tag，可以从不同的角度，组织自己的知识，作为树状知识体系的重要补充。\n- **Markdown**，编辑起来够方便，节约时间到知识管理上。\n- 本地加解密，多端同步，既有不同客户端的同步便利，又有**明文数据只存储在本地的安全**。\n- **笔记+博客**，既可以满足私密的记录，又可以满足公开内容的分享和归档。\n- **精准搜索**，方便从几百上千笔记定位到想要的记录。\n\n语雀很好，但非明文的数据存储总让我如履薄冰，另外一边 Obsidian/Notion 也还没有强大到让我立马转移阵地的欲望。\n\n## Mark 一下\n\n看了一些工具，感觉还不错，先 Mark 一下，后续有需要可以研究一下。\n\n- Obsidian + [Quartz](https://github.com/abserari/quartz) Publish Web HomePage（Eg. [https://notes.abser.top/](https://notes.abser.top/)）\n- [NotionNext-快速免费搭建网站 | Tangly Blog](https://tangly1024.com/article/notion-next)\n- [用 notion 搭建的博客上线，硬加一波友联](https://www.v2ex.com/t/947306) - V2EX', 'bodyText': '最近对于笔记和博客，内心又开始有点躁动了——语雀、Obsidian、Notion 是我最爱三个候选，有时候一直在它们之间摇摆不定。\n\nV2EX 上《有没有一种知识管理工具，满足这些特性？》中作者列一些他心目中完美的知识管理工具，有一些共鸣：\n\n树状结构，代表了自己的知识体系。\n标签 tag，可以从不同的角度，组织自己的知识，作为树状知识体系的重要补充。\nMarkdown，编辑起来够方便，节约时间到知识管理上。\n本地加解密，多端同步，既有不同客户端的同步便利，又有明文数据只存储在本地的安全。\n笔记+博客，既可以满足私密的记录，又可以满足公开内容的分享和归档。\n精准搜索，方便从几百上千笔记定位到想要的记录。\n\n语雀很好，但非明文的数据存储总让我如履薄冰，另外一边 Obsidian/Notion 也还没有强大到让我立马转移阵地的欲望。\nMark 一下\n看了一些工具，感觉还不错，先 Mark 一下，后续有需要可以研究一下。\n\nObsidian + Quartz Publish Web HomePage（Eg. https://notes.abser.top/）\nNotionNext-快速免费搭建网站 | Tangly Blog\n用 notion 搭建的博客上线，硬加一波友联 - V2EX', 'bodyHTML': '<p dir="auto">最近对于笔记和博客，内心又开始有点躁动了——语雀、Obsidian、Notion 是我最爱三个候选，有时候一直在它们之间摇摆不定。</p>\n\n<p dir="auto">V2EX 上《<a href="https://www.v2ex.com/t/721418" rel="nofollow">有没有一种知识管理工具，满足这些特性？</a>》中作者列一些他心目中完美的知识管理工具，有一些共鸣：</p>\n<ul dir="auto">\n<li>树状结构，代表了自己的知识体系。</li>\n<li>标签 tag，可以从不同的角度，组织自己的知识，作为树状知识体系的重要补充。</li>\n<li><strong>Markdown</strong>，编辑起来够方便，节约时间到知识管理上。</li>\n<li>本地加解密，多端同步，既有不同客户端的同步便利，又有<strong>明文数据只存储在本地的安全</strong>。</li>\n<li><strong>笔记+博客</strong>，既可以满足私密的记录，又可以满足公开内容的分享和归档。</li>\n<li><strong>精准搜索</strong>，方便从几百上千笔记定位到想要的记录。</li>\n</ul>\n<p dir="auto">语雀很好，但非明文的数据存储总让我如履薄冰，另外一边 Obsidian/Notion 也还没有强大到让我立马转移阵地的欲望。</p>\n<h2 dir="auto">Mark 一下</h2>\n<p dir="auto">看了一些工具，感觉还不错，先 Mark 一下，后续有需要可以研究一下。</p>\n<ul dir="auto">\n<li>Obsidian + <a href="https://github.com/abserari/quartz">Quartz</a> Publish Web HomePage（Eg. <a href="https://notes.abser.top/" rel="nofollow">https://notes.abser.top/</a>）</li>\n<li><a href="https://tangly1024.com/article/notion-next" rel="nofollow">NotionNext-快速免费搭建网站 | Tangly Blog</a></li>\n<li><a href="https://www.v2ex.com/t/947306" rel="nofollow">用 notion 搭建的博客上线，硬加一波友联</a> - V2EX</li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.5-语雀'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '公众号与语雀', 'number': 131, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/131', 'createdAt': '2025-04-30T08:10:46Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T08:10:47Z', 'body': '首先，公众号发表后的文章是不支持大幅度和多次的修改的，作为技术类的很多文章，我希望我的文章能被修改，因为文章会有错误，也会需要时常更新。\n第二，我希望我的文章能归档起来，方便检索。\n\n<!-- more -->\n\n出于以上考虑，我想把个人公众号的文章在语雀做一个归档，这就引发了一个问题：**我是用存量的知识小组，还是用现在的知识库，还是用语雀空间？还是新创建一个语雀账号？**\n\n- 存量的知识小组，不支持插入本地视频！\n- 语雀空间，子一级目录不能修改名称，还非得要登陆才能看！\n\n创建一个语雀账号就有点把工作复杂化，这样一看来用现有的语雀知识库貌似是一个最好的选择。出于把个人知识笔记跟公众号分隔开的最初目录，对个人账号下新建一个知识库用于公众号文章归档这样的做法总感觉有点事与愿违，总感觉有点别扭，总觉得哪里不对劲。\n\n心里总觉得语雀空间是理想的，现实告诉你个人知识库才是合适的，隐约有点理想被现实打脸的的错觉。\n\n语雀空间作为团队、公司使用，总有一些提供给其他客户或者用户的对外公开文档吧，这些文档用户不需要登录可以直接查看也是合情合理（而且语雀空间貌似也有这样的设置项，但作为一个语雀个人长期用户，居然也搞不清楚具体要怎么设置——是需要先在空间管理设置，然后再去具体知识库设置？）      \n![image.png](https://shub.weiyan.tech/yuque/elog-notebook-img/Fg81kwjFQPZtTH99Zbs8ijEDSC0Z.png)      \n\n\n后来才折腾明白 ——\n\n> 📢 **设置互联网所有人可以访问是语雀的付费权益！！！**\n\n- **如果知识库设置了公开到互联网可见，外部未注册的人拿到分享链接也可以查看。**\n\n![image.png](https://shub.weiyan.tech/yuque/elog-notebook-img/FgQ3IDgJa7cM_syRZFeARKfk7cL6.png)\n\n- **如果想要对外分享整个公开的知识库，在知识库首页右上角可以分享。**\n\n![image.png](https://shub.weiyan.tech/yuque/elog-notebook-img/FnhHk0d2S6NZyot0h5JS1suvVDa7.png)      \n\n\n好吧，算是折腾明白了！\n\n最后就剩一个问题了——个人用户已经开通了超级会员，囊中羞涩已经折腾不起付费的空间了。\n\n所以，写到最后，归根结底，还是 **"钱"** 的问题 😕😵🤑', 'bodyText': '首先，公众号发表后的文章是不支持大幅度和多次的修改的，作为技术类的很多文章，我希望我的文章能被修改，因为文章会有错误，也会需要时常更新。\n第二，我希望我的文章能归档起来，方便检索。\n\n出于以上考虑，我想把个人公众号的文章在语雀做一个归档，这就引发了一个问题：我是用存量的知识小组，还是用现在的知识库，还是用语雀空间？还是新创建一个语雀账号？\n\n存量的知识小组，不支持插入本地视频！\n语雀空间，子一级目录不能修改名称，还非得要登陆才能看！\n\n创建一个语雀账号就有点把工作复杂化，这样一看来用现有的语雀知识库貌似是一个最好的选择。出于把个人知识笔记跟公众号分隔开的最初目录，对个人账号下新建一个知识库用于公众号文章归档这样的做法总感觉有点事与愿违，总感觉有点别扭，总觉得哪里不对劲。\n心里总觉得语雀空间是理想的，现实告诉你个人知识库才是合适的，隐约有点理想被现实打脸的的错觉。\n语雀空间作为团队、公司使用，总有一些提供给其他客户或者用户的对外公开文档吧，这些文档用户不需要登录可以直接查看也是合情合理（而且语雀空间貌似也有这样的设置项，但作为一个语雀个人长期用户，居然也搞不清楚具体要怎么设置——是需要先在空间管理设置，然后再去具体知识库设置？）\n\n后来才折腾明白 ——\n\n📢 设置互联网所有人可以访问是语雀的付费权益！！！\n\n\n如果知识库设置了公开到互联网可见，外部未注册的人拿到分享链接也可以查看。\n\n\n\n如果想要对外分享整个公开的知识库，在知识库首页右上角可以分享。\n\n\n好吧，算是折腾明白了！\n最后就剩一个问题了——个人用户已经开通了超级会员，囊中羞涩已经折腾不起付费的空间了。\n所以，写到最后，归根结底，还是 "钱" 的问题 😕😵🤑', 'bodyHTML': '<p dir="auto">首先，公众号发表后的文章是不支持大幅度和多次的修改的，作为技术类的很多文章，我希望我的文章能被修改，因为文章会有错误，也会需要时常更新。<br>\n第二，我希望我的文章能归档起来，方便检索。</p>\n\n<p dir="auto">出于以上考虑，我想把个人公众号的文章在语雀做一个归档，这就引发了一个问题：<strong>我是用存量的知识小组，还是用现在的知识库，还是用语雀空间？还是新创建一个语雀账号？</strong></p>\n<ul dir="auto">\n<li>存量的知识小组，不支持插入本地视频！</li>\n<li>语雀空间，子一级目录不能修改名称，还非得要登陆才能看！</li>\n</ul>\n<p dir="auto">创建一个语雀账号就有点把工作复杂化，这样一看来用现有的语雀知识库貌似是一个最好的选择。出于把个人知识笔记跟公众号分隔开的最初目录，对个人账号下新建一个知识库用于公众号文章归档这样的做法总感觉有点事与愿违，总感觉有点别扭，总觉得哪里不对劲。</p>\n<p dir="auto">心里总觉得语雀空间是理想的，现实告诉你个人知识库才是合适的，隐约有点理想被现实打脸的的错觉。</p>\n<p dir="auto">语雀空间作为团队、公司使用，总有一些提供给其他客户或者用户的对外公开文档吧，这些文档用户不需要登录可以直接查看也是合情合理（而且语雀空间貌似也有这样的设置项，但作为一个语雀个人长期用户，居然也搞不清楚具体要怎么设置——是需要先在空间管理设置，然后再去具体知识库设置？）<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/8fb9ffeb2a6088d801255458fe8b7e2b3a88f67721de895e91b93f76096759f3/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466738316b776a4651505a74544839395a627338696a45445343305a2e706e67"><img src="https://camo.githubusercontent.com/8fb9ffeb2a6088d801255458fe8b7e2b3a88f67721de895e91b93f76096759f3/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466738316b776a4651505a74544839395a627338696a45445343305a2e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Fg81kwjFQPZtTH99Zbs8ijEDSC0Z.png" style="max-width: 100%;"></a></p>\n<p dir="auto">后来才折腾明白 ——</p>\n<blockquote>\n<p dir="auto">📢 <strong>设置互联网所有人可以访问是语雀的付费权益！！！</strong></p>\n</blockquote>\n<ul dir="auto">\n<li><strong>如果知识库设置了公开到互联网可见，外部未注册的人拿到分享链接也可以查看。</strong></li>\n</ul>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/c06886d028a38fdc1f8699a83dc8c4c0c40781de4c05eff56d93cf3023aa4cee/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466751334944674a6137634d5f7379525a466541524b666b37634c362e706e67"><img src="https://camo.githubusercontent.com/c06886d028a38fdc1f8699a83dc8c4c0c40781de4c05eff56d93cf3023aa4cee/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466751334944674a6137634d5f7379525a466541524b666b37634c362e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FgQ3IDgJa7cM_syRZFeARKfk7cL6.png" style="max-width: 100%;"></a></p>\n<ul dir="auto">\n<li><strong>如果想要对外分享整个公开的知识库，在知识库首页右上角可以分享。</strong></li>\n</ul>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/cbac2a9fa7d98d9e55d2b68fb26ea1f0c97c73ce4ab07322e3b9edab9eff6da1/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466e68486b30643253364e5a796f743068354a5331737576564461372e706e67"><img src="https://camo.githubusercontent.com/cbac2a9fa7d98d9e55d2b68fb26ea1f0c97c73ce4ab07322e3b9edab9eff6da1/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466e68486b30643253364e5a796f743068354a5331737576564461372e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FnhHk0d2S6NZyot0h5JS1suvVDa7.png" style="max-width: 100%;"></a></p>\n<p dir="auto">好吧，算是折腾明白了！</p>\n<p dir="auto">最后就剩一个问题了——个人用户已经开通了超级会员，囊中羞涩已经折腾不起付费的空间了。</p>\n<p dir="auto">所以，写到最后，归根结底，还是 <strong>"钱"</strong> 的问题 😕😵🤑</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.5-语雀'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '精致', 'number': 130, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/130', 'createdAt': '2025-04-30T08:10:45Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T08:10:46Z', 'body': '陆陆续续找回了一些失联许久老同学/朋友的联系方式。\n\n打开他们的相册看曾经熟悉的面孔，感慨着那些没有被岁月这把杀猪刀蚀刻，不曾老去的容颜，脑海无缘由的就浮现出了这两个字。\n\n<!-- more -->\n\n![精致](https://shub.weiyan.tech/kgarden/2023/jingzhi.png)\n\n精致可以指容颜，更多时候还可以指生活的精致。这就是让自己过得更有品味，更加开心、舒适。而一些隐藏在日常里的小事，足以让我们变得精致。\n\n**爱好独特**、**事业坚持**、**感情独立**、**居家讲究** ...... 可以说，追求精致生活是睿智的自然体现，注重低碳环保是一份博雅的情怀，更是一种静水深流的境界。\n\n学会去发现身边的美，然后把它们整理好。\n\n让自己有一种追求去做。', 'bodyText': '陆陆续续找回了一些失联许久老同学/朋友的联系方式。\n打开他们的相册看曾经熟悉的面孔，感慨着那些没有被岁月这把杀猪刀蚀刻，不曾老去的容颜，脑海无缘由的就浮现出了这两个字。\n\n\n精致可以指容颜，更多时候还可以指生活的精致。这就是让自己过得更有品味，更加开心、舒适。而一些隐藏在日常里的小事，足以让我们变得精致。\n爱好独特、事业坚持、感情独立、居家讲究 ...... 可以说，追求精致生活是睿智的自然体现，注重低碳环保是一份博雅的情怀，更是一种静水深流的境界。\n学会去发现身边的美，然后把它们整理好。\n让自己有一种追求去做。', 'bodyHTML': '<p dir="auto">陆陆续续找回了一些失联许久老同学/朋友的联系方式。</p>\n<p dir="auto">打开他们的相册看曾经熟悉的面孔，感慨着那些没有被岁月这把杀猪刀蚀刻，不曾老去的容颜，脑海无缘由的就浮现出了这两个字。</p>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/5ce6db2eb489c699916a675b24b28d2c62987d5e949a08fcbc5c5a917638e7af/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032332f6a696e677a68692e706e67"><img src="https://camo.githubusercontent.com/5ce6db2eb489c699916a675b24b28d2c62987d5e949a08fcbc5c5a917638e7af/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032332f6a696e677a68692e706e67" alt="精致" data-canonical-src="https://shub.weiyan.tech/kgarden/2023/jingzhi.png" style="max-width: 100%;"></a></p>\n<p dir="auto">精致可以指容颜，更多时候还可以指生活的精致。这就是让自己过得更有品味，更加开心、舒适。而一些隐藏在日常里的小事，足以让我们变得精致。</p>\n<p dir="auto"><strong>爱好独特</strong>、<strong>事业坚持</strong>、<strong>感情独立</strong>、<strong>居家讲究</strong> ...... 可以说，追求精致生活是睿智的自然体现，注重低碳环保是一份博雅的情怀，更是一种静水深流的境界。</p>\n<p dir="auto">学会去发现身边的美，然后把它们整理好。</p>\n<p dir="auto">让自己有一种追求去做。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.5-语雀'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '羽毛球', 'number': 129, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/129', 'createdAt': '2025-04-30T08:10:44Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T08:10:46Z', 'body': '已经不记得自己最早接触羽毛球是什么时候了，但至少现在，它已经成为了我生命中最爱的运动之一。\n\n<!-- more -->\n\n初中的时候，学校的教师宿舍楼前刚好有一个露天羽毛球场——那应该是我第一次知道羽毛球这个运动，那时候偶尔看到有人在打也没有怎么太在意。\n\n到了高中，尤其印象深刻的是一中游泳池旁边的那几个露天羽毛球场。由于寄宿住校，周末无聊的时候偶尔会约上同桌过来打上几场，那时候对羽毛球规则也不怎么了解，而且对于握拍基本也不得要领，更不要说步法、战术之类的，一切都是为了娱乐而娱乐。那个时候也不知道羽毛球还能双打，就只会一味的一对一在那里瞎挥拍。同桌那时候住在城区，家境比我好很多，见多识广的，前后吊球的打法经常把我打的上气不接下气——这一幕至今还历历在目。有时候遇上下雨，露天羽毛球馆用不了，球场的主席台有时候也能成为我们 "挥洒汗水" 的好去处。\n\n到了大学，延续了高中时期的爱好（高二开始，毽子开始风靡校园，也是从那时候开始到高中生涯结束，毽子成为了我高中后半段生涯的最爱，并延续到了大学），为此还特意加入了学校的毽球社（虽然毽子在大学并不是那么的风靡，但也总能找到不少喜欢这项运动的同窗）。对于羽毛球大学时期见的最多的也还是室外的场地，也是在那时候才第一次知道羽毛球还有室内的场馆，但由于室内场馆不多（也就偶尔上体育课自由活动玩了几回）。\n\n真正开始接触羽毛球是在华大实习的时候。主管领导们羽毛球都打的很好，于是提议部门组织经常打球，才真正开始接触并迷恋上这一项运动。有几点印象非常深刻。\n\n- 第一次打球，不清楚大伙实力，私以为自己球技也能跟他们打上一打，没想到被啪啪啪打脸；\n- 打球就要好好打，要有打球的态度，虽然我们技术是业余的，但至少装备是专业的——**衣服、鞋子、拍子是必备**。领导的这句话我到现在都还记得，并成为了我后面打球的一个标准。\n\n由于当时华大是有工会，并且每周有两次内部员工的羽毛球组织，加上部门小组的组织，一路打过来让自己的球技不断的提升。\n\n再后来，回到广州了。\n\n值得庆幸的是把羽毛球的这项运动坚持了下来！而且兜兜转转认识了现在的这一群球友，从 2020 一直玩到今天，中间有一些球友小伙伴离开了这座城市却也有一些新认识的小伙伴加了进来。打球，吃饭，吹水，平淡无奇的生活平添了更多的人间烟火气息。\n\n羽毛球是一项神奇的运动，也是一项比较烧钱的运动。人家说，**没有一场球 (羽毛球) 是解决不了的，如果有那就再来一场。**深以为然，羽毛球打多了会上瘾，打完了这一场总期待着下一场，有熟悉经常一起打的小伙伴更是一种幸福。从另外一方面说，羽毛球的衣服、**拍子**、鞋子、**球**都是比较烧钱的必需品，尤其是拍子和球。\n\n个人最开始用的是胜利 [CHA-9500C](https://www.badmintoncn.com/eqm.php?a=view&eid=8504&mag_hide_progress=1)(挑战者 9500c) 这一款经典拍。\n![9500.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FiBcredXmnwJAdwBbK9LOnyVRMma.jpeg)\n\n> **胜利羽毛球拍 9500 各版本区别**\n> 9500 一共有四款，也就是 9500C、9500D、9500F 和 9500S，这四个版本各有什么区别呢？\n>\n> - 胜利 9500C 羽毛球拍和 9500D 羽毛球拍手感参数完全一致，只有涂装的不同！新涂装的 9500C，拍头涂装与 3 点 9 点与 9500 刚好相调换！其他地方几乎没有变化！\n> - 9500C 和 9500F 属于老款，相对来说中杆较粗，72 孔。\n> - 9500S 和 9500D 属于新款，中杆细，比较灵活，76 孔。\n> - 在胜利羽毛球拍 9500 中，9500D 和 9500S 是此系列里的最新款，相比 9500C 和 9500F 来说，中杆变的更细了，中杆更改为 6.8mm 纤细中杆，其他就是涂装上的改变了。\n\n后来，用过一段时间时间尤尼克斯的 NR-D11（现在好像已经下架了）。\n![79ad9ee19cb7b3ab45930ae15e606a5.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FmbE0yBR5I3RFnNiE-tHt-CoMjOq.jpeg)\n\n现在，用着这一个从 2021 年中从中羽 200 来块买来的尤尼克斯 [AX69EX](https://www.yonex.cn/home/index/mall_detail/id/138)，太阳橙，3U，拉线 27 磅，95 线，打起来依旧杠杠！\n![AX69EX.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FsD-QpRkiRubiSXvqLXSlZcmvhcR.jpeg)\n\n如今，疫情远去，又到打球的好时机，以球会友，希望能越打越好，健康快乐。', 'bodyText': '已经不记得自己最早接触羽毛球是什么时候了，但至少现在，它已经成为了我生命中最爱的运动之一。\n\n初中的时候，学校的教师宿舍楼前刚好有一个露天羽毛球场——那应该是我第一次知道羽毛球这个运动，那时候偶尔看到有人在打也没有怎么太在意。\n到了高中，尤其印象深刻的是一中游泳池旁边的那几个露天羽毛球场。由于寄宿住校，周末无聊的时候偶尔会约上同桌过来打上几场，那时候对羽毛球规则也不怎么了解，而且对于握拍基本也不得要领，更不要说步法、战术之类的，一切都是为了娱乐而娱乐。那个时候也不知道羽毛球还能双打，就只会一味的一对一在那里瞎挥拍。同桌那时候住在城区，家境比我好很多，见多识广的，前后吊球的打法经常把我打的上气不接下气——这一幕至今还历历在目。有时候遇上下雨，露天羽毛球馆用不了，球场的主席台有时候也能成为我们 "挥洒汗水" 的好去处。\n到了大学，延续了高中时期的爱好（高二开始，毽子开始风靡校园，也是从那时候开始到高中生涯结束，毽子成为了我高中后半段生涯的最爱，并延续到了大学），为此还特意加入了学校的毽球社（虽然毽子在大学并不是那么的风靡，但也总能找到不少喜欢这项运动的同窗）。对于羽毛球大学时期见的最多的也还是室外的场地，也是在那时候才第一次知道羽毛球还有室内的场馆，但由于室内场馆不多（也就偶尔上体育课自由活动玩了几回）。\n真正开始接触羽毛球是在华大实习的时候。主管领导们羽毛球都打的很好，于是提议部门组织经常打球，才真正开始接触并迷恋上这一项运动。有几点印象非常深刻。\n\n第一次打球，不清楚大伙实力，私以为自己球技也能跟他们打上一打，没想到被啪啪啪打脸；\n打球就要好好打，要有打球的态度，虽然我们技术是业余的，但至少装备是专业的——衣服、鞋子、拍子是必备。领导的这句话我到现在都还记得，并成为了我后面打球的一个标准。\n\n由于当时华大是有工会，并且每周有两次内部员工的羽毛球组织，加上部门小组的组织，一路打过来让自己的球技不断的提升。\n再后来，回到广州了。\n值得庆幸的是把羽毛球的这项运动坚持了下来！而且兜兜转转认识了现在的这一群球友，从 2020 一直玩到今天，中间有一些球友小伙伴离开了这座城市却也有一些新认识的小伙伴加了进来。打球，吃饭，吹水，平淡无奇的生活平添了更多的人间烟火气息。\n羽毛球是一项神奇的运动，也是一项比较烧钱的运动。人家说，**没有一场球 (羽毛球) 是解决不了的，如果有那就再来一场。**深以为然，羽毛球打多了会上瘾，打完了这一场总期待着下一场，有熟悉经常一起打的小伙伴更是一种幸福。从另外一方面说，羽毛球的衣服、拍子、鞋子、球都是比较烧钱的必需品，尤其是拍子和球。\n个人最开始用的是胜利 CHA-9500C(挑战者 9500c) 这一款经典拍。\n\n\n胜利羽毛球拍 9500 各版本区别\n9500 一共有四款，也就是 9500C、9500D、9500F 和 9500S，这四个版本各有什么区别呢？\n\n胜利 9500C 羽毛球拍和 9500D 羽毛球拍手感参数完全一致，只有涂装的不同！新涂装的 9500C，拍头涂装与 3 点 9 点与 9500 刚好相调换！其他地方几乎没有变化！\n9500C 和 9500F 属于老款，相对来说中杆较粗，72 孔。\n9500S 和 9500D 属于新款，中杆细，比较灵活，76 孔。\n在胜利羽毛球拍 9500 中，9500D 和 9500S 是此系列里的最新款，相比 9500C 和 9500F 来说，中杆变的更细了，中杆更改为 6.8mm 纤细中杆，其他就是涂装上的改变了。\n\n\n后来，用过一段时间时间尤尼克斯的 NR-D11（现在好像已经下架了）。\n\n现在，用着这一个从 2021 年中从中羽 200 来块买来的尤尼克斯 AX69EX，太阳橙，3U，拉线 27 磅，95 线，打起来依旧杠杠！\n\n如今，疫情远去，又到打球的好时机，以球会友，希望能越打越好，健康快乐。', 'bodyHTML': '<p dir="auto">已经不记得自己最早接触羽毛球是什么时候了，但至少现在，它已经成为了我生命中最爱的运动之一。</p>\n\n<p dir="auto">初中的时候，学校的教师宿舍楼前刚好有一个露天羽毛球场——那应该是我第一次知道羽毛球这个运动，那时候偶尔看到有人在打也没有怎么太在意。</p>\n<p dir="auto">到了高中，尤其印象深刻的是一中游泳池旁边的那几个露天羽毛球场。由于寄宿住校，周末无聊的时候偶尔会约上同桌过来打上几场，那时候对羽毛球规则也不怎么了解，而且对于握拍基本也不得要领，更不要说步法、战术之类的，一切都是为了娱乐而娱乐。那个时候也不知道羽毛球还能双打，就只会一味的一对一在那里瞎挥拍。同桌那时候住在城区，家境比我好很多，见多识广的，前后吊球的打法经常把我打的上气不接下气——这一幕至今还历历在目。有时候遇上下雨，露天羽毛球馆用不了，球场的主席台有时候也能成为我们 "挥洒汗水" 的好去处。</p>\n<p dir="auto">到了大学，延续了高中时期的爱好（高二开始，毽子开始风靡校园，也是从那时候开始到高中生涯结束，毽子成为了我高中后半段生涯的最爱，并延续到了大学），为此还特意加入了学校的毽球社（虽然毽子在大学并不是那么的风靡，但也总能找到不少喜欢这项运动的同窗）。对于羽毛球大学时期见的最多的也还是室外的场地，也是在那时候才第一次知道羽毛球还有室内的场馆，但由于室内场馆不多（也就偶尔上体育课自由活动玩了几回）。</p>\n<p dir="auto">真正开始接触羽毛球是在华大实习的时候。主管领导们羽毛球都打的很好，于是提议部门组织经常打球，才真正开始接触并迷恋上这一项运动。有几点印象非常深刻。</p>\n<ul dir="auto">\n<li>第一次打球，不清楚大伙实力，私以为自己球技也能跟他们打上一打，没想到被啪啪啪打脸；</li>\n<li>打球就要好好打，要有打球的态度，虽然我们技术是业余的，但至少装备是专业的——<strong>衣服、鞋子、拍子是必备</strong>。领导的这句话我到现在都还记得，并成为了我后面打球的一个标准。</li>\n</ul>\n<p dir="auto">由于当时华大是有工会，并且每周有两次内部员工的羽毛球组织，加上部门小组的组织，一路打过来让自己的球技不断的提升。</p>\n<p dir="auto">再后来，回到广州了。</p>\n<p dir="auto">值得庆幸的是把羽毛球的这项运动坚持了下来！而且兜兜转转认识了现在的这一群球友，从 2020 一直玩到今天，中间有一些球友小伙伴离开了这座城市却也有一些新认识的小伙伴加了进来。打球，吃饭，吹水，平淡无奇的生活平添了更多的人间烟火气息。</p>\n<p dir="auto">羽毛球是一项神奇的运动，也是一项比较烧钱的运动。人家说，**没有一场球 (羽毛球) 是解决不了的，如果有那就再来一场。**深以为然，羽毛球打多了会上瘾，打完了这一场总期待着下一场，有熟悉经常一起打的小伙伴更是一种幸福。从另外一方面说，羽毛球的衣服、<strong>拍子</strong>、鞋子、<strong>球</strong>都是比较烧钱的必需品，尤其是拍子和球。</p>\n<p dir="auto">个人最开始用的是胜利 <a href="https://www.badmintoncn.com/eqm.php?a=view&amp;eid=8504&amp;mag_hide_progress=1" rel="nofollow">CHA-9500C</a>(挑战者 9500c) 这一款经典拍。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/060f73e076cbe778140ee4d526472ef61302e24fef0a31384b68dab4c6023f4b/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46694263726564586d6e774a41647742624b394c4f6e7956524d6d612e6a706567"><img src="https://camo.githubusercontent.com/060f73e076cbe778140ee4d526472ef61302e24fef0a31384b68dab4c6023f4b/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46694263726564586d6e774a41647742624b394c4f6e7956524d6d612e6a706567" alt="9500.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FiBcredXmnwJAdwBbK9LOnyVRMma.jpeg" style="max-width: 100%;"></a></p>\n<blockquote>\n<p dir="auto"><strong>胜利羽毛球拍 9500 各版本区别</strong><br>\n9500 一共有四款，也就是 9500C、9500D、9500F 和 9500S，这四个版本各有什么区别呢？</p>\n<ul dir="auto">\n<li>胜利 9500C 羽毛球拍和 9500D 羽毛球拍手感参数完全一致，只有涂装的不同！新涂装的 9500C，拍头涂装与 3 点 9 点与 9500 刚好相调换！其他地方几乎没有变化！</li>\n<li>9500C 和 9500F 属于老款，相对来说中杆较粗，72 孔。</li>\n<li>9500S 和 9500D 属于新款，中杆细，比较灵活，76 孔。</li>\n<li>在胜利羽毛球拍 9500 中，9500D 和 9500S 是此系列里的最新款，相比 9500C 和 9500F 来说，中杆变的更细了，中杆更改为 6.8mm 纤细中杆，其他就是涂装上的改变了。</li>\n</ul>\n</blockquote>\n<p dir="auto">后来，用过一段时间时间尤尼克斯的 NR-D11（现在好像已经下架了）。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b174a13b8d4b621daec8c01116b9b9adfe9a42cd2bcd66023190eb734ce093a7/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466d62453079425235493352466e4e69452d7448742d436f4d6a4f712e6a706567"><img src="https://camo.githubusercontent.com/b174a13b8d4b621daec8c01116b9b9adfe9a42cd2bcd66023190eb734ce093a7/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466d62453079425235493352466e4e69452d7448742d436f4d6a4f712e6a706567" alt="79ad9ee19cb7b3ab45930ae15e606a5.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FmbE0yBR5I3RFnNiE-tHt-CoMjOq.jpeg" style="max-width: 100%;"></a></p>\n<p dir="auto">现在，用着这一个从 2021 年中从中羽 200 来块买来的尤尼克斯 <a href="https://www.yonex.cn/home/index/mall_detail/id/138" rel="nofollow">AX69EX</a>，太阳橙，3U，拉线 27 磅，95 线，打起来依旧杠杠！<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/4945a69ebb06de81fd616d99a0670d3c27d341574c75de6f8c61c4aa7c319cf9/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4673442d5170526b6952756269535876714c58536c5a636d766863522e6a706567"><img src="https://camo.githubusercontent.com/4945a69ebb06de81fd616d99a0670d3c27d341574c75de6f8c61c4aa7c319cf9/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4673442d5170526b6952756269535876714c58536c5a636d766863522e6a706567" alt="AX69EX.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FsD-QpRkiRubiSXvqLXSlZcmvhcR.jpeg" style="max-width: 100%;"></a></p>\n<p dir="auto">如今，疫情远去，又到打球的好时机，以球会友，希望能越打越好，健康快乐。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.5-语雀'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': 'All in Yuque', 'number': 128, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/128', 'createdAt': '2025-04-30T08:10:43Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T08:10:44Z', 'body': '语雀用了这么多年，有太多太多的东西保存在语雀了，这两天一直都在思考 All in Yuque 的这个问题。\n\n想先聊一下，为什么不再折腾个人的独立博客了。    \n\n<!-- more -->\n\n首先，独立博客的选择可以有很多，WordPress、Hexo、Jeykll、Hugo ......，每一次都是先被某一个主题（自己也在 [博客 | 那些好看有内涵的博客与模板](https://www.yuque.com/shenweiyan/wow/qzt4ul?view=doc_embed) 里面搜集了一些）吸引住，费了九牛二虎之力搭建起来，更新一段时间文章；然后又被其他的主题或者框架吸引，接着继续去折腾；反反复复，中间耗费了大量的时间，累计沉淀的文档知识反而不多，有种丢了西瓜拣芝麻的感觉。    \n\n其次，独立博客本身的限制。主要在于没法满足私有+分享的需求，大多独立博客的功能在于公开分享，私有文档的功能极其薄弱甚至根本没有。     \n\n第三，基本上从 2018 年以来，个人的所有知识文档就转移到语雀了。曾几何时，受[谢益辉老师博客](https://yihui.org/)的影响，自己也折腾了一个 [ICS-Hugo-Theme](https://github.com/shenweiyan/ICS-Hugo-Theme) 的 Hugo 主题，而基于这个主题的[个人独立博客](https://www.shumlab.com/)现在基本变成存档的状态了，只是有空的时候会偶尔去折腾更新一下。     \n\n第四，GitHub 上有一个[中文独立博客](https://github.com/timqian/chinese-independent-blogs)列表的项目，很不错，也很佩服那些十年如一日更新的人——他们给我的一个启示就是专注积累和沉淀，主题框架还是相对次要的(不值得花太多时间去折腾)。[十年之约](https://www.foreverblog.cn/) 和 [BlogFinder](https://bf.zzxworld.com/) 是比较出名的社群，稳定且用户量大。这些社群有自己的交流平台，帮助作者认识更多的人。\n\n也简单聊一下，为什么放弃了其他的一些如**博客园**、**掘金**之类的平台（CSDN 就算了，乌烟瘴气的）。     \n\n这些平台很大的一个特色是社区氛围挺好，对于互联网搜索分享也有一定优势，但是对私有文档文档支持很差，这也是我放弃的主要原因；其次是编辑体验也一般。     \n\n说到这里，顺便提一下博客园——个人加入博客园（[https://www.cnblogs.com/shenweiyan/](https://www.cnblogs.com/shenweiyan/)）也已经有 8 年多，对博客园的写作氛围和几十年如一日纯粹无广告的态度相当赞赏，但私有文档的支持的确也基本等于零（也许是我没有找到正确的打开方式吧）。\n\n最后，回到今天的话题。     \n\nAll in Yuque 其实就目前来说是可以的，自己一直以来也基本上这么干了，只是还有些地方不够满意而已。\n\n例如，**小记**，中规中矩但贵在编辑器支持的样式多；眼馋 Flomo 的 UI 简洁和逻辑清晰，但人家不支持插入代码。\n\n例如，**知识库**，编辑体验已经很好了（虽然还有可以做得更好的细节，如 Web 端编辑同时展示左边大纲），但最大的遗憾还是互联网比较难搜索到语雀的内容（好像目前无能为力）。\n还要吐槽一下知识库文档的段落距离——跟行距相似度太高了，简直分辨不出来——看的好难受！空一行行距又太高——我好难 😭\n\n例如，存量的**话题知识库**，极好的一个知识库类型，可惜不能按照标题名称排序（相当简单的一个小功能，却一拖再拖，未能上线）；嵌入语雀内容在话题知识库知识库中也不如人意，最起码渲染速度就有点让人抓狂了；还有最坑的一点，话题知识库不能插入本地视频！\n\n例如，**逛逛**，能看的东西好像太少了，也不能刷新换一批；另外还有一个感觉（不知道是不是我的错觉），就是语雀对于前端、设计、以及一些方法论的东西尤其看重，逛逛/推荐里面很多这些方面的文档内容，其他方向的内容极少。', 'bodyText': '语雀用了这么多年，有太多太多的东西保存在语雀了，这两天一直都在思考 All in Yuque 的这个问题。\n想先聊一下，为什么不再折腾个人的独立博客了。\n\n首先，独立博客的选择可以有很多，WordPress、Hexo、Jeykll、Hugo ......，每一次都是先被某一个主题（自己也在 博客 | 那些好看有内涵的博客与模板 里面搜集了一些）吸引住，费了九牛二虎之力搭建起来，更新一段时间文章；然后又被其他的主题或者框架吸引，接着继续去折腾；反反复复，中间耗费了大量的时间，累计沉淀的文档知识反而不多，有种丢了西瓜拣芝麻的感觉。\n其次，独立博客本身的限制。主要在于没法满足私有+分享的需求，大多独立博客的功能在于公开分享，私有文档的功能极其薄弱甚至根本没有。\n第三，基本上从 2018 年以来，个人的所有知识文档就转移到语雀了。曾几何时，受谢益辉老师博客的影响，自己也折腾了一个 ICS-Hugo-Theme 的 Hugo 主题，而基于这个主题的个人独立博客现在基本变成存档的状态了，只是有空的时候会偶尔去折腾更新一下。\n第四，GitHub 上有一个中文独立博客列表的项目，很不错，也很佩服那些十年如一日更新的人——他们给我的一个启示就是专注积累和沉淀，主题框架还是相对次要的(不值得花太多时间去折腾)。十年之约 和 BlogFinder 是比较出名的社群，稳定且用户量大。这些社群有自己的交流平台，帮助作者认识更多的人。\n也简单聊一下，为什么放弃了其他的一些如博客园、掘金之类的平台（CSDN 就算了，乌烟瘴气的）。\n这些平台很大的一个特色是社区氛围挺好，对于互联网搜索分享也有一定优势，但是对私有文档文档支持很差，这也是我放弃的主要原因；其次是编辑体验也一般。\n说到这里，顺便提一下博客园——个人加入博客园（https://www.cnblogs.com/shenweiyan/）也已经有 8 年多，对博客园的写作氛围和几十年如一日纯粹无广告的态度相当赞赏，但私有文档的支持的确也基本等于零（也许是我没有找到正确的打开方式吧）。\n最后，回到今天的话题。\nAll in Yuque 其实就目前来说是可以的，自己一直以来也基本上这么干了，只是还有些地方不够满意而已。\n例如，小记，中规中矩但贵在编辑器支持的样式多；眼馋 Flomo 的 UI 简洁和逻辑清晰，但人家不支持插入代码。\n例如，知识库，编辑体验已经很好了（虽然还有可以做得更好的细节，如 Web 端编辑同时展示左边大纲），但最大的遗憾还是互联网比较难搜索到语雀的内容（好像目前无能为力）。\n还要吐槽一下知识库文档的段落距离——跟行距相似度太高了，简直分辨不出来——看的好难受！空一行行距又太高——我好难 😭\n例如，存量的话题知识库，极好的一个知识库类型，可惜不能按照标题名称排序（相当简单的一个小功能，却一拖再拖，未能上线）；嵌入语雀内容在话题知识库知识库中也不如人意，最起码渲染速度就有点让人抓狂了；还有最坑的一点，话题知识库不能插入本地视频！\n例如，逛逛，能看的东西好像太少了，也不能刷新换一批；另外还有一个感觉（不知道是不是我的错觉），就是语雀对于前端、设计、以及一些方法论的东西尤其看重，逛逛/推荐里面很多这些方面的文档内容，其他方向的内容极少。', 'bodyHTML': '<p dir="auto">语雀用了这么多年，有太多太多的东西保存在语雀了，这两天一直都在思考 All in Yuque 的这个问题。</p>\n<p dir="auto">想先聊一下，为什么不再折腾个人的独立博客了。</p>\n\n<p dir="auto">首先，独立博客的选择可以有很多，WordPress、Hexo、Jeykll、Hugo ......，每一次都是先被某一个主题（自己也在 <a href="https://www.yuque.com/shenweiyan/wow/qzt4ul?view=doc_embed" rel="nofollow">博客 | 那些好看有内涵的博客与模板</a> 里面搜集了一些）吸引住，费了九牛二虎之力搭建起来，更新一段时间文章；然后又被其他的主题或者框架吸引，接着继续去折腾；反反复复，中间耗费了大量的时间，累计沉淀的文档知识反而不多，有种丢了西瓜拣芝麻的感觉。</p>\n<p dir="auto">其次，独立博客本身的限制。主要在于没法满足私有+分享的需求，大多独立博客的功能在于公开分享，私有文档的功能极其薄弱甚至根本没有。</p>\n<p dir="auto">第三，基本上从 2018 年以来，个人的所有知识文档就转移到语雀了。曾几何时，受<a href="https://yihui.org/" rel="nofollow">谢益辉老师博客</a>的影响，自己也折腾了一个 <a href="https://github.com/shenweiyan/ICS-Hugo-Theme">ICS-Hugo-Theme</a> 的 Hugo 主题，而基于这个主题的<a href="https://www.shumlab.com/" rel="nofollow">个人独立博客</a>现在基本变成存档的状态了，只是有空的时候会偶尔去折腾更新一下。</p>\n<p dir="auto">第四，GitHub 上有一个<a href="https://github.com/timqian/chinese-independent-blogs">中文独立博客</a>列表的项目，很不错，也很佩服那些十年如一日更新的人——他们给我的一个启示就是专注积累和沉淀，主题框架还是相对次要的(不值得花太多时间去折腾)。<a href="https://www.foreverblog.cn/" rel="nofollow">十年之约</a> 和 <a href="https://bf.zzxworld.com/" rel="nofollow">BlogFinder</a> 是比较出名的社群，稳定且用户量大。这些社群有自己的交流平台，帮助作者认识更多的人。</p>\n<p dir="auto">也简单聊一下，为什么放弃了其他的一些如<strong>博客园</strong>、<strong>掘金</strong>之类的平台（CSDN 就算了，乌烟瘴气的）。</p>\n<p dir="auto">这些平台很大的一个特色是社区氛围挺好，对于互联网搜索分享也有一定优势，但是对私有文档文档支持很差，这也是我放弃的主要原因；其次是编辑体验也一般。</p>\n<p dir="auto">说到这里，顺便提一下博客园——个人加入博客园（<a href="https://www.cnblogs.com/shenweiyan/" rel="nofollow">https://www.cnblogs.com/shenweiyan/</a>）也已经有 8 年多，对博客园的写作氛围和几十年如一日纯粹无广告的态度相当赞赏，但私有文档的支持的确也基本等于零（也许是我没有找到正确的打开方式吧）。</p>\n<p dir="auto">最后，回到今天的话题。</p>\n<p dir="auto">All in Yuque 其实就目前来说是可以的，自己一直以来也基本上这么干了，只是还有些地方不够满意而已。</p>\n<p dir="auto">例如，<strong>小记</strong>，中规中矩但贵在编辑器支持的样式多；眼馋 Flomo 的 UI 简洁和逻辑清晰，但人家不支持插入代码。</p>\n<p dir="auto">例如，<strong>知识库</strong>，编辑体验已经很好了（虽然还有可以做得更好的细节，如 Web 端编辑同时展示左边大纲），但最大的遗憾还是互联网比较难搜索到语雀的内容（好像目前无能为力）。<br>\n还要吐槽一下知识库文档的段落距离——跟行距相似度太高了，简直分辨不出来——看的好难受！空一行行距又太高——我好难 😭</p>\n<p dir="auto">例如，存量的<strong>话题知识库</strong>，极好的一个知识库类型，可惜不能按照标题名称排序（相当简单的一个小功能，却一拖再拖，未能上线）；嵌入语雀内容在话题知识库知识库中也不如人意，最起码渲染速度就有点让人抓狂了；还有最坑的一点，话题知识库不能插入本地视频！</p>\n<p dir="auto">例如，<strong>逛逛</strong>，能看的东西好像太少了，也不能刷新换一批；另外还有一个感觉（不知道是不是我的错觉），就是语雀对于前端、设计、以及一些方法论的东西尤其看重，逛逛/推荐里面很多这些方面的文档内容，其他方向的内容极少。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.5-语雀'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '新冠那点事', 'number': 127, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/127', 'createdAt': '2025-04-30T08:10:43Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T08:10:43Z', 'body': '距离 2022 年的圣诞也只剩下 4 天了 —— 2022 年的最后一个月是一个充满纷扰和闹心的灰色月！家庭永远是主旋律，只是有时候点点滴滴的琐事真是让人头大，身心俱疲。\n其次就是新冠放开后的一些经历。\n\n<!-- more -->\n\n## 珍惜\n\n从 12 月 1 日广州开始解封不用核酸开始，从核酸难、抢药（虽然自己没有加入抢药大军）备药、接种第四针、被羊群包围 ...... 的一堆经历算起，看着周围一个个的同事亲友先后加入羊群，自己一家人依然坚挺，相安无事，作为天选打工人，心底多少还有些侥幸的心理——该打球的时候一场不落，在做足预防情况下该出去玩还是继续出去 —— 只是暂时放弃了那些人多风险又大的场所。\n![871c3f9543ea508b375ad5609c408cc.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FqNT7d4e9nwmkYhHHM0AI5LaE57q.jpeg)\n![8d3ab4784f01d80fa7ef78ab9487a13.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/Fm5-9BT7zcBsr8brMDw2Fo6GfWjU.jpeg)\n\n![710f72f99338338f384828a6a49c402.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FlTU3NvkQH5CydjWBnvLq8eCldUw.jpeg)\n\n## 羊群小记\n\n记录一下感染后的一些感受。\n\n**2022 年 12 月 21 日，星期三，冬至前一天**\n醒来发现老妈咳嗽好几天今天愈发严重，于是老婆把奶奶和孩子的样本拿回去核酸检测 —— 奶奶阳了。真是应了那句话 ——“**最终大家其实都会被感染的，就是感染的时间长或早还是晚而已。**”之前一直想着如果感染了，其实也没必要过分担心，就当普通感冒处理即可，但真到了那个点还是有点紧张。\n\n**2022 年 12 月 22 日，星期四，传统冬至**\n但不幸的是我们一家全阳了：老婆孩子从晚上开始发烧+咳嗽，我也在咳但症状相对轻一些。于是给媳妇和孩子湿毛巾敷头降温——\n\n- 晚上睡觉总会惊醒——睡不踏实，小孩子每个 1、2 个小时就惊醒一次要起来喝水；\n- 媳妇低烧，头痛，发冷，扁桃体发炎，还来 M；\n\n**2022 年 12 月 23 日，星期五**\n照顾着孩子折腾了大半夜，我迷迷糊糊的到了第二天，还能挣扎着勉强去上班，头晕，全身酸痛，发冷+发烧，虽然中午在公司做了一次核酸，但其实也心知肚明逃不掉了。。。整个人也还是没啥精神头，大部分时间就想躺着。反正今天正好周五了，等休整完这个周末再说吧。\n到了晚上，实在扛不住头痛发烧头晕的滋味，吃了一片感康，才迷迷糊糊的睡去了。\n\n**2022 年 12 月 24 日，星期六，西方平安夜**\n周五在公司做的核酸结果出来了——正式加入羊群！\n晚上不时惊醒+依然的怕冷，喉咙干+咳嗽+疼痛；白天虽然症状略好，但依旧有些许发烧头晕的感觉，也提不起什么精神，总想着躺下来休息。\n相对前一天，喉咙的痰明显多了很多。\n好吧，再来一片感康吧 😢\n\n**2022 年 12 月 25 日，星期天，圣诞**\n算起来，这是感染新冠的第三天了。\n头痛发烧头晕的滋味终于是彻底消失了，喉咙干+咳嗽+痰多成了重点。\n——从丈母娘那里要了个偏方：**橘子肉上撒上少量的盐，蒸后吃**——颇有效果。\n\n**2022 年 12 月 26 日，星期一**\n第四天。\n依旧是喉咙干+咳嗽+痰多，但整个精神相对好很多了，明显感到好转。\n\n**2022 年 12 月 27 日，星期二**\n第五天。\n偶尔的咳嗽，痰也少了很多，自行做了抗原，已经快要看到胜利的曙光了。\n![8ed1181a14c2a22a42b0d6d2d32c5fd.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FhT2cjs390H5-wyIZilSm86cj9iC.jpeg)\n\n**2022 年 12 月 28 日，星期三**\n第六天。\n早上起来做了一次抗原，已经看到明显转阴！\n![4085e73e8cfefc93bc1be4d82fac2eb.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/Fl9OT9nj5TuksoGyrXNPaaGaWA6W.jpeg)\n![a534846014285c10c2d04f6dead516b.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/Fhwd0UAF_5J5m-1MygGo1LrxH77f.jpeg)\n\n——开始回去上班了。。。。。。\n\n## 后话\n\n虽说我也知道这个病毒有点狠，但是其传播范围和力度还是有点超乎自己的想象，几天时间就把全家老小都放倒了，实属匪夷所思。\n\n大家还是要多多注意和防护吧，希望大家都能健健康康，我们都能尽早回归正常的生活。', 'bodyText': '距离 2022 年的圣诞也只剩下 4 天了 —— 2022 年的最后一个月是一个充满纷扰和闹心的灰色月！家庭永远是主旋律，只是有时候点点滴滴的琐事真是让人头大，身心俱疲。\n其次就是新冠放开后的一些经历。\n\n珍惜\n从 12 月 1 日广州开始解封不用核酸开始，从核酸难、抢药（虽然自己没有加入抢药大军）备药、接种第四针、被羊群包围 ...... 的一堆经历算起，看着周围一个个的同事亲友先后加入羊群，自己一家人依然坚挺，相安无事，作为天选打工人，心底多少还有些侥幸的心理——该打球的时候一场不落，在做足预防情况下该出去玩还是继续出去 —— 只是暂时放弃了那些人多风险又大的场所。\n\n\n\n羊群小记\n记录一下感染后的一些感受。\n2022 年 12 月 21 日，星期三，冬至前一天\n醒来发现老妈咳嗽好几天今天愈发严重，于是老婆把奶奶和孩子的样本拿回去核酸检测 —— 奶奶阳了。真是应了那句话 ——“最终大家其实都会被感染的，就是感染的时间长或早还是晚而已。”之前一直想着如果感染了，其实也没必要过分担心，就当普通感冒处理即可，但真到了那个点还是有点紧张。\n2022 年 12 月 22 日，星期四，传统冬至\n但不幸的是我们一家全阳了：老婆孩子从晚上开始发烧+咳嗽，我也在咳但症状相对轻一些。于是给媳妇和孩子湿毛巾敷头降温——\n\n晚上睡觉总会惊醒——睡不踏实，小孩子每个 1、2 个小时就惊醒一次要起来喝水；\n媳妇低烧，头痛，发冷，扁桃体发炎，还来 M；\n\n2022 年 12 月 23 日，星期五\n照顾着孩子折腾了大半夜，我迷迷糊糊的到了第二天，还能挣扎着勉强去上班，头晕，全身酸痛，发冷+发烧，虽然中午在公司做了一次核酸，但其实也心知肚明逃不掉了。。。整个人也还是没啥精神头，大部分时间就想躺着。反正今天正好周五了，等休整完这个周末再说吧。\n到了晚上，实在扛不住头痛发烧头晕的滋味，吃了一片感康，才迷迷糊糊的睡去了。\n2022 年 12 月 24 日，星期六，西方平安夜\n周五在公司做的核酸结果出来了——正式加入羊群！\n晚上不时惊醒+依然的怕冷，喉咙干+咳嗽+疼痛；白天虽然症状略好，但依旧有些许发烧头晕的感觉，也提不起什么精神，总想着躺下来休息。\n相对前一天，喉咙的痰明显多了很多。\n好吧，再来一片感康吧 😢\n2022 年 12 月 25 日，星期天，圣诞\n算起来，这是感染新冠的第三天了。\n头痛发烧头晕的滋味终于是彻底消失了，喉咙干+咳嗽+痰多成了重点。\n——从丈母娘那里要了个偏方：橘子肉上撒上少量的盐，蒸后吃——颇有效果。\n2022 年 12 月 26 日，星期一\n第四天。\n依旧是喉咙干+咳嗽+痰多，但整个精神相对好很多了，明显感到好转。\n2022 年 12 月 27 日，星期二\n第五天。\n偶尔的咳嗽，痰也少了很多，自行做了抗原，已经快要看到胜利的曙光了。\n\n2022 年 12 月 28 日，星期三\n第六天。\n早上起来做了一次抗原，已经看到明显转阴！\n\n\n——开始回去上班了。。。。。。\n后话\n虽说我也知道这个病毒有点狠，但是其传播范围和力度还是有点超乎自己的想象，几天时间就把全家老小都放倒了，实属匪夷所思。\n大家还是要多多注意和防护吧，希望大家都能健健康康，我们都能尽早回归正常的生活。', 'bodyHTML': '<p dir="auto">距离 2022 年的圣诞也只剩下 4 天了 —— 2022 年的最后一个月是一个充满纷扰和闹心的灰色月！家庭永远是主旋律，只是有时候点点滴滴的琐事真是让人头大，身心俱疲。<br>\n其次就是新冠放开后的一些经历。</p>\n\n<h2 dir="auto">珍惜</h2>\n<p dir="auto">从 12 月 1 日广州开始解封不用核酸开始，从核酸难、抢药（虽然自己没有加入抢药大军）备药、接种第四针、被羊群包围 ...... 的一堆经历算起，看着周围一个个的同事亲友先后加入羊群，自己一家人依然坚挺，相安无事，作为天选打工人，心底多少还有些侥幸的心理——该打球的时候一场不落，在做足预防情况下该出去玩还是继续出去 —— 只是暂时放弃了那些人多风险又大的场所。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/d5574d90a99e2d38421c6ca352a436f215f5e762fedb391f02d443d2085c3ca9/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46714e5437643465396e776d6b596848484d304149354c61453537712e6a706567"><img src="https://camo.githubusercontent.com/d5574d90a99e2d38421c6ca352a436f215f5e762fedb391f02d443d2085c3ca9/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46714e5437643465396e776d6b596848484d304149354c61453537712e6a706567" alt="871c3f9543ea508b375ad5609c408cc.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FqNT7d4e9nwmkYhHHM0AI5LaE57q.jpeg" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/c1258406cf4ce2d9852c78a6b7c3d00c11ac57b1ce5564666ca03c6c9bbcb2f5/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466d352d394254377a634273723862724d447732466f364766576a552e6a706567"><img src="https://camo.githubusercontent.com/c1258406cf4ce2d9852c78a6b7c3d00c11ac57b1ce5564666ca03c6c9bbcb2f5/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466d352d394254377a634273723862724d447732466f364766576a552e6a706567" alt="8d3ab4784f01d80fa7ef78ab9487a13.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Fm5-9BT7zcBsr8brMDw2Fo6GfWjU.jpeg" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/9b140c61a38710b9f4ab7c1279658f893967a47247bb05ccc574989b979a23c7/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466c5455334e766b5148354379646a57426e764c713865436c6455772e6a706567"><img src="https://camo.githubusercontent.com/9b140c61a38710b9f4ab7c1279658f893967a47247bb05ccc574989b979a23c7/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466c5455334e766b5148354379646a57426e764c713865436c6455772e6a706567" alt="710f72f99338338f384828a6a49c402.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FlTU3NvkQH5CydjWBnvLq8eCldUw.jpeg" style="max-width: 100%;"></a></p>\n<h2 dir="auto">羊群小记</h2>\n<p dir="auto">记录一下感染后的一些感受。</p>\n<p dir="auto"><strong>2022 年 12 月 21 日，星期三，冬至前一天</strong><br>\n醒来发现老妈咳嗽好几天今天愈发严重，于是老婆把奶奶和孩子的样本拿回去核酸检测 —— 奶奶阳了。真是应了那句话 ——“<strong>最终大家其实都会被感染的，就是感染的时间长或早还是晚而已。</strong>”之前一直想着如果感染了，其实也没必要过分担心，就当普通感冒处理即可，但真到了那个点还是有点紧张。</p>\n<p dir="auto"><strong>2022 年 12 月 22 日，星期四，传统冬至</strong><br>\n但不幸的是我们一家全阳了：老婆孩子从晚上开始发烧+咳嗽，我也在咳但症状相对轻一些。于是给媳妇和孩子湿毛巾敷头降温——</p>\n<ul dir="auto">\n<li>晚上睡觉总会惊醒——睡不踏实，小孩子每个 1、2 个小时就惊醒一次要起来喝水；</li>\n<li>媳妇低烧，头痛，发冷，扁桃体发炎，还来 M；</li>\n</ul>\n<p dir="auto"><strong>2022 年 12 月 23 日，星期五</strong><br>\n照顾着孩子折腾了大半夜，我迷迷糊糊的到了第二天，还能挣扎着勉强去上班，头晕，全身酸痛，发冷+发烧，虽然中午在公司做了一次核酸，但其实也心知肚明逃不掉了。。。整个人也还是没啥精神头，大部分时间就想躺着。反正今天正好周五了，等休整完这个周末再说吧。<br>\n到了晚上，实在扛不住头痛发烧头晕的滋味，吃了一片感康，才迷迷糊糊的睡去了。</p>\n<p dir="auto"><strong>2022 年 12 月 24 日，星期六，西方平安夜</strong><br>\n周五在公司做的核酸结果出来了——正式加入羊群！<br>\n晚上不时惊醒+依然的怕冷，喉咙干+咳嗽+疼痛；白天虽然症状略好，但依旧有些许发烧头晕的感觉，也提不起什么精神，总想着躺下来休息。<br>\n相对前一天，喉咙的痰明显多了很多。<br>\n好吧，再来一片感康吧 😢</p>\n<p dir="auto"><strong>2022 年 12 月 25 日，星期天，圣诞</strong><br>\n算起来，这是感染新冠的第三天了。<br>\n头痛发烧头晕的滋味终于是彻底消失了，喉咙干+咳嗽+痰多成了重点。<br>\n——从丈母娘那里要了个偏方：<strong>橘子肉上撒上少量的盐，蒸后吃</strong>——颇有效果。</p>\n<p dir="auto"><strong>2022 年 12 月 26 日，星期一</strong><br>\n第四天。<br>\n依旧是喉咙干+咳嗽+痰多，但整个精神相对好很多了，明显感到好转。</p>\n<p dir="auto"><strong>2022 年 12 月 27 日，星期二</strong><br>\n第五天。<br>\n偶尔的咳嗽，痰也少了很多，自行做了抗原，已经快要看到胜利的曙光了。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/139f16aa2fb3d1683cfbb2dd9bf68977c7e917223573dda3a19c643c46a4eb32/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46685432636a7333393048352d7779495a696c536d3836636a3969432e6a706567"><img src="https://camo.githubusercontent.com/139f16aa2fb3d1683cfbb2dd9bf68977c7e917223573dda3a19c643c46a4eb32/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46685432636a7333393048352d7779495a696c536d3836636a3969432e6a706567" alt="8ed1181a14c2a22a42b0d6d2d32c5fd.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FhT2cjs390H5-wyIZilSm86cj9iC.jpeg" style="max-width: 100%;"></a></p>\n<p dir="auto"><strong>2022 年 12 月 28 日，星期三</strong><br>\n第六天。<br>\n早上起来做了一次抗原，已经看到明显转阴！<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/c5237db5327d19735c2fb274d7a1fe094f2b8c47b2f48d4196f44c5a277ad8a7/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466c394f54396e6a3554756b736f477972584e5061614761574136572e6a706567"><img src="https://camo.githubusercontent.com/c5237db5327d19735c2fb274d7a1fe094f2b8c47b2f48d4196f44c5a277ad8a7/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466c394f54396e6a3554756b736f477972584e5061614761574136572e6a706567" alt="4085e73e8cfefc93bc1be4d82fac2eb.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Fl9OT9nj5TuksoGyrXNPaaGaWA6W.jpeg" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/88550a3c0f2b9fccef5703c1bc23325e2eaabd1ddb51b2e6578975ac3378b1c8/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46687764305541465f354a356d2d314d7967476f314c7278483737662e6a706567"><img src="https://camo.githubusercontent.com/88550a3c0f2b9fccef5703c1bc23325e2eaabd1ddb51b2e6578975ac3378b1c8/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46687764305541465f354a356d2d314d7967476f314c7278483737662e6a706567" alt="a534846014285c10c2d04f6dead516b.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Fhwd0UAF_5J5m-1MygGo1LrxH77f.jpeg" style="max-width: 100%;"></a></p>\n<p dir="auto">——开始回去上班了。。。。。。</p>\n<h2 dir="auto">后话</h2>\n<p dir="auto">虽说我也知道这个病毒有点狠，但是其传播范围和力度还是有点超乎自己的想象，几天时间就把全家老小都放倒了，实属匪夷所思。</p>\n<p dir="auto">大家还是要多多注意和防护吧，希望大家都能健健康康，我们都能尽早回归正常的生活。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.5-语雀'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '2022 年卡塔尔世界杯', 'number': 126, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/126', 'createdAt': '2025-04-30T08:10:42Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T08:10:43Z', 'body': '2022 年 12 月 18 日，有幸从头到尾看完了这一场精彩而刺激的世界杯决赛！！！\n\n<!-- more -->\n\n> **📢 阿根廷冠军！**\n>\n> - **当地时间 2022 年 12 月 18 日，卡塔尔卢塞尔城 2022 卡塔尔世界杯决赛，阿根廷 3-3 法国（点球 4-2）！**\n> - [卡塔尔世界杯决赛算不算的上是有史以来最精彩的世界杯决赛？](https://www.zhihu.com/question/573022232) - 知乎\n\n诸神黄昏，众神谢幕，最后一舞！一代人终将老去，但总有人正年轻！\n\n总裁 C 罗，内少内马尔，魔笛莫德里奇，武僧佩佩，梅老板梅西大，二娃穆勒，苏牙苏亚雷斯，大圣贝尔，本泽霸王龙本泽马，天使迪马利亚......\n\n诸神的黄昏带走了我们终将逝去的青春，少壮派的崛起又将镌刻他们喷薄的青春。\n\n冠军并不总是踢得漂亮华丽，而是摸爬滚打，瑕瑜互见磨出来的。所谓冠军，得能赢难看的比赛。\n![db1a900752bdcd6f9e01e5205b04592.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FkIaltEbQhb2b7VfLeU5zACnb7V3.jpeg) ![4d93bd34e765cde520f55f967fa125e.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FgZDzx8D139g-zIBiyqQRiZbeoTP.jpeg) ![64379daa896155e07e4c6765978912d.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FsLzXEtELxz2ZWRztvfXW7Cp0wc5.jpeg) ![d707ddf6cd0a1344a87abb6bfc92dc4.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FnhvPBlAAJ8Ugpgnng_qigd2hY90.jpeg)\n许多年之后，人们将会回想起，2022 年，卡塔尔卢塞尔球场，见证了第三代球王梅西一个英雄般伟大宏伟的登基仪式。\n![](https://shub.weiyan.tech/yuque/elog-notebook-img/FnOmHGipGvbSj2W8T5888fOvKj4H.jpeg)\n![639f6ec4f3e82afe2b2a21cf.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FgpnSQ6T-y3a1H2pzo7GkfT0PnU6.jpeg)\n![当地时间2022年12月18日，卡塔尔卢塞尔城，2022卡塔尔世界杯决赛，阿根廷3-3法国（点球4-2）。（图｜视觉中国）](https://shub.weiyan.tech/yuque/elog-notebook-img/FpBazmmmMeqI0jI_GLYIfZrbinU6.jpeg "当地时间2022年12月18日，卡塔尔卢塞尔城，2022卡塔尔世界杯决赛，阿根廷3-3法国（点球4-2）。（图｜视觉中国）")', 'bodyText': '2022 年 12 月 18 日，有幸从头到尾看完了这一场精彩而刺激的世界杯决赛！！！\n\n\n📢 阿根廷冠军！\n\n当地时间 2022 年 12 月 18 日，卡塔尔卢塞尔城 2022 卡塔尔世界杯决赛，阿根廷 3-3 法国（点球 4-2）！\n卡塔尔世界杯决赛算不算的上是有史以来最精彩的世界杯决赛？ - 知乎\n\n\n诸神黄昏，众神谢幕，最后一舞！一代人终将老去，但总有人正年轻！\n总裁 C 罗，内少内马尔，魔笛莫德里奇，武僧佩佩，梅老板梅西大，二娃穆勒，苏牙苏亚雷斯，大圣贝尔，本泽霸王龙本泽马，天使迪马利亚......\n诸神的黄昏带走了我们终将逝去的青春，少壮派的崛起又将镌刻他们喷薄的青春。\n冠军并不总是踢得漂亮华丽，而是摸爬滚打，瑕瑜互见磨出来的。所谓冠军，得能赢难看的比赛。\n   \n许多年之后，人们将会回想起，2022 年，卡塔尔卢塞尔球场，见证了第三代球王梅西一个英雄般伟大宏伟的登基仪式。', 'bodyHTML': '<p dir="auto">2022 年 12 月 18 日，有幸从头到尾看完了这一场精彩而刺激的世界杯决赛！！！</p>\n\n<blockquote>\n<p dir="auto"><strong>📢 阿根廷冠军！</strong></p>\n<ul dir="auto">\n<li><strong>当地时间 2022 年 12 月 18 日，卡塔尔卢塞尔城 2022 卡塔尔世界杯决赛，阿根廷 3-3 法国（点球 4-2）！</strong></li>\n<li><a href="https://www.zhihu.com/question/573022232" rel="nofollow">卡塔尔世界杯决赛算不算的上是有史以来最精彩的世界杯决赛？</a> - 知乎</li>\n</ul>\n</blockquote>\n<p dir="auto">诸神黄昏，众神谢幕，最后一舞！一代人终将老去，但总有人正年轻！</p>\n<p dir="auto">总裁 C 罗，内少内马尔，魔笛莫德里奇，武僧佩佩，梅老板梅西大，二娃穆勒，苏牙苏亚雷斯，大圣贝尔，本泽霸王龙本泽马，天使迪马利亚......</p>\n<p dir="auto">诸神的黄昏带走了我们终将逝去的青春，少壮派的崛起又将镌刻他们喷薄的青春。</p>\n<p dir="auto">冠军并不总是踢得漂亮华丽，而是摸爬滚打，瑕瑜互见磨出来的。所谓冠军，得能赢难看的比赛。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/64b814a73abd3a24b2b2b690b92173715116a59feb22858c152700015f0d6ea7/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466b49616c74456251686232623756664c6555357a41436e623756332e6a706567"><img src="https://camo.githubusercontent.com/64b814a73abd3a24b2b2b690b92173715116a59feb22858c152700015f0d6ea7/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466b49616c74456251686232623756664c6555357a41436e623756332e6a706567" alt="db1a900752bdcd6f9e01e5205b04592.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FkIaltEbQhb2b7VfLeU5zACnb7V3.jpeg" style="max-width: 100%;"></a> <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/725e82f61b041fa4072ceb99a9b94e4b65b196af68ac7cff205b1ffe61b41c2e/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46675a447a783844313339672d7a49426979715152695a62656f54502e6a706567"><img src="https://camo.githubusercontent.com/725e82f61b041fa4072ceb99a9b94e4b65b196af68ac7cff205b1ffe61b41c2e/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46675a447a783844313339672d7a49426979715152695a62656f54502e6a706567" alt="4d93bd34e765cde520f55f967fa125e.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FgZDzx8D139g-zIBiyqQRiZbeoTP.jpeg" style="max-width: 100%;"></a> <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b212396a00cb7c43b91ea6ea371a9ba3a614a5674673978a64a6985dfc2eb591/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46734c7a584574454c787a325a57527a7476665857374370307763352e6a706567"><img src="https://camo.githubusercontent.com/b212396a00cb7c43b91ea6ea371a9ba3a614a5674673978a64a6985dfc2eb591/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46734c7a584574454c787a325a57527a7476665857374370307763352e6a706567" alt="64379daa896155e07e4c6765978912d.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FsLzXEtELxz2ZWRztvfXW7Cp0wc5.jpeg" style="max-width: 100%;"></a> <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/44bbf9e9fb2909dca3a062033f544408a8ac1e20077d45f1e4ab7bad642c3492/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466e687650426c41414a38556770676e6e675f7169676432685939302e6a706567"><img src="https://camo.githubusercontent.com/44bbf9e9fb2909dca3a062033f544408a8ac1e20077d45f1e4ab7bad642c3492/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466e687650426c41414a38556770676e6e675f7169676432685939302e6a706567" alt="d707ddf6cd0a1344a87abb6bfc92dc4.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FnhvPBlAAJ8Ugpgnng_qigd2hY90.jpeg" style="max-width: 100%;"></a><br>\n许多年之后，人们将会回想起，2022 年，卡塔尔卢塞尔球场，见证了第三代球王梅西一个英雄般伟大宏伟的登基仪式。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/d54e235c985df7c7fb4d819aa3b679d7916961eec9341fd7aa31e5aa8c13a1b7/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466e4f6d48476970477662536a3257385435383838664f764b6a34482e6a706567"><img src="https://camo.githubusercontent.com/d54e235c985df7c7fb4d819aa3b679d7916961eec9341fd7aa31e5aa8c13a1b7/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466e4f6d48476970477662536a3257385435383838664f764b6a34482e6a706567" alt="" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FnOmHGipGvbSj2W8T5888fOvKj4H.jpeg" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/372f334f8c17a505e3d7b1521f85d2e72cb1892115fe3f5cf11cebced3d7c943/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4667706e535136542d793361314832707a6f37476b665430506e55362e6a706567"><img src="https://camo.githubusercontent.com/372f334f8c17a505e3d7b1521f85d2e72cb1892115fe3f5cf11cebced3d7c943/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4667706e535136542d793361314832707a6f37476b665430506e55362e6a706567" alt="639f6ec4f3e82afe2b2a21cf.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FgpnSQ6T-y3a1H2pzo7GkfT0PnU6.jpeg" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/168614a917389a59b23c2aa93bb734ee29c1a11296b40432ed3178abb3d1c389/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f467042617a6d6d6d4d657149306a495f474c5949665a7262696e55362e6a706567"><img src="https://camo.githubusercontent.com/168614a917389a59b23c2aa93bb734ee29c1a11296b40432ed3178abb3d1c389/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f467042617a6d6d6d4d657149306a495f474c5949665a7262696e55362e6a706567" alt="当地时间2022年12月18日，卡塔尔卢塞尔城，2022卡塔尔世界杯决赛，阿根廷3-3法国（点球4-2）。（图｜视觉中国）" title="当地时间2022年12月18日，卡塔尔卢塞尔城，2022卡塔尔世界杯决赛，阿根廷3-3法国（点球4-2）。（图｜视觉中国）" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FpBazmmmMeqI0jI_GLYIfZrbinU6.jpeg" style="max-width: 100%;"></a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.5-语雀'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '笔记的那些事', 'number': 125, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/125', 'createdAt': '2025-04-30T08:10:41Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T08:10:42Z', 'body': '这些年来笔记换的比较少——主要是从 2018 年以来，一直用语雀作为主力笔记懒得去折腾了。但是到了 2022 年，事情似乎出现了一些转变。\n\n<!-- more -->\n\n![](https://1.bp.blogspot.com/-sP6euyqs1pc/XUMAy04i4gI/AAAAAAAGpAM/MThDM11XjO8B3WoScwLaGsvnz_uVhaN-QCLcBGAs/s1600/StockSnap_TBJ9OPDGMK%2B%255B2%255D.jpg#from=url&id=Xwf5S&originHeight=903&originWidth=1600&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n首先，是语雀的个人用户的话题知识库下线——并入了空间；\n其次，语雀的问题反馈，由原来的公开可讨论转变成了类似私信一样的单向反馈；\n第三，语雀 2022 年秋季知识库大会的会员收费风波！——语雀的定位改变为**创作工具**，而不在是**内容社区**，相应的新的付费策略，也会造成了免费用户无法继续用语雀作为自己的个人博客。这是最致命的一次信任危机。\n\n- [语雀个人版新定价的细则和思考](https://www.yuque.com/docs/share/26348e63-d6f2-464c-889c-2af952f1144d) - 境同\n- [语雀个人定价调整的致歉](https://www.yuque.com/yubo/morning/thinking-of-yuque-price) - 玉伯\n- [如何看待语雀付费策略？](https://www.zhihu.com/question/562238887) - 知乎\n\n虽然个人的语雀付费已经到了 2037 年，但是随着越来越多的文档托管在了语雀，不支持批量 md 导出的确让人心生忧虑。\n![](https://shub.weiyan.tech/yuque/elog-notebook-img/FmTgoSK6IXHA4fWaCxC0WVjS7dpU.png)\n\n几经考虑之下，在开始 Plan B 前先明确一下个人使用云端笔记无非基于几点考虑：\n\n1. 同步方便，现在更加注重数据自己可控，最好笔记可以批量导出，或者直接本地保存；\n2. 同时支持私密、公开两种笔记模式；\n3. 支持 markdown 语法；\n4. 支持全文搜索；\n5. 最好支持 web 直接使用；\n6. ..............\n\n现在 Obsidian 进行探索中，强悍的搜索，丰富的插件，算是吸引我的一个方面；如果不是官方提供的同步和发布插件价格相对贵了一些，或许早就从语雀开始往 Obsidian 进行迁移了吧！\n![image.png](https://shub.weiyan.tech/yuque/elog-notebook-img/Fn-sssMzVTYiuY-A7jth6NzAZGqH.png)\nObsidian 也是书本式的文章结构，这一点跟语雀是一致的，但界面的设计和逻辑要比语雀要好太多太多了，**退一万步来说语雀甚至可以参考一下 Obsidian 的一些界面设计！**\n\nObsidian 结合一些插件使用，可谓事半功倍。\n![image.png](https://shub.weiyan.tech/yuque/elog-notebook-img/FhZ4GJBNWpfihTd4KUimGAzE0I1w.png)\n\n**不得不说的一点体验。**\n\n**使用语雀这么多年，转战其他笔记软件真是一件费心又纠结的事情——语雀的写作体验很好但界面逻辑和 UI 经常变，OBS 总体很完美但学习成本高。**\n\n**作为知识沉淀和管理，更希望能做到开箱即用，免去各种折腾的时间让用者专注于文字的组织和写作，从这一点来说，或许可以再给语雀一点时间，如果依旧是失望和粗暴，再做 Plan B 迁移也来得及。**\n\n**还是选择继续回到语雀，且看它接下来一年的表现吧！**', 'bodyText': '这些年来笔记换的比较少——主要是从 2018 年以来，一直用语雀作为主力笔记懒得去折腾了。但是到了 2022 年，事情似乎出现了一些转变。\n\n\n首先，是语雀的个人用户的话题知识库下线——并入了空间；\n其次，语雀的问题反馈，由原来的公开可讨论转变成了类似私信一样的单向反馈；\n第三，语雀 2022 年秋季知识库大会的会员收费风波！——语雀的定位改变为创作工具，而不在是内容社区，相应的新的付费策略，也会造成了免费用户无法继续用语雀作为自己的个人博客。这是最致命的一次信任危机。\n\n语雀个人版新定价的细则和思考 - 境同\n语雀个人定价调整的致歉 - 玉伯\n如何看待语雀付费策略？ - 知乎\n\n虽然个人的语雀付费已经到了 2037 年，但是随着越来越多的文档托管在了语雀，不支持批量 md 导出的确让人心生忧虑。\n\n几经考虑之下，在开始 Plan B 前先明确一下个人使用云端笔记无非基于几点考虑：\n\n同步方便，现在更加注重数据自己可控，最好笔记可以批量导出，或者直接本地保存；\n同时支持私密、公开两种笔记模式；\n支持 markdown 语法；\n支持全文搜索；\n最好支持 web 直接使用；\n..............\n\n现在 Obsidian 进行探索中，强悍的搜索，丰富的插件，算是吸引我的一个方面；如果不是官方提供的同步和发布插件价格相对贵了一些，或许早就从语雀开始往 Obsidian 进行迁移了吧！\n\nObsidian 也是书本式的文章结构，这一点跟语雀是一致的，但界面的设计和逻辑要比语雀要好太多太多了，退一万步来说语雀甚至可以参考一下 Obsidian 的一些界面设计！\nObsidian 结合一些插件使用，可谓事半功倍。\n\n不得不说的一点体验。\n使用语雀这么多年，转战其他笔记软件真是一件费心又纠结的事情——语雀的写作体验很好但界面逻辑和 UI 经常变，OBS 总体很完美但学习成本高。\n作为知识沉淀和管理，更希望能做到开箱即用，免去各种折腾的时间让用者专注于文字的组织和写作，从这一点来说，或许可以再给语雀一点时间，如果依旧是失望和粗暴，再做 Plan B 迁移也来得及。\n还是选择继续回到语雀，且看它接下来一年的表现吧！', 'bodyHTML': '<p dir="auto">这些年来笔记换的比较少——主要是从 2018 年以来，一直用语雀作为主力笔记懒得去折腾了。但是到了 2022 年，事情似乎出现了一些转变。</p>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/bc3bc188967864256b67fc3123c8788c9307a7756592a3f1905828c43fc345bd/68747470733a2f2f312e62702e626c6f6773706f742e636f6d2f2d73503665757971733170632f58554d41793034693467492f414141414141414770414d2f4d5468444d3131586a4f384233576f5363774c614773766e7a5f755668614e2d51434c63424741732f73313630302f53746f636b536e61705f54424a394f5044474d4b25324225323535423225323535442e6a70672366726f6d3d75726c2669643d5877663553266f726967696e4865696768743d393033266f726967696e57696474683d31363030266f726967696e616c547970653d62696e61727926726174696f3d3126726f746174696f6e3d302673686f775469746c653d66616c7365267374617475733d646f6e65267374796c653d6e6f6e65267469746c653d"><img src="https://camo.githubusercontent.com/bc3bc188967864256b67fc3123c8788c9307a7756592a3f1905828c43fc345bd/68747470733a2f2f312e62702e626c6f6773706f742e636f6d2f2d73503665757971733170632f58554d41793034693467492f414141414141414770414d2f4d5468444d3131586a4f384233576f5363774c614773766e7a5f755668614e2d51434c63424741732f73313630302f53746f636b536e61705f54424a394f5044474d4b25324225323535423225323535442e6a70672366726f6d3d75726c2669643d5877663553266f726967696e4865696768743d393033266f726967696e57696474683d31363030266f726967696e616c547970653d62696e61727926726174696f3d3126726f746174696f6e3d302673686f775469746c653d66616c7365267374617475733d646f6e65267374796c653d6e6f6e65267469746c653d" alt="" data-canonical-src="https://1.bp.blogspot.com/-sP6euyqs1pc/XUMAy04i4gI/AAAAAAAGpAM/MThDM11XjO8B3WoScwLaGsvnz_uVhaN-QCLcBGAs/s1600/StockSnap_TBJ9OPDGMK%2B%255B2%255D.jpg#from=url&amp;id=Xwf5S&amp;originHeight=903&amp;originWidth=1600&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" style="max-width: 100%;"></a><br>\n首先，是语雀的个人用户的话题知识库下线——并入了空间；<br>\n其次，语雀的问题反馈，由原来的公开可讨论转变成了类似私信一样的单向反馈；<br>\n第三，语雀 2022 年秋季知识库大会的会员收费风波！——语雀的定位改变为<strong>创作工具</strong>，而不在是<strong>内容社区</strong>，相应的新的付费策略，也会造成了免费用户无法继续用语雀作为自己的个人博客。这是最致命的一次信任危机。</p>\n<ul dir="auto">\n<li><a href="https://www.yuque.com/docs/share/26348e63-d6f2-464c-889c-2af952f1144d" rel="nofollow">语雀个人版新定价的细则和思考</a> - 境同</li>\n<li><a href="https://www.yuque.com/yubo/morning/thinking-of-yuque-price" rel="nofollow">语雀个人定价调整的致歉</a> - 玉伯</li>\n<li><a href="https://www.zhihu.com/question/562238887" rel="nofollow">如何看待语雀付费策略？</a> - 知乎</li>\n</ul>\n<p dir="auto">虽然个人的语雀付费已经到了 2037 年，但是随着越来越多的文档托管在了语雀，不支持批量 md 导出的确让人心生忧虑。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/55b0d8836c274d544a3800eb5292ef04cc905348ee9504ca81f0501b0e39d2ba/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466d54676f534b3649584841346657614378433057566a53376470552e706e67"><img src="https://camo.githubusercontent.com/55b0d8836c274d544a3800eb5292ef04cc905348ee9504ca81f0501b0e39d2ba/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466d54676f534b3649584841346657614378433057566a53376470552e706e67" alt="" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FmTgoSK6IXHA4fWaCxC0WVjS7dpU.png" style="max-width: 100%;"></a></p>\n<p dir="auto">几经考虑之下，在开始 Plan B 前先明确一下个人使用云端笔记无非基于几点考虑：</p>\n<ol dir="auto">\n<li>同步方便，现在更加注重数据自己可控，最好笔记可以批量导出，或者直接本地保存；</li>\n<li>同时支持私密、公开两种笔记模式；</li>\n<li>支持 markdown 语法；</li>\n<li>支持全文搜索；</li>\n<li>最好支持 web 直接使用；</li>\n<li>..............</li>\n</ol>\n<p dir="auto">现在 Obsidian 进行探索中，强悍的搜索，丰富的插件，算是吸引我的一个方面；如果不是官方提供的同步和发布插件价格相对贵了一些，或许早就从语雀开始往 Obsidian 进行迁移了吧！<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/0c4663708fe9ed500d659042beca88942f4af43475b9697d035b62162d702a75/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466e2d7373734d7a5654596975592d41376a7468364e7a415a4771482e706e67"><img src="https://camo.githubusercontent.com/0c4663708fe9ed500d659042beca88942f4af43475b9697d035b62162d702a75/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466e2d7373734d7a5654596975592d41376a7468364e7a415a4771482e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Fn-sssMzVTYiuY-A7jth6NzAZGqH.png" style="max-width: 100%;"></a><br>\nObsidian 也是书本式的文章结构，这一点跟语雀是一致的，但界面的设计和逻辑要比语雀要好太多太多了，<strong>退一万步来说语雀甚至可以参考一下 Obsidian 的一些界面设计！</strong></p>\n<p dir="auto">Obsidian 结合一些插件使用，可谓事半功倍。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/89c84196af237f0cbf4d5ed12d01d9b19bb4ae207c4b77c16c70f48ed88eb8d7/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46685a34474a424e57706669685464344b55696d47417a45304931772e706e67"><img src="https://camo.githubusercontent.com/89c84196af237f0cbf4d5ed12d01d9b19bb4ae207c4b77c16c70f48ed88eb8d7/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46685a34474a424e57706669685464344b55696d47417a45304931772e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FhZ4GJBNWpfihTd4KUimGAzE0I1w.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><strong>不得不说的一点体验。</strong></p>\n<p dir="auto"><strong>使用语雀这么多年，转战其他笔记软件真是一件费心又纠结的事情——语雀的写作体验很好但界面逻辑和 UI 经常变，OBS 总体很完美但学习成本高。</strong></p>\n<p dir="auto"><strong>作为知识沉淀和管理，更希望能做到开箱即用，免去各种折腾的时间让用者专注于文字的组织和写作，从这一点来说，或许可以再给语雀一点时间，如果依旧是失望和粗暴，再做 Plan B 迁移也来得及。</strong></p>\n<p dir="auto"><strong>还是选择继续回到语雀，且看它接下来一年的表现吧！</strong></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.5-语雀'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '清明节前，狂风暴雨时', 'number': 124, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/124', 'createdAt': '2025-04-30T08:10:40Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T08:10:41Z', 'body': '距离 2022 年的清明节还有一周多的时间，时值星期五，而此刻窗外正大雨绵绵，人坐在办公室看着窗外人来人往，心中百感莫名。\n\n<!-- more -->\n\n![rain.jpeg](https://shub.weiyan.tech/yuque/elog-notebook-img/Fo5_rSWBpQGFjwmSylWa12PI5iva.jpeg)\n\n最近的一段时间，工作上的事情乏陈可数，一切都按部就班，整天一股混吃等死的心态。\n![](https://shub.weiyan.tech/yuque/elog-notebook-img/FvyEoSGSOvS3oOG1mCEBDoF_oWLY.jpeg)\n\n生活上越来越朝着问题叠着问题的常态化发展，大事没有小事不断。小区也在前几天刚经历了 3 天内两次被封的尴尬，第一次是在下午刚回到家就被告知整栋楼禁止出入，然后是核酸，第二天解封；第二次是周一刚起床想着去上班，到了楼下发现又被封掉了，到了九点多收到街道办通知解封。作为开放式小区，物业不作为，进出不管控，说封楼就封楼也没有任何官方文件通知，这样的物业难怪会被那么多租客业主骂。\n![cc1621762b0f0a5859ab75e441eef8e.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FnqrPfQaTPx6wdEVYnjzQBXIqssE.jpeg) ![550cb7171f51062929306ad59cbdcab.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/Fm5-nmDs5xvUqfD1u0Vx3UNjrTLg.jpeg)\n\n关于工作，虽然每个人都很辛苦，但你又凭什么要求所有人都了解你的辛苦。关于生活，古语说：“辱不及父母，骂不及妻儿，纵言辞不敬，亦不失风度。”\n![e99e42ffa041b6cbf8235d9b58caedb.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FrCLisEBWRCrRitWsdGO3n5jyeUt.jpeg)\n\n有些事情，不必看的那么重，一场球的输赢不重要，有时候情商和宽心的话语可能更让人坦然，一些迟来才明白的道理，终归需要好好体会细品。\n![](https://shub.weiyan.tech/yuque/elog-notebook-img/FpXhN8ucCI0HowK_Bpwe30HhBxZu.jpeg)\n\n最近有些事情想的太多，有时候就是自己的一厢情愿。它就像一根救命稻草，横在你心里，让你还有念想，还心存侥幸！\n\n胡言乱语的碎碎念无休无止，念念不忘的游戏跃然心头 —— 生活不休，至少还有游戏，还能写写文字。', 'bodyText': '距离 2022 年的清明节还有一周多的时间，时值星期五，而此刻窗外正大雨绵绵，人坐在办公室看着窗外人来人往，心中百感莫名。\n\n\n最近的一段时间，工作上的事情乏陈可数，一切都按部就班，整天一股混吃等死的心态。\n\n生活上越来越朝着问题叠着问题的常态化发展，大事没有小事不断。小区也在前几天刚经历了 3 天内两次被封的尴尬，第一次是在下午刚回到家就被告知整栋楼禁止出入，然后是核酸，第二天解封；第二次是周一刚起床想着去上班，到了楼下发现又被封掉了，到了九点多收到街道办通知解封。作为开放式小区，物业不作为，进出不管控，说封楼就封楼也没有任何官方文件通知，这样的物业难怪会被那么多租客业主骂。\n \n关于工作，虽然每个人都很辛苦，但你又凭什么要求所有人都了解你的辛苦。关于生活，古语说：“辱不及父母，骂不及妻儿，纵言辞不敬，亦不失风度。”\n\n有些事情，不必看的那么重，一场球的输赢不重要，有时候情商和宽心的话语可能更让人坦然，一些迟来才明白的道理，终归需要好好体会细品。\n\n最近有些事情想的太多，有时候就是自己的一厢情愿。它就像一根救命稻草，横在你心里，让你还有念想，还心存侥幸！\n胡言乱语的碎碎念无休无止，念念不忘的游戏跃然心头 —— 生活不休，至少还有游戏，还能写写文字。', 'bodyHTML': '<p dir="auto">距离 2022 年的清明节还有一周多的时间，时值星期五，而此刻窗外正大雨绵绵，人坐在办公室看着窗外人来人往，心中百感莫名。</p>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/9bd2a0682a38b6f462769a72a587f1431eb4ae3a82b0f32926a981a06f183e44/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466f355f72535742705147466a776d53796c576131325049356976612e6a706567"><img src="https://camo.githubusercontent.com/9bd2a0682a38b6f462769a72a587f1431eb4ae3a82b0f32926a981a06f183e44/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466f355f72535742705147466a776d53796c576131325049356976612e6a706567" alt="rain.jpeg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Fo5_rSWBpQGFjwmSylWa12PI5iva.jpeg" style="max-width: 100%;"></a></p>\n<p dir="auto">最近的一段时间，工作上的事情乏陈可数，一切都按部就班，整天一股混吃等死的心态。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/39673daadfe1073e21543417db728c6e17ca6a91d0a75cdfbb32de5ba0f339b0/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f467679456f5347534f7653336f4f47316d434542446f465f6f574c592e6a706567"><img src="https://camo.githubusercontent.com/39673daadfe1073e21543417db728c6e17ca6a91d0a75cdfbb32de5ba0f339b0/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f467679456f5347534f7653336f4f47316d434542446f465f6f574c592e6a706567" alt="" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FvyEoSGSOvS3oOG1mCEBDoF_oWLY.jpeg" style="max-width: 100%;"></a></p>\n<p dir="auto">生活上越来越朝着问题叠着问题的常态化发展，大事没有小事不断。小区也在前几天刚经历了 3 天内两次被封的尴尬，第一次是在下午刚回到家就被告知整栋楼禁止出入，然后是核酸，第二天解封；第二次是周一刚起床想着去上班，到了楼下发现又被封掉了，到了九点多收到街道办通知解封。作为开放式小区，物业不作为，进出不管控，说封楼就封楼也没有任何官方文件通知，这样的物业难怪会被那么多租客业主骂。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/c3152ad493ba1ca63e4f854c6648d614808c2318ab9ee873550f034220743e56/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466e7172506651615450783677644556596e6a7a51425849717373452e6a706567"><img src="https://camo.githubusercontent.com/c3152ad493ba1ca63e4f854c6648d614808c2318ab9ee873550f034220743e56/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466e7172506651615450783677644556596e6a7a51425849717373452e6a706567" alt="cc1621762b0f0a5859ab75e441eef8e.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FnqrPfQaTPx6wdEVYnjzQBXIqssE.jpeg" style="max-width: 100%;"></a> <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/889df20253c07d572413f84d1824b6cfac2259530cb36da0769f4cd68935c448/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466d352d6e6d447335787655716644317530567833554e6a72544c672e6a706567"><img src="https://camo.githubusercontent.com/889df20253c07d572413f84d1824b6cfac2259530cb36da0769f4cd68935c448/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466d352d6e6d447335787655716644317530567833554e6a72544c672e6a706567" alt="550cb7171f51062929306ad59cbdcab.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Fm5-nmDs5xvUqfD1u0Vx3UNjrTLg.jpeg" style="max-width: 100%;"></a></p>\n<p dir="auto">关于工作，虽然每个人都很辛苦，但你又凭什么要求所有人都了解你的辛苦。关于生活，古语说：“辱不及父母，骂不及妻儿，纵言辞不敬，亦不失风度。”<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/f0e045be2528b7b3d3908c37f365c462a99f566c56fa97a0cca3f0b49bae9b18/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4672434c6973454257524372526974577364474f336e356a796555742e6a706567"><img src="https://camo.githubusercontent.com/f0e045be2528b7b3d3908c37f365c462a99f566c56fa97a0cca3f0b49bae9b18/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4672434c6973454257524372526974577364474f336e356a796555742e6a706567" alt="e99e42ffa041b6cbf8235d9b58caedb.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FrCLisEBWRCrRitWsdGO3n5jyeUt.jpeg" style="max-width: 100%;"></a></p>\n<p dir="auto">有些事情，不必看的那么重，一场球的输赢不重要，有时候情商和宽心的话语可能更让人坦然，一些迟来才明白的道理，终归需要好好体会细品。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/16036bd7d9df818dfff40e3eb6994cf34a66b7c25d35a5148b9d9c1d25147012/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f467058684e387563434930486f774b5f427077653330486842785a752e6a706567"><img src="https://camo.githubusercontent.com/16036bd7d9df818dfff40e3eb6994cf34a66b7c25d35a5148b9d9c1d25147012/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f467058684e387563434930486f774b5f427077653330486842785a752e6a706567" alt="" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FpXhN8ucCI0HowK_Bpwe30HhBxZu.jpeg" style="max-width: 100%;"></a></p>\n<p dir="auto">最近有些事情想的太多，有时候就是自己的一厢情愿。它就像一根救命稻草，横在你心里，让你还有念想，还心存侥幸！</p>\n<p dir="auto">胡言乱语的碎碎念无休无止，念念不忘的游戏跃然心头 —— 生活不休，至少还有游戏，还能写写文字。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.5-语雀'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '域名碎碎念', 'number': 123, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/123', 'createdAt': '2025-04-30T08:10:39Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T08:10:40Z', 'body': '最近总想着注册域名，折腾完域名又想这去折腾 Foxmail 和 QQ 邮箱，简直魔障了！\n\n<!-- more -->\n\n![domain-register.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/Fs3nERCsQx7eP1CprAhM4vgRg2qB.jpeg)\n\n## 顶级域名\n\n顶级域名中四个纯字母以内的 com/net/org 之类顶级域名基本都被注册完了，好一点的四个字母的域名，如 top 虽然没有注册，但每年 4000 多大洋（白金域名），对于个人来说，真是望而却步！\n\n## BIO\n\n看上一个 bio 的域名，但即使普通的 bio 域名，续费也要将近 400 大洋/年，真是搞不懂了，为什么这个域名会这么贵！\n\n> **.bio 这个域名可以代表“生物”或“生物学”。**\n\n![image.png](https://shub.weiyan.tech/yuque/elog-notebook-img/Fu3V2lHxytHoOTMBy_3Mc7avm1vz.png)\n![image.png](https://shub.weiyan.tech/yuque/elog-notebook-img/Fp_hVUG12CGWEBKRQfks-n3mY__-.png)', 'bodyText': '最近总想着注册域名，折腾完域名又想这去折腾 Foxmail 和 QQ 邮箱，简直魔障了！\n\n\n顶级域名\n顶级域名中四个纯字母以内的 com/net/org 之类顶级域名基本都被注册完了，好一点的四个字母的域名，如 top 虽然没有注册，但每年 4000 多大洋（白金域名），对于个人来说，真是望而却步！\nBIO\n看上一个 bio 的域名，但即使普通的 bio 域名，续费也要将近 400 大洋/年，真是搞不懂了，为什么这个域名会这么贵！\n\n.bio 这个域名可以代表“生物”或“生物学”。', 'bodyHTML': '<p dir="auto">最近总想着注册域名，折腾完域名又想这去折腾 Foxmail 和 QQ 邮箱，简直魔障了！</p>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/fc912ce01ae7f65b98e1a17c81ebf36723b657976a689fafac6fe9e5a3010b36/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4673336e4552437351783765503143707241684d34766752673271422e6a706567"><img src="https://camo.githubusercontent.com/fc912ce01ae7f65b98e1a17c81ebf36723b657976a689fafac6fe9e5a3010b36/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4673336e4552437351783765503143707241684d34766752673271422e6a706567" alt="domain-register.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Fs3nERCsQx7eP1CprAhM4vgRg2qB.jpeg" style="max-width: 100%;"></a></p>\n<h2 dir="auto">顶级域名</h2>\n<p dir="auto">顶级域名中四个纯字母以内的 com/net/org 之类顶级域名基本都被注册完了，好一点的四个字母的域名，如 top 虽然没有注册，但每年 4000 多大洋（白金域名），对于个人来说，真是望而却步！</p>\n<h2 dir="auto">BIO</h2>\n<p dir="auto">看上一个 bio 的域名，但即使普通的 bio 域名，续费也要将近 400 大洋/年，真是搞不懂了，为什么这个域名会这么贵！</p>\n<blockquote>\n<p dir="auto"><strong>.bio 这个域名可以代表“生物”或“生物学”。</strong></p>\n</blockquote>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/20645a9fd35baf826a6b3f0ff1a9e5441330dec9f2ef526d05a20c403aaaa828/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46753356326c48787974486f4f544d42795f334d633761766d31767a2e706e67"><img src="https://camo.githubusercontent.com/20645a9fd35baf826a6b3f0ff1a9e5441330dec9f2ef526d05a20c403aaaa828/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46753356326c48787974486f4f544d42795f334d633761766d31767a2e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Fu3V2lHxytHoOTMBy_3Mc7avm1vz.png" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/04d2265a33eb2099ae1de89cbe78c511751d5e3bd0d4757c0f6f911887b41330/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46705f68565547313243475745424b5251666b732d6e336d595f5f2d2e706e67"><img src="https://camo.githubusercontent.com/04d2265a33eb2099ae1de89cbe78c511751d5e3bd0d4757c0f6f911887b41330/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46705f68565547313243475745424b5251666b732d6e336d595f5f2d2e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Fp_hVUG12CGWEBKRQfks-n3mY__-.png" style="max-width: 100%;"></a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.5-语雀'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '2022，虎年春节，吉祥团圆', 'number': 122, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/122', 'createdAt': '2025-04-30T08:10:38Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T08:10:39Z', 'body': '大年初七，上班的第一天，终于也有时间可以把这几天春节的点滴记录一下了。之前在朋友圈分享过，但朋友圈是短暂的，而文章是长情的，我希望留住这份美好，能更久一点。    \n\n<!-- more -->\n\n![2022.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FpT1WdOuU76X6OfNoaJQe5FQt_xP.jpeg)\n\n## 年前\n\n疫情反复，导致今年的春节是否回家过年略微带上了一些不确定性，幸好早早做了规划，一切都还在计划之内。\n\n年廿五（1.27），老妈和老哥第一批返程，中午十二点半从广州出发经中山接上老爸。\n\n年廿七（1.29），和老婆孩子第二批返程，小舅子一个人开车早上九点出发到下午四点左右，一共七个小时才回到。这一次的返程之行，除了沿途气温骤降外，小孩子在车上大吐了两次也有点猝不及防。\n\n| ![3cda996b528a192eb35da00573efbd3.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FubxsMD4nvAwnh9BMgdT3UA5QWa5.jpeg) | ![cac8d3647c5cabd6ce80068313e8ed4.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/Ft62v-Fn4W5TpWQgdBYKQkOA2wqu.jpeg) | ![4223f03689f5c2ee6f45b91a2b80cc4.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/Fviz5IDI7ADFtjyPCIUO0zG6o8wv.jpeg) |\n| ------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- |\n\n年廿八（1.30），下午 16 点左右，从大姑家返回老家。\n\n| ![d781e55610512ea69bf5d190579253f.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FpBpM_0MuUv95PsOAHkC06PBQD7Y.jpeg) | ![afe463024dc9884e7eb3fa353bfcbee.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/lgNaWpARjl2EGtO17vo0aqB6DoFR.jpeg) | ![fac410fa5487fd8b30d47191288ba38.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/Fn1D93EZfJqfNeAwBI4_lfZTPXzx.jpeg) |\n| ------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- |\n\n## 除夕\n\n年廿九（1.31）是除夕，烧纸拜神，放鞭炮，吃团年饭。今年的除夕全家人都回来了，算得上一个真正意义上的团圆，圆满且开心。\n\n| ![a8c4a7f04a897b45c3c21a4147b0e43.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FqeC-3Iy2WyWR4fC0q-Sx6QhCZjR.jpeg) | ![ac2e44439f9cf735c9823ad61c6da3b.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/Fg1Qu7PTOk9bTKIX39gVJMBY58Au.jpeg) | ![a52931041cf28da99d041b78c0268bf.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/lu9_cZtq9x54hJABuEAMm55U74Xp.jpeg) |\n| ------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- |\n\n## 年后\n\n2022 年的春节是寒冷的，平均气温 10 度左右，加上小雨绵绵，把大家出行的欲望都冷成了蛰伏在家。雨停间隙的串门便成了唯一的消遣和娱乐。\n\n最温馨的，有多年未见的亲朋邻居寒暄问候；最开心的，是小孩子间嬉闹玩耍的瞬间 —— 她们又有了新的玩伴，放鞭炮玩游戏总是人多才热闹。\n\n| ![878724c7cdbaf7268311d613c74e61c.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FhLrSner9xGTraNgyyXHrIfdOe1P.jpeg) | ![5d4ddcfc9d94ce57bef737d8818574b.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FgtSdmTyg4Amf8jBPsUAUcjk-atG.jpeg) | ![9ce797ee68f381b8d936581bf0bbd80.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/Fmws5LYxFo0nS88gWL7wXRIH0reo.jpeg) |\n| ------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- |\n\n年初二，岳父岳母姑姑姐夫一行的到来，热热闹闹的感动。\n\n| ![4e18c109fdbf37e01999b88704d67a4.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FtfpMqLIk_Sf0Uw-oiU_cIcwXBX2.jpeg) | ![f6b2172539e7ee77f8b113609837527.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FmFNc_DwOcfDAQDSK2wGSWGv_vqc.jpeg) | ![c1f1d083c40849ead4343da23ea4088.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FmjL-QRN-ANxLAnZ5DRaHXNJH2_R.jpeg) |\n| ------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- |\n| ![019ddce2548e9372685471d06fc6a20.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FmM1ZnBXOYGACGeqw-bPLzn8rf44.jpeg) | ![5762d075ad4df3fb9ff82feae28818f.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/lvHakUToRbtZIhp9H5Ol-vFb1rxu.jpeg) | ![ea01365a5d3d6f7dbb5ceeafd0f954e.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FtOZUYjOyia0aTsSEmqDH6-X2mr9.jpeg) |\n\n年初三，初四，在岳父岳母家玩了两天，各种好吃的好玩的。\n\n| ![7962b965c26f6a4f67c1640f5a099e9.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/ltW-Sx7oq4HP1fVDdxNJvcDXVlRG.jpeg) | ![13fde8e4cdc06e906bc999f12bb1f1c.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/lv5z2LcR4cOTdUwB016QKtVFEoJo.jpeg) | ![d77af5ceae2d0ea650585e33f518ef3.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/lmzgVgPXt_iYveM2K3Bsjlex7O9d.jpeg) |\n| ------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- |\n| ![abd7985b50faa56b1cca517385e064d.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/lqtql02J8TXr-a4XcHZesb2tLkML.jpeg) | ![3b06937d1f1b05bdb6ecdd614176191.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/lvYgOFy-Vcg7NfPqbLuoWV9Or2ft.jpeg) | ![91ed3c752568096ada59dd05512cf88.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/lsJyvUtnBNznj7e0SGm2MB40Hj95.jpeg) |\n\n## 出发\n\n开心的时光过的特别快，时至大年初五，山河远阔，人间烟火，再度出发！\n\n| ![ef76228d712af93e9d6b192eb8d862a.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FighFS8kRz_bqtka-_P77aTEe3ps.jpeg) | ![c283f23436c74ab0e9efb0cbdd4071d.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/luCg7taqpN6OGYWCG9G9W3mpq0lC.jpeg) | ![0f3bd35fb87df860774453b95e4da62.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/lkyBcDbPMzsGmP4rnDFNA-a2QBik.jpeg) |\n| ------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- |', 'bodyText': '大年初七，上班的第一天，终于也有时间可以把这几天春节的点滴记录一下了。之前在朋友圈分享过，但朋友圈是短暂的，而文章是长情的，我希望留住这份美好，能更久一点。\n\n\n年前\n疫情反复，导致今年的春节是否回家过年略微带上了一些不确定性，幸好早早做了规划，一切都还在计划之内。\n年廿五（1.27），老妈和老哥第一批返程，中午十二点半从广州出发经中山接上老爸。\n年廿七（1.29），和老婆孩子第二批返程，小舅子一个人开车早上九点出发到下午四点左右，一共七个小时才回到。这一次的返程之行，除了沿途气温骤降外，小孩子在车上大吐了两次也有点猝不及防。\n\n\n\n\n\n\n\n\n\n年廿八（1.30），下午 16 点左右，从大姑家返回老家。\n\n\n\n\n\n\n\n\n\n除夕\n年廿九（1.31）是除夕，烧纸拜神，放鞭炮，吃团年饭。今年的除夕全家人都回来了，算得上一个真正意义上的团圆，圆满且开心。\n\n\n\n\n\n\n\n\n\n年后\n2022 年的春节是寒冷的，平均气温 10 度左右，加上小雨绵绵，把大家出行的欲望都冷成了蛰伏在家。雨停间隙的串门便成了唯一的消遣和娱乐。\n最温馨的，有多年未见的亲朋邻居寒暄问候；最开心的，是小孩子间嬉闹玩耍的瞬间 —— 她们又有了新的玩伴，放鞭炮玩游戏总是人多才热闹。\n\n\n\n\n\n\n\n\n\n年初二，岳父岳母姑姑姐夫一行的到来，热热闹闹的感动。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n年初三，初四，在岳父岳母家玩了两天，各种好吃的好玩的。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n出发\n开心的时光过的特别快，时至大年初五，山河远阔，人间烟火，再度出发！', 'bodyHTML': '<p dir="auto">大年初七，上班的第一天，终于也有时间可以把这几天春节的点滴记录一下了。之前在朋友圈分享过，但朋友圈是短暂的，而文章是长情的，我希望留住这份美好，能更久一点。</p>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/497a88427477d1b8c21bd704d3f2f826faa34f473b5d4b2bb710959dd71e24b4/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4670543157644f7555373658364f664e6f614a5165354651745f78502e6a706567"><img src="https://camo.githubusercontent.com/497a88427477d1b8c21bd704d3f2f826faa34f473b5d4b2bb710959dd71e24b4/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4670543157644f7555373658364f664e6f614a5165354651745f78502e6a706567" alt="2022.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FpT1WdOuU76X6OfNoaJQe5FQt_xP.jpeg" style="max-width: 100%;"></a></p>\n<h2 dir="auto">年前</h2>\n<p dir="auto">疫情反复，导致今年的春节是否回家过年略微带上了一些不确定性，幸好早早做了规划，一切都还在计划之内。</p>\n<p dir="auto">年廿五（1.27），老妈和老哥第一批返程，中午十二点半从广州出发经中山接上老爸。</p>\n<p dir="auto">年廿七（1.29），和老婆孩子第二批返程，小舅子一个人开车早上九点出发到下午四点左右，一共七个小时才回到。这一次的返程之行，除了沿途气温骤降外，小孩子在车上大吐了两次也有点猝不及防。</p>\n<markdown-accessiblity-table><table role="table">\n<thead>\n<tr>\n<th><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/13db84843b4713153a7fbe741d4e1f21d389d9ed25e43e0faebd049a6365674f/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46756278734d44346e7641776e6839424d67645433554135515761352e6a706567"><img src="https://camo.githubusercontent.com/13db84843b4713153a7fbe741d4e1f21d389d9ed25e43e0faebd049a6365674f/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46756278734d44346e7641776e6839424d67645433554135515761352e6a706567" alt="3cda996b528a192eb35da00573efbd3.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FubxsMD4nvAwnh9BMgdT3UA5QWa5.jpeg" style="max-width: 100%;"></a></th>\n<th><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/0a0ed6a77bd675f38a1e11e7c58f8371e543d20087f97fba7fe645ff6f538c6c/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46743632762d466e34573554705751676442594b516b4f41327771752e6a706567"><img src="https://camo.githubusercontent.com/0a0ed6a77bd675f38a1e11e7c58f8371e543d20087f97fba7fe645ff6f538c6c/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46743632762d466e34573554705751676442594b516b4f41327771752e6a706567" alt="cac8d3647c5cabd6ce80068313e8ed4.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Ft62v-Fn4W5TpWQgdBYKQkOA2wqu.jpeg" style="max-width: 100%;"></a></th>\n<th><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/90362acaeb67daae44bba25977050da67800f69d63c2fad53ecddb44d834d56b/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4676697a3549444937414446746a79504349554f307a47366f3877762e6a706567"><img src="https://camo.githubusercontent.com/90362acaeb67daae44bba25977050da67800f69d63c2fad53ecddb44d834d56b/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4676697a3549444937414446746a79504349554f307a47366f3877762e6a706567" alt="4223f03689f5c2ee6f45b91a2b80cc4.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Fviz5IDI7ADFtjyPCIUO0zG6o8wv.jpeg" style="max-width: 100%;"></a></th>\n</tr>\n</thead>\n</table></markdown-accessiblity-table>\n<p dir="auto">年廿八（1.30），下午 16 点左右，从大姑家返回老家。</p>\n<markdown-accessiblity-table><table role="table">\n<thead>\n<tr>\n<th><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/4142f840663517d90ac166678ea391a083dd4d41c2d70f5d12e48c596ae8848a/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f467042704d5f304d755576393550734f41486b4330365042514437592e6a706567"><img src="https://camo.githubusercontent.com/4142f840663517d90ac166678ea391a083dd4d41c2d70f5d12e48c596ae8848a/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f467042704d5f304d755576393550734f41486b4330365042514437592e6a706567" alt="d781e55610512ea69bf5d190579253f.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FpBpM_0MuUv95PsOAHkC06PBQD7Y.jpeg" style="max-width: 100%;"></a></th>\n<th><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/4b31201259dff4c4c648f5bdcad70e2d82e3a9d779d0d7e5747771ec872119d8/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f6c674e61577041526a6c324547744f3137766f3061714236446f46522e6a706567"><img src="https://camo.githubusercontent.com/4b31201259dff4c4c648f5bdcad70e2d82e3a9d779d0d7e5747771ec872119d8/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f6c674e61577041526a6c324547744f3137766f3061714236446f46522e6a706567" alt="afe463024dc9884e7eb3fa353bfcbee.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/lgNaWpARjl2EGtO17vo0aqB6DoFR.jpeg" style="max-width: 100%;"></a></th>\n<th><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/d28c8292363148cb8572333fe7d3cf4e3ef90827bd4a7ed5d8ec3454af67fee5/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466e31443933455a664a71664e6541774249345f6c665a5450587a782e6a706567"><img src="https://camo.githubusercontent.com/d28c8292363148cb8572333fe7d3cf4e3ef90827bd4a7ed5d8ec3454af67fee5/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466e31443933455a664a71664e6541774249345f6c665a5450587a782e6a706567" alt="fac410fa5487fd8b30d47191288ba38.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Fn1D93EZfJqfNeAwBI4_lfZTPXzx.jpeg" style="max-width: 100%;"></a></th>\n</tr>\n</thead>\n</table></markdown-accessiblity-table>\n<h2 dir="auto">除夕</h2>\n<p dir="auto">年廿九（1.31）是除夕，烧纸拜神，放鞭炮，吃团年饭。今年的除夕全家人都回来了，算得上一个真正意义上的团圆，圆满且开心。</p>\n<markdown-accessiblity-table><table role="table">\n<thead>\n<tr>\n<th><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/cf3d0f590f0b072206658ee17f7115742f5bfe88c1738d8a66cf97b76e945d99/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f467165432d334979325779575234664330712d5378365168435a6a522e6a706567"><img src="https://camo.githubusercontent.com/cf3d0f590f0b072206658ee17f7115742f5bfe88c1738d8a66cf97b76e945d99/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f467165432d334979325779575234664330712d5378365168435a6a522e6a706567" alt="a8c4a7f04a897b45c3c21a4147b0e43.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FqeC-3Iy2WyWR4fC0q-Sx6QhCZjR.jpeg" style="max-width: 100%;"></a></th>\n<th><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/f371c009d8c92be354da18d5bf100e59c03998ed7ec9bc17a217ce51c2073d0e/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46673151753750544f6b3962544b4958333967564a4d4259353841752e6a706567"><img src="https://camo.githubusercontent.com/f371c009d8c92be354da18d5bf100e59c03998ed7ec9bc17a217ce51c2073d0e/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46673151753750544f6b3962544b4958333967564a4d4259353841752e6a706567" alt="ac2e44439f9cf735c9823ad61c6da3b.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Fg1Qu7PTOk9bTKIX39gVJMBY58Au.jpeg" style="max-width: 100%;"></a></th>\n<th><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/31b876969791ef1200bef91f3adc633cc6e6b3c06d880a953132d965ee96c5d0/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f6c75395f635a747139783534684a41427545414d6d353555373458702e6a706567"><img src="https://camo.githubusercontent.com/31b876969791ef1200bef91f3adc633cc6e6b3c06d880a953132d965ee96c5d0/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f6c75395f635a747139783534684a41427545414d6d353555373458702e6a706567" alt="a52931041cf28da99d041b78c0268bf.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/lu9_cZtq9x54hJABuEAMm55U74Xp.jpeg" style="max-width: 100%;"></a></th>\n</tr>\n</thead>\n</table></markdown-accessiblity-table>\n<h2 dir="auto">年后</h2>\n<p dir="auto">2022 年的春节是寒冷的，平均气温 10 度左右，加上小雨绵绵，把大家出行的欲望都冷成了蛰伏在家。雨停间隙的串门便成了唯一的消遣和娱乐。</p>\n<p dir="auto">最温馨的，有多年未见的亲朋邻居寒暄问候；最开心的，是小孩子间嬉闹玩耍的瞬间 —— 她们又有了新的玩伴，放鞭炮玩游戏总是人多才热闹。</p>\n<markdown-accessiblity-table><table role="table">\n<thead>\n<tr>\n<th><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/419b028edafbfe5002c7fc925e2b56d2cd012efc7b0b0e8611f65252248c0a7d/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46684c72536e65723978475472614e6779795848724966644f6531502e6a706567"><img src="https://camo.githubusercontent.com/419b028edafbfe5002c7fc925e2b56d2cd012efc7b0b0e8611f65252248c0a7d/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46684c72536e65723978475472614e6779795848724966644f6531502e6a706567" alt="878724c7cdbaf7268311d613c74e61c.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FhLrSner9xGTraNgyyXHrIfdOe1P.jpeg" style="max-width: 100%;"></a></th>\n<th><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/c50a0bda6984db667730c5481770401455d0721a6ec37035ce30656d8444b266/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46677453646d54796734416d66386a425073554155636a6b2d6174472e6a706567"><img src="https://camo.githubusercontent.com/c50a0bda6984db667730c5481770401455d0721a6ec37035ce30656d8444b266/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46677453646d54796734416d66386a425073554155636a6b2d6174472e6a706567" alt="5d4ddcfc9d94ce57bef737d8818574b.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FgtSdmTyg4Amf8jBPsUAUcjk-atG.jpeg" style="max-width: 100%;"></a></th>\n<th><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/d7102c79287e7add401f987c8878f191f68526db498a31adac3254e11c8dc17f/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466d7773354c5978466f306e53383867574c3777585249483072656f2e6a706567"><img src="https://camo.githubusercontent.com/d7102c79287e7add401f987c8878f191f68526db498a31adac3254e11c8dc17f/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466d7773354c5978466f306e53383867574c3777585249483072656f2e6a706567" alt="9ce797ee68f381b8d936581bf0bbd80.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Fmws5LYxFo0nS88gWL7wXRIH0reo.jpeg" style="max-width: 100%;"></a></th>\n</tr>\n</thead>\n</table></markdown-accessiblity-table>\n<p dir="auto">年初二，岳父岳母姑姑姐夫一行的到来，热热闹闹的感动。</p>\n<markdown-accessiblity-table><table role="table">\n<thead>\n<tr>\n<th><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/017abec0b97c9e06b2bab34baa7fba54af6c3471f23783dd1bddb20b5f704484/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f467466704d714c496b5f53663055772d6f69555f63496377584258322e6a706567"><img src="https://camo.githubusercontent.com/017abec0b97c9e06b2bab34baa7fba54af6c3471f23783dd1bddb20b5f704484/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f467466704d714c496b5f53663055772d6f69555f63496377584258322e6a706567" alt="4e18c109fdbf37e01999b88704d67a4.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FtfpMqLIk_Sf0Uw-oiU_cIcwXBX2.jpeg" style="max-width: 100%;"></a></th>\n<th><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/7aefde1b6ffa481ec7b1efd2e0639f85dc65072ba3be96ca34e5642ed48e39e8/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466d464e635f44774f636644415144534b327747535747765f7671632e6a706567"><img src="https://camo.githubusercontent.com/7aefde1b6ffa481ec7b1efd2e0639f85dc65072ba3be96ca34e5642ed48e39e8/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466d464e635f44774f636644415144534b327747535747765f7671632e6a706567" alt="f6b2172539e7ee77f8b113609837527.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FmFNc_DwOcfDAQDSK2wGSWGv_vqc.jpeg" style="max-width: 100%;"></a></th>\n<th><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/9de1625c9f46118cff7724849ebd5927acb4bb1c1f2b9e206f96fb9ad280a006/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466d6a4c2d51524e2d414e784c416e5a3544526148584e4a48325f522e6a706567"><img src="https://camo.githubusercontent.com/9de1625c9f46118cff7724849ebd5927acb4bb1c1f2b9e206f96fb9ad280a006/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466d6a4c2d51524e2d414e784c416e5a3544526148584e4a48325f522e6a706567" alt="c1f1d083c40849ead4343da23ea4088.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FmjL-QRN-ANxLAnZ5DRaHXNJH2_R.jpeg" style="max-width: 100%;"></a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/990f24aae5bee14a6815b783da7d47472b270bcbf51fa0a1bbc58a8188cdb9cf/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466d4d315a6e42584f59474143476571772d62504c7a6e38726634342e6a706567"><img src="https://camo.githubusercontent.com/990f24aae5bee14a6815b783da7d47472b270bcbf51fa0a1bbc58a8188cdb9cf/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466d4d315a6e42584f59474143476571772d62504c7a6e38726634342e6a706567" alt="019ddce2548e9372685471d06fc6a20.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FmM1ZnBXOYGACGeqw-bPLzn8rf44.jpeg" style="max-width: 100%;"></a></td>\n<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/34fa20202b387fb0c0861689906a143223cb7ad1b765ab9adc984406ffcd8fe7/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f6c7648616b55546f5262745a4968703948354f6c2d764662317278752e6a706567"><img src="https://camo.githubusercontent.com/34fa20202b387fb0c0861689906a143223cb7ad1b765ab9adc984406ffcd8fe7/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f6c7648616b55546f5262745a4968703948354f6c2d764662317278752e6a706567" alt="5762d075ad4df3fb9ff82feae28818f.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/lvHakUToRbtZIhp9H5Ol-vFb1rxu.jpeg" style="max-width: 100%;"></a></td>\n<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/357f20fbc830474e3592b4ea6f08cddfbc43752cada42f0294464bf0ab6fe26e/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46744f5a55596a4f7969613061547353456d714448362d58326d72392e6a706567"><img src="https://camo.githubusercontent.com/357f20fbc830474e3592b4ea6f08cddfbc43752cada42f0294464bf0ab6fe26e/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46744f5a55596a4f7969613061547353456d714448362d58326d72392e6a706567" alt="ea01365a5d3d6f7dbb5ceeafd0f954e.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FtOZUYjOyia0aTsSEmqDH6-X2mr9.jpeg" style="max-width: 100%;"></a></td>\n</tr>\n</tbody>\n</table></markdown-accessiblity-table>\n<p dir="auto">年初三，初四，在岳父岳母家玩了两天，各种好吃的好玩的。</p>\n<markdown-accessiblity-table><table role="table">\n<thead>\n<tr>\n<th><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/1e1a87a831a9795b816e2d3c93baa9a190b65b79f598d2ea17f74df94a0f4cd0/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f6c74572d5378376f713448503166564464784e4a76634458566c52472e6a706567"><img src="https://camo.githubusercontent.com/1e1a87a831a9795b816e2d3c93baa9a190b65b79f598d2ea17f74df94a0f4cd0/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f6c74572d5378376f713448503166564464784e4a76634458566c52472e6a706567" alt="7962b965c26f6a4f67c1640f5a099e9.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/ltW-Sx7oq4HP1fVDdxNJvcDXVlRG.jpeg" style="max-width: 100%;"></a></th>\n<th><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/5d35b3e98c42847ed5fdb51b2131dcfc5ebfbbf97a37b04d62be6ef77978faf5/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f6c76357a324c635234634f5464557742303136514b745646456f4a6f2e6a706567"><img src="https://camo.githubusercontent.com/5d35b3e98c42847ed5fdb51b2131dcfc5ebfbbf97a37b04d62be6ef77978faf5/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f6c76357a324c635234634f5464557742303136514b745646456f4a6f2e6a706567" alt="13fde8e4cdc06e906bc999f12bb1f1c.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/lv5z2LcR4cOTdUwB016QKtVFEoJo.jpeg" style="max-width: 100%;"></a></th>\n<th><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/8d2bdb1c731d5c298101f40cd7520dbb4eb596f333d7b6fffd81f426e677bd88/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f6c6d7a6756675058745f695976654d324b3342736a6c6578374f39642e6a706567"><img src="https://camo.githubusercontent.com/8d2bdb1c731d5c298101f40cd7520dbb4eb596f333d7b6fffd81f426e677bd88/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f6c6d7a6756675058745f695976654d324b3342736a6c6578374f39642e6a706567" alt="d77af5ceae2d0ea650585e33f518ef3.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/lmzgVgPXt_iYveM2K3Bsjlex7O9d.jpeg" style="max-width: 100%;"></a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/c555059d2978def6e553cd3c70fbb2513b04059bbb1d543c2473afa6646b53f3/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f6c7174716c30324a385458722d61345863485a65736232744c6b4d4c2e6a706567"><img src="https://camo.githubusercontent.com/c555059d2978def6e553cd3c70fbb2513b04059bbb1d543c2473afa6646b53f3/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f6c7174716c30324a385458722d61345863485a65736232744c6b4d4c2e6a706567" alt="abd7985b50faa56b1cca517385e064d.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/lqtql02J8TXr-a4XcHZesb2tLkML.jpeg" style="max-width: 100%;"></a></td>\n<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b4759e257ce257e75eb92ab0d69fb4f2c1e3896fa320ae2f6f87d717ec473e44/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f6c7659674f46792d566367374e665071624c756f5756394f723266742e6a706567"><img src="https://camo.githubusercontent.com/b4759e257ce257e75eb92ab0d69fb4f2c1e3896fa320ae2f6f87d717ec473e44/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f6c7659674f46792d566367374e665071624c756f5756394f723266742e6a706567" alt="3b06937d1f1b05bdb6ecdd614176191.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/lvYgOFy-Vcg7NfPqbLuoWV9Or2ft.jpeg" style="max-width: 100%;"></a></td>\n<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/9f2c9df8cf3d37515ab99edecb3f5de4d292b77d4859a20322b62026014da05b/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f6c734a797655746e424e7a6e6a37653053476d324d423430486a39352e6a706567"><img src="https://camo.githubusercontent.com/9f2c9df8cf3d37515ab99edecb3f5de4d292b77d4859a20322b62026014da05b/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f6c734a797655746e424e7a6e6a37653053476d324d423430486a39352e6a706567" alt="91ed3c752568096ada59dd05512cf88.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/lsJyvUtnBNznj7e0SGm2MB40Hj95.jpeg" style="max-width: 100%;"></a></td>\n</tr>\n</tbody>\n</table></markdown-accessiblity-table>\n<h2 dir="auto">出发</h2>\n<p dir="auto">开心的时光过的特别快，时至大年初五，山河远阔，人间烟火，再度出发！</p>\n<markdown-accessiblity-table><table role="table">\n<thead>\n<tr>\n<th><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/d0af4c89de5edd203a3a444242ea25007649fccfddd1fbb132f2337419e5ae68/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466967684653386b527a5f6271746b612d5f503737615445653370732e6a706567"><img src="https://camo.githubusercontent.com/d0af4c89de5edd203a3a444242ea25007649fccfddd1fbb132f2337419e5ae68/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466967684653386b527a5f6271746b612d5f503737615445653370732e6a706567" alt="ef76228d712af93e9d6b192eb8d862a.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FighFS8kRz_bqtka-_P77aTEe3ps.jpeg" style="max-width: 100%;"></a></th>\n<th><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/8003df0f65d82dccd29fa1183e0025ebb445ee63225d2e9bca8cd93742944552/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f6c75436737746171704e364f475957434739473957336d7071306c432e6a706567"><img src="https://camo.githubusercontent.com/8003df0f65d82dccd29fa1183e0025ebb445ee63225d2e9bca8cd93742944552/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f6c75436737746171704e364f475957434739473957336d7071306c432e6a706567" alt="c283f23436c74ab0e9efb0cbdd4071d.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/luCg7taqpN6OGYWCG9G9W3mpq0lC.jpeg" style="max-width: 100%;"></a></th>\n<th><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/f3a7a92939caac33596a4f457fca35802b0ee6f070a8dedb0472b9795b3126d6/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f6c6b7942634462504d7a73476d5034726e44464e412d61325142696b2e6a706567"><img src="https://camo.githubusercontent.com/f3a7a92939caac33596a4f457fca35802b0ee6f070a8dedb0472b9795b3126d6/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f6c6b7942634462504d7a73476d5034726e44464e412d61325142696b2e6a706567" alt="0f3bd35fb87df860774453b95e4da62.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/lkyBcDbPMzsGmP4rnDFNA-a2QBik.jpeg" style="max-width: 100%;"></a></th>\n</tr>\n</thead>\n</table></markdown-accessiblity-table>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.5-语雀'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '2021 年年终总结', 'number': 121, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/121', 'createdAt': '2025-04-30T08:10:37Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T08:10:38Z', 'body': '如果说 2021 年发生的大事，除了中国共产党成立 100 周年印象最深，就是这一年来国内疫情的相对平缓——终于可以出门走走了。今天，是 2021 年的最后一天，恰好又是周五，盘点一下这一年自己的点滴。\n\n<!-- more -->\n\n## 工作\n\n工作上这一年其实也没有什么太多的变化，内容上依然是离不开集群、数据、Galaxy，以及生信。在舒适区呆的久了，一叶障目，对机器学习、自动化部署/运维、药物开发蠢蠢欲动，做了一些尝试，接下来的一年应该会在这些赛道继续深耕吧。\n\n## 生活\n\n这一年终于可以带娃周围走走了，但也仅限于黄埔附近的一亩三分地，总归是快活的。其他人与人之间的琐事磕碰，难免有些想法，回想起来依旧心绪难平，情绪的把控尚需修炼。值得一提的是还清一些贷款，终于又可以轻装上路，继续努力。\n\n自己喜欢的游戏，终于也有时间时不时的玩上几把了。\n\n### 网易云音乐\n\n这一年听得歌不多，偏爱粤语歌曲，用网易云的一句话总结：**灵魂有点靓仔，梦回港风时代！**\n\n| ![d4879da849c828aae07de0bfb87c0c9.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FoJnkqqI2Wb0NFtYPg2GM24Eda2Y.jpeg) | ![979c9f6c36dc5ad65603f9d4c4f924b.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FtjGvFAklQtdJ6m5H5woT2S6Hrgn.jpeg) | ![87ae0b3643ec6c1a5bb56346d36ac64.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FtutoJuwALuw8xqLXSs9wXBLT91p.jpeg) |\n| ------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- |\n| ![c4cce7dccb5b6dfd29ba664161cba18.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FpizFMVTBnpUXDhRgFCCtZhOgcn5.jpeg) | ![3245b0c783cb345643dc18f83971a97.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FsihbAQCcnMICQKdUHerqvcFkXfa.jpeg) | ![b92cecf95c5240673233906376cf8d6.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FkP1DeRZGPYK3P1bpKk44LIwvP95.jpeg) |\n\n![da053180b3075d3331e118f70b406a7.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FuRsyBk9sT6JYXKZ6QCk06KN_5dS.jpeg)\n\n## 写作\n\n### 语雀\n\n2022-01-10 语雀的年度总结上线。我手写我心，自己消化，自己懵懂，自己释然，语雀好像已经成为了调节负能量的一个途径！\n![image.png](https://shub.weiyan.tech/yuque/elog-notebook-img/Fv81cCT_LajNLifPkZYSzX3EbYse.png)\n![语雀-2021-1.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FtfprxZKomqBzkjwAjGkp5GTuYnD.jpeg)\n![语雀海报.png](https://shub.weiyan.tech/yuque/elog-notebook-img/FlGCJIvy7Eln5fzcru4esUqCY7b2.png)\n\n### 公众号\n\n有幸读到陈皓老师的《[**为什么我不在微信公众号上写文章**](https://www.yuque.com/shenweiyan/articles/qw325a)》这篇文章，的确给了我很多的启发，在 2021 年，关于写作这件事情上，想通了不少事情，心态自然而然发生了一些变化，开始变得更加佛系。\n\n> **我觉得一个人有一定的影响力，其中有很大一部份原因来自他的独立性，如果我开始写软文了，相当于我把自己卖了**。\n>\n> 所以，我现在从来不通过写文章挣钱，因为我会写代码，我还是通过我的技能挣钱，通过给一些公司做咨询、培训、企业服务挣钱，老实说，靠自己的能力挣钱，比写文章挣钱挣得多多了，因为我觉得，**像我写的这类的文章本来就是用来分享和传播的，不是用来挣钱的。写文章的目的是分享和影响，不是挣钱。**\n\n写作是一种心灵的舞蹈，大多数都是舞给自己看的。\n\n回到公众号上，今年一共在公众号发了 68 篇推文（包括今天这篇），其中原创的 43 篇，转载的 7 篇，综合性文章 8 篇，图文记录 9 条，外加 1 个视频推文。\n\n#### 2021 原创\n\n- 生物信息\n\n  - 12-17：[生物科学数据分析和数据管理本体论](https://mp.weixin.qq.com/s/Cq40vsktvi-9mn2xiH9Dmg)\n  - 11-19：[Bioconductor 中的 R 包安装教程(续一)](https://mp.weixin.qq.com/s/qojN2kYMLq4W_RC7jSyzrg)\n  - 09-27：[Python 获取 NCBI 基因名 SSL 证书异常？](https://mp.weixin.qq.com/s/vf5zmFI_ZS1bqrSRHKdz7Q)\n  - 06-12：[使用 Docker 分析高通量测序数据](https://mp.weixin.qq.com/s/xlGyJeukJU_vc4M_39dvXg)\n\n- (云)服务器\n\n  - 10-16：[服务器无法登录？教你如何解决 SSH Failed Permission Denied](https://mp.weixin.qq.com/s/u1Dw8_2MzCdyjtci9cwJEQ)\n  - 09-30：[腾讯云升级 Rocky Linux](https://mp.weixin.qq.com/s/go0j82Lh6jDcexqmVec4FA)\n  - 09-29：[后 CentOS 时代，作为服务器使用我们该选什么 Linux？](https://mp.weixin.qq.com/s/n98ANL3Y1t38ZqWAyqu_dg)\n  - 09-03：[服务器崩溃日志 | 误删 OpenSSL 的那点事](https://mp.weixin.qq.com/s/8yrs5j3HRBb59FkQIYrllg)\n  - 08-03：[服务器又中毒了，得治一治！](https://mp.weixin.qq.com/s/hTk0wgb1sUIhsKESNTSbUg)\n  - 07-26：[生信服务器 | 防火墙基本配置](https://mp.weixin.qq.com/s/twPGVKsdd7HsRkDQfDv91w)\n  - 05-27：[生信服务器 | 更改 CentOS/RHEL 6/7 中的时区](https://mp.weixin.qq.com/s/eNU4YuHqxVY45raiCHXmtA)\n  - 01-21：[生信服务器 | Linux 时间戳和标准时间](https://mp.weixin.qq.com/s/kF9_C23UYjjWoDg4fWyQzg)\n\n- 静态网站\n\n  - 12-24：[腾讯云云开发 Webify 上手体验](https://mp.weixin.qq.com/s/CosiH4w1wCTkc5H9TGGRBA)\n  - 02-05：[阿里云证书 | 套路太深，还是我打开姿势不对？](https://mp.weixin.qq.com/s/pDw6_zgl6wkJgpt6WuyvsA)\n  - 01-08：[自定义 coding.net 静态网站域名](https://mp.weixin.qq.com/s/i4obfyd6aJ8HsKdR7cvz3g)\n\n- 版本控制\n\n  - 12-10：[GitHub 代码实时同步 gitee 和 coding](https://mp.weixin.qq.com/s/4P2A1zb8VRMg9VYi_QiehQ)\n\n- Galaxy Project\n\n  - 11-04：[Galaxy Release (v 21.09)，新的工具面板视图](https://mp.weixin.qq.com/s/C5Av4qz1Vuxx7EBevDGyug)\n  - 06-17：[Galaxy Release (v 21.05)，众多核心技术栈变更](https://mp.weixin.qq.com/s/QxA2i-4H2QPotSzfOq_4fg)\n  - 05-19：[Galaxy Project | 一些尝试与思考](https://mp.weixin.qq.com/s/NrvlelvC6uLAnJhWMMLacQ)\n  - 04-02：[Galaxy v-21.01 发布，新的流程和历史栏体验](https://mp.weixin.qq.com/s/JyL75dmUpz1tkDjv3DpAsg)\n  - 01-13：[Galaxy Project | 生信人最值得学习的开源项目之一](https://mp.weixin.qq.com/s/BOHUzRbcCAH1LwihwBA4Yg)\n\n- 个人随笔\n\n  - 10-14：[语雀天使](https://mp.weixin.qq.com/s/mv6oHB7ZLw7fuz2PNtTepQ)\n  - 06-16：[疫情下的广州](https://mp.weixin.qq.com/s/SVfMMIMph7jap5UcykSo8w)\n  - 06-03：[终于把 7 年前的 Docker Hub 账号恢复了](https://mp.weixin.qq.com/s/dhhFLRh9RL_E2B8Vj9OSeg)\n\n- 编程技术\n\n  - 08-09：[Python Excel 操作 | xlrd+xlwt 模块笔记](https://mp.weixin.qq.com/s/ygCbt5nV8mOIax7FBXViCQ)\n  - 04-16：[Python 中常见的 TypeError 是什么？](https://mp.weixin.qq.com/s/HcNt-WzZjipGG6dDQAgHgw)\n  - 04-09：[R 语言中常见的 10 个错误，看到第 7 个会不会感觉很神奇？](https://mp.weixin.qq.com/s/5w20SbS1PuiyqP5oTXn5ZQ)\n  - 03-30：[Python 列表、字典、元组的一些小技巧](https://mp.weixin.qq.com/s/-YLE-RjU0q8pBk9qlLsf1w)\n  - 03-02：[R 语言 download.file 的几点知识](https://mp.weixin.qq.com/s/Cu8Q_mmkUfGGOrntPWVh1A)\n\n- 科研见闻\n\n  - 07-21：[沉痛悼念 pip search 一路走好](https://mp.weixin.qq.com/s/S2JRu-F_-LQRt5LYh_QaOA)\n  - 05-08：[英伟达人工智能和处理器驱动的制药、生命科学合作](https://mp.weixin.qq.com/s/uqydAoNRY0wSXqmdWCuq-Q)\n  - 04-30：[科研杂谈 | 全球最大的数字图书馆](https://mp.weixin.qq.com/s/hA6966BeDvk1-AY8TlL_JA)\n\n- 软件应用\n  - 12-08：[文件传输命令 rz 与 sz 安装与使用](https://mp.weixin.qq.com/s/Zy1AGsM5rMJH9ngrfB1x1A)\n  - 11-02：[微信 | PC 端使用 USB 共享网络备份](https://mp.weixin.qq.com/s/0VrkNotpF6KlNVJq36sn9A)\n  - 09-11：[SCL+Devtoolset 安装与使用笔记](https://mp.weixin.qq.com/s/GrSg8RdjlAAOTmgzpdf8zg)\n  - 09-01：[GLIBC 升级安装与 SCL 知识盲区](https://mp.weixin.qq.com/s/IsPIGknkXLsHx7MgiCcz7g)\n  - 08-18：[Python 包安装和 postgresql 的一些问题](https://mp.weixin.qq.com/s/_sVajE6uutLsdR4pHLmwmQ)\n  - 07-17：[我给自己做了一个导航网站](https://mp.weixin.qq.com/s/gVWGjxG9qd7qSyX3N8Zgag)\n  - 04-24：[又爱又恨的 Microsoft Edge！](https://mp.weixin.qq.com/s/ArseLf89u76cHZzHE1l-JQ)\n  - 03-26：[使用码云同步谷歌 Chrome 浏览器书签](https://mp.weixin.qq.com/s/DXEmYz8akoDtshE1ziaG2g)\n  - 02-26：[Windows/Linux 下功能强大的桌面截图软件](https://mp.weixin.qq.com/s/aHvkdwsPP3OBhUcXDMhkQQ)\n  - 02-19：[为 Windows 系统替换优雅的苹果字体](https://mp.weixin.qq.com/s/2XId7dvAc_mMUszzRKeSiw)\n\n#### 2021 转载\n\n- 10-20：[我和语雀的小欢喜呀](https://mp.weixin.qq.com/s/nnE_M7isih3komrw3pccGw)\n- 07-06：[RStuido Server 选择不同的 R 版本（conda 中的不同 R 版本）](https://mp.weixin.qq.com/s/2v1c_Nlk5OhSL3O8k2N9Tw)\n- 06-19：[Bash 编程](https://mp.weixin.qq.com/s/w67bOn2FRO0B4gB8wULHIw)\n- 05-24：[Docker 与 K8S 的区别与介绍](https://mp.weixin.qq.com/s/vE5FbxK7ZPC-_V3yFKojmA)\n- 03-17：[生信人实现“SCI 自由”的秘密竟然是…](https://mp.weixin.qq.com/s/zY9-HHyUTFE7rTUMef_cuQ)\n- 03-04：[图解三代测序（SMRT Sequencing）](https://mp.weixin.qq.com/s/OFGKfsAfqPU_o1PpKpKb7Q)\n- 01-06：[深入浅出介绍聚类分析](https://mp.weixin.qq.com/s/ggHhyN2Z38vJr64e7CYfyA)\n\n#### 2021 综合\n\n- 11-11：[一个专注于微信公众号 Markdown 排版的平台](https://mp.weixin.qq.com/s/FMMx943coYWvgr1uUbTCfQ)\n- 10-22：[服务器推荐 | 2 核 4G 云服务，首年只需要 70 元](https://mp.weixin.qq.com/s/Jyxznyztoxx0NKalz7o_9A)\n- 09-07：[收藏 | 服务器和存储技术知识](https://mp.weixin.qq.com/s/iRbpQi6wS_lSdRchwVj8Fw)\n- 09-06：[男女洗澡前后区别，太形象了！](https://mp.weixin.qq.com/s/ycc06QYh4Ef6sGBbCAKXHQ)\n- 03-29：[Mdnice 简洁主题](https://mp.weixin.qq.com/s/61OBH4coZDeBHPbbAJekog)\n- 03-05：[肠道菌群机制研究及国自然课题设计专题会议](https://mp.weixin.qq.com/s/_eBBAu_RotajMz4f0rY9EA)\n- 01-16：[机房布线的最高境界……](https://mp.weixin.qq.com/s/BWIKU-yCaDLxSedc7mxJBA)\n- 01-02：[一针重复 2 万亿段代码，我「逆向工程」了辉瑞疫苗！](https://mp.weixin.qq.com/s/5-PHC4myrc3FNzy0eqxs1Q)\n\n#### 2021 图文\n\n- 11-08：[Rocky Linux 阿里云镜像源来啦！](https://mp.weixin.qq.com/s/5WnnAeWxivE9XC1eBOfDvw)\n- 10-09：[Google 是要放弃中文搜索了吗？](https://mp.weixin.qq.com/s/fMN41JojYEOs_RWfeztuQg)\n- 10-02：[《鸟哥的 Linux 私房菜》第四版](https://mp.weixin.qq.com/s/eh8O7uxru1j6EqN22MsQpg)\n- 09-24：[浏览器标准被大公司左右 - 科技爱好者周刊（第 177 期）](https://mp.weixin.qq.com/s/rcH6bNQw-fgh-NuCyHAHaA)\n- 09-21：[祝所有的读者中秋节快乐！](https://mp.weixin.qq.com/s/jT3s7OiDtT7WWobZXkdzKQ)\n- 09-09：[语雀的用户创作指数默默上线了！](https://mp.weixin.qq.com/s/OL9SVmQTvXZS8fqoQwrmBw)\n- 08-24：[Edge 浏览器新标签页出现广告区](https://mp.weixin.qq.com/s/mk1rdAEJhi9JnXvdrrQgKg)\n- 06-14：[祝福所有的 Bio & IT 爱好者们，端午节安康！](https://mp.weixin.qq.com/s/cEjIU8HkjvHiosOL2tmtHQ)\n- 04-20：[阿里云网盘 PC 端内测版已经悄悄来了！](https://mp.weixin.qq.com/s/9POhcHVTVTIV-26Dd01KBA)\n\n#### 2021 视频\n\n- 01-29：[欢迎加入 Galaxy 2021 年管理员培训课程](https://mp.weixin.qq.com/s/OGwFPqPTsCR3HlW2Q7lceA)\n\n## 最后\n\n如果你通过这个平台学到了一点东西，那么对我最好的奖赏就是请你也尝试教我些东西(可以通过邮箱、微信，或者其他社交平台和我联系)。\n\n希望所有读到此平台文章的读者都有所收获。\n\n希望我自己在学习工作生活中尽心尽力有所收获，于人于己问心无愧。', 'bodyText': '如果说 2021 年发生的大事，除了中国共产党成立 100 周年印象最深，就是这一年来国内疫情的相对平缓——终于可以出门走走了。今天，是 2021 年的最后一天，恰好又是周五，盘点一下这一年自己的点滴。\n\n工作\n工作上这一年其实也没有什么太多的变化，内容上依然是离不开集群、数据、Galaxy，以及生信。在舒适区呆的久了，一叶障目，对机器学习、自动化部署/运维、药物开发蠢蠢欲动，做了一些尝试，接下来的一年应该会在这些赛道继续深耕吧。\n生活\n这一年终于可以带娃周围走走了，但也仅限于黄埔附近的一亩三分地，总归是快活的。其他人与人之间的琐事磕碰，难免有些想法，回想起来依旧心绪难平，情绪的把控尚需修炼。值得一提的是还清一些贷款，终于又可以轻装上路，继续努力。\n自己喜欢的游戏，终于也有时间时不时的玩上几把了。\n网易云音乐\n这一年听得歌不多，偏爱粤语歌曲，用网易云的一句话总结：灵魂有点靓仔，梦回港风时代！\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n写作\n语雀\n2022-01-10 语雀的年度总结上线。我手写我心，自己消化，自己懵懂，自己释然，语雀好像已经成为了调节负能量的一个途径！\n\n\n\n公众号\n有幸读到陈皓老师的《为什么我不在微信公众号上写文章》这篇文章，的确给了我很多的启发，在 2021 年，关于写作这件事情上，想通了不少事情，心态自然而然发生了一些变化，开始变得更加佛系。\n\n我觉得一个人有一定的影响力，其中有很大一部份原因来自他的独立性，如果我开始写软文了，相当于我把自己卖了。\n所以，我现在从来不通过写文章挣钱，因为我会写代码，我还是通过我的技能挣钱，通过给一些公司做咨询、培训、企业服务挣钱，老实说，靠自己的能力挣钱，比写文章挣钱挣得多多了，因为我觉得，像我写的这类的文章本来就是用来分享和传播的，不是用来挣钱的。写文章的目的是分享和影响，不是挣钱。\n\n写作是一种心灵的舞蹈，大多数都是舞给自己看的。\n回到公众号上，今年一共在公众号发了 68 篇推文（包括今天这篇），其中原创的 43 篇，转载的 7 篇，综合性文章 8 篇，图文记录 9 条，外加 1 个视频推文。\n2021 原创\n\n\n生物信息\n\n12-17：生物科学数据分析和数据管理本体论\n11-19：Bioconductor 中的 R 包安装教程(续一)\n09-27：Python 获取 NCBI 基因名 SSL 证书异常？\n06-12：使用 Docker 分析高通量测序数据\n\n\n\n(云)服务器\n\n10-16：服务器无法登录？教你如何解决 SSH Failed Permission Denied\n09-30：腾讯云升级 Rocky Linux\n09-29：后 CentOS 时代，作为服务器使用我们该选什么 Linux？\n09-03：服务器崩溃日志 | 误删 OpenSSL 的那点事\n08-03：服务器又中毒了，得治一治！\n07-26：生信服务器 | 防火墙基本配置\n05-27：生信服务器 | 更改 CentOS/RHEL 6/7 中的时区\n01-21：生信服务器 | Linux 时间戳和标准时间\n\n\n\n静态网站\n\n12-24：腾讯云云开发 Webify 上手体验\n02-05：阿里云证书 | 套路太深，还是我打开姿势不对？\n01-08：自定义 coding.net 静态网站域名\n\n\n\n版本控制\n\n12-10：GitHub 代码实时同步 gitee 和 coding\n\n\n\nGalaxy Project\n\n11-04：Galaxy Release (v 21.09)，新的工具面板视图\n06-17：Galaxy Release (v 21.05)，众多核心技术栈变更\n05-19：Galaxy Project | 一些尝试与思考\n04-02：Galaxy v-21.01 发布，新的流程和历史栏体验\n01-13：Galaxy Project | 生信人最值得学习的开源项目之一\n\n\n\n个人随笔\n\n10-14：语雀天使\n06-16：疫情下的广州\n06-03：终于把 7 年前的 Docker Hub 账号恢复了\n\n\n\n编程技术\n\n08-09：Python Excel 操作 | xlrd+xlwt 模块笔记\n04-16：Python 中常见的 TypeError 是什么？\n04-09：R 语言中常见的 10 个错误，看到第 7 个会不会感觉很神奇？\n03-30：Python 列表、字典、元组的一些小技巧\n03-02：R 语言 download.file 的几点知识\n\n\n\n科研见闻\n\n07-21：沉痛悼念 pip search 一路走好\n05-08：英伟达人工智能和处理器驱动的制药、生命科学合作\n04-30：科研杂谈 | 全球最大的数字图书馆\n\n\n\n软件应用\n\n12-08：文件传输命令 rz 与 sz 安装与使用\n11-02：微信 | PC 端使用 USB 共享网络备份\n09-11：SCL+Devtoolset 安装与使用笔记\n09-01：GLIBC 升级安装与 SCL 知识盲区\n08-18：Python 包安装和 postgresql 的一些问题\n07-17：我给自己做了一个导航网站\n04-24：又爱又恨的 Microsoft Edge！\n03-26：使用码云同步谷歌 Chrome 浏览器书签\n02-26：Windows/Linux 下功能强大的桌面截图软件\n02-19：为 Windows 系统替换优雅的苹果字体\n\n\n\n2021 转载\n\n10-20：我和语雀的小欢喜呀\n07-06：RStuido Server 选择不同的 R 版本（conda 中的不同 R 版本）\n06-19：Bash 编程\n05-24：Docker 与 K8S 的区别与介绍\n03-17：生信人实现“SCI 自由”的秘密竟然是…\n03-04：图解三代测序（SMRT Sequencing）\n01-06：深入浅出介绍聚类分析\n\n2021 综合\n\n11-11：一个专注于微信公众号 Markdown 排版的平台\n10-22：服务器推荐 | 2 核 4G 云服务，首年只需要 70 元\n09-07：收藏 | 服务器和存储技术知识\n09-06：男女洗澡前后区别，太形象了！\n03-29：Mdnice 简洁主题\n03-05：肠道菌群机制研究及国自然课题设计专题会议\n01-16：机房布线的最高境界……\n01-02：一针重复 2 万亿段代码，我「逆向工程」了辉瑞疫苗！\n\n2021 图文\n\n11-08：Rocky Linux 阿里云镜像源来啦！\n10-09：Google 是要放弃中文搜索了吗？\n10-02：《鸟哥的 Linux 私房菜》第四版\n09-24：浏览器标准被大公司左右 - 科技爱好者周刊（第 177 期）\n09-21：祝所有的读者中秋节快乐！\n09-09：语雀的用户创作指数默默上线了！\n08-24：Edge 浏览器新标签页出现广告区\n06-14：祝福所有的 Bio & IT 爱好者们，端午节安康！\n04-20：阿里云网盘 PC 端内测版已经悄悄来了！\n\n2021 视频\n\n01-29：欢迎加入 Galaxy 2021 年管理员培训课程\n\n最后\n如果你通过这个平台学到了一点东西，那么对我最好的奖赏就是请你也尝试教我些东西(可以通过邮箱、微信，或者其他社交平台和我联系)。\n希望所有读到此平台文章的读者都有所收获。\n希望我自己在学习工作生活中尽心尽力有所收获，于人于己问心无愧。', 'bodyHTML': '<p dir="auto">如果说 2021 年发生的大事，除了中国共产党成立 100 周年印象最深，就是这一年来国内疫情的相对平缓——终于可以出门走走了。今天，是 2021 年的最后一天，恰好又是周五，盘点一下这一年自己的点滴。</p>\n\n<h2 dir="auto">工作</h2>\n<p dir="auto">工作上这一年其实也没有什么太多的变化，内容上依然是离不开集群、数据、Galaxy，以及生信。在舒适区呆的久了，一叶障目，对机器学习、自动化部署/运维、药物开发蠢蠢欲动，做了一些尝试，接下来的一年应该会在这些赛道继续深耕吧。</p>\n<h2 dir="auto">生活</h2>\n<p dir="auto">这一年终于可以带娃周围走走了，但也仅限于黄埔附近的一亩三分地，总归是快活的。其他人与人之间的琐事磕碰，难免有些想法，回想起来依旧心绪难平，情绪的把控尚需修炼。值得一提的是还清一些贷款，终于又可以轻装上路，继续努力。</p>\n<p dir="auto">自己喜欢的游戏，终于也有时间时不时的玩上几把了。</p>\n<h3 dir="auto">网易云音乐</h3>\n<p dir="auto">这一年听得歌不多，偏爱粤语歌曲，用网易云的一句话总结：<strong>灵魂有点靓仔，梦回港风时代！</strong></p>\n<markdown-accessiblity-table><table role="table">\n<thead>\n<tr>\n<th><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/13427d328843c1f8abe377c0b04e6cffce09b48edf3e7967e09af861f039dbf3/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466f4a6e6b717149325762304e467459506732474d323445646132592e6a706567"><img src="https://camo.githubusercontent.com/13427d328843c1f8abe377c0b04e6cffce09b48edf3e7967e09af861f039dbf3/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466f4a6e6b717149325762304e467459506732474d323445646132592e6a706567" alt="d4879da849c828aae07de0bfb87c0c9.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FoJnkqqI2Wb0NFtYPg2GM24Eda2Y.jpeg" style="max-width: 100%;"></a></th>\n<th><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/490e7cfb0f409525cb78b92808eda633483a4489dfa139fa8c89625786e83d0e/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46746a477646416b6c5174644a366d354835776f543253364872676e2e6a706567"><img src="https://camo.githubusercontent.com/490e7cfb0f409525cb78b92808eda633483a4489dfa139fa8c89625786e83d0e/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46746a477646416b6c5174644a366d354835776f543253364872676e2e6a706567" alt="979c9f6c36dc5ad65603f9d4c4f924b.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FtjGvFAklQtdJ6m5H5woT2S6Hrgn.jpeg" style="max-width: 100%;"></a></th>\n<th><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/da920440631cdda4d52ea5c8b76e27f3452b8241c23741aea6899e0d2f2163bb/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f467475746f4a7577414c75773878714c585373397758424c543931702e6a706567"><img src="https://camo.githubusercontent.com/da920440631cdda4d52ea5c8b76e27f3452b8241c23741aea6899e0d2f2163bb/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f467475746f4a7577414c75773878714c585373397758424c543931702e6a706567" alt="87ae0b3643ec6c1a5bb56346d36ac64.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FtutoJuwALuw8xqLXSs9wXBLT91p.jpeg" style="max-width: 100%;"></a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/f0d55c1c182252c36fe5530b70a3ae20fb8942d775dcb65a1724fcc53f8d32b1/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4670697a464d5654426e70555844685267464343745a684f67636e352e6a706567"><img src="https://camo.githubusercontent.com/f0d55c1c182252c36fe5530b70a3ae20fb8942d775dcb65a1724fcc53f8d32b1/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4670697a464d5654426e70555844685267464343745a684f67636e352e6a706567" alt="c4cce7dccb5b6dfd29ba664161cba18.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FpizFMVTBnpUXDhRgFCCtZhOgcn5.jpeg" style="max-width: 100%;"></a></td>\n<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/31c3833ea08ad0ebbb0d3d2505ba8b2019070e5f1a66f37acba347960cbc3506/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4673696862415143636e4d4943514b6455486572717663466b5866612e6a706567"><img src="https://camo.githubusercontent.com/31c3833ea08ad0ebbb0d3d2505ba8b2019070e5f1a66f37acba347960cbc3506/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4673696862415143636e4d4943514b6455486572717663466b5866612e6a706567" alt="3245b0c783cb345643dc18f83971a97.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FsihbAQCcnMICQKdUHerqvcFkXfa.jpeg" style="max-width: 100%;"></a></td>\n<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/3edea12f40d20f9aef7a392a7eaa305579c69e375987ccca7ebffa9e214cd453/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466b50314465525a4750594b33503162704b6b34344c4977765039352e6a706567"><img src="https://camo.githubusercontent.com/3edea12f40d20f9aef7a392a7eaa305579c69e375987ccca7ebffa9e214cd453/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466b50314465525a4750594b33503162704b6b34344c4977765039352e6a706567" alt="b92cecf95c5240673233906376cf8d6.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FkP1DeRZGPYK3P1bpKk44LIwvP95.jpeg" style="max-width: 100%;"></a></td>\n</tr>\n</tbody>\n</table></markdown-accessiblity-table>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/907b17c969421bbc18b650380a5d65e1f4568905483d5118d251ca1d3daaa9ca/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4675527379426b397354364a59584b5a3651436b30364b4e5f3564532e6a706567"><img src="https://camo.githubusercontent.com/907b17c969421bbc18b650380a5d65e1f4568905483d5118d251ca1d3daaa9ca/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4675527379426b397354364a59584b5a3651436b30364b4e5f3564532e6a706567" alt="da053180b3075d3331e118f70b406a7.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FuRsyBk9sT6JYXKZ6QCk06KN_5dS.jpeg" style="max-width: 100%;"></a></p>\n<h2 dir="auto">写作</h2>\n<h3 dir="auto">语雀</h3>\n<p dir="auto">2022-01-10 语雀的年度总结上线。我手写我心，自己消化，自己懵懂，自己释然，语雀好像已经成为了调节负能量的一个途径！<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/6bee94b67805759a0ebf39f726e4035f0279afaedaf68e1ec6b2d853eab49d48/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f467638316343545f4c616a4e4c6966506b5a59537a583345625973652e706e67"><img src="https://camo.githubusercontent.com/6bee94b67805759a0ebf39f726e4035f0279afaedaf68e1ec6b2d853eab49d48/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f467638316343545f4c616a4e4c6966506b5a59537a583345625973652e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Fv81cCT_LajNLifPkZYSzX3EbYse.png" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/108a25e68d292c260c6d5c541b2a162af35f7bf446849beb5f3003f401208f04/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4674667072785a4b6f6d71427a6b6a77416a476b7035475475596e442e6a706567"><img src="https://camo.githubusercontent.com/108a25e68d292c260c6d5c541b2a162af35f7bf446849beb5f3003f401208f04/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4674667072785a4b6f6d71427a6b6a77416a476b7035475475596e442e6a706567" alt="语雀-2021-1.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FtfprxZKomqBzkjwAjGkp5GTuYnD.jpeg" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/2303995ee7ab85778938df2fbe788a7912c9c41f5d1a94fdb5336409e59d6923/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466c47434a49767937456c6e35667a637275346573557143593762322e706e67"><img src="https://camo.githubusercontent.com/2303995ee7ab85778938df2fbe788a7912c9c41f5d1a94fdb5336409e59d6923/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466c47434a49767937456c6e35667a637275346573557143593762322e706e67" alt="语雀海报.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FlGCJIvy7Eln5fzcru4esUqCY7b2.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">公众号</h3>\n<p dir="auto">有幸读到陈皓老师的《<a href="https://www.yuque.com/shenweiyan/articles/qw325a" rel="nofollow"><strong>为什么我不在微信公众号上写文章</strong></a>》这篇文章，的确给了我很多的启发，在 2021 年，关于写作这件事情上，想通了不少事情，心态自然而然发生了一些变化，开始变得更加佛系。</p>\n<blockquote>\n<p dir="auto"><strong>我觉得一个人有一定的影响力，其中有很大一部份原因来自他的独立性，如果我开始写软文了，相当于我把自己卖了</strong>。</p>\n<p dir="auto">所以，我现在从来不通过写文章挣钱，因为我会写代码，我还是通过我的技能挣钱，通过给一些公司做咨询、培训、企业服务挣钱，老实说，靠自己的能力挣钱，比写文章挣钱挣得多多了，因为我觉得，<strong>像我写的这类的文章本来就是用来分享和传播的，不是用来挣钱的。写文章的目的是分享和影响，不是挣钱。</strong></p>\n</blockquote>\n<p dir="auto">写作是一种心灵的舞蹈，大多数都是舞给自己看的。</p>\n<p dir="auto">回到公众号上，今年一共在公众号发了 68 篇推文（包括今天这篇），其中原创的 43 篇，转载的 7 篇，综合性文章 8 篇，图文记录 9 条，外加 1 个视频推文。</p>\n<h4 dir="auto">2021 原创</h4>\n<ul dir="auto">\n<li>\n<p dir="auto">生物信息</p>\n<ul dir="auto">\n<li>12-17：<a href="https://mp.weixin.qq.com/s/Cq40vsktvi-9mn2xiH9Dmg" rel="nofollow">生物科学数据分析和数据管理本体论</a></li>\n<li>11-19：<a href="https://mp.weixin.qq.com/s/qojN2kYMLq4W_RC7jSyzrg" rel="nofollow">Bioconductor 中的 R 包安装教程(续一)</a></li>\n<li>09-27：<a href="https://mp.weixin.qq.com/s/vf5zmFI_ZS1bqrSRHKdz7Q" rel="nofollow">Python 获取 NCBI 基因名 SSL 证书异常？</a></li>\n<li>06-12：<a href="https://mp.weixin.qq.com/s/xlGyJeukJU_vc4M_39dvXg" rel="nofollow">使用 Docker 分析高通量测序数据</a></li>\n</ul>\n</li>\n<li>\n<p dir="auto">(云)服务器</p>\n<ul dir="auto">\n<li>10-16：<a href="https://mp.weixin.qq.com/s/u1Dw8_2MzCdyjtci9cwJEQ" rel="nofollow">服务器无法登录？教你如何解决 SSH Failed Permission Denied</a></li>\n<li>09-30：<a href="https://mp.weixin.qq.com/s/go0j82Lh6jDcexqmVec4FA" rel="nofollow">腾讯云升级 Rocky Linux</a></li>\n<li>09-29：<a href="https://mp.weixin.qq.com/s/n98ANL3Y1t38ZqWAyqu_dg" rel="nofollow">后 CentOS 时代，作为服务器使用我们该选什么 Linux？</a></li>\n<li>09-03：<a href="https://mp.weixin.qq.com/s/8yrs5j3HRBb59FkQIYrllg" rel="nofollow">服务器崩溃日志 | 误删 OpenSSL 的那点事</a></li>\n<li>08-03：<a href="https://mp.weixin.qq.com/s/hTk0wgb1sUIhsKESNTSbUg" rel="nofollow">服务器又中毒了，得治一治！</a></li>\n<li>07-26：<a href="https://mp.weixin.qq.com/s/twPGVKsdd7HsRkDQfDv91w" rel="nofollow">生信服务器 | 防火墙基本配置</a></li>\n<li>05-27：<a href="https://mp.weixin.qq.com/s/eNU4YuHqxVY45raiCHXmtA" rel="nofollow">生信服务器 | 更改 CentOS/RHEL 6/7 中的时区</a></li>\n<li>01-21：<a href="https://mp.weixin.qq.com/s/kF9_C23UYjjWoDg4fWyQzg" rel="nofollow">生信服务器 | Linux 时间戳和标准时间</a></li>\n</ul>\n</li>\n<li>\n<p dir="auto">静态网站</p>\n<ul dir="auto">\n<li>12-24：<a href="https://mp.weixin.qq.com/s/CosiH4w1wCTkc5H9TGGRBA" rel="nofollow">腾讯云云开发 Webify 上手体验</a></li>\n<li>02-05：<a href="https://mp.weixin.qq.com/s/pDw6_zgl6wkJgpt6WuyvsA" rel="nofollow">阿里云证书 | 套路太深，还是我打开姿势不对？</a></li>\n<li>01-08：<a href="https://mp.weixin.qq.com/s/i4obfyd6aJ8HsKdR7cvz3g" rel="nofollow">自定义 coding.net 静态网站域名</a></li>\n</ul>\n</li>\n<li>\n<p dir="auto">版本控制</p>\n<ul dir="auto">\n<li>12-10：<a href="https://mp.weixin.qq.com/s/4P2A1zb8VRMg9VYi_QiehQ" rel="nofollow">GitHub 代码实时同步 gitee 和 coding</a></li>\n</ul>\n</li>\n<li>\n<p dir="auto">Galaxy Project</p>\n<ul dir="auto">\n<li>11-04：<a href="https://mp.weixin.qq.com/s/C5Av4qz1Vuxx7EBevDGyug" rel="nofollow">Galaxy Release (v 21.09)，新的工具面板视图</a></li>\n<li>06-17：<a href="https://mp.weixin.qq.com/s/QxA2i-4H2QPotSzfOq_4fg" rel="nofollow">Galaxy Release (v 21.05)，众多核心技术栈变更</a></li>\n<li>05-19：<a href="https://mp.weixin.qq.com/s/NrvlelvC6uLAnJhWMMLacQ" rel="nofollow">Galaxy Project | 一些尝试与思考</a></li>\n<li>04-02：<a href="https://mp.weixin.qq.com/s/JyL75dmUpz1tkDjv3DpAsg" rel="nofollow">Galaxy v-21.01 发布，新的流程和历史栏体验</a></li>\n<li>01-13：<a href="https://mp.weixin.qq.com/s/BOHUzRbcCAH1LwihwBA4Yg" rel="nofollow">Galaxy Project | 生信人最值得学习的开源项目之一</a></li>\n</ul>\n</li>\n<li>\n<p dir="auto">个人随笔</p>\n<ul dir="auto">\n<li>10-14：<a href="https://mp.weixin.qq.com/s/mv6oHB7ZLw7fuz2PNtTepQ" rel="nofollow">语雀天使</a></li>\n<li>06-16：<a href="https://mp.weixin.qq.com/s/SVfMMIMph7jap5UcykSo8w" rel="nofollow">疫情下的广州</a></li>\n<li>06-03：<a href="https://mp.weixin.qq.com/s/dhhFLRh9RL_E2B8Vj9OSeg" rel="nofollow">终于把 7 年前的 Docker Hub 账号恢复了</a></li>\n</ul>\n</li>\n<li>\n<p dir="auto">编程技术</p>\n<ul dir="auto">\n<li>08-09：<a href="https://mp.weixin.qq.com/s/ygCbt5nV8mOIax7FBXViCQ" rel="nofollow">Python Excel 操作 | xlrd+xlwt 模块笔记</a></li>\n<li>04-16：<a href="https://mp.weixin.qq.com/s/HcNt-WzZjipGG6dDQAgHgw" rel="nofollow">Python 中常见的 TypeError 是什么？</a></li>\n<li>04-09：<a href="https://mp.weixin.qq.com/s/5w20SbS1PuiyqP5oTXn5ZQ" rel="nofollow">R 语言中常见的 10 个错误，看到第 7 个会不会感觉很神奇？</a></li>\n<li>03-30：<a href="https://mp.weixin.qq.com/s/-YLE-RjU0q8pBk9qlLsf1w" rel="nofollow">Python 列表、字典、元组的一些小技巧</a></li>\n<li>03-02：<a href="https://mp.weixin.qq.com/s/Cu8Q_mmkUfGGOrntPWVh1A" rel="nofollow">R 语言 download.file 的几点知识</a></li>\n</ul>\n</li>\n<li>\n<p dir="auto">科研见闻</p>\n<ul dir="auto">\n<li>07-21：<a href="https://mp.weixin.qq.com/s/S2JRu-F_-LQRt5LYh_QaOA" rel="nofollow">沉痛悼念 pip search 一路走好</a></li>\n<li>05-08：<a href="https://mp.weixin.qq.com/s/uqydAoNRY0wSXqmdWCuq-Q" rel="nofollow">英伟达人工智能和处理器驱动的制药、生命科学合作</a></li>\n<li>04-30：<a href="https://mp.weixin.qq.com/s/hA6966BeDvk1-AY8TlL_JA" rel="nofollow">科研杂谈 | 全球最大的数字图书馆</a></li>\n</ul>\n</li>\n<li>\n<p dir="auto">软件应用</p>\n<ul dir="auto">\n<li>12-08：<a href="https://mp.weixin.qq.com/s/Zy1AGsM5rMJH9ngrfB1x1A" rel="nofollow">文件传输命令 rz 与 sz 安装与使用</a></li>\n<li>11-02：<a href="https://mp.weixin.qq.com/s/0VrkNotpF6KlNVJq36sn9A" rel="nofollow">微信 | PC 端使用 USB 共享网络备份</a></li>\n<li>09-11：<a href="https://mp.weixin.qq.com/s/GrSg8RdjlAAOTmgzpdf8zg" rel="nofollow">SCL+Devtoolset 安装与使用笔记</a></li>\n<li>09-01：<a href="https://mp.weixin.qq.com/s/IsPIGknkXLsHx7MgiCcz7g" rel="nofollow">GLIBC 升级安装与 SCL 知识盲区</a></li>\n<li>08-18：<a href="https://mp.weixin.qq.com/s/_sVajE6uutLsdR4pHLmwmQ" rel="nofollow">Python 包安装和 postgresql 的一些问题</a></li>\n<li>07-17：<a href="https://mp.weixin.qq.com/s/gVWGjxG9qd7qSyX3N8Zgag" rel="nofollow">我给自己做了一个导航网站</a></li>\n<li>04-24：<a href="https://mp.weixin.qq.com/s/ArseLf89u76cHZzHE1l-JQ" rel="nofollow">又爱又恨的 Microsoft Edge！</a></li>\n<li>03-26：<a href="https://mp.weixin.qq.com/s/DXEmYz8akoDtshE1ziaG2g" rel="nofollow">使用码云同步谷歌 Chrome 浏览器书签</a></li>\n<li>02-26：<a href="https://mp.weixin.qq.com/s/aHvkdwsPP3OBhUcXDMhkQQ" rel="nofollow">Windows/Linux 下功能强大的桌面截图软件</a></li>\n<li>02-19：<a href="https://mp.weixin.qq.com/s/2XId7dvAc_mMUszzRKeSiw" rel="nofollow">为 Windows 系统替换优雅的苹果字体</a></li>\n</ul>\n</li>\n</ul>\n<h4 dir="auto">2021 转载</h4>\n<ul dir="auto">\n<li>10-20：<a href="https://mp.weixin.qq.com/s/nnE_M7isih3komrw3pccGw" rel="nofollow">我和语雀的小欢喜呀</a></li>\n<li>07-06：<a href="https://mp.weixin.qq.com/s/2v1c_Nlk5OhSL3O8k2N9Tw" rel="nofollow">RStuido Server 选择不同的 R 版本（conda 中的不同 R 版本）</a></li>\n<li>06-19：<a href="https://mp.weixin.qq.com/s/w67bOn2FRO0B4gB8wULHIw" rel="nofollow">Bash 编程</a></li>\n<li>05-24：<a href="https://mp.weixin.qq.com/s/vE5FbxK7ZPC-_V3yFKojmA" rel="nofollow">Docker 与 K8S 的区别与介绍</a></li>\n<li>03-17：<a href="https://mp.weixin.qq.com/s/zY9-HHyUTFE7rTUMef_cuQ" rel="nofollow">生信人实现“SCI 自由”的秘密竟然是…</a></li>\n<li>03-04：<a href="https://mp.weixin.qq.com/s/OFGKfsAfqPU_o1PpKpKb7Q" rel="nofollow">图解三代测序（SMRT Sequencing）</a></li>\n<li>01-06：<a href="https://mp.weixin.qq.com/s/ggHhyN2Z38vJr64e7CYfyA" rel="nofollow">深入浅出介绍聚类分析</a></li>\n</ul>\n<h4 dir="auto">2021 综合</h4>\n<ul dir="auto">\n<li>11-11：<a href="https://mp.weixin.qq.com/s/FMMx943coYWvgr1uUbTCfQ" rel="nofollow">一个专注于微信公众号 Markdown 排版的平台</a></li>\n<li>10-22：<a href="https://mp.weixin.qq.com/s/Jyxznyztoxx0NKalz7o_9A" rel="nofollow">服务器推荐 | 2 核 4G 云服务，首年只需要 70 元</a></li>\n<li>09-07：<a href="https://mp.weixin.qq.com/s/iRbpQi6wS_lSdRchwVj8Fw" rel="nofollow">收藏 | 服务器和存储技术知识</a></li>\n<li>09-06：<a href="https://mp.weixin.qq.com/s/ycc06QYh4Ef6sGBbCAKXHQ" rel="nofollow">男女洗澡前后区别，太形象了！</a></li>\n<li>03-29：<a href="https://mp.weixin.qq.com/s/61OBH4coZDeBHPbbAJekog" rel="nofollow">Mdnice 简洁主题</a></li>\n<li>03-05：<a href="https://mp.weixin.qq.com/s/_eBBAu_RotajMz4f0rY9EA" rel="nofollow">肠道菌群机制研究及国自然课题设计专题会议</a></li>\n<li>01-16：<a href="https://mp.weixin.qq.com/s/BWIKU-yCaDLxSedc7mxJBA" rel="nofollow">机房布线的最高境界……</a></li>\n<li>01-02：<a href="https://mp.weixin.qq.com/s/5-PHC4myrc3FNzy0eqxs1Q" rel="nofollow">一针重复 2 万亿段代码，我「逆向工程」了辉瑞疫苗！</a></li>\n</ul>\n<h4 dir="auto">2021 图文</h4>\n<ul dir="auto">\n<li>11-08：<a href="https://mp.weixin.qq.com/s/5WnnAeWxivE9XC1eBOfDvw" rel="nofollow">Rocky Linux 阿里云镜像源来啦！</a></li>\n<li>10-09：<a href="https://mp.weixin.qq.com/s/fMN41JojYEOs_RWfeztuQg" rel="nofollow">Google 是要放弃中文搜索了吗？</a></li>\n<li>10-02：<a href="https://mp.weixin.qq.com/s/eh8O7uxru1j6EqN22MsQpg" rel="nofollow">《鸟哥的 Linux 私房菜》第四版</a></li>\n<li>09-24：<a href="https://mp.weixin.qq.com/s/rcH6bNQw-fgh-NuCyHAHaA" rel="nofollow">浏览器标准被大公司左右 - 科技爱好者周刊（第 177 期）</a></li>\n<li>09-21：<a href="https://mp.weixin.qq.com/s/jT3s7OiDtT7WWobZXkdzKQ" rel="nofollow">祝所有的读者中秋节快乐！</a></li>\n<li>09-09：<a href="https://mp.weixin.qq.com/s/OL9SVmQTvXZS8fqoQwrmBw" rel="nofollow">语雀的用户创作指数默默上线了！</a></li>\n<li>08-24：<a href="https://mp.weixin.qq.com/s/mk1rdAEJhi9JnXvdrrQgKg" rel="nofollow">Edge 浏览器新标签页出现广告区</a></li>\n<li>06-14：<a href="https://mp.weixin.qq.com/s/cEjIU8HkjvHiosOL2tmtHQ" rel="nofollow">祝福所有的 Bio &amp; IT 爱好者们，端午节安康！</a></li>\n<li>04-20：<a href="https://mp.weixin.qq.com/s/9POhcHVTVTIV-26Dd01KBA" rel="nofollow">阿里云网盘 PC 端内测版已经悄悄来了！</a></li>\n</ul>\n<h4 dir="auto">2021 视频</h4>\n<ul dir="auto">\n<li>01-29：<a href="https://mp.weixin.qq.com/s/OGwFPqPTsCR3HlW2Q7lceA" rel="nofollow">欢迎加入 Galaxy 2021 年管理员培训课程</a></li>\n</ul>\n<h2 dir="auto">最后</h2>\n<p dir="auto">如果你通过这个平台学到了一点东西，那么对我最好的奖赏就是请你也尝试教我些东西(可以通过邮箱、微信，或者其他社交平台和我联系)。</p>\n<p dir="auto">希望所有读到此平台文章的读者都有所收获。</p>\n<p dir="auto">希望我自己在学习工作生活中尽心尽力有所收获，于人于己问心无愧。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.5-语雀'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '搜狗拼音输入法', 'number': 120, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/120', 'createdAt': '2025-04-30T08:09:00Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T08:09:01Z', 'body': '这是关于输入法的第二篇乱弹笔记。专门聊一下我和搜狗输入法的那些事情~    \n\n<!-- more -->\n\n![搜狗拼音输入法.png](https://shub.weiyan.tech/yuque/elog-notebook-img/FgzbAuzkS4vpjdfgkVnYQOP4eaEe.png)\n\n## 收藏的皮肤\n\n各大输入法的皮肤都很多，眼花缭乱。\n\n个人比较喜欢搜狗输入法的一款皮肤：[【鹿】四君子-兰 - 搜狗输入法 - 搜狗皮肤](https://pinyin.sogou.com/skins/detail/view/info/572400)，简洁，最重要的是纵向排列形 的状态栏不会把 Windows 的任务栏挡住！\n\n参考：[https://pinyin.sogou.com/images/help/s_mkskin/makeskin(s).pdf](<https://pinyin.sogou.com/images/help/s_mkskin/makeskin(s).pdf>)      \n![image.png](https://shub.weiyan.tech/yuque/elog-notebook-img/FgRemRjcu9D3Th3yX0WllRBBAv1L.png)\n![](https://shub.weiyan.tech/yuque/elog-notebook-img/FiGsKAnk4g1awYIMj6WdVD9eQ4fW.png)\n\n## 皮肤无法解压\n\n搜狗官网下载的皮肤基本都是没法用压缩软件打开的，具体原因参考《[搜狗输入法 .ssf 格式皮肤无法解压的原因 | Linux 区](https://linux.zone/5616/comment-page-1#comment-12770)》。\n\n> 本来想给 Manjaro 的 fcitx 搜狗拼音多安装一些皮肤，结果发现从搜狗官方下载的大部分皮肤并不能如其所说修改为 zip 格式之后就可以用压缩软件打开。\n>\n> 后来[探索发现](http://pinyin.sogou.com/bbs/forum.php?mod=viewthread&tid=729709&highlight=ssf)原来是因为“.ssf”皮肤还有一种 Flash 格式的，搜狗官方说“[为了防止作者辛苦制作的 Flash 被盗用，维护作者权利，不允许对官方审核通过的 Flash 皮肤进行解压缩和编辑。](https://pinyin.sogou.com/open/faq.php?id=85)”真没想到 Flash 这种优秀的闭源软件能够通过这种方式生存下去，而且还被用之于反抄袭反侵权，心里莫名感动了一下。\n>\n> 再后来又发现，不能解压的 .ssf 皮肤不一定是 Flash 格式皮肤，就算普通 ssf 皮肤也受到了版权保护，有人在搜狗论坛上给出了答案：“[为了防止作者的作品被修改盗用，官网下载的都是加密的](http://pinyin.sogou.com/bbs/forum.php?mod=viewthread&tid=2712039&extra=page%3D2)”。\n>\n> 通过加密的方式来防止修改盗用、保护劳动者的著作权，这简直是肥佬斯托曼 [GNU 思想](https://www.linux.zone/archives/6211)的“死敌”啊，不得不表示支持！\n\n## 异常问题处理\n\n之前在《[输入法，哪一个才是我的菜？ · 语雀](https://www.yuque.com/shenweiyan/mind/input)》提到过搜狗中文输入法在 MobaXterm 异常的问题，有待修复。\n\n[札记 | 2021](https://www.yuque.com/shenweiyan/wow/srqyqv?view=doc_embed&inner=comment-21750872)\n\n![image.png](https://shub.weiyan.tech/yuque/elog-notebook-img/FjpghqJs-16Udl2XmpLT87Vs0g0m.png)', 'bodyText': '这是关于输入法的第二篇乱弹笔记。专门聊一下我和搜狗输入法的那些事情~\n\n\n收藏的皮肤\n各大输入法的皮肤都很多，眼花缭乱。\n个人比较喜欢搜狗输入法的一款皮肤：【鹿】四君子-兰 - 搜狗输入法 - 搜狗皮肤，简洁，最重要的是纵向排列形 的状态栏不会把 Windows 的任务栏挡住！\n参考：https://pinyin.sogou.com/images/help/s_mkskin/makeskin(s).pdf\n\n\n皮肤无法解压\n搜狗官网下载的皮肤基本都是没法用压缩软件打开的，具体原因参考《搜狗输入法 .ssf 格式皮肤无法解压的原因 | Linux 区》。\n\n本来想给 Manjaro 的 fcitx 搜狗拼音多安装一些皮肤，结果发现从搜狗官方下载的大部分皮肤并不能如其所说修改为 zip 格式之后就可以用压缩软件打开。\n后来探索发现原来是因为“.ssf”皮肤还有一种 Flash 格式的，搜狗官方说“为了防止作者辛苦制作的 Flash 被盗用，维护作者权利，不允许对官方审核通过的 Flash 皮肤进行解压缩和编辑。”真没想到 Flash 这种优秀的闭源软件能够通过这种方式生存下去，而且还被用之于反抄袭反侵权，心里莫名感动了一下。\n再后来又发现，不能解压的 .ssf 皮肤不一定是 Flash 格式皮肤，就算普通 ssf 皮肤也受到了版权保护，有人在搜狗论坛上给出了答案：“为了防止作者的作品被修改盗用，官网下载的都是加密的”。\n通过加密的方式来防止修改盗用、保护劳动者的著作权，这简直是肥佬斯托曼 GNU 思想的“死敌”啊，不得不表示支持！\n\n异常问题处理\n之前在《输入法，哪一个才是我的菜？ · 语雀》提到过搜狗中文输入法在 MobaXterm 异常的问题，有待修复。\n札记 | 2021', 'bodyHTML': '<p dir="auto">这是关于输入法的第二篇乱弹笔记。专门聊一下我和搜狗输入法的那些事情~</p>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/51c94d0a885bf6f392f4585d954c5b8dd1d773ac702ba0a79e478071f080bd36/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46677a6241757a6b533476706a6466676b566e59514f5034656145652e706e67"><img src="https://camo.githubusercontent.com/51c94d0a885bf6f392f4585d954c5b8dd1d773ac702ba0a79e478071f080bd36/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46677a6241757a6b533476706a6466676b566e59514f5034656145652e706e67" alt="搜狗拼音输入法.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FgzbAuzkS4vpjdfgkVnYQOP4eaEe.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">收藏的皮肤</h2>\n<p dir="auto">各大输入法的皮肤都很多，眼花缭乱。</p>\n<p dir="auto">个人比较喜欢搜狗输入法的一款皮肤：<a href="https://pinyin.sogou.com/skins/detail/view/info/572400" rel="nofollow">【鹿】四君子-兰 - 搜狗输入法 - 搜狗皮肤</a>，简洁，最重要的是纵向排列形 的状态栏不会把 Windows 的任务栏挡住！</p>\n<p dir="auto">参考：<a href="https://pinyin.sogou.com/images/help/s_mkskin/makeskin(s).pdf" rel="nofollow">https://pinyin.sogou.com/images/help/s_mkskin/makeskin(s).pdf</a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/c5fc4318e8baefcf4ea9b917616039674036e10c8812cc39d5aad8ea9ba451f6/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466752656d526a6375394433546833795830576c6c5242424176314c2e706e67"><img src="https://camo.githubusercontent.com/c5fc4318e8baefcf4ea9b917616039674036e10c8812cc39d5aad8ea9ba451f6/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466752656d526a6375394433546833795830576c6c5242424176314c2e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FgRemRjcu9D3Th3yX0WllRBBAv1L.png" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/4a8db6e1e4f10b9ee825eb93d50ea6907652d17cff21e4845c022e5b2c8f7fad/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466947734b416e6b346731617759494d6a36576456443965513466572e706e67"><img src="https://camo.githubusercontent.com/4a8db6e1e4f10b9ee825eb93d50ea6907652d17cff21e4845c022e5b2c8f7fad/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466947734b416e6b346731617759494d6a36576456443965513466572e706e67" alt="" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FiGsKAnk4g1awYIMj6WdVD9eQ4fW.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">皮肤无法解压</h2>\n<p dir="auto">搜狗官网下载的皮肤基本都是没法用压缩软件打开的，具体原因参考《<a href="https://linux.zone/5616/comment-page-1#comment-12770" rel="nofollow">搜狗输入法 .ssf 格式皮肤无法解压的原因 | Linux 区</a>》。</p>\n<blockquote>\n<p dir="auto">本来想给 Manjaro 的 fcitx 搜狗拼音多安装一些皮肤，结果发现从搜狗官方下载的大部分皮肤并不能如其所说修改为 zip 格式之后就可以用压缩软件打开。</p>\n<p dir="auto">后来<a href="http://pinyin.sogou.com/bbs/forum.php?mod=viewthread&amp;tid=729709&amp;highlight=ssf" rel="nofollow">探索发现</a>原来是因为“.ssf”皮肤还有一种 Flash 格式的，搜狗官方说“<a href="https://pinyin.sogou.com/open/faq.php?id=85" rel="nofollow">为了防止作者辛苦制作的 Flash 被盗用，维护作者权利，不允许对官方审核通过的 Flash 皮肤进行解压缩和编辑。</a>”真没想到 Flash 这种优秀的闭源软件能够通过这种方式生存下去，而且还被用之于反抄袭反侵权，心里莫名感动了一下。</p>\n<p dir="auto">再后来又发现，不能解压的 .ssf 皮肤不一定是 Flash 格式皮肤，就算普通 ssf 皮肤也受到了版权保护，有人在搜狗论坛上给出了答案：“<a href="http://pinyin.sogou.com/bbs/forum.php?mod=viewthread&amp;tid=2712039&amp;extra=page%3D2" rel="nofollow">为了防止作者的作品被修改盗用，官网下载的都是加密的</a>”。</p>\n<p dir="auto">通过加密的方式来防止修改盗用、保护劳动者的著作权，这简直是肥佬斯托曼 <a href="https://www.linux.zone/archives/6211" rel="nofollow">GNU 思想</a>的“死敌”啊，不得不表示支持！</p>\n</blockquote>\n<h2 dir="auto">异常问题处理</h2>\n<p dir="auto">之前在《<a href="https://www.yuque.com/shenweiyan/mind/input" rel="nofollow">输入法，哪一个才是我的菜？ · 语雀</a>》提到过搜狗中文输入法在 MobaXterm 异常的问题，有待修复。</p>\n<p dir="auto"><a href="https://www.yuque.com/shenweiyan/wow/srqyqv?view=doc_embed&amp;inner=comment-21750872" rel="nofollow">札记 | 2021</a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/e701ed3362cf79f589d406b54eaa56767bae3d6d0c31f7aeedb12fb6d11d4c34/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466a706768714a732d313655646c32586d704c54383756733067306d2e706e67"><img src="https://camo.githubusercontent.com/e701ed3362cf79f589d406b54eaa56767bae3d6d0c31f7aeedb12fb6d11d4c34/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466a706768714a732d313655646c32586d704c54383756733067306d2e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FjpghqJs-16Udl2XmpLT87Vs0g0m.png" style="max-width: 100%;"></a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.5-语雀'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '输入法，哪一个才是我的菜？', 'number': 119, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/119', 'createdAt': '2025-04-30T07:21:41Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T07:21:42Z', 'body': '> Categories: 博客/语雀\r\n\r\n记录一下这些年来在电脑上使用的输入法的一些感受，以前在 Win10 使用自带微软拼音输入法倒也没发现什么问题，后来办公的 PC 变成了 Win7，强迫症作祟开始各种倒腾和记录。\r\n\r\n<!-- more -->\r\n\r\n## 20220112，修复\r\n\r\n搜狗输入法（PC）对用户的反馈的问题还是比较重视的，终于把这一个问题给修复了。\r\n![2c52da194b39fe60f660e4d989178da.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/Fq4slj-Qr0vXLUMGhYX2wQZwnpB4.jpeg)\r\n![image.png](https://shub.weiyan.tech/yuque/elog-notebook-img/FjpghqJs-16Udl2XmpLT87Vs0g0m.png)\r\n\r\n## 20211018，删除操作\r\n\r\n试了一下搜狗、百度和讯飞 PC 端的输入法，发现搜狗和百度在 Mobaxterm 中 Backspace 删除操作无法在候选区进行删除，只有讯飞可以正常使用！！！\r\n[百度搜狗在 Mobaxterm 中无法通过 Backspace 键删除.mp4](https://www.yuque.com/shenweiyan/notebook/input)\r\n\r\n## 20211012，数据与账号同步\r\n\r\n从 9 月中旬把移动端+PC 端的输入法从搜狗全线换成百度输入法后，一直在努力适应中，但今天居然发现账号/数据同步出现问题了！\r\n![百度输入法01.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/Fi9keXw1_rv7xDz83p_hfkhCt19d.jpeg)\r\n![百度输入法02.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/Fie1gLptxXtDyZ6x_m4sKxdHB23m.jpeg)\r\n而且发现：\r\n\r\n- [百度 PC 端](https://shurufa.baidu.com/update)的输入法更新力度比不上[搜狗 PC 端](https://pinyin.sogou.com/changelog.php)的输入法。百度 PC 输入法在 2020 年基本没有任何更新，直到 2021.06 月才开始有所动作。\r\n- 问题反馈，都有微博，都有百度贴吧，搜狗有 QQ 群（虽然我没怎么用过）。个人试过微博反馈相关的问题，很快就收到了[搜狗技术支持](https://weibo.com/u/2285231187)的回馈；[百度输入法商务助手](https://weibo.com/u/1829860077)迟迟没有反应，反而是[百度输入法小助手](https://weibo.com/u/2757484243)很快就反馈了。\r\n- 在手机端百度输入法和搜狗输入法都感觉很顺畅，没什么大的问题；PC 端，百度输入法在切换不同的软件场景时会默认开启全角输入，非常不好。\r\n- 搜狗输入法的账号系统，个人感觉不太好用，尤其的 web 端！百度输入法的账号系统相对好一些，但是稳定性不够。\r\n\r\n搜狗输入法是搜狗(Sogou)公司于 2006 年 6 月推出的一款汉字输入法工具。2009 年 9 月开始，搜狗输入法陆续推出 Android、iOS 版本，成为智能手机时代最强大的第三方输入法之一。\r\n\r\n百度拼音输入法是百度公司免费提供的输入软件。2010 年 10 月推出，拥有百度搜索和云端技术的支持，百度输入法很快成为了新一代的输入产品。\r\n\r\n一点直观感受是，在流畅度上搜狗输入法要好一点点，但是百度输入法可能更值得期待。\r\n\r\n## 20210913，使用百度\r\n\r\n百度输入法也终于在**安卓手机**上支持**左右滑动键盘**来**移动光标**，我也把手机、PC 的输入法都换成百度了！\r\n\r\n## 20200820，搜狗自定义并固定标点\r\n\r\n**问：安卓手机中搜狗输入法左边的标点符号怎样自定义并且固定？**\r\n**答：设置 → 更多设置 → 输入习惯 → 自定义符号设置**\r\n\r\n## 20191016，左右滑动键盘来移动光标\r\n\r\n现在移动端电脑端的输入法有很多。但有一个问题：**安卓手机**上哪个输入法可以**左右滑动键盘**来**移动光标**？\r\n\r\n![](https://shub.weiyan.tech/yuque/elog-notebook-img/Fp2xs-BpN1KDZPOpv_MxM7r7W635.png)\r\n\r\n我用的是华为手机，经测试目前搜狗输入法是可以的，百度、讯飞暂不支持。\r\n\r\n第二个问题，左右角引号（「」）怎么打在搜狗输入法中怎么打出来？**ctrl+shift+z** 快捷键弹出搜狗输入法特殊符号，在 **"标点符号"** 中选择。\r\n![image.png](https://shub.weiyan.tech/yuque/elog-notebook-img/FlJaOTNYFhTbGfIcrRVVSZ3rjudX.png)\r\n\r\n艾媒咨询 (https://www.iimedia.cn/) 每年都有关于中国第三方手机输入法行业趋势研究报告，PC 端的不怎么看到，感兴趣的也可以去看看。\r\n\r\n![image.png](https://shub.weiyan.tech/yuque/elog-notebook-img/FvF-dagzFM03BT3s0Ti7tkyIK8Eo.png)\r\n', 'bodyText': 'Categories: 博客/语雀\n\n记录一下这些年来在电脑上使用的输入法的一些感受，以前在 Win10 使用自带微软拼音输入法倒也没发现什么问题，后来办公的 PC 变成了 Win7，强迫症作祟开始各种倒腾和记录。\n\n20220112，修复\n搜狗输入法（PC）对用户的反馈的问题还是比较重视的，终于把这一个问题给修复了。\n\n\n20211018，删除操作\n试了一下搜狗、百度和讯飞 PC 端的输入法，发现搜狗和百度在 Mobaxterm 中 Backspace 删除操作无法在候选区进行删除，只有讯飞可以正常使用！！！\n百度搜狗在 Mobaxterm 中无法通过 Backspace 键删除.mp4\n20211012，数据与账号同步\n从 9 月中旬把移动端+PC 端的输入法从搜狗全线换成百度输入法后，一直在努力适应中，但今天居然发现账号/数据同步出现问题了！\n\n\n而且发现：\n\n百度 PC 端的输入法更新力度比不上搜狗 PC 端的输入法。百度 PC 输入法在 2020 年基本没有任何更新，直到 2021.06 月才开始有所动作。\n问题反馈，都有微博，都有百度贴吧，搜狗有 QQ 群（虽然我没怎么用过）。个人试过微博反馈相关的问题，很快就收到了搜狗技术支持的回馈；百度输入法商务助手迟迟没有反应，反而是百度输入法小助手很快就反馈了。\n在手机端百度输入法和搜狗输入法都感觉很顺畅，没什么大的问题；PC 端，百度输入法在切换不同的软件场景时会默认开启全角输入，非常不好。\n搜狗输入法的账号系统，个人感觉不太好用，尤其的 web 端！百度输入法的账号系统相对好一些，但是稳定性不够。\n\n搜狗输入法是搜狗(Sogou)公司于 2006 年 6 月推出的一款汉字输入法工具。2009 年 9 月开始，搜狗输入法陆续推出 Android、iOS 版本，成为智能手机时代最强大的第三方输入法之一。\n百度拼音输入法是百度公司免费提供的输入软件。2010 年 10 月推出，拥有百度搜索和云端技术的支持，百度输入法很快成为了新一代的输入产品。\n一点直观感受是，在流畅度上搜狗输入法要好一点点，但是百度输入法可能更值得期待。\n20210913，使用百度\n百度输入法也终于在安卓手机上支持左右滑动键盘来移动光标，我也把手机、PC 的输入法都换成百度了！\n20200820，搜狗自定义并固定标点\n问：安卓手机中搜狗输入法左边的标点符号怎样自定义并且固定？\n答：设置 → 更多设置 → 输入习惯 → 自定义符号设置\n20191016，左右滑动键盘来移动光标\n现在移动端电脑端的输入法有很多。但有一个问题：安卓手机上哪个输入法可以左右滑动键盘来移动光标？\n\n我用的是华为手机，经测试目前搜狗输入法是可以的，百度、讯飞暂不支持。\n第二个问题，左右角引号（「」）怎么打在搜狗输入法中怎么打出来？ctrl+shift+z 快捷键弹出搜狗输入法特殊符号，在 "标点符号" 中选择。\n\n艾媒咨询 (https://www.iimedia.cn/) 每年都有关于中国第三方手机输入法行业趋势研究报告，PC 端的不怎么看到，感兴趣的也可以去看看。', 'bodyHTML': '<blockquote>\n<p dir="auto">Categories: 博客/语雀</p>\n</blockquote>\n<p dir="auto">记录一下这些年来在电脑上使用的输入法的一些感受，以前在 Win10 使用自带微软拼音输入法倒也没发现什么问题，后来办公的 PC 变成了 Win7，强迫症作祟开始各种倒腾和记录。</p>\n\n<h2 dir="auto">20220112，修复</h2>\n<p dir="auto">搜狗输入法（PC）对用户的反馈的问题还是比较重视的，终于把这一个问题给修复了。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/9777a732088e38060523b931ababfa19a506a083a2a3ef4e0afa71d050d0e5f9/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f467134736c6a2d51723076584c554d476859583277515a776e7042342e6a706567"><img src="https://camo.githubusercontent.com/9777a732088e38060523b931ababfa19a506a083a2a3ef4e0afa71d050d0e5f9/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f467134736c6a2d51723076584c554d476859583277515a776e7042342e6a706567" alt="2c52da194b39fe60f660e4d989178da.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Fq4slj-Qr0vXLUMGhYX2wQZwnpB4.jpeg" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/e701ed3362cf79f589d406b54eaa56767bae3d6d0c31f7aeedb12fb6d11d4c34/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466a706768714a732d313655646c32586d704c54383756733067306d2e706e67"><img src="https://camo.githubusercontent.com/e701ed3362cf79f589d406b54eaa56767bae3d6d0c31f7aeedb12fb6d11d4c34/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466a706768714a732d313655646c32586d704c54383756733067306d2e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FjpghqJs-16Udl2XmpLT87Vs0g0m.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">20211018，删除操作</h2>\n<p dir="auto">试了一下搜狗、百度和讯飞 PC 端的输入法，发现搜狗和百度在 Mobaxterm 中 Backspace 删除操作无法在候选区进行删除，只有讯飞可以正常使用！！！<br>\n<a href="https://www.yuque.com/shenweiyan/notebook/input" rel="nofollow">百度搜狗在 Mobaxterm 中无法通过 Backspace 键删除.mp4</a></p>\n<h2 dir="auto">20211012，数据与账号同步</h2>\n<p dir="auto">从 9 月中旬把移动端+PC 端的输入法从搜狗全线换成百度输入法后，一直在努力适应中，但今天居然发现账号/数据同步出现问题了！<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/25fbb19eff60309ad963dfb95caea573b5a2def55d9e04c59dbaf4bbf1c66af0/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4669396b655877315f72763778447a3833705f68666b6843743139642e6a706567"><img src="https://camo.githubusercontent.com/25fbb19eff60309ad963dfb95caea573b5a2def55d9e04c59dbaf4bbf1c66af0/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4669396b655877315f72763778447a3833705f68666b6843743139642e6a706567" alt="百度输入法01.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Fi9keXw1_rv7xDz83p_hfkhCt19d.jpeg" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/1cc2b66c59caecbbd89fc5dd39337633987d814261dc1a5a49b5a9b7aac04480/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46696531674c707478587444795a36785f6d34734b7864484232336d2e6a706567"><img src="https://camo.githubusercontent.com/1cc2b66c59caecbbd89fc5dd39337633987d814261dc1a5a49b5a9b7aac04480/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46696531674c707478587444795a36785f6d34734b7864484232336d2e6a706567" alt="百度输入法02.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Fie1gLptxXtDyZ6x_m4sKxdHB23m.jpeg" style="max-width: 100%;"></a><br>\n而且发现：</p>\n<ul dir="auto">\n<li><a href="https://shurufa.baidu.com/update" rel="nofollow">百度 PC 端</a>的输入法更新力度比不上<a href="https://pinyin.sogou.com/changelog.php" rel="nofollow">搜狗 PC 端</a>的输入法。百度 PC 输入法在 2020 年基本没有任何更新，直到 2021.06 月才开始有所动作。</li>\n<li>问题反馈，都有微博，都有百度贴吧，搜狗有 QQ 群（虽然我没怎么用过）。个人试过微博反馈相关的问题，很快就收到了<a href="https://weibo.com/u/2285231187" rel="nofollow">搜狗技术支持</a>的回馈；<a href="https://weibo.com/u/1829860077" rel="nofollow">百度输入法商务助手</a>迟迟没有反应，反而是<a href="https://weibo.com/u/2757484243" rel="nofollow">百度输入法小助手</a>很快就反馈了。</li>\n<li>在手机端百度输入法和搜狗输入法都感觉很顺畅，没什么大的问题；PC 端，百度输入法在切换不同的软件场景时会默认开启全角输入，非常不好。</li>\n<li>搜狗输入法的账号系统，个人感觉不太好用，尤其的 web 端！百度输入法的账号系统相对好一些，但是稳定性不够。</li>\n</ul>\n<p dir="auto">搜狗输入法是搜狗(Sogou)公司于 2006 年 6 月推出的一款汉字输入法工具。2009 年 9 月开始，搜狗输入法陆续推出 Android、iOS 版本，成为智能手机时代最强大的第三方输入法之一。</p>\n<p dir="auto">百度拼音输入法是百度公司免费提供的输入软件。2010 年 10 月推出，拥有百度搜索和云端技术的支持，百度输入法很快成为了新一代的输入产品。</p>\n<p dir="auto">一点直观感受是，在流畅度上搜狗输入法要好一点点，但是百度输入法可能更值得期待。</p>\n<h2 dir="auto">20210913，使用百度</h2>\n<p dir="auto">百度输入法也终于在<strong>安卓手机</strong>上支持<strong>左右滑动键盘</strong>来<strong>移动光标</strong>，我也把手机、PC 的输入法都换成百度了！</p>\n<h2 dir="auto">20200820，搜狗自定义并固定标点</h2>\n<p dir="auto"><strong>问：安卓手机中搜狗输入法左边的标点符号怎样自定义并且固定？</strong><br>\n<strong>答：设置 → 更多设置 → 输入习惯 → 自定义符号设置</strong></p>\n<h2 dir="auto">20191016，左右滑动键盘来移动光标</h2>\n<p dir="auto">现在移动端电脑端的输入法有很多。但有一个问题：<strong>安卓手机</strong>上哪个输入法可以<strong>左右滑动键盘</strong>来<strong>移动光标</strong>？</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/5b381eb3adab8ebce3807e7c448e92ab10a8afbb605bd2573711612ebee721c1/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46703278732d42704e314b445a504f70765f4d784d377237573633352e706e67"><img src="https://camo.githubusercontent.com/5b381eb3adab8ebce3807e7c448e92ab10a8afbb605bd2573711612ebee721c1/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46703278732d42704e314b445a504f70765f4d784d377237573633352e706e67" alt="" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/Fp2xs-BpN1KDZPOpv_MxM7r7W635.png" style="max-width: 100%;"></a></p>\n<p dir="auto">我用的是华为手机，经测试目前搜狗输入法是可以的，百度、讯飞暂不支持。</p>\n<p dir="auto">第二个问题，左右角引号（「」）怎么打在搜狗输入法中怎么打出来？<strong>ctrl+shift+z</strong> 快捷键弹出搜狗输入法特殊符号，在 <strong>"标点符号"</strong> 中选择。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/33578c52a8622dbbc4de8276de5941c416e789df54daa18c4abac56acdf27cea/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466c4a614f544e59466854624766496372525656535a33726a7564582e706e67"><img src="https://camo.githubusercontent.com/33578c52a8622dbbc4de8276de5941c416e789df54daa18c4abac56acdf27cea/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466c4a614f544e59466854624766496372525656535a33726a7564582e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FlJaOTNYFhTbGfIcrRVVSZ3rjudX.png" style="max-width: 100%;"></a></p>\n<p dir="auto">艾媒咨询 (<a href="https://www.iimedia.cn/" rel="nofollow">https://www.iimedia.cn/</a>) 每年都有关于中国第三方手机输入法行业趋势研究报告，PC 端的不怎么看到，感兴趣的也可以去看看。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/9bc07bd4a3e1adc36273ea15ad303e0b98b9e80360977c889757816986954676/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4676462d6461677a464d30334254337330546937746b79494b38456f2e706e67"><img src="https://camo.githubusercontent.com/9bc07bd4a3e1adc36273ea15ad303e0b98b9e80360977c889757816986954676/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4676462d6461677a464d30334254337330546937746b79494b38456f2e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FvF-dagzFM03BT3s0Ti7tkyIK8Eo.png" style="max-width: 100%;"></a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '婚姻修养', 'number': 118, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/118', 'createdAt': '2025-04-30T07:14:47Z', 'lastEditedAt': '2025-04-30T07:15:56Z', 'updatedAt': '2025-04-30T07:15:56Z', 'body': '> Categories: 博客/语雀\r\n\r\n婚姻是一种修行，体现了个人的素质和修养；婚姻是否平静、长久，取决于双方或其中一方的修养程度，这种修养，不是指文化修养，而是指婚姻修养——当然，文化修养必不可少，却不是决定性的——所谓的婚姻修养，是指一个人对于自身和他人欲望、心理的认识程度，反省能力，特别是自我调整和适应能力。\r\n\r\n<!-- more -->\r\n\r\n![hunyin.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FiJnUwRJPylbDPyZXUlGGFMftjy5.jpeg)\r\n\r\n婚姻修养好的人，善于控制自身的欲望，对人性，对自己，特别是爱人的心理、为人有不同程度的了解，情绪稳定，知足常乐，适应生活、爱人和婚姻的能力强。\r\n\r\n与此相对应，不少人的婚姻修养相对较差，有如下几个表现：\r\n\r\n**第一，不容易满足**。比如，有些女人，明明过得不差，却喜欢和周围的家庭（比如亲朋好友，尤其是闺蜜）进行地位和经济上的对比，比不上人家，就心生不满，意有不足，嫌弃自家男人不如别人家的男人能干；有些女人，虽然自家男人不错，但女人觉得自己够性感够漂亮，本该嫁个更有钱、有地位的男人才对。有些男人则习惯于拿别人的老婆来比对，觉得自己老婆土气，不够时髦，不够有魅力，甚至不新鲜，等等。这些不满和不足，通常是出轨的诱因，为婚姻破裂埋下了根由。\r\n\r\n**第二，偏执倾向明显**。有些人经历过初恋，感觉刻骨铭心，惯于以初恋为参照系来衡量以后的感情，如果今后的感情不能重复初恋的美好，就心有缺憾。有些人经历过最好的异性，恋恋不舍，经常把他们当作择偶的标准。还有不少人脱离实际，在心里塑造了一个理想而完美的女神或男神形象（或性感或清纯的女人，或者花样美男、猛男、幽默风趣的才子）……这类人，比较自恋，具有不切合实际的完美主义倾向，婚后的感情和配偶如果和内心的期待、标准有差距，往往心有不足，落下心结，郁郁寡欢。有一种男人，有处女情结，和非处女的女人结婚后，很难投入感情，也很难爱上对方。还有一些人，遇不到自己爱的人，或者爱自己的人，宁可不结婚……这些都属于情感和婚姻上的偏执症状，对感情、婚姻和爱人都有很深的偏见和成见，难以消除。\r\n\r\n**第三，适应能力差**。本来，婚姻就是一种既来之则安之的事情，不管遇到谁，只要走向了婚姻，就应该学会接受并习惯；但有些人，在婚姻和情感上具有很大的排他性，通常只喜欢某一种人或某一类人，只看得上他们，和他们说得来，合得来，也乐于投入感情，除此之外，他们对其他类型的异性几乎不来电，也没有感觉，爱理不理，很难沟通，更难喜欢上、爱上——如果婚后的配偶凑巧不是自己所喜欢的类型，这些人就很容易和配偶发生口角或冷战。在生活中，夫妻发生口角时，也不善于排解，只会积郁在内心，习惯于生闷气，很容易造成夫妻之间的交流障碍。不善于改变自己和配偶，以便让自己的婚姻和配偶变得更好。总之，他们的婚姻适应能力很差，不懂得如何调整自己，既不善于适应其他种类的异性，更不善于适应婚姻生活。\r\n\r\n**第四，反省能力不够**。婚姻，意味着现状，只要你接受了现状，你就得学会接受配偶，适应婚姻，而适应婚姻的关键在于反省能力。一个人婚后有这样那样的不满，通常和自身的欲求有关，有些人对于配偶和婚姻的欲求过高，总认为自己应该和更好的人结婚，有更好的家庭，并且不知道修正、调整对于婚姻和配偶的期望值，也不知道放下过高的标准，排遣并清理内心的心结，导致自身长期处于对婚姻和配偶不满的状态。还有些人喜欢才子或佳人，配偶却不是，难免心怀不足，却不知道才子稀罕，佳人难得。有些人以初恋为情感的标准，却不明白一个人终其一生初恋只有一次，并且不可复制。有些人生活在幻想之中，虽然自身的相貌和各方面条件平平，却渴望遇上一个完美无缺的白马王子，拥有一段风花雪月的圆满爱情，明明不切合实际，然而始终难以放下这种幻想。有些人只渴望别人来疼，来爱，却不知道情感上也没有免费的午餐，只有付出才有收获。有些人的老婆或丈夫其实很不错了，但这些人这山望着那山高，总认为老婆或丈夫是别人家的好，始终不知道满足。\r\n\r\n我在网络上帮人疏导，经常感到不少人对婚姻和人性的认识存在着偏见和误区，我想，这也就是为什么他们对婚姻有这么多疑惑和不解的原因，也是他们婚姻不幸的原因吧——非得遇上自己“喜欢”“爱”“有感觉”“来电”的才结婚，并且这些喜欢、爱、来电和感觉，往往都建立在对于情感和爱人偏执、成见甚至幻想的基础上，世界上哪有那么多的好事？可以想象，如果一个人预设一个标准，只“喜欢”某一类型的异性，那么，他（她）将失去很多的机会；实际上，“喜欢”带有很大的主观性，类似于人的口味，喜欢吃清淡的人，后来也可以喜欢上麻辣，对不对？如果你坚持你的清淡，你错过的将不仅仅是一道水煮鱼，而将错过整个川菜。\r\n\r\n例如，有个女人明明遇到一个很好的男人，但仅仅因为这个男人不是她喜欢的版型——这个女人喜欢韩版的花样美男，皮肤白皙，腿长脸瘦，长相清秀——就放弃了；对另一半的偏见和成见如此之深，让我觉得这个女人根本就是一个幼稚的人，婚姻修养远远不够，尤其是婚姻适应能力极差，并不适合结婚。\r\n\r\n《增广贤文》中说：“一日夫妻，百世姻缘。百世修来同船渡，千世修来共枕眠。”婚姻这些大学，更多需要夫妻双方相互理解、包容、扶持，才能长久经营，白头到老！', 'bodyText': 'Categories: 博客/语雀\n\n婚姻是一种修行，体现了个人的素质和修养；婚姻是否平静、长久，取决于双方或其中一方的修养程度，这种修养，不是指文化修养，而是指婚姻修养——当然，文化修养必不可少，却不是决定性的——所谓的婚姻修养，是指一个人对于自身和他人欲望、心理的认识程度，反省能力，特别是自我调整和适应能力。\n\n\n婚姻修养好的人，善于控制自身的欲望，对人性，对自己，特别是爱人的心理、为人有不同程度的了解，情绪稳定，知足常乐，适应生活、爱人和婚姻的能力强。\n与此相对应，不少人的婚姻修养相对较差，有如下几个表现：\n第一，不容易满足。比如，有些女人，明明过得不差，却喜欢和周围的家庭（比如亲朋好友，尤其是闺蜜）进行地位和经济上的对比，比不上人家，就心生不满，意有不足，嫌弃自家男人不如别人家的男人能干；有些女人，虽然自家男人不错，但女人觉得自己够性感够漂亮，本该嫁个更有钱、有地位的男人才对。有些男人则习惯于拿别人的老婆来比对，觉得自己老婆土气，不够时髦，不够有魅力，甚至不新鲜，等等。这些不满和不足，通常是出轨的诱因，为婚姻破裂埋下了根由。\n第二，偏执倾向明显。有些人经历过初恋，感觉刻骨铭心，惯于以初恋为参照系来衡量以后的感情，如果今后的感情不能重复初恋的美好，就心有缺憾。有些人经历过最好的异性，恋恋不舍，经常把他们当作择偶的标准。还有不少人脱离实际，在心里塑造了一个理想而完美的女神或男神形象（或性感或清纯的女人，或者花样美男、猛男、幽默风趣的才子）……这类人，比较自恋，具有不切合实际的完美主义倾向，婚后的感情和配偶如果和内心的期待、标准有差距，往往心有不足，落下心结，郁郁寡欢。有一种男人，有处女情结，和非处女的女人结婚后，很难投入感情，也很难爱上对方。还有一些人，遇不到自己爱的人，或者爱自己的人，宁可不结婚……这些都属于情感和婚姻上的偏执症状，对感情、婚姻和爱人都有很深的偏见和成见，难以消除。\n第三，适应能力差。本来，婚姻就是一种既来之则安之的事情，不管遇到谁，只要走向了婚姻，就应该学会接受并习惯；但有些人，在婚姻和情感上具有很大的排他性，通常只喜欢某一种人或某一类人，只看得上他们，和他们说得来，合得来，也乐于投入感情，除此之外，他们对其他类型的异性几乎不来电，也没有感觉，爱理不理，很难沟通，更难喜欢上、爱上——如果婚后的配偶凑巧不是自己所喜欢的类型，这些人就很容易和配偶发生口角或冷战。在生活中，夫妻发生口角时，也不善于排解，只会积郁在内心，习惯于生闷气，很容易造成夫妻之间的交流障碍。不善于改变自己和配偶，以便让自己的婚姻和配偶变得更好。总之，他们的婚姻适应能力很差，不懂得如何调整自己，既不善于适应其他种类的异性，更不善于适应婚姻生活。\n第四，反省能力不够。婚姻，意味着现状，只要你接受了现状，你就得学会接受配偶，适应婚姻，而适应婚姻的关键在于反省能力。一个人婚后有这样那样的不满，通常和自身的欲求有关，有些人对于配偶和婚姻的欲求过高，总认为自己应该和更好的人结婚，有更好的家庭，并且不知道修正、调整对于婚姻和配偶的期望值，也不知道放下过高的标准，排遣并清理内心的心结，导致自身长期处于对婚姻和配偶不满的状态。还有些人喜欢才子或佳人，配偶却不是，难免心怀不足，却不知道才子稀罕，佳人难得。有些人以初恋为情感的标准，却不明白一个人终其一生初恋只有一次，并且不可复制。有些人生活在幻想之中，虽然自身的相貌和各方面条件平平，却渴望遇上一个完美无缺的白马王子，拥有一段风花雪月的圆满爱情，明明不切合实际，然而始终难以放下这种幻想。有些人只渴望别人来疼，来爱，却不知道情感上也没有免费的午餐，只有付出才有收获。有些人的老婆或丈夫其实很不错了，但这些人这山望着那山高，总认为老婆或丈夫是别人家的好，始终不知道满足。\n我在网络上帮人疏导，经常感到不少人对婚姻和人性的认识存在着偏见和误区，我想，这也就是为什么他们对婚姻有这么多疑惑和不解的原因，也是他们婚姻不幸的原因吧——非得遇上自己“喜欢”“爱”“有感觉”“来电”的才结婚，并且这些喜欢、爱、来电和感觉，往往都建立在对于情感和爱人偏执、成见甚至幻想的基础上，世界上哪有那么多的好事？可以想象，如果一个人预设一个标准，只“喜欢”某一类型的异性，那么，他（她）将失去很多的机会；实际上，“喜欢”带有很大的主观性，类似于人的口味，喜欢吃清淡的人，后来也可以喜欢上麻辣，对不对？如果你坚持你的清淡，你错过的将不仅仅是一道水煮鱼，而将错过整个川菜。\n例如，有个女人明明遇到一个很好的男人，但仅仅因为这个男人不是她喜欢的版型——这个女人喜欢韩版的花样美男，皮肤白皙，腿长脸瘦，长相清秀——就放弃了；对另一半的偏见和成见如此之深，让我觉得这个女人根本就是一个幼稚的人，婚姻修养远远不够，尤其是婚姻适应能力极差，并不适合结婚。\n《增广贤文》中说：“一日夫妻，百世姻缘。百世修来同船渡，千世修来共枕眠。”婚姻这些大学，更多需要夫妻双方相互理解、包容、扶持，才能长久经营，白头到老！', 'bodyHTML': '<blockquote>\n<p dir="auto">Categories: 博客/语雀</p>\n</blockquote>\n<p dir="auto">婚姻是一种修行，体现了个人的素质和修养；婚姻是否平静、长久，取决于双方或其中一方的修养程度，这种修养，不是指文化修养，而是指婚姻修养——当然，文化修养必不可少，却不是决定性的——所谓的婚姻修养，是指一个人对于自身和他人欲望、心理的认识程度，反省能力，特别是自我调整和适应能力。</p>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b10f39d54df1eb8af9e2edfc4e2c230392e2ed5645b791eb10931cfa7bcbb2db/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46694a6e5577524a50796c624450795a58556c4747464d66746a79352e6a706567"><img src="https://camo.githubusercontent.com/b10f39d54df1eb8af9e2edfc4e2c230392e2ed5645b791eb10931cfa7bcbb2db/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46694a6e5577524a50796c624450795a58556c4747464d66746a79352e6a706567" alt="hunyin.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FiJnUwRJPylbDPyZXUlGGFMftjy5.jpeg" style="max-width: 100%;"></a></p>\n<p dir="auto">婚姻修养好的人，善于控制自身的欲望，对人性，对自己，特别是爱人的心理、为人有不同程度的了解，情绪稳定，知足常乐，适应生活、爱人和婚姻的能力强。</p>\n<p dir="auto">与此相对应，不少人的婚姻修养相对较差，有如下几个表现：</p>\n<p dir="auto"><strong>第一，不容易满足</strong>。比如，有些女人，明明过得不差，却喜欢和周围的家庭（比如亲朋好友，尤其是闺蜜）进行地位和经济上的对比，比不上人家，就心生不满，意有不足，嫌弃自家男人不如别人家的男人能干；有些女人，虽然自家男人不错，但女人觉得自己够性感够漂亮，本该嫁个更有钱、有地位的男人才对。有些男人则习惯于拿别人的老婆来比对，觉得自己老婆土气，不够时髦，不够有魅力，甚至不新鲜，等等。这些不满和不足，通常是出轨的诱因，为婚姻破裂埋下了根由。</p>\n<p dir="auto"><strong>第二，偏执倾向明显</strong>。有些人经历过初恋，感觉刻骨铭心，惯于以初恋为参照系来衡量以后的感情，如果今后的感情不能重复初恋的美好，就心有缺憾。有些人经历过最好的异性，恋恋不舍，经常把他们当作择偶的标准。还有不少人脱离实际，在心里塑造了一个理想而完美的女神或男神形象（或性感或清纯的女人，或者花样美男、猛男、幽默风趣的才子）……这类人，比较自恋，具有不切合实际的完美主义倾向，婚后的感情和配偶如果和内心的期待、标准有差距，往往心有不足，落下心结，郁郁寡欢。有一种男人，有处女情结，和非处女的女人结婚后，很难投入感情，也很难爱上对方。还有一些人，遇不到自己爱的人，或者爱自己的人，宁可不结婚……这些都属于情感和婚姻上的偏执症状，对感情、婚姻和爱人都有很深的偏见和成见，难以消除。</p>\n<p dir="auto"><strong>第三，适应能力差</strong>。本来，婚姻就是一种既来之则安之的事情，不管遇到谁，只要走向了婚姻，就应该学会接受并习惯；但有些人，在婚姻和情感上具有很大的排他性，通常只喜欢某一种人或某一类人，只看得上他们，和他们说得来，合得来，也乐于投入感情，除此之外，他们对其他类型的异性几乎不来电，也没有感觉，爱理不理，很难沟通，更难喜欢上、爱上——如果婚后的配偶凑巧不是自己所喜欢的类型，这些人就很容易和配偶发生口角或冷战。在生活中，夫妻发生口角时，也不善于排解，只会积郁在内心，习惯于生闷气，很容易造成夫妻之间的交流障碍。不善于改变自己和配偶，以便让自己的婚姻和配偶变得更好。总之，他们的婚姻适应能力很差，不懂得如何调整自己，既不善于适应其他种类的异性，更不善于适应婚姻生活。</p>\n<p dir="auto"><strong>第四，反省能力不够</strong>。婚姻，意味着现状，只要你接受了现状，你就得学会接受配偶，适应婚姻，而适应婚姻的关键在于反省能力。一个人婚后有这样那样的不满，通常和自身的欲求有关，有些人对于配偶和婚姻的欲求过高，总认为自己应该和更好的人结婚，有更好的家庭，并且不知道修正、调整对于婚姻和配偶的期望值，也不知道放下过高的标准，排遣并清理内心的心结，导致自身长期处于对婚姻和配偶不满的状态。还有些人喜欢才子或佳人，配偶却不是，难免心怀不足，却不知道才子稀罕，佳人难得。有些人以初恋为情感的标准，却不明白一个人终其一生初恋只有一次，并且不可复制。有些人生活在幻想之中，虽然自身的相貌和各方面条件平平，却渴望遇上一个完美无缺的白马王子，拥有一段风花雪月的圆满爱情，明明不切合实际，然而始终难以放下这种幻想。有些人只渴望别人来疼，来爱，却不知道情感上也没有免费的午餐，只有付出才有收获。有些人的老婆或丈夫其实很不错了，但这些人这山望着那山高，总认为老婆或丈夫是别人家的好，始终不知道满足。</p>\n<p dir="auto">我在网络上帮人疏导，经常感到不少人对婚姻和人性的认识存在着偏见和误区，我想，这也就是为什么他们对婚姻有这么多疑惑和不解的原因，也是他们婚姻不幸的原因吧——非得遇上自己“喜欢”“爱”“有感觉”“来电”的才结婚，并且这些喜欢、爱、来电和感觉，往往都建立在对于情感和爱人偏执、成见甚至幻想的基础上，世界上哪有那么多的好事？可以想象，如果一个人预设一个标准，只“喜欢”某一类型的异性，那么，他（她）将失去很多的机会；实际上，“喜欢”带有很大的主观性，类似于人的口味，喜欢吃清淡的人，后来也可以喜欢上麻辣，对不对？如果你坚持你的清淡，你错过的将不仅仅是一道水煮鱼，而将错过整个川菜。</p>\n<p dir="auto">例如，有个女人明明遇到一个很好的男人，但仅仅因为这个男人不是她喜欢的版型——这个女人喜欢韩版的花样美男，皮肤白皙，腿长脸瘦，长相清秀——就放弃了；对另一半的偏见和成见如此之深，让我觉得这个女人根本就是一个幼稚的人，婚姻修养远远不够，尤其是婚姻适应能力极差，并不适合结婚。</p>\n<p dir="auto">《增广贤文》中说：“一日夫妻，百世姻缘。百世修来同船渡，千世修来共枕眠。”婚姻这些大学，更多需要夫妻双方相互理解、包容、扶持，才能长久经营，白头到老！</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '一个纯粹的人', 'number': 117, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/117', 'createdAt': '2025-04-30T07:12:40Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T07:12:41Z', 'body': '> Categories: 博客/语雀\r\n\r\n> 我和白求恩同志只见过一面。后来他给我来过许多信。可是因为忙，仅回过他一封信，还不知他收到没有。对于他的死，我是很悲痛的。现在大家纪念他，可见他的精神感人之深。我们大家要学习他毫无自私自利之心的精神。从这点出发，就可以变为大有利于人民的人。一个人能力有大小，但只要有这点精神，就是一个高尚的人，一个纯粹的人，一个有道德的人，一个脱离了低级趣味的人，一个有益于人民的人。\r\n\r\n这是毛泽东同志在《纪念白求恩》原文中的一句话，时至今天看起来，依然让很多自以为是的那些人汗颜。抛开“有益于人民”的大高度，生活中没有脱离低级趣味的人也有不少。\r\n\r\n<!-- more -->\r\n\r\n<p align="center">\r\n    <img src="https://shub.weiyan.tech/yuque/elog-notebook-img/FmuqcJBMECQ1QKbE8_4TjZLqpuo6.jpeg" alt=\'Che Guevara\'><br>\r\n    <span>切‧格瓦拉(Che Guevara)</em>\r\n</p>\r\n\r\n一者，修养差且情绪管控弱，喜欢道德绑架。修养，指的是心境平和，度量大，成熟稳重等，那些动不动就看不惯别人的人，自然没有这些修养。这也跟性格和认知有关。只要等他知道了，别人怎样他是影响不了的，他也不需要去管，或许他就淡定了。\r\n\r\n二者，敏感好为人师，缺乏自知之明。一个成年人，一个孩童，都有独立于他人的世界、价值观念，有一些非亲非故的陌生人，偏偏喜欢动不动对你指手画脚，一副高高在上的长者姿态。这些像猴子一样的人还不自知，可笑之极。', 'bodyText': 'Categories: 博客/语雀\n\n\n我和白求恩同志只见过一面。后来他给我来过许多信。可是因为忙，仅回过他一封信，还不知他收到没有。对于他的死，我是很悲痛的。现在大家纪念他，可见他的精神感人之深。我们大家要学习他毫无自私自利之心的精神。从这点出发，就可以变为大有利于人民的人。一个人能力有大小，但只要有这点精神，就是一个高尚的人，一个纯粹的人，一个有道德的人，一个脱离了低级趣味的人，一个有益于人民的人。\n\n这是毛泽东同志在《纪念白求恩》原文中的一句话，时至今天看起来，依然让很多自以为是的那些人汗颜。抛开“有益于人民”的大高度，生活中没有脱离低级趣味的人也有不少。\n\n\n    \n    切‧格瓦拉(Che Guevara)\n\n一者，修养差且情绪管控弱，喜欢道德绑架。修养，指的是心境平和，度量大，成熟稳重等，那些动不动就看不惯别人的人，自然没有这些修养。这也跟性格和认知有关。只要等他知道了，别人怎样他是影响不了的，他也不需要去管，或许他就淡定了。\n二者，敏感好为人师，缺乏自知之明。一个成年人，一个孩童，都有独立于他人的世界、价值观念，有一些非亲非故的陌生人，偏偏喜欢动不动对你指手画脚，一副高高在上的长者姿态。这些像猴子一样的人还不自知，可笑之极。', 'bodyHTML': '<blockquote>\n<p dir="auto">Categories: 博客/语雀</p>\n</blockquote>\n<blockquote>\n<p dir="auto">我和白求恩同志只见过一面。后来他给我来过许多信。可是因为忙，仅回过他一封信，还不知他收到没有。对于他的死，我是很悲痛的。现在大家纪念他，可见他的精神感人之深。我们大家要学习他毫无自私自利之心的精神。从这点出发，就可以变为大有利于人民的人。一个人能力有大小，但只要有这点精神，就是一个高尚的人，一个纯粹的人，一个有道德的人，一个脱离了低级趣味的人，一个有益于人民的人。</p>\n</blockquote>\n<p dir="auto">这是毛泽东同志在《纪念白求恩》原文中的一句话，时至今天看起来，依然让很多自以为是的那些人汗颜。抛开“有益于人民”的大高度，生活中没有脱离低级趣味的人也有不少。</p>\n\n<p align="center" dir="auto">\n    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/6a3eb1e261ecb40ded234dcdf1c4b183e953f6d44f0182cdf545015995f527cc/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466d7571634a424d45435131514b6245385f34546a5a4c7170756f362e6a706567"><img src="https://camo.githubusercontent.com/6a3eb1e261ecb40ded234dcdf1c4b183e953f6d44f0182cdf545015995f527cc/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466d7571634a424d45435131514b6245385f34546a5a4c7170756f362e6a706567" alt="Che Guevara" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FmuqcJBMECQ1QKbE8_4TjZLqpuo6.jpeg" style="max-width: 100%;"></a><br>\n    <span>切‧格瓦拉(Che Guevara)\n</span></p>\n<p dir="auto">一者，修养差且情绪管控弱，喜欢道德绑架。修养，指的是心境平和，度量大，成熟稳重等，那些动不动就看不惯别人的人，自然没有这些修养。这也跟性格和认知有关。只要等他知道了，别人怎样他是影响不了的，他也不需要去管，或许他就淡定了。</p>\n<p dir="auto">二者，敏感好为人师，缺乏自知之明。一个成年人，一个孩童，都有独立于他人的世界、价值观念，有一些非亲非故的陌生人，偏偏喜欢动不动对你指手画脚，一副高高在上的长者姿态。这些像猴子一样的人还不自知，可笑之极。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '沉默的大多数', 'number': 116, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/116', 'createdAt': '2025-04-30T07:09:32Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T07:09:33Z', 'body': '一个人要有自己独立的思想，任何想将个人的思想凌驾于大众或迫使大众去遵从的都是不对的。\r\n\r\n<!-- more -->\r\n\r\n![the-silent-majority](https://shub.weiyan.tech/yuque/elog-notebook-img/FlRC4s8ZvXXS3-sdVhPDW9i5vEYa.jpeg)\r\n\r\n拿破仑说：一头狮子带领的一群羊可以打败一只羊带领的一群狮子。\r\n\r\n在小区的业主群，群主却整天私推他个人合作的产品，霸占群主却毫无作为，不知道大家是什么感觉。\r\n\r\n本来业主群就是一个团结广大业主，维护利益，促进交流的一个组织。当作为开发商、物业的服务性组织和业主群体出现利益冲突时，为争取广大业主的合法正当利益，很多时候都需要在这些群组织来集合众业主的力量，群策群力，努力去争取。比例小区停车收费，小区娱乐设施安全，环境卫生监督，......，等等，相信这一类事情上群体的意见总会比单个业主更有说服力，这时候，不管是信息传递公开，还是意见收集反馈，群主和群管理人员都是极其关键的。', 'bodyText': '一个人要有自己独立的思想，任何想将个人的思想凌驾于大众或迫使大众去遵从的都是不对的。\n\n\n拿破仑说：一头狮子带领的一群羊可以打败一只羊带领的一群狮子。\n在小区的业主群，群主却整天私推他个人合作的产品，霸占群主却毫无作为，不知道大家是什么感觉。\n本来业主群就是一个团结广大业主，维护利益，促进交流的一个组织。当作为开发商、物业的服务性组织和业主群体出现利益冲突时，为争取广大业主的合法正当利益，很多时候都需要在这些群组织来集合众业主的力量，群策群力，努力去争取。比例小区停车收费，小区娱乐设施安全，环境卫生监督，......，等等，相信这一类事情上群体的意见总会比单个业主更有说服力，这时候，不管是信息传递公开，还是意见收集反馈，群主和群管理人员都是极其关键的。', 'bodyHTML': '<p dir="auto">一个人要有自己独立的思想，任何想将个人的思想凌驾于大众或迫使大众去遵从的都是不对的。</p>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/d9c81fc44c94e1a93dc76c2bf77899b709d7db6d493e0056e33518c85f36930b/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466c52433473385a76585853332d73645668504457396935764559612e6a706567"><img src="https://camo.githubusercontent.com/d9c81fc44c94e1a93dc76c2bf77899b709d7db6d493e0056e33518c85f36930b/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466c52433473385a76585853332d73645668504457396935764559612e6a706567" alt="the-silent-majority" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FlRC4s8ZvXXS3-sdVhPDW9i5vEYa.jpeg" style="max-width: 100%;"></a></p>\n<p dir="auto">拿破仑说：一头狮子带领的一群羊可以打败一只羊带领的一群狮子。</p>\n<p dir="auto">在小区的业主群，群主却整天私推他个人合作的产品，霸占群主却毫无作为，不知道大家是什么感觉。</p>\n<p dir="auto">本来业主群就是一个团结广大业主，维护利益，促进交流的一个组织。当作为开发商、物业的服务性组织和业主群体出现利益冲突时，为争取广大业主的合法正当利益，很多时候都需要在这些群组织来集合众业主的力量，群策群力，努力去争取。比例小区停车收费，小区娱乐设施安全，环境卫生监督，......，等等，相信这一类事情上群体的意见总会比单个业主更有说服力，这时候，不管是信息传递公开，还是意见收集反馈，群主和群管理人员都是极其关键的。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '不提供账号注销等于耍流氓', 'number': 115, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/115', 'createdAt': '2025-04-30T07:05:28Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T07:05:29Z', 'body': '> Categories: 博客/语雀\r\n\r\n作为一个生信工程师，不知道大家平时是怎么管理和备份自己的一些流程和脚本？而我个人则比较喜欢用 git。\r\n\r\n<!-- more -->\r\n\r\n![zhanghao.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FgjHQn_wdWob063qAiBlTG8nlKn2.jpeg)\r\n\r\n说到 git 代码托管，国外的 GitHub、GitLab 相信大家都已经很熟悉；国内比较知名的，除了码云，CODING 应该也算得上一个。在最开始的前几年，甚至到 2017、2018 年，Coding.net 代码托管平台的用户体验都还挺不错的，但 2019 年和腾讯云开发者平台合并后，就开始变得越来越鸡肋了，合并后虽然说是不限存储不限项目提供代码托管。\r\n\r\nCODING 个人版有几点不太友好的体检经历：\r\n\r\n- 在同一个产品中过多的嵌套 coding.net 和 dev.tencent.com 两个域名的链接跳转，用着用着就让人有一种分不清楚这个到底是原来的 CODING 还是腾讯云开发者平台！\r\n\r\n- CODING 个人版个人主页，公开的项目却显示的是仓库名称！这样，在仓库中设置项目名称的意义是什么？\r\n\r\n![image.png](https://shub.weiyan.tech/yuque/elog-notebook-img/FsIF_mY1Mplnv6WHf_Oc0LlOTAR3.png)\r\n\r\n- 注销账号， CODING 只提供账号锁定功能！！！\r\n\r\n《电信和互联网用户个人信息保护规定》（工业和信息化部令第 24 号）第九款第四款规定：“电信业务经营者、互联网信息服务提供者在用户终止使用电信服务或者互联网信息服务后，应当停止对用户个人信息的收集和使用，并为用户提供注销号码或账号的服务。”\r\n\r\n![FhEmqoge2p383tBp-vjGxFoAw3gk](https://shub.weiyan.tech/yuque/elog-notebook-img/FhEmqoge2p383tBp-vjGxFoAw3gk.png)\r\n\r\n最后只想说，如果不是出于墙内网络的考虑，很多人应该都会选择 Github、Gitlab 的代码托管服务。当然，或许也有些人出于对 \xa0Github 账户/开源项目是否会受到美国出口管理条例管制的担心，或者追求更高的速度体验，而转向国内的代码托管服务。\r\n\r\n对于国内代码托管服务，开源中国旗下的 Gitee 应该是目前做的最好的，但对 git 空间和单个仓库都有一定限制。反观那些不限空间、不限项目的后来者，CODING 也好，腾讯云开发者平台也罢，用户体验不好，产品不过关，再多的免费空间也是白搭吧！\r\n\r\n不管怎么说，对于一些重要的生信分析流程脚本选择 git 进行管理个人觉得还是非常有必要的。你可以选择自建服务进行托管，也可以选择付费进行托管，重要的一点，如果你是土豪，就当我什么都没说。', 'bodyText': 'Categories: 博客/语雀\n\n作为一个生信工程师，不知道大家平时是怎么管理和备份自己的一些流程和脚本？而我个人则比较喜欢用 git。\n\n\n说到 git 代码托管，国外的 GitHub、GitLab 相信大家都已经很熟悉；国内比较知名的，除了码云，CODING 应该也算得上一个。在最开始的前几年，甚至到 2017、2018 年，Coding.net 代码托管平台的用户体验都还挺不错的，但 2019 年和腾讯云开发者平台合并后，就开始变得越来越鸡肋了，合并后虽然说是不限存储不限项目提供代码托管。\nCODING 个人版有几点不太友好的体检经历：\n\n\n在同一个产品中过多的嵌套 coding.net 和 dev.tencent.com 两个域名的链接跳转，用着用着就让人有一种分不清楚这个到底是原来的 CODING 还是腾讯云开发者平台！\n\n\nCODING 个人版个人主页，公开的项目却显示的是仓库名称！这样，在仓库中设置项目名称的意义是什么？\n\n\n\n\n注销账号， CODING 只提供账号锁定功能！！！\n\n《电信和互联网用户个人信息保护规定》（工业和信息化部令第 24 号）第九款第四款规定：“电信业务经营者、互联网信息服务提供者在用户终止使用电信服务或者互联网信息服务后，应当停止对用户个人信息的收集和使用，并为用户提供注销号码或账号的服务。”\n\n最后只想说，如果不是出于墙内网络的考虑，很多人应该都会选择 Github、Gitlab 的代码托管服务。当然，或许也有些人出于对 \xa0Github 账户/开源项目是否会受到美国出口管理条例管制的担心，或者追求更高的速度体验，而转向国内的代码托管服务。\n对于国内代码托管服务，开源中国旗下的 Gitee 应该是目前做的最好的，但对 git 空间和单个仓库都有一定限制。反观那些不限空间、不限项目的后来者，CODING 也好，腾讯云开发者平台也罢，用户体验不好，产品不过关，再多的免费空间也是白搭吧！\n不管怎么说，对于一些重要的生信分析流程脚本选择 git 进行管理个人觉得还是非常有必要的。你可以选择自建服务进行托管，也可以选择付费进行托管，重要的一点，如果你是土豪，就当我什么都没说。', 'bodyHTML': '<blockquote>\n<p dir="auto">Categories: 博客/语雀</p>\n</blockquote>\n<p dir="auto">作为一个生信工程师，不知道大家平时是怎么管理和备份自己的一些流程和脚本？而我个人则比较喜欢用 git。</p>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/3b079b4db94f58350a7a9a8547c59bd743670ab99fbb286f87a29913ec89c890/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46676a48516e5f7764576f62303633714169426c5447386e6c4b6e322e6a706567"><img src="https://camo.githubusercontent.com/3b079b4db94f58350a7a9a8547c59bd743670ab99fbb286f87a29913ec89c890/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f46676a48516e5f7764576f62303633714169426c5447386e6c4b6e322e6a706567" alt="zhanghao.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FgjHQn_wdWob063qAiBlTG8nlKn2.jpeg" style="max-width: 100%;"></a></p>\n<p dir="auto">说到 git 代码托管，国外的 GitHub、GitLab 相信大家都已经很熟悉；国内比较知名的，除了码云，CODING 应该也算得上一个。在最开始的前几年，甚至到 2017、2018 年，Coding.net 代码托管平台的用户体验都还挺不错的，但 2019 年和腾讯云开发者平台合并后，就开始变得越来越鸡肋了，合并后虽然说是不限存储不限项目提供代码托管。</p>\n<p dir="auto">CODING 个人版有几点不太友好的体检经历：</p>\n<ul dir="auto">\n<li>\n<p dir="auto">在同一个产品中过多的嵌套 coding.net 和 dev.tencent.com 两个域名的链接跳转，用着用着就让人有一种分不清楚这个到底是原来的 CODING 还是腾讯云开发者平台！</p>\n</li>\n<li>\n<p dir="auto">CODING 个人版个人主页，公开的项目却显示的是仓库名称！这样，在仓库中设置项目名称的意义是什么？</p>\n</li>\n</ul>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/e40703dcaedd77de34a7e5ce0b95feae5aea6944cb54b8b985105c3766884982/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f467349465f6d59314d706c6e76365748665f4f63304c6c4f544152332e706e67"><img src="https://camo.githubusercontent.com/e40703dcaedd77de34a7e5ce0b95feae5aea6944cb54b8b985105c3766884982/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f467349465f6d59314d706c6e76365748665f4f63304c6c4f544152332e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FsIF_mY1Mplnv6WHf_Oc0LlOTAR3.png" style="max-width: 100%;"></a></p>\n<ul dir="auto">\n<li>注销账号， CODING 只提供账号锁定功能！！！</li>\n</ul>\n<p dir="auto">《电信和互联网用户个人信息保护规定》（工业和信息化部令第 24 号）第九款第四款规定：“电信业务经营者、互联网信息服务提供者在用户终止使用电信服务或者互联网信息服务后，应当停止对用户个人信息的收集和使用，并为用户提供注销号码或账号的服务。”</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b098ed60c52ddc7e3c9d0f0048507a3ae230bf11e189518c889586f96f120466/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4668456d716f676532703338337442702d766a4778466f417733676b2e706e67"><img src="https://camo.githubusercontent.com/b098ed60c52ddc7e3c9d0f0048507a3ae230bf11e189518c889586f96f120466/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4668456d716f676532703338337442702d766a4778466f417733676b2e706e67" alt="FhEmqoge2p383tBp-vjGxFoAw3gk" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FhEmqoge2p383tBp-vjGxFoAw3gk.png" style="max-width: 100%;"></a></p>\n<p dir="auto">最后只想说，如果不是出于墙内网络的考虑，很多人应该都会选择 Github、Gitlab 的代码托管服务。当然，或许也有些人出于对 \xa0Github 账户/开源项目是否会受到美国出口管理条例管制的担心，或者追求更高的速度体验，而转向国内的代码托管服务。</p>\n<p dir="auto">对于国内代码托管服务，开源中国旗下的 Gitee 应该是目前做的最好的，但对 git 空间和单个仓库都有一定限制。反观那些不限空间、不限项目的后来者，CODING 也好，腾讯云开发者平台也罢，用户体验不好，产品不过关，再多的免费空间也是白搭吧！</p>\n<p dir="auto">不管怎么说，对于一些重要的生信分析流程脚本选择 git 进行管理个人觉得还是非常有必要的。你可以选择自建服务进行托管，也可以选择付费进行托管，重要的一点，如果你是土豪，就当我什么都没说。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '你若安好便是晴天', 'number': 114, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/114', 'createdAt': '2025-04-30T06:55:39Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T06:55:39Z', 'body': '> Categories: 博客/语雀\r\n\r\n这是一篇发布于 [语雀·随笔与乱弹](https://www.yuque.com/shenweiyan/notebook/to-be-good) 的笔记，本文章已经更新。\r\n\r\n<!-- more -->\r\n\r\n![anhao.jpg](https://shub.weiyan.tech/yuque/elog-notebook-img/FpWr71wB7ZaE5j8UmLUKhg3qFqAh.jpeg)\r\n\r\n昨天，7 月 7 日，挺顺口的一个日子。公司体检和家里小孩子咳嗽感冒撞到了一起。\r\n\r\n## 关于体检\r\n\r\n从早 7 点开始，从公司集合到体检地点，从领号、报到取表、开始体检到体检结束，3 个半小时的折腾好不容易把今年的这一次身体小检查给完成了。总结起来就是：\r\n\r\n- 人多。从早八点半到爱康国宾（广州天河体检分院），再到拿到号，前面已经熙熙攘攘排了 100 多号人，而窗口叫号取体检表的人工服务通道就只有 3 个。\r\n- 服务一般。窗口叫号取表和自助机刷身份证取表都是一样的，但是在服务指引上，工作人员的答复只有：等叫号办理取表。\r\n\r\n## 关于感冒\r\n\r\n儿科医生不足，在现在各大医院都很常见。在广州绝大部分的医院，不管是三甲还是二甲，基本上都要提前预约，或者预约当天号。\r\n\r\n关于周末就医，还有一个问题就是很多医院，不管是三甲还是二甲，周末都不上班！例如距离我们家里最近的岭南医院（三甲）周六下午、周日都是不上班的。\r\n\r\n这是我们第一次试图通过微信公众号预约广州医科大学第五附属医院，有很大的一个体验就是在 **"广医五院"** 的微信公众号进行预约时 **"必须要先去医院办理诊疗卡，使用诊疗卡号才能在线预约"**。这对于第一次想预约看病的人而言，体验很不友好！\r\n\r\n从出生起，这一次也算是家里小孩第一次感冒的经历，在医院候诊遇到的各个奶爸宝妈、各种囧事锁事也算是另外一种体验吧！', 'bodyText': 'Categories: 博客/语雀\n\n这是一篇发布于 语雀·随笔与乱弹 的笔记，本文章已经更新。\n\n\n昨天，7 月 7 日，挺顺口的一个日子。公司体检和家里小孩子咳嗽感冒撞到了一起。\n关于体检\n从早 7 点开始，从公司集合到体检地点，从领号、报到取表、开始体检到体检结束，3 个半小时的折腾好不容易把今年的这一次身体小检查给完成了。总结起来就是：\n\n人多。从早八点半到爱康国宾（广州天河体检分院），再到拿到号，前面已经熙熙攘攘排了 100 多号人，而窗口叫号取体检表的人工服务通道就只有 3 个。\n服务一般。窗口叫号取表和自助机刷身份证取表都是一样的，但是在服务指引上，工作人员的答复只有：等叫号办理取表。\n\n关于感冒\n儿科医生不足，在现在各大医院都很常见。在广州绝大部分的医院，不管是三甲还是二甲，基本上都要提前预约，或者预约当天号。\n关于周末就医，还有一个问题就是很多医院，不管是三甲还是二甲，周末都不上班！例如距离我们家里最近的岭南医院（三甲）周六下午、周日都是不上班的。\n这是我们第一次试图通过微信公众号预约广州医科大学第五附属医院，有很大的一个体验就是在 "广医五院" 的微信公众号进行预约时 "必须要先去医院办理诊疗卡，使用诊疗卡号才能在线预约"。这对于第一次想预约看病的人而言，体验很不友好！\n从出生起，这一次也算是家里小孩第一次感冒的经历，在医院候诊遇到的各个奶爸宝妈、各种囧事锁事也算是另外一种体验吧！', 'bodyHTML': '<blockquote>\n<p dir="auto">Categories: 博客/语雀</p>\n</blockquote>\n<p dir="auto">这是一篇发布于 <a href="https://www.yuque.com/shenweiyan/notebook/to-be-good" rel="nofollow">语雀·随笔与乱弹</a> 的笔记，本文章已经更新。</p>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/a26ee25c551e9eb55f3e43ac9e13ab15552664a00ddf492042e23416d1b7f97a/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4670577237317742375a6145356a38556d4c554b68673371467141682e6a706567"><img src="https://camo.githubusercontent.com/a26ee25c551e9eb55f3e43ac9e13ab15552664a00ddf492042e23416d1b7f97a/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f4670577237317742375a6145356a38556d4c554b68673371467141682e6a706567" alt="anhao.jpg" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FpWr71wB7ZaE5j8UmLUKhg3qFqAh.jpeg" style="max-width: 100%;"></a></p>\n<p dir="auto">昨天，7 月 7 日，挺顺口的一个日子。公司体检和家里小孩子咳嗽感冒撞到了一起。</p>\n<h2 dir="auto">关于体检</h2>\n<p dir="auto">从早 7 点开始，从公司集合到体检地点，从领号、报到取表、开始体检到体检结束，3 个半小时的折腾好不容易把今年的这一次身体小检查给完成了。总结起来就是：</p>\n<ul dir="auto">\n<li>人多。从早八点半到爱康国宾（广州天河体检分院），再到拿到号，前面已经熙熙攘攘排了 100 多号人，而窗口叫号取体检表的人工服务通道就只有 3 个。</li>\n<li>服务一般。窗口叫号取表和自助机刷身份证取表都是一样的，但是在服务指引上，工作人员的答复只有：等叫号办理取表。</li>\n</ul>\n<h2 dir="auto">关于感冒</h2>\n<p dir="auto">儿科医生不足，在现在各大医院都很常见。在广州绝大部分的医院，不管是三甲还是二甲，基本上都要提前预约，或者预约当天号。</p>\n<p dir="auto">关于周末就医，还有一个问题就是很多医院，不管是三甲还是二甲，周末都不上班！例如距离我们家里最近的岭南医院（三甲）周六下午、周日都是不上班的。</p>\n<p dir="auto">这是我们第一次试图通过微信公众号预约广州医科大学第五附属医院，有很大的一个体验就是在 <strong>"广医五院"</strong> 的微信公众号进行预约时 <strong>"必须要先去医院办理诊疗卡，使用诊疗卡号才能在线预约"</strong>。这对于第一次想预约看病的人而言，体验很不友好！</p>\n<p dir="auto">从出生起，这一次也算是家里小孩第一次感冒的经历，在医院候诊遇到的各个奶爸宝妈、各种囧事锁事也算是另外一种体验吧！</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '只要能坚持下来就是好博客', 'number': 113, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/113', 'createdAt': '2025-04-30T06:48:03Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T06:48:04Z', 'body': '> Categories: 博客/语雀\r\n\r\n写博客、记录文字是一个好的习惯，相信很多人的初心都是很美好的。但是能真正坚持下来的，或许没有多少。\r\n\r\n![blog2.png](https://shub.weiyan.tech/yuque/elog-notebook-img/FjFei9AbrugbaF_b3MEnmlL7PvK4.png)\r\n\r\n记得最早接触博客和云笔记，还是在大学刚毕业后，真正意义上开始使用编程语言学习项目分析的那段时间。作为一个菜鸟，在接受团队技术分享、在培训过程中接触到了各种各样的知识，出于知识梳理、快速查找原始需求，开始接触使用有道云笔记和印象笔记。但是让人失望的是，那时候的有道云和印象笔记都不支持代码插入，而且 UI\xa0 界面很 low，这对一个经常与代码打交道的人来说体验时非常糟糕的。\r\n\r\n#### 2014 年，YouDao + cnblogs\r\n\r\n作为一个清爽、简洁、无广告的纯技术分享平台，博客园似乎是最好的。在博客园趟了趟水，稀稀拉拉写了几篇文章，那时候对文章的理解其实就是自己对一些经常使用知识的体会。使用了几个月，发现了几个问题：\r\n\r\n- 博客园的定位是 IT 技术的分享平台，作为一个生信人而言，没太多共鸣。\r\n- 平时工作中的记录大多数记录在有道云或者印象笔记，发表到博客园，需要再次排版整理，很麻烦。那时候虽然可以使用 Windows Live Writer，但无法做到随手编辑。\r\n\r\n#### 2015 年，oschina + wiznote\r\n\r\n2015 年的开源中国的博客系统长的也并不好看，而且自定义支持也不好。现如今开源中国的博客系统经过改版后已经清爽了很多，但在浏览过程中头部的广告却让人很是不爽。\r\n\r\n同年，接触到为知笔记，这是一款非常优秀的国产笔记。从功能和界面上来说，它可以说是国产笔记中做的最好的，各种插件能满足你日常工作和生活 99% 的需求。曾经在很长一段时间内，它一直是我作为个人知识管理最理想的工具之一。但有几个方面，仍有待完善：\r\n\r\n1. 万年不变的 web 端。为知笔记的 web 端很不好看，体验也很差，不支持 markdown 预览编辑模式。\r\n2. 建议反馈响应慢。为知笔记使用贴吧作为问题反馈平台，很多建议无法得到及时的响应。尤其是 web 端的问题，从 2015 到 2018 年一点变化都没有。\r\n3. 到了 2019 年 7 月，好奇心作祟回去看了一眼，居然发现为知笔记更新了一个 beta 版的 web 端，颜值还算可以，但列表栏自由宽度调整、主题、字体定义等还不够完善，md 在线编辑依然不支持！\r\n\r\n#### 2017 年，jekyll + leanote\r\n\r\njekyll 和 hexo 是一个功能强大的博客系统，所有人都可以利用免费代码托管平台部署属于自己的 jekyll 与 hexo 博客，如 github pages，coding pages 和 gitee pages。这种博客模式可以让用户更加关注写作，而不需要把大量的时候花费在界面样式的调整上。不可否认的是，基于 jekyll/hexo 的博客系统，在部署和自定义特定功能上是需要一定的前端或者后端技术作为支持的。\r\n\r\nLeanote 的体验是非常好的，尤其是它附带的博客系统具有非常自由的可定制性，这一点也是最吸引我的地方。不足的是：\r\n\r\n- 相比为知笔记的明文保存，Leanote 本地二进制的笔记保存方式很不利用笔记的迁移；\r\n- 开发、维护人员不足，很多 github issues 都没有响应；\r\n- 用户小众，更新及其缓慢。从 2019 年起基本没有任何的更新，很担心哪一天就跑路了。\r\n\r\n#### 2019 年，语雀：专业的云端知识库\r\n\r\n2019 年，发现了语雀，被友好的编辑体验吸引，加上蚂蚁金服的加持，于是开始把所有积累的文档迁移了上来。希望能基于这样一个专注于知识的平台能越来越好。\r\n\r\n总的来说，在坚持博客的道路上，有访问量的困惑，有不断追求其他一些博客简洁清爽页面样式的影响，有文字编辑时的体验需求，也有随着自媒体日趋发达多平台文章同步的需要，甚至博文多了网页加载的速度瓶颈等等，都会造成不断的更换博客的托管和部署平台，这对于很多喜欢折腾的人来说这应该是非常正常的一个事情。不管是 Github Pages，还是 \xa0WorldPress、Gitee Pages 这些托管平台，或者是对 Hexo、Jekyll、Hugo 搭建方式的选择，都足以让你眼花缭乱。\r\n\r\n**从根本上而言，博客的本质是记录，是与自己、他人的内心对话**。**对话是记录的延伸。产生对话，需要传播，需要消息机制。博客就三个关键词：记录、传播、对话。**\r\n\r\n所以，不管选择哪一种方式，只要能坚持下来就是好博客，专注才是硬道理，内容才是王道。\r\n\r\n我个人的大部分文档目前都保存在语雀，部分公开文档也和本人托管在 Gihub 的 Jekyll 博客进行了自动同步，有兴趣的可以关注交流一下！\r\n\r\n- 语雀：[https://www.yuque.com/shenweiyan](https://www.yuque.com/shenweiyan)\r\n- 博客：[https://weiyan.cc](https://weiyan.cc)\r\n\r\n#### 后记\r\n\r\n今天看到几个使用 github issues 安家博客的人，看着底下一个个的评论，感觉很有意思，分享一下：\r\n\r\n- 《个人博客，最终选择》：[https://github.com/atian25/blog/issues/07.md](https://github.com/atian25/blog/issues/07.md)\r\n- 《博客是什么》：[https://github.com/lifesinger/blog/issues/123](https://github.com/lifesinger/blog/issues/123)', 'bodyText': 'Categories: 博客/语雀\n\n写博客、记录文字是一个好的习惯，相信很多人的初心都是很美好的。但是能真正坚持下来的，或许没有多少。\n\n记得最早接触博客和云笔记，还是在大学刚毕业后，真正意义上开始使用编程语言学习项目分析的那段时间。作为一个菜鸟，在接受团队技术分享、在培训过程中接触到了各种各样的知识，出于知识梳理、快速查找原始需求，开始接触使用有道云笔记和印象笔记。但是让人失望的是，那时候的有道云和印象笔记都不支持代码插入，而且 UI\xa0 界面很 low，这对一个经常与代码打交道的人来说体验时非常糟糕的。\n2014 年，YouDao + cnblogs\n作为一个清爽、简洁、无广告的纯技术分享平台，博客园似乎是最好的。在博客园趟了趟水，稀稀拉拉写了几篇文章，那时候对文章的理解其实就是自己对一些经常使用知识的体会。使用了几个月，发现了几个问题：\n\n博客园的定位是 IT 技术的分享平台，作为一个生信人而言，没太多共鸣。\n平时工作中的记录大多数记录在有道云或者印象笔记，发表到博客园，需要再次排版整理，很麻烦。那时候虽然可以使用 Windows Live Writer，但无法做到随手编辑。\n\n2015 年，oschina + wiznote\n2015 年的开源中国的博客系统长的也并不好看，而且自定义支持也不好。现如今开源中国的博客系统经过改版后已经清爽了很多，但在浏览过程中头部的广告却让人很是不爽。\n同年，接触到为知笔记，这是一款非常优秀的国产笔记。从功能和界面上来说，它可以说是国产笔记中做的最好的，各种插件能满足你日常工作和生活 99% 的需求。曾经在很长一段时间内，它一直是我作为个人知识管理最理想的工具之一。但有几个方面，仍有待完善：\n\n万年不变的 web 端。为知笔记的 web 端很不好看，体验也很差，不支持 markdown 预览编辑模式。\n建议反馈响应慢。为知笔记使用贴吧作为问题反馈平台，很多建议无法得到及时的响应。尤其是 web 端的问题，从 2015 到 2018 年一点变化都没有。\n到了 2019 年 7 月，好奇心作祟回去看了一眼，居然发现为知笔记更新了一个 beta 版的 web 端，颜值还算可以，但列表栏自由宽度调整、主题、字体定义等还不够完善，md 在线编辑依然不支持！\n\n2017 年，jekyll + leanote\njekyll 和 hexo 是一个功能强大的博客系统，所有人都可以利用免费代码托管平台部署属于自己的 jekyll 与 hexo 博客，如 github pages，coding pages 和 gitee pages。这种博客模式可以让用户更加关注写作，而不需要把大量的时候花费在界面样式的调整上。不可否认的是，基于 jekyll/hexo 的博客系统，在部署和自定义特定功能上是需要一定的前端或者后端技术作为支持的。\nLeanote 的体验是非常好的，尤其是它附带的博客系统具有非常自由的可定制性，这一点也是最吸引我的地方。不足的是：\n\n相比为知笔记的明文保存，Leanote 本地二进制的笔记保存方式很不利用笔记的迁移；\n开发、维护人员不足，很多 github issues 都没有响应；\n用户小众，更新及其缓慢。从 2019 年起基本没有任何的更新，很担心哪一天就跑路了。\n\n2019 年，语雀：专业的云端知识库\n2019 年，发现了语雀，被友好的编辑体验吸引，加上蚂蚁金服的加持，于是开始把所有积累的文档迁移了上来。希望能基于这样一个专注于知识的平台能越来越好。\n总的来说，在坚持博客的道路上，有访问量的困惑，有不断追求其他一些博客简洁清爽页面样式的影响，有文字编辑时的体验需求，也有随着自媒体日趋发达多平台文章同步的需要，甚至博文多了网页加载的速度瓶颈等等，都会造成不断的更换博客的托管和部署平台，这对于很多喜欢折腾的人来说这应该是非常正常的一个事情。不管是 Github Pages，还是 \xa0WorldPress、Gitee Pages 这些托管平台，或者是对 Hexo、Jekyll、Hugo 搭建方式的选择，都足以让你眼花缭乱。\n从根本上而言，博客的本质是记录，是与自己、他人的内心对话。对话是记录的延伸。产生对话，需要传播，需要消息机制。博客就三个关键词：记录、传播、对话。\n所以，不管选择哪一种方式，只要能坚持下来就是好博客，专注才是硬道理，内容才是王道。\n我个人的大部分文档目前都保存在语雀，部分公开文档也和本人托管在 Gihub 的 Jekyll 博客进行了自动同步，有兴趣的可以关注交流一下！\n\n语雀：https://www.yuque.com/shenweiyan\n博客：https://weiyan.cc\n\n后记\n今天看到几个使用 github issues 安家博客的人，看着底下一个个的评论，感觉很有意思，分享一下：\n\n《个人博客，最终选择》：https://github.com/atian25/blog/issues/07.md\n《博客是什么》：lifesinger/blog#123', 'bodyHTML': '<blockquote>\n<p dir="auto">Categories: 博客/语雀</p>\n</blockquote>\n<p dir="auto">写博客、记录文字是一个好的习惯，相信很多人的初心都是很美好的。但是能真正坚持下来的，或许没有多少。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/8433d68183c170368a810539419e61251121da9d7fc157e6937b1d65e01d0aa2/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466a4665693941627275676261465f62334d456e6d6c4c3750764b342e706e67"><img src="https://camo.githubusercontent.com/8433d68183c170368a810539419e61251121da9d7fc157e6937b1d65e01d0aa2/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d6e6f7465626f6f6b2d696d672f466a4665693941627275676261465f62334d456e6d6c4c3750764b342e706e67" alt="blog2.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-notebook-img/FjFei9AbrugbaF_b3MEnmlL7PvK4.png" style="max-width: 100%;"></a></p>\n<p dir="auto">记得最早接触博客和云笔记，还是在大学刚毕业后，真正意义上开始使用编程语言学习项目分析的那段时间。作为一个菜鸟，在接受团队技术分享、在培训过程中接触到了各种各样的知识，出于知识梳理、快速查找原始需求，开始接触使用有道云笔记和印象笔记。但是让人失望的是，那时候的有道云和印象笔记都不支持代码插入，而且 UI\xa0 界面很 low，这对一个经常与代码打交道的人来说体验时非常糟糕的。</p>\n<h4 dir="auto">2014 年，YouDao + cnblogs</h4>\n<p dir="auto">作为一个清爽、简洁、无广告的纯技术分享平台，博客园似乎是最好的。在博客园趟了趟水，稀稀拉拉写了几篇文章，那时候对文章的理解其实就是自己对一些经常使用知识的体会。使用了几个月，发现了几个问题：</p>\n<ul dir="auto">\n<li>博客园的定位是 IT 技术的分享平台，作为一个生信人而言，没太多共鸣。</li>\n<li>平时工作中的记录大多数记录在有道云或者印象笔记，发表到博客园，需要再次排版整理，很麻烦。那时候虽然可以使用 Windows Live Writer，但无法做到随手编辑。</li>\n</ul>\n<h4 dir="auto">2015 年，oschina + wiznote</h4>\n<p dir="auto">2015 年的开源中国的博客系统长的也并不好看，而且自定义支持也不好。现如今开源中国的博客系统经过改版后已经清爽了很多，但在浏览过程中头部的广告却让人很是不爽。</p>\n<p dir="auto">同年，接触到为知笔记，这是一款非常优秀的国产笔记。从功能和界面上来说，它可以说是国产笔记中做的最好的，各种插件能满足你日常工作和生活 99% 的需求。曾经在很长一段时间内，它一直是我作为个人知识管理最理想的工具之一。但有几个方面，仍有待完善：</p>\n<ol dir="auto">\n<li>万年不变的 web 端。为知笔记的 web 端很不好看，体验也很差，不支持 markdown 预览编辑模式。</li>\n<li>建议反馈响应慢。为知笔记使用贴吧作为问题反馈平台，很多建议无法得到及时的响应。尤其是 web 端的问题，从 2015 到 2018 年一点变化都没有。</li>\n<li>到了 2019 年 7 月，好奇心作祟回去看了一眼，居然发现为知笔记更新了一个 beta 版的 web 端，颜值还算可以，但列表栏自由宽度调整、主题、字体定义等还不够完善，md 在线编辑依然不支持！</li>\n</ol>\n<h4 dir="auto">2017 年，jekyll + leanote</h4>\n<p dir="auto">jekyll 和 hexo 是一个功能强大的博客系统，所有人都可以利用免费代码托管平台部署属于自己的 jekyll 与 hexo 博客，如 github pages，coding pages 和 gitee pages。这种博客模式可以让用户更加关注写作，而不需要把大量的时候花费在界面样式的调整上。不可否认的是，基于 jekyll/hexo 的博客系统，在部署和自定义特定功能上是需要一定的前端或者后端技术作为支持的。</p>\n<p dir="auto">Leanote 的体验是非常好的，尤其是它附带的博客系统具有非常自由的可定制性，这一点也是最吸引我的地方。不足的是：</p>\n<ul dir="auto">\n<li>相比为知笔记的明文保存，Leanote 本地二进制的笔记保存方式很不利用笔记的迁移；</li>\n<li>开发、维护人员不足，很多 github issues 都没有响应；</li>\n<li>用户小众，更新及其缓慢。从 2019 年起基本没有任何的更新，很担心哪一天就跑路了。</li>\n</ul>\n<h4 dir="auto">2019 年，语雀：专业的云端知识库</h4>\n<p dir="auto">2019 年，发现了语雀，被友好的编辑体验吸引，加上蚂蚁金服的加持，于是开始把所有积累的文档迁移了上来。希望能基于这样一个专注于知识的平台能越来越好。</p>\n<p dir="auto">总的来说，在坚持博客的道路上，有访问量的困惑，有不断追求其他一些博客简洁清爽页面样式的影响，有文字编辑时的体验需求，也有随着自媒体日趋发达多平台文章同步的需要，甚至博文多了网页加载的速度瓶颈等等，都会造成不断的更换博客的托管和部署平台，这对于很多喜欢折腾的人来说这应该是非常正常的一个事情。不管是 Github Pages，还是 \xa0WorldPress、Gitee Pages 这些托管平台，或者是对 Hexo、Jekyll、Hugo 搭建方式的选择，都足以让你眼花缭乱。</p>\n<p dir="auto"><strong>从根本上而言，博客的本质是记录，是与自己、他人的内心对话</strong>。<strong>对话是记录的延伸。产生对话，需要传播，需要消息机制。博客就三个关键词：记录、传播、对话。</strong></p>\n<p dir="auto">所以，不管选择哪一种方式，只要能坚持下来就是好博客，专注才是硬道理，内容才是王道。</p>\n<p dir="auto">我个人的大部分文档目前都保存在语雀，部分公开文档也和本人托管在 Gihub 的 Jekyll 博客进行了自动同步，有兴趣的可以关注交流一下！</p>\n<ul dir="auto">\n<li>语雀：<a href="https://www.yuque.com/shenweiyan" rel="nofollow">https://www.yuque.com/shenweiyan</a></li>\n<li>博客：<a href="https://weiyan.cc" rel="nofollow">https://weiyan.cc</a></li>\n</ul>\n<h4 dir="auto">后记</h4>\n<p dir="auto">今天看到几个使用 github issues 安家博客的人，看着底下一个个的评论，感觉很有意思，分享一下：</p>\n<ul dir="auto">\n<li>《个人博客，最终选择》：<a href="https://github.com/atian25/blog/issues/07.md">https://github.com/atian25/blog/issues/07.md</a></li>\n<li>《博客是什么》：<a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="12092185" data-permission-text="Title is private" data-url="https://github.com/lifesinger/blog/issues/123" data-hovercard-type="issue" data-hovercard-url="/lifesinger/blog/issues/123/hovercard" href="https://github.com/lifesinger/blog/issues/123">lifesinger/blog#123</a></li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': '一些好玩的命名风格', 'number': 112, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/112', 'createdAt': '2025-04-30T06:45:39Z', 'lastEditedAt': None, 'updatedAt': '2025-04-30T06:45:40Z', 'body': '> Categories: 博客/语雀\r\n\r\n码云 gitee 名字的由来的一种解析：后缀 ee 附于动词后，表示动作的受动者。与之相应，动作的施动者则由后缀 er/or 表示。gitee 的意思就是“使用 git 的群体”，你懂了吗？ 反正我是懂了！\r\n\r\n<!-- more -->\r\n\r\n于是有了我的 bioitee：\r\n\r\n一群从事与爱好 Bio IT 的群体。你懂了吗？反正我懂了！\r\n', 'bodyText': 'Categories: 博客/语雀\n\n码云 gitee 名字的由来的一种解析：后缀 ee 附于动词后，表示动作的受动者。与之相应，动作的施动者则由后缀 er/or 表示。gitee 的意思就是“使用 git 的群体”，你懂了吗？ 反正我是懂了！\n\n于是有了我的 bioitee：\n一群从事与爱好 Bio IT 的群体。你懂了吗？反正我懂了！', 'bodyHTML': '<blockquote>\n<p dir="auto">Categories: 博客/语雀</p>\n</blockquote>\n<p dir="auto">码云 gitee 名字的由来的一种解析：后缀 ee 附于动词后，表示动作的受动者。与之相应，动作的施动者则由后缀 er/or 表示。gitee 的意思就是“使用 git 的群体”，你懂了吗？ 反正我是懂了！</p>\n\n<p dir="auto">于是有了我的 bioitee：</p>\n<p dir="auto">一群从事与爱好 Bio IT 的群体。你懂了吗？反正我懂了！</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': [{'name': '语雀随笔'}]}, 'comments': {'nodes': []}}, {'title': 'Vim 使用技巧', 'number': 111, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/111', 'createdAt': '2025-04-25T09:09:46Z', 'lastEditedAt': '2025-04-28T08:10:36Z', 'updatedAt': '2025-04-28T08:10:36Z', 'body': '## 多行缩进\r\n\r\n### 向前或向后缩进4个空格\r\n\r\n1. 按 `shift + v` 组合键进入 `Visual Line` 模式，可使用方向键选择多行；\r\n2. 按 `<` 或 `>`，进行向前或向后缩进。注：有些设置为缩进一个 `Tab` 单位。\r\n\r\n### 向前或向后缩进n个空格\r\n\r\n向前缩进，实则是使用 `Visual Block` 模式删除多余空格以达到向前缩进的效果。\r\n\r\n1. 按 `ctrl + v` 组合键进入`Visual Block`模式；\r\n2. 使用上下方向键可选择多行，使用前后方向键可选择空格大小长度；\r\n3. 按下 `d` 删除选中内容。\r\n\r\n向后缩进，实则是使用 `Visual Block` 模式批量添加空格以达到向后缩进的效果。\r\n\r\n1. 按`ctrl + v`组合键进入`Visual Block`模式；\r\n2. 使用上下方向键可选择多行；\r\n3. 按`shift + i`组合键进入编辑模式；\r\n4. 输入需要缩进的空格数量；\r\n5. 按`esc`按键完成操作。\r\n\r\n## 删除\r\n\r\nd^：删除光标至行首内容；\r\nd$：删除光标至行尾内容；\r\ndgg：删除光标前的所有内容；\r\ndG：删除光标后的所有内容；\r\ndd：删除当前行内容；', 'bodyText': '多行缩进\n向前或向后缩进4个空格\n\n按 shift + v 组合键进入 Visual Line 模式，可使用方向键选择多行；\n按 < 或 >，进行向前或向后缩进。注：有些设置为缩进一个 Tab 单位。\n\n向前或向后缩进n个空格\n向前缩进，实则是使用 Visual Block 模式删除多余空格以达到向前缩进的效果。\n\n按 ctrl + v 组合键进入Visual Block模式；\n使用上下方向键可选择多行，使用前后方向键可选择空格大小长度；\n按下 d 删除选中内容。\n\n向后缩进，实则是使用 Visual Block 模式批量添加空格以达到向后缩进的效果。\n\n按ctrl + v组合键进入Visual Block模式；\n使用上下方向键可选择多行；\n按shift + i组合键进入编辑模式；\n输入需要缩进的空格数量；\n按esc按键完成操作。\n\n删除\nd^：删除光标至行首内容；\nd$：删除光标至行尾内容；\ndgg：删除光标前的所有内容；\ndG：删除光标后的所有内容；\ndd：删除当前行内容；', 'bodyHTML': '<h2 dir="auto">多行缩进</h2>\n<h3 dir="auto">向前或向后缩进4个空格</h3>\n<ol dir="auto">\n<li>按 <code class="notranslate">shift + v</code> 组合键进入 <code class="notranslate">Visual Line</code> 模式，可使用方向键选择多行；</li>\n<li>按 <code class="notranslate">&lt;</code> 或 <code class="notranslate">&gt;</code>，进行向前或向后缩进。注：有些设置为缩进一个 <code class="notranslate">Tab</code> 单位。</li>\n</ol>\n<h3 dir="auto">向前或向后缩进n个空格</h3>\n<p dir="auto">向前缩进，实则是使用 <code class="notranslate">Visual Block</code> 模式删除多余空格以达到向前缩进的效果。</p>\n<ol dir="auto">\n<li>按 <code class="notranslate">ctrl + v</code> 组合键进入<code class="notranslate">Visual Block</code>模式；</li>\n<li>使用上下方向键可选择多行，使用前后方向键可选择空格大小长度；</li>\n<li>按下 <code class="notranslate">d</code> 删除选中内容。</li>\n</ol>\n<p dir="auto">向后缩进，实则是使用 <code class="notranslate">Visual Block</code> 模式批量添加空格以达到向后缩进的效果。</p>\n<ol dir="auto">\n<li>按<code class="notranslate">ctrl + v</code>组合键进入<code class="notranslate">Visual Block</code>模式；</li>\n<li>使用上下方向键可选择多行；</li>\n<li>按<code class="notranslate">shift + i</code>组合键进入编辑模式；</li>\n<li>输入需要缩进的空格数量；</li>\n<li>按<code class="notranslate">esc</code>按键完成操作。</li>\n</ol>\n<h2 dir="auto">删除</h2>\n<p dir="auto">d^：删除光标至行首内容；<br>\nd$：删除光标至行尾内容；<br>\ndgg：删除光标前的所有内容；<br>\ndG：删除光标后的所有内容；<br>\ndd：删除当前行内容；</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.3-折腾'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': 'MkDocs Material 大法好', 'number': 110, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/110', 'createdAt': '2025-04-25T06:38:20Z', 'lastEditedAt': None, 'updatedAt': '2025-04-25T06:38:21Z', 'body': '> Categories: 博客/好玩\r\n\r\n自从用上了 MkDocs Material，除了可以用作专业的文档生成器，发现其实也可以干些其他的杂活，例如用它自定义一个更加有辨识度的 Homepage，用它搭建一个属于自己的导航站点。\r\n\r\n<!-- more -->\r\n\r\nHugo 的 [Navpage](https://github.com/navpage) 导航虽然颜值上更舒服一些，但是和博客、站内搜索的集成依然有些割裂，自己对 Hugo 越来越缺乏学习的热情。另外一方面，反而更加热衷于在 [GitHub Discussions](https://github.com/shenweiyan/Digital-Garden/discussions) 持续记录自己的一些胡言乱语。\r\n\r\n感谢自己省吃俭用薅下来的 4 核 8G 小 VPS，几经折腾下，终于让 Homepage + Documents + Navigation 都集成在了一个 MkDocs Material 里面，先贴几张图，后面可能会开源，也可能会和 [Navpage](https://github.com/navpage) 整合在一起付费提供使用。\r\n<p align="center">\r\n    <img src="https://kg.weiyan.tech/2025/04/home-pages.png" alt><br>\r\n    <span>Homepage</span>\r\n</p>\r\n\r\n<p align="center">\r\n    <img src="https://kg.weiyan.tech/2025/04/get-start-pages.png" alt><br>\r\n    <span>文档页面</span>\r\n</p>\r\n\r\n<p align="center">\r\n    <img src="https://kg.weiyan.tech/2025/04/docs-pages.png" alt><br>\r\n    <span>文档页面 - 目录</span>\r\n</p>\r\n\r\n<p align="center">\r\n    <img src="https://kg.weiyan.tech/2025/04/blog-pages.png" alt><br>\r\n    <span>博客页面</span>\r\n</p>\r\n\r\n<p align="center">\r\n    <img src="https://kg.weiyan.tech/2025/04/navigation-pages.png" alt><br>\r\n    <span>导航页面</span>\r\n</p>', 'bodyText': 'Categories: 博客/好玩\n\n自从用上了 MkDocs Material，除了可以用作专业的文档生成器，发现其实也可以干些其他的杂活，例如用它自定义一个更加有辨识度的 Homepage，用它搭建一个属于自己的导航站点。\n\nHugo 的 Navpage 导航虽然颜值上更舒服一些，但是和博客、站内搜索的集成依然有些割裂，自己对 Hugo 越来越缺乏学习的热情。另外一方面，反而更加热衷于在 GitHub Discussions 持续记录自己的一些胡言乱语。\n感谢自己省吃俭用薅下来的 4 核 8G 小 VPS，几经折腾下，终于让 Homepage + Documents + Navigation 都集成在了一个 MkDocs Material 里面，先贴几张图，后面可能会开源，也可能会和 Navpage 整合在一起付费提供使用。\n\n    \n    Homepage\n\n\n    \n    文档页面\n\n\n    \n    文档页面 - 目录\n\n\n    \n    博客页面\n\n\n    \n    导航页面', 'bodyHTML': '<blockquote>\n<p dir="auto">Categories: 博客/好玩</p>\n</blockquote>\n<p dir="auto">自从用上了 MkDocs Material，除了可以用作专业的文档生成器，发现其实也可以干些其他的杂活，例如用它自定义一个更加有辨识度的 Homepage，用它搭建一个属于自己的导航站点。</p>\n\n<p dir="auto">Hugo 的 <a href="https://github.com/navpage">Navpage</a> 导航虽然颜值上更舒服一些，但是和博客、站内搜索的集成依然有些割裂，自己对 Hugo 越来越缺乏学习的热情。另外一方面，反而更加热衷于在 <a href="https://github.com/shenweiyan/Digital-Garden/discussions">GitHub Discussions</a> 持续记录自己的一些胡言乱语。</p>\n<p dir="auto">感谢自己省吃俭用薅下来的 4 核 8G 小 VPS，几经折腾下，终于让 Homepage + Documents + Navigation 都集成在了一个 MkDocs Material 里面，先贴几张图，后面可能会开源，也可能会和 <a href="https://github.com/navpage">Navpage</a> 整合在一起付费提供使用。</p>\n<p align="center" dir="auto">\n    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/9c80df563eab61a472824379f00cff4ea878d285fb84eac482c2647455a4d246/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30342f686f6d652d70616765732e706e67"><img src="https://camo.githubusercontent.com/9c80df563eab61a472824379f00cff4ea878d285fb84eac482c2647455a4d246/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30342f686f6d652d70616765732e706e67" alt="" data-canonical-src="https://kg.weiyan.tech/2025/04/home-pages.png" style="max-width: 100%;"></a><br>\n    <span>Homepage</span>\n</p>\n<p align="center" dir="auto">\n    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/12093492753573d13938022b34fdd342ea5a227728713145ccb234342c8632d2/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30342f6765742d73746172742d70616765732e706e67"><img src="https://camo.githubusercontent.com/12093492753573d13938022b34fdd342ea5a227728713145ccb234342c8632d2/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30342f6765742d73746172742d70616765732e706e67" alt="" data-canonical-src="https://kg.weiyan.tech/2025/04/get-start-pages.png" style="max-width: 100%;"></a><br>\n    <span>文档页面</span>\n</p>\n<p align="center" dir="auto">\n    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/3c49900d434724063292ba122f963eca485658c920e52a26371f4a702d47af0c/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30342f646f63732d70616765732e706e67"><img src="https://camo.githubusercontent.com/3c49900d434724063292ba122f963eca485658c920e52a26371f4a702d47af0c/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30342f646f63732d70616765732e706e67" alt="" data-canonical-src="https://kg.weiyan.tech/2025/04/docs-pages.png" style="max-width: 100%;"></a><br>\n    <span>文档页面 - 目录</span>\n</p>\n<p align="center" dir="auto">\n    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/9bcf666873bdbecd8a5fe3e69098516f2afbaa24e27113393586a70533cd6719/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30342f626c6f672d70616765732e706e67"><img src="https://camo.githubusercontent.com/9bcf666873bdbecd8a5fe3e69098516f2afbaa24e27113393586a70533cd6719/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30342f626c6f672d70616765732e706e67" alt="" data-canonical-src="https://kg.weiyan.tech/2025/04/blog-pages.png" style="max-width: 100%;"></a><br>\n    <span>博客页面</span>\n</p>\n<p align="center" dir="auto">\n    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/7f0bb968ddce5df414f4314f587c015d365bee90f04418d24d38be4e18efb3e9/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30342f6e617669676174696f6e2d70616765732e706e67"><img src="https://camo.githubusercontent.com/7f0bb968ddce5df414f4314f587c015d365bee90f04418d24d38be4e18efb3e9/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30342f6e617669676174696f6e2d70616765732e706e67" alt="" data-canonical-src="https://kg.weiyan.tech/2025/04/navigation-pages.png" style="max-width: 100%;"></a><br>\n    <span>导航页面</span>\n</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '一杯热茶一个下午', 'number': 109, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/109', 'createdAt': '2025-04-13T07:01:14Z', 'lastEditedAt': '2025-04-13T07:10:08Z', 'updatedAt': '2025-04-13T07:12:18Z', 'body': '> Categories: 博客/乱弹\r\n\r\n除了图书馆、自习室，其实星巴克也算的上是一个码字的好地方，如果再点上一杯自己喜欢的热茶，伴随着耳机传来的音乐，也算的上极致的享受。\r\n\r\n<!-- more -->\r\n\r\n<p align="center">\r\n    <img src=\'https://kg.weiyan.tech/2025/04/starbuks-red-tea.webp\' alt=\'starbuks-red-tea\' width=600>\r\n</p>\r\n\r\n外面的世界很复杂，陌生人之间的沟通交流已然处处勾心斗角，夫妻家庭之间的摩擦磕碰更是加剧内心的孤独。总希望有人可以关心，总希望能一家人和睦平安，事实上不会事事如意。\r\n\r\n> “人到中年的男人，时常会觉得孤独，因为他一睁开眼睛，周围都是要依靠他的人，却没有他可以依靠的人。”     \r\n> —— 张爱玲\r\n\r\n其实说白了，就是人到中年不如狗，不敢老，不敢死，因为上有老下有小。于是开始卖笑：讨老人欢心是孝顺；给儿女做榜样是责任；看老婆脸色过日子是爱情；出门还要迎合所有人。\r\n\r\n圣贤有云：三十而立，四十不惑，五十而知天命。中年男人的人生，就是距离真实的自己最远的时刻。有家的男人是幸福，可有家的男人也辛苦。人到中年可以没有豪情万丈，更不能只剩惆怅，生活本身已经是不能承受之重，那些身外之物更应看透。\r\n\r\n所谓一叶知秋，见好就收。', 'bodyText': 'Categories: 博客/乱弹\n\n除了图书馆、自习室，其实星巴克也算的上是一个码字的好地方，如果再点上一杯自己喜欢的热茶，伴随着耳机传来的音乐，也算的上极致的享受。\n\n\n    \n\n外面的世界很复杂，陌生人之间的沟通交流已然处处勾心斗角，夫妻家庭之间的摩擦磕碰更是加剧内心的孤独。总希望有人可以关心，总希望能一家人和睦平安，事实上不会事事如意。\n\n“人到中年的男人，时常会觉得孤独，因为他一睁开眼睛，周围都是要依靠他的人，却没有他可以依靠的人。”\n—— 张爱玲\n\n其实说白了，就是人到中年不如狗，不敢老，不敢死，因为上有老下有小。于是开始卖笑：讨老人欢心是孝顺；给儿女做榜样是责任；看老婆脸色过日子是爱情；出门还要迎合所有人。\n圣贤有云：三十而立，四十不惑，五十而知天命。中年男人的人生，就是距离真实的自己最远的时刻。有家的男人是幸福，可有家的男人也辛苦。人到中年可以没有豪情万丈，更不能只剩惆怅，生活本身已经是不能承受之重，那些身外之物更应看透。\n所谓一叶知秋，见好就收。', 'bodyHTML': '<blockquote>\n<p dir="auto">Categories: 博客/乱弹</p>\n</blockquote>\n<p dir="auto">除了图书馆、自习室，其实星巴克也算的上是一个码字的好地方，如果再点上一杯自己喜欢的热茶，伴随着耳机传来的音乐，也算的上极致的享受。</p>\n\n<p align="center" dir="auto">\n    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/5b826a862f24e844b9eba71fd92a2379269b2b6eda48c9e2a479cc5485975512/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30342f7374617262756b732d7265642d7465612e77656270"><img src="https://camo.githubusercontent.com/5b826a862f24e844b9eba71fd92a2379269b2b6eda48c9e2a479cc5485975512/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30342f7374617262756b732d7265642d7465612e77656270" alt="starbuks-red-tea" width="600" data-canonical-src="https://kg.weiyan.tech/2025/04/starbuks-red-tea.webp" style="max-width: 100%;"></a>\n</p>\n<p dir="auto">外面的世界很复杂，陌生人之间的沟通交流已然处处勾心斗角，夫妻家庭之间的摩擦磕碰更是加剧内心的孤独。总希望有人可以关心，总希望能一家人和睦平安，事实上不会事事如意。</p>\n<blockquote>\n<p dir="auto">“人到中年的男人，时常会觉得孤独，因为他一睁开眼睛，周围都是要依靠他的人，却没有他可以依靠的人。”<br>\n—— 张爱玲</p>\n</blockquote>\n<p dir="auto">其实说白了，就是人到中年不如狗，不敢老，不敢死，因为上有老下有小。于是开始卖笑：讨老人欢心是孝顺；给儿女做榜样是责任；看老婆脸色过日子是爱情；出门还要迎合所有人。</p>\n<p dir="auto">圣贤有云：三十而立，四十不惑，五十而知天命。中年男人的人生，就是距离真实的自己最远的时刻。有家的男人是幸福，可有家的男人也辛苦。人到中年可以没有豪情万丈，更不能只剩惆怅，生活本身已经是不能承受之重，那些身外之物更应看透。</p>\n<p dir="auto">所谓一叶知秋，见好就收。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '清明时节雨纷纷', 'number': 108, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/108', 'createdAt': '2025-04-05T07:53:25Z', 'lastEditedAt': '2025-04-07T02:26:03Z', 'updatedAt': '2025-04-07T02:26:29Z', 'body': '> Categories: 博客/乱弹\r\n\r\n自打搬进新家，生活的节奏就像按下了快进键，琐碎的事务如潮水般涌来，让自己始终没能腾出完整的时间，像从前在图书馆那样，沉浸式地做些自己喜欢的事。\r\n\r\n<!-- more -->\r\n\r\n时间匆匆忙忙，难有时间停下来想一些事情，尤其过完年后的这一段时间里，焦虑与躁动忙碌交错。身边人生病的来回折腾，孩子补习班兴趣班辅导的鸡飞狗跳，让整个人下班后、周末的时间被切割得支离破碎。每次刚有点想做喜欢事情的念头，就被各种琐事打断。有时候好不容易抽出点时间，却又觉得缺少了图书馆那种宁静专注的氛围，很难静下心来。\r\n\r\n![2025-清明-天鹿湖-徒步](https://kg.weiyan.tech/2025/04/2025-qm-1.jpg)\r\n\r\n虽然知道这些都是暂时的，也在等着工作生活慢慢渐入佳境。\r\n\r\n清明时节雨纷纷，趁着这个假期，好不容易在家附近找到一个可以静静呆着一下的小图书馆。接着，把在家里尘封已久的 ThinkPad 小钢炮又翻了出来 —— 破 PC 用久了，切换回已经有 7、8 个年头的 T460p，依然感受到了这个笔记本的倔强 —— 很有一股“老兵不死”的错觉。\r\n\r\n![home-library](https://kg.weiyan.tech/2025/04/home-library.jpg)\r\n\r\n“世上只有一种英雄主义，就是认清生活的真相之后依然热爱生活。”\r\n\r\n很多人都曾被这句话鼓舞过，特别是在长大之后，我们慢慢发现“生活的真相”其实就是，总会有这样那样的“坏事”发生，但还是得咬紧牙关迎难而上。\r\n\r\n一路披荆斩棘、披星戴月，虽然辛苦，但却在这个过程里变得更加勇敢和坚强。\r\n\r\n![2025-清明-天鹿湖-禾雀花](https://kg.weiyan.tech/2025/04/2025-birdwoodiana.webp)', 'bodyText': 'Categories: 博客/乱弹\n\n自打搬进新家，生活的节奏就像按下了快进键，琐碎的事务如潮水般涌来，让自己始终没能腾出完整的时间，像从前在图书馆那样，沉浸式地做些自己喜欢的事。\n\n时间匆匆忙忙，难有时间停下来想一些事情，尤其过完年后的这一段时间里，焦虑与躁动忙碌交错。身边人生病的来回折腾，孩子补习班兴趣班辅导的鸡飞狗跳，让整个人下班后、周末的时间被切割得支离破碎。每次刚有点想做喜欢事情的念头，就被各种琐事打断。有时候好不容易抽出点时间，却又觉得缺少了图书馆那种宁静专注的氛围，很难静下心来。\n\n虽然知道这些都是暂时的，也在等着工作生活慢慢渐入佳境。\n清明时节雨纷纷，趁着这个假期，好不容易在家附近找到一个可以静静呆着一下的小图书馆。接着，把在家里尘封已久的 ThinkPad 小钢炮又翻了出来 —— 破 PC 用久了，切换回已经有 7、8 个年头的 T460p，依然感受到了这个笔记本的倔强 —— 很有一股“老兵不死”的错觉。\n\n“世上只有一种英雄主义，就是认清生活的真相之后依然热爱生活。”\n很多人都曾被这句话鼓舞过，特别是在长大之后，我们慢慢发现“生活的真相”其实就是，总会有这样那样的“坏事”发生，但还是得咬紧牙关迎难而上。\n一路披荆斩棘、披星戴月，虽然辛苦，但却在这个过程里变得更加勇敢和坚强。', 'bodyHTML': '<blockquote>\n<p dir="auto">Categories: 博客/乱弹</p>\n</blockquote>\n<p dir="auto">自打搬进新家，生活的节奏就像按下了快进键，琐碎的事务如潮水般涌来，让自己始终没能腾出完整的时间，像从前在图书馆那样，沉浸式地做些自己喜欢的事。</p>\n\n<p dir="auto">时间匆匆忙忙，难有时间停下来想一些事情，尤其过完年后的这一段时间里，焦虑与躁动忙碌交错。身边人生病的来回折腾，孩子补习班兴趣班辅导的鸡飞狗跳，让整个人下班后、周末的时间被切割得支离破碎。每次刚有点想做喜欢事情的念头，就被各种琐事打断。有时候好不容易抽出点时间，却又觉得缺少了图书馆那种宁静专注的氛围，很难静下心来。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b40b714d42bd8081c673d65b113776667a1a6e02aa75f82ab84798b66adcd2da/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30342f323032352d716d2d312e6a7067"><img src="https://camo.githubusercontent.com/b40b714d42bd8081c673d65b113776667a1a6e02aa75f82ab84798b66adcd2da/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30342f323032352d716d2d312e6a7067" alt="2025-清明-天鹿湖-徒步" data-canonical-src="https://kg.weiyan.tech/2025/04/2025-qm-1.jpg" style="max-width: 100%;"></a></p>\n<p dir="auto">虽然知道这些都是暂时的，也在等着工作生活慢慢渐入佳境。</p>\n<p dir="auto">清明时节雨纷纷，趁着这个假期，好不容易在家附近找到一个可以静静呆着一下的小图书馆。接着，把在家里尘封已久的 ThinkPad 小钢炮又翻了出来 —— 破 PC 用久了，切换回已经有 7、8 个年头的 T460p，依然感受到了这个笔记本的倔强 —— 很有一股“老兵不死”的错觉。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/7aeba0d3c332ea415413b5e117ebe8ab672e469c704341c37137f8063af80901/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30342f686f6d652d6c6962726172792e6a7067"><img src="https://camo.githubusercontent.com/7aeba0d3c332ea415413b5e117ebe8ab672e469c704341c37137f8063af80901/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30342f686f6d652d6c6962726172792e6a7067" alt="home-library" data-canonical-src="https://kg.weiyan.tech/2025/04/home-library.jpg" style="max-width: 100%;"></a></p>\n<p dir="auto">“世上只有一种英雄主义，就是认清生活的真相之后依然热爱生活。”</p>\n<p dir="auto">很多人都曾被这句话鼓舞过，特别是在长大之后，我们慢慢发现“生活的真相”其实就是，总会有这样那样的“坏事”发生，但还是得咬紧牙关迎难而上。</p>\n<p dir="auto">一路披荆斩棘、披星戴月，虽然辛苦，但却在这个过程里变得更加勇敢和坚强。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/ced9f73de3ccd1e496d7976298f9d5f0ea11e76a9fdd5b8b8658cba6a36cf7ff/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30342f323032352d62697264776f6f6469616e612e77656270"><img src="https://camo.githubusercontent.com/ced9f73de3ccd1e496d7976298f9d5f0ea11e76a9fdd5b8b8658cba6a36cf7ff/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30342f323032352d62697264776f6f6469616e612e77656270" alt="2025-清明-天鹿湖-禾雀花" data-canonical-src="https://kg.weiyan.tech/2025/04/2025-birdwoodiana.webp" style="max-width: 100%;"></a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '测试讨论', 'number': 107, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/107', 'createdAt': '2025-03-25T06:51:15Z', 'lastEditedAt': '2025-04-02T05:35:31Z', 'updatedAt': '2025-04-02T05:35:31Z', 'body': '> Category: 1.3.17-服务器配置管理\r\n\r\nHello! 这是一个新的测试讨论!', 'bodyText': 'Category: 1.3.17-服务器配置管理\n\nHello! 这是一个新的测试讨论!', 'bodyHTML': '<blockquote>\n<p dir="auto">Category: 1.3.17-服务器配置管理</p>\n</blockquote>\n<p dir="auto">Hello! 这是一个新的测试讨论!</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '0.1-站点'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': 'Python 3.6 不能产生 libpython3.6m.so 文件', 'number': 106, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/106', 'createdAt': '2025-03-21T03:04:33Z', 'lastEditedAt': '2025-03-21T03:44:06Z', 'updatedAt': '2025-03-21T03:44:06Z', 'body': '在 Python-3.6.9 中测试 `Cheetah` 包的时候遇到了找不到 `libpython3.6m.so.1.0` 静态库，记录一下填坑。\r\n\r\n<!-- more -->\r\n\r\n```bash\r\n$ python3 -c "import Cheetah._namemapper; print(Cheetah._namemapper.file)"\r\nTraceback (most recent call last):\r\n  File "<string>", line 1, in <module>\r\nImportError: libpython3.6m.so.1.0: cannot open shared object file: No such file or directory\r\n```\r\n\r\n编译第三方静态库，在 `configure` 阶段需要增加 `--enable-shared CFLAGS=-fPIC` 参数！\r\n```bash\r\n./configure --prefix=/usr/local/python3 --enable-optimizations --enable-shared CFLAGS=-fPIC\r\n```\r\n\r\n在安装后，才会在 `/usr/local/python3/lib` 目录下产生 `libpython3.6m.so` 和 `libpython3.6m.so.1.0` 两个文件。如果不加上面的添加，产生的文件是 `libpython3.6m.a`。\r\n', 'bodyText': '在 Python-3.6.9 中测试 Cheetah 包的时候遇到了找不到 libpython3.6m.so.1.0 静态库，记录一下填坑。\n\n$ python3 -c "import Cheetah._namemapper; print(Cheetah._namemapper.file)"\nTraceback (most recent call last):\n  File "<string>", line 1, in <module>\nImportError: libpython3.6m.so.1.0: cannot open shared object file: No such file or directory\n编译第三方静态库，在 configure 阶段需要增加 --enable-shared CFLAGS=-fPIC 参数！\n./configure --prefix=/usr/local/python3 --enable-optimizations --enable-shared CFLAGS=-fPIC\n在安装后，才会在 /usr/local/python3/lib 目录下产生 libpython3.6m.so 和 libpython3.6m.so.1.0 两个文件。如果不加上面的添加，产生的文件是 libpython3.6m.a。', 'bodyHTML': '<p dir="auto">在 Python-3.6.9 中测试 <code class="notranslate">Cheetah</code> 包的时候遇到了找不到 <code class="notranslate">libpython3.6m.so.1.0</code> 静态库，记录一下填坑。</p>\n\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ python3 -c &quot;import Cheetah._namemapper; print(Cheetah._namemapper.file)&quot;\nTraceback (most recent call last):\n  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;\nImportError: libpython3.6m.so.1.0: cannot open shared object file: No such file or directory"><pre class="notranslate">$ python3 -c <span class="pl-s"><span class="pl-pds">"</span>import Cheetah._namemapper; print(Cheetah._namemapper.file)<span class="pl-pds">"</span></span>\nTraceback (most recent call last):\n  File <span class="pl-s"><span class="pl-pds">"</span>&lt;string&gt;<span class="pl-pds">"</span></span>, line 1, <span class="pl-k">in</span> <span class="pl-k">&lt;</span>module<span class="pl-k">&gt;</span>\nImportError: libpython3.6m.so.1.0: cannot open shared object file: No such file or directory</pre></div>\n<p dir="auto">编译第三方静态库，在 <code class="notranslate">configure</code> 阶段需要增加 <code class="notranslate">--enable-shared CFLAGS=-fPIC</code> 参数！</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="./configure --prefix=/usr/local/python3 --enable-optimizations --enable-shared CFLAGS=-fPIC"><pre class="notranslate">./configure --prefix=/usr/local/python3 --enable-optimizations --enable-shared CFLAGS=-fPIC</pre></div>\n<p dir="auto">在安装后，才会在 <code class="notranslate">/usr/local/python3/lib</code> 目录下产生 <code class="notranslate">libpython3.6m.so</code> 和 <code class="notranslate">libpython3.6m.so.1.0</code> 两个文件。如果不加上面的添加，产生的文件是 <code class="notranslate">libpython3.6m.a</code>。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.3-折腾'}, 'labels': {'nodes': [{'name': '1.3.5-Python'}]}, 'comments': {'nodes': []}}, {'title': '【3.1.x-GalaxyOther】Galaxy 安装应该选择哪个版本', 'number': 105, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/105', 'createdAt': '2025-03-19T07:21:02Z', 'lastEditedAt': '2025-03-24T03:22:22Z', 'updatedAt': '2025-04-02T05:16:48Z', 'body': '> Galaxy  是一个用于生物学研究的工作流程开源平台，用网页作为界面，让不熟悉编程语言的生物科学家更容易将手上的资料做进一步分析。Galaxy 的工作流程包含: 资料筛选与整合、资料分析与发布。虽然最早是为了基因组学研究而开发，但现在通常做为一般的生物资讯学工作流程管理系统。  —— [Galaxy (计算生物学)](https://zh.wikipedia.org/wiki/Galaxy_(%E8%A8%88%E7%AE%97%E7%94%9F%E7%89%A9%E5%AD%B8)) · 维基百科\r\n\r\n随着新技术的更新换代，[Galaxy Project](https://github.com/galaxyproject/galaxy) 这个项目现在的变化也是越来越大，不管是 UI 界面还是各种框架技术，好像是越来越复杂。从业务角度出发，面对每年至少 2+ 次的 Release 版本，我们应该怎么选呢？\r\n\r\n<!-- more -->\r\n\r\n首先，在 UI 上 [release_24.0](https://docs.galaxyproject.org/en/master/releases/24.0_announce.html) 和 [release_24.1](https://docs.galaxyproject.org/en/master/releases/24.1_announce.html) 是一个分水岭。\r\n\r\n传统三栏界面，以 release_22.x 为例。\r\n![galaxy-21.01](https://kg.weiyan.tech/2025/03/galaxy-21.01.png)\r\n\r\n从 [release_24.0](https://docs.galaxyproject.org/en/master/releases/24.0_announce.html) 开始增加了四栏模式（最左侧增加了一栏 **Activity Bar**），但通过管理员可以通过设置保留传统的左中右三栏模式。到 [release_24.1](https://docs.galaxyproject.org/en/master/releases/24.1_announce.html) 后一律强制变成了四栏模式，即 **Activity Bar** 不再支持隐藏（Activity bar is now enabled by default.）。    \r\n![galaxy-24.1](https://kg.weiyan.tech/2024/10/galaxy-24.1.png)\r\n\r\n到了 [release_24.2](https://docs.galaxyproject.org/en/master/releases/24.2_announce.html)，更是把中间栏头部的 **Masthead Revision** 导航去掉整合到左侧的 **Activity Bar** 里面去了。    \r\n![galaxy-24.2.3.dev0](https://kg.weiyan.tech/2025/03/galaxy-24.2.3.dev0.png)\r\n\r\n第二，release_24.x 在安装过程中对 CPU 要求更高，以前的 2 核 4G 服务器现在基本没法安装。  \r\n  \r\n![galaxy-24-sigkill](https://kg.weiyan.tech/2025/03/galaxy-24-sigkill.png)\r\n\r\n可以说，从 release_24.x 起 Galaxy 开始真正贯彻 **Galaxy = workflows** 的理念 - Create complex workflows and deploy via [UI](https://training.galaxyproject.org/training-material/topics/galaxy-interface/tutorials/workflow-editor/tutorial.html) or [CLI](https://training.galaxyproject.org/training-material/topics/galaxy-interface/tutorials/workflow-automation/tutorial.html). \r\n\r\n![galaxy-more-than-you-think](https://kg.weiyan.tech/2025/03/galaxy-more-than-you-think.png)\r\n\r\n所以，总的来说，如果只是想借助 Galaxy 的平台完成命令行工具(程序)到 UI 可视化操作这一业务需求，可以简单选择 **≤** release_24.0 的版本；如果更加侧重 **workflows**，或者两者兼顾，可以选择 release_24.1 或者更高的版本 - 从颜值上个人更喜欢 24.2 这一个对 **Masthead Revision** 导航优化后的布局。', 'bodyText': 'Galaxy  是一个用于生物学研究的工作流程开源平台，用网页作为界面，让不熟悉编程语言的生物科学家更容易将手上的资料做进一步分析。Galaxy 的工作流程包含: 资料筛选与整合、资料分析与发布。虽然最早是为了基因组学研究而开发，但现在通常做为一般的生物资讯学工作流程管理系统。  —— Galaxy (计算生物学) · 维基百科\n\n随着新技术的更新换代，Galaxy Project 这个项目现在的变化也是越来越大，不管是 UI 界面还是各种框架技术，好像是越来越复杂。从业务角度出发，面对每年至少 2+ 次的 Release 版本，我们应该怎么选呢？\n\n首先，在 UI 上 release_24.0 和 release_24.1 是一个分水岭。\n传统三栏界面，以 release_22.x 为例。\n\n从 release_24.0 开始增加了四栏模式（最左侧增加了一栏 Activity Bar），但通过管理员可以通过设置保留传统的左中右三栏模式。到 release_24.1 后一律强制变成了四栏模式，即 Activity Bar 不再支持隐藏（Activity bar is now enabled by default.）。\n\n到了 release_24.2，更是把中间栏头部的 Masthead Revision 导航去掉整合到左侧的 Activity Bar 里面去了。\n\n第二，release_24.x 在安装过程中对 CPU 要求更高，以前的 2 核 4G 服务器现在基本没法安装。\n\n可以说，从 release_24.x 起 Galaxy 开始真正贯彻 Galaxy = workflows 的理念 - Create complex workflows and deploy via UI or CLI.\n\n所以，总的来说，如果只是想借助 Galaxy 的平台完成命令行工具(程序)到 UI 可视化操作这一业务需求，可以简单选择 ≤ release_24.0 的版本；如果更加侧重 workflows，或者两者兼顾，可以选择 release_24.1 或者更高的版本 - 从颜值上个人更喜欢 24.2 这一个对 Masthead Revision 导航优化后的布局。', 'bodyHTML': '<blockquote>\n<p dir="auto">Galaxy  是一个用于生物学研究的工作流程开源平台，用网页作为界面，让不熟悉编程语言的生物科学家更容易将手上的资料做进一步分析。Galaxy 的工作流程包含: 资料筛选与整合、资料分析与发布。虽然最早是为了基因组学研究而开发，但现在通常做为一般的生物资讯学工作流程管理系统。  —— <a href="https://zh.wikipedia.org/wiki/Galaxy_(%E8%A8%88%E7%AE%97%E7%94%9F%E7%89%A9%E5%AD%B8)" rel="nofollow">Galaxy (计算生物学)</a> · 维基百科</p>\n</blockquote>\n<p dir="auto">随着新技术的更新换代，<a href="https://github.com/galaxyproject/galaxy">Galaxy Project</a> 这个项目现在的变化也是越来越大，不管是 UI 界面还是各种框架技术，好像是越来越复杂。从业务角度出发，面对每年至少 2+ 次的 Release 版本，我们应该怎么选呢？</p>\n\n<p dir="auto">首先，在 UI 上 <a href="https://docs.galaxyproject.org/en/master/releases/24.0_announce.html" rel="nofollow">release_24.0</a> 和 <a href="https://docs.galaxyproject.org/en/master/releases/24.1_announce.html" rel="nofollow">release_24.1</a> 是一个分水岭。</p>\n<p dir="auto">传统三栏界面，以 release_22.x 为例。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/0b0f152226dcf33932fb81c82befa7279e7acecf38eeb5e22655e619eeda8ae6/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30332f67616c6178792d32312e30312e706e67"><img src="https://camo.githubusercontent.com/0b0f152226dcf33932fb81c82befa7279e7acecf38eeb5e22655e619eeda8ae6/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30332f67616c6178792d32312e30312e706e67" alt="galaxy-21.01" data-canonical-src="https://kg.weiyan.tech/2025/03/galaxy-21.01.png" style="max-width: 100%;"></a></p>\n<p dir="auto">从 <a href="https://docs.galaxyproject.org/en/master/releases/24.0_announce.html" rel="nofollow">release_24.0</a> 开始增加了四栏模式（最左侧增加了一栏 <strong>Activity Bar</strong>），但通过管理员可以通过设置保留传统的左中右三栏模式。到 <a href="https://docs.galaxyproject.org/en/master/releases/24.1_announce.html" rel="nofollow">release_24.1</a> 后一律强制变成了四栏模式，即 <strong>Activity Bar</strong> 不再支持隐藏（Activity bar is now enabled by default.）。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/e3a7ddb25834dfdf1b63ddd02ea6dc8e76a941809def5d7a5bacd6ebe012c15e/68747470733a2f2f6b672e77656979616e2e746563682f323032342f31302f67616c6178792d32342e312e706e67"><img src="https://camo.githubusercontent.com/e3a7ddb25834dfdf1b63ddd02ea6dc8e76a941809def5d7a5bacd6ebe012c15e/68747470733a2f2f6b672e77656979616e2e746563682f323032342f31302f67616c6178792d32342e312e706e67" alt="galaxy-24.1" data-canonical-src="https://kg.weiyan.tech/2024/10/galaxy-24.1.png" style="max-width: 100%;"></a></p>\n<p dir="auto">到了 <a href="https://docs.galaxyproject.org/en/master/releases/24.2_announce.html" rel="nofollow">release_24.2</a>，更是把中间栏头部的 <strong>Masthead Revision</strong> 导航去掉整合到左侧的 <strong>Activity Bar</strong> 里面去了。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/493e61dd6244bfbe51c3b1909d234dcb57f06d31ba05fec3a6ad0fbc6184a025/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30332f67616c6178792d32342e322e332e646576302e706e67"><img src="https://camo.githubusercontent.com/493e61dd6244bfbe51c3b1909d234dcb57f06d31ba05fec3a6ad0fbc6184a025/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30332f67616c6178792d32342e322e332e646576302e706e67" alt="galaxy-24.2.3.dev0" data-canonical-src="https://kg.weiyan.tech/2025/03/galaxy-24.2.3.dev0.png" style="max-width: 100%;"></a></p>\n<p dir="auto">第二，release_24.x 在安装过程中对 CPU 要求更高，以前的 2 核 4G 服务器现在基本没法安装。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/786f7dcc8ead8ab6e6fe622515e14f47742120a0571586548c58d640c0d7c965/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30332f67616c6178792d32342d7369676b696c6c2e706e67"><img src="https://camo.githubusercontent.com/786f7dcc8ead8ab6e6fe622515e14f47742120a0571586548c58d640c0d7c965/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30332f67616c6178792d32342d7369676b696c6c2e706e67" alt="galaxy-24-sigkill" data-canonical-src="https://kg.weiyan.tech/2025/03/galaxy-24-sigkill.png" style="max-width: 100%;"></a></p>\n<p dir="auto">可以说，从 release_24.x 起 Galaxy 开始真正贯彻 <strong>Galaxy = workflows</strong> 的理念 - Create complex workflows and deploy via <a href="https://training.galaxyproject.org/training-material/topics/galaxy-interface/tutorials/workflow-editor/tutorial.html" rel="nofollow">UI</a> or <a href="https://training.galaxyproject.org/training-material/topics/galaxy-interface/tutorials/workflow-automation/tutorial.html" rel="nofollow">CLI</a>.</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/82c4b21e092e0a9f3a62bdebd15e85ad603c5c380f045bacf5dacc73957fb3f2/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30332f67616c6178792d6d6f72652d7468616e2d796f752d7468696e6b2e706e67"><img src="https://camo.githubusercontent.com/82c4b21e092e0a9f3a62bdebd15e85ad603c5c380f045bacf5dacc73957fb3f2/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30332f67616c6178792d6d6f72652d7468616e2d796f752d7468696e6b2e706e67" alt="galaxy-more-than-you-think" data-canonical-src="https://kg.weiyan.tech/2025/03/galaxy-more-than-you-think.png" style="max-width: 100%;"></a></p>\n<p dir="auto">所以，总的来说，如果只是想借助 Galaxy 的平台完成命令行工具(程序)到 UI 可视化操作这一业务需求，可以简单选择 <strong>≤</strong> release_24.0 的版本；如果更加侧重 <strong>workflows</strong>，或者两者兼顾，可以选择 release_24.1 或者更高的版本 - 从颜值上个人更喜欢 24.2 这一个对 <strong>Masthead Revision</strong> 导航优化后的布局。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '3.1-Galaxy'}, 'labels': {'nodes': [{'name': '3.1.x-GalaxyOther'}]}, 'comments': {'nodes': []}}, {'title': 'git clone 设置临时代理', 'number': 104, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/104', 'createdAt': '2025-03-17T01:49:33Z', 'lastEditedAt': None, 'updatedAt': '2025-03-17T01:49:33Z', 'body': '## 一次性代理\r\n```bash\r\ngit clone -c http.proxy="http://127.0.0.1:1080" https://github.com/\r\n```\r\n\r\n## 全局设置代理\r\n```bash\r\ngit config --global https.proxy http://127.0.0.1:1080\r\ngit config --global https.proxy https://127.0.0.1:1080\r\ngit config --global --unset http.proxy\r\ngit config --global --unset https.proxy\r\n```\r\n\r\n## 参考资料\r\n- [git 设置和取消代理](https://gist.github.com/laispace/666dd7b27e9116faece6)\r\n', 'bodyText': '一次性代理\ngit clone -c http.proxy="http://127.0.0.1:1080" https://github.com/\n全局设置代理\ngit config --global https.proxy http://127.0.0.1:1080\ngit config --global https.proxy https://127.0.0.1:1080\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n参考资料\n\ngit 设置和取消代理', 'bodyHTML': '<h2 dir="auto">一次性代理</h2>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="git clone -c http.proxy=&quot;http://127.0.0.1:1080&quot; https://github.com/"><pre class="notranslate">git clone -c http.proxy=<span class="pl-s"><span class="pl-pds">"</span>http://127.0.0.1:1080<span class="pl-pds">"</span></span> https://github.com/</pre></div>\n<h2 dir="auto">全局设置代理</h2>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="git config --global https.proxy http://127.0.0.1:1080\ngit config --global https.proxy https://127.0.0.1:1080\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy"><pre class="notranslate">git config --global https.proxy http://127.0.0.1:1080\ngit config --global https.proxy https://127.0.0.1:1080\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy</pre></div>\n<h2 dir="auto">参考资料</h2>\n<ul dir="auto">\n<li><a href="https://gist.github.com/laispace/666dd7b27e9116faece6">git 设置和取消代理</a></li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.3-折腾'}, 'labels': {'nodes': [{'name': '1.3.18-版本控制'}]}, 'comments': {'nodes': []}}, {'title': '如何在 Win11 上恢复旧的右键菜单？', 'number': 102, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/102', 'createdAt': '2025-03-01T03:33:22Z', 'lastEditedAt': '2025-03-01T03:35:22Z', 'updatedAt': '2025-03-01T03:35:22Z', 'body': '家里的 Win11 使用了一段时间，最近发现它的这个鼠标右键的 **\'显示更多选项\'** 实在太让人反感了，以至于每次想通过鼠标右键选择其他功能时必须要多点击一次 **"显示更多选项"**。因此迫切希望能够将 Win11 显示更多选项这个反人类的设置恢复成 Win10 的状态，或者让 Win11 的鼠标右键的默认打开 **\'显示更多选项\'**。\r\n\r\n<!-- more -->\r\n\r\n![shift-f10](https://kg.weiyan.tech/2025/02/shift-f10.png)\r\n\r\n网上的普遍使用，且很多人反馈完美解决的解决方案。\r\n\r\n**步骤1.** 按 **Win+S** 打开搜索框，输入 **cmd** 并以管理员身份运行命令提示符。\r\n\r\n**步骤2.** 输入以下命令并按 **Enter** 键执行。\r\n```\r\nreg add HKCU\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\\InprocServer32 /ve /d "" /f\r\n```\r\n\r\n**2025年的更新操作：** 如果上述命令无效的话，还可以继续执行这个命令：\r\n```\r\nreg.exe add "HKCU\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\\InprocServer32" /f /ve\r\n```\r\n\r\n**注意：** 如果您想要重新打开 Win11 新样式的右键菜单的话，以同样的方式在命令提示符中执行此命令：\r\n```\r\nreg delete "HKCU\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}" /f\r\n```\r\n\r\n**步骤3.** 重启资源管理器，运行以下命令：\r\n```\r\ntaskkill /f /im explorer.exe & start explorer.exe\r\n```\r\n\r\n我刚开始的时候也是按照这样的方法去设置了，后来打开文件夹的时候鼠标右键的确完美解决了，但是一回到桌面，还是原来 Win11 新样式的右键菜单。反反复复试了很多次，包括直接去修改注册列表、尝试 Windows 11 Classic Context Menu v1.2 插件等等，最终都无法解决。\r\n\r\n后来静下心想了一下桌面和打开文件夹有什么不一样的，才发现原来自己在桌面还装了一个腾讯的[桌面整理](https://guanjia.qq.com/product/zmzl/)，实话实说，这个的确是个好用的小工具。\r\n![zmzl](https://kg.weiyan.cc/2025/02/zmzl.png)\r\n\r\n这个桌面插件在 **"实用功能"** → **"设置中心"** 里面居然还有一个 **"启用Windows11风格桌面右键菜单"**，只要把这个选项去掉，Win11 右键菜单恢复成 Win10 状态就立马生效了。\r\n![zmzl-w11](https://kg.weiyan.cc/2025/02/zmzl-w11.png)\r\n', 'bodyText': '家里的 Win11 使用了一段时间，最近发现它的这个鼠标右键的 \'显示更多选项\' 实在太让人反感了，以至于每次想通过鼠标右键选择其他功能时必须要多点击一次 "显示更多选项"。因此迫切希望能够将 Win11 显示更多选项这个反人类的设置恢复成 Win10 的状态，或者让 Win11 的鼠标右键的默认打开 \'显示更多选项\'。\n\n\n网上的普遍使用，且很多人反馈完美解决的解决方案。\n步骤1. 按 Win+S 打开搜索框，输入 cmd 并以管理员身份运行命令提示符。\n步骤2. 输入以下命令并按 Enter 键执行。\nreg add HKCU\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\\InprocServer32 /ve /d "" /f\n\n2025年的更新操作： 如果上述命令无效的话，还可以继续执行这个命令：\nreg.exe add "HKCU\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\\InprocServer32" /f /ve\n\n注意： 如果您想要重新打开 Win11 新样式的右键菜单的话，以同样的方式在命令提示符中执行此命令：\nreg delete "HKCU\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}" /f\n\n步骤3. 重启资源管理器，运行以下命令：\ntaskkill /f /im explorer.exe & start explorer.exe\n\n我刚开始的时候也是按照这样的方法去设置了，后来打开文件夹的时候鼠标右键的确完美解决了，但是一回到桌面，还是原来 Win11 新样式的右键菜单。反反复复试了很多次，包括直接去修改注册列表、尝试 Windows 11 Classic Context Menu v1.2 插件等等，最终都无法解决。\n后来静下心想了一下桌面和打开文件夹有什么不一样的，才发现原来自己在桌面还装了一个腾讯的桌面整理，实话实说，这个的确是个好用的小工具。\n\n这个桌面插件在 "实用功能" → "设置中心" 里面居然还有一个 "启用Windows11风格桌面右键菜单"，只要把这个选项去掉，Win11 右键菜单恢复成 Win10 状态就立马生效了。', 'bodyHTML': '<p dir="auto">家里的 Win11 使用了一段时间，最近发现它的这个鼠标右键的 <strong>\'显示更多选项\'</strong> 实在太让人反感了，以至于每次想通过鼠标右键选择其他功能时必须要多点击一次 <strong>"显示更多选项"</strong>。因此迫切希望能够将 Win11 显示更多选项这个反人类的设置恢复成 Win10 的状态，或者让 Win11 的鼠标右键的默认打开 <strong>\'显示更多选项\'</strong>。</p>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/abc1aa50b6823860bc2530d2d0e8c2d01d0bce63151b8581fb839f25c9fd9004/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30322f73686966742d6631302e706e67"><img src="https://camo.githubusercontent.com/abc1aa50b6823860bc2530d2d0e8c2d01d0bce63151b8581fb839f25c9fd9004/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30322f73686966742d6631302e706e67" alt="shift-f10" data-canonical-src="https://kg.weiyan.tech/2025/02/shift-f10.png" style="max-width: 100%;"></a></p>\n<p dir="auto">网上的普遍使用，且很多人反馈完美解决的解决方案。</p>\n<p dir="auto"><strong>步骤1.</strong> 按 <strong>Win+S</strong> 打开搜索框，输入 <strong>cmd</strong> 并以管理员身份运行命令提示符。</p>\n<p dir="auto"><strong>步骤2.</strong> 输入以下命令并按 <strong>Enter</strong> 键执行。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="reg add HKCU\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\\InprocServer32 /ve /d &quot;&quot; /f"><pre class="notranslate"><code class="notranslate">reg add HKCU\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\\InprocServer32 /ve /d "" /f\n</code></pre></div>\n<p dir="auto"><strong>2025年的更新操作：</strong> 如果上述命令无效的话，还可以继续执行这个命令：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="reg.exe add &quot;HKCU\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\\InprocServer32&quot; /f /ve"><pre class="notranslate"><code class="notranslate">reg.exe add "HKCU\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\\InprocServer32" /f /ve\n</code></pre></div>\n<p dir="auto"><strong>注意：</strong> 如果您想要重新打开 Win11 新样式的右键菜单的话，以同样的方式在命令提示符中执行此命令：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="reg delete &quot;HKCU\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}&quot; /f"><pre class="notranslate"><code class="notranslate">reg delete "HKCU\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}" /f\n</code></pre></div>\n<p dir="auto"><strong>步骤3.</strong> 重启资源管理器，运行以下命令：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="taskkill /f /im explorer.exe &amp; start explorer.exe"><pre class="notranslate"><code class="notranslate">taskkill /f /im explorer.exe &amp; start explorer.exe\n</code></pre></div>\n<p dir="auto">我刚开始的时候也是按照这样的方法去设置了，后来打开文件夹的时候鼠标右键的确完美解决了，但是一回到桌面，还是原来 Win11 新样式的右键菜单。反反复复试了很多次，包括直接去修改注册列表、尝试 Windows 11 Classic Context Menu v1.2 插件等等，最终都无法解决。</p>\n<p dir="auto">后来静下心想了一下桌面和打开文件夹有什么不一样的，才发现原来自己在桌面还装了一个腾讯的<a href="https://guanjia.qq.com/product/zmzl/" rel="nofollow">桌面整理</a>，实话实说，这个的确是个好用的小工具。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/7cf4f843868d7c4a58d294d1758a972e7ed270f56a505c64de596635a3981614/68747470733a2f2f6b672e77656979616e2e63632f323032352f30322f7a6d7a6c2e706e67"><img src="https://camo.githubusercontent.com/7cf4f843868d7c4a58d294d1758a972e7ed270f56a505c64de596635a3981614/68747470733a2f2f6b672e77656979616e2e63632f323032352f30322f7a6d7a6c2e706e67" alt="zmzl" data-canonical-src="https://kg.weiyan.cc/2025/02/zmzl.png" style="max-width: 100%;"></a></p>\n<p dir="auto">这个桌面插件在 <strong>"实用功能"</strong> → <strong>"设置中心"</strong> 里面居然还有一个 <strong>"启用Windows11风格桌面右键菜单"</strong>，只要把这个选项去掉，Win11 右键菜单恢复成 Win10 状态就立马生效了。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/97cc0bcbf261cd8a35d28d6a37e0f5f567fe0a3ed207f2fecfc13c673b3f1339/68747470733a2f2f6b672e77656979616e2e63632f323032352f30322f7a6d7a6c2d7731312e706e67"><img src="https://camo.githubusercontent.com/97cc0bcbf261cd8a35d28d6a37e0f5f567fe0a3ed207f2fecfc13c673b3f1339/68747470733a2f2f6b672e77656979616e2e63632f323032352f30322f7a6d7a6c2d7731312e706e67" alt="zmzl-w11" data-canonical-src="https://kg.weiyan.cc/2025/02/zmzl-w11.png" style="max-width: 100%;"></a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': 'DeepSeek 本地部署与使用初探', 'number': 101, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/101', 'createdAt': '2025-02-21T07:30:28Z', 'lastEditedAt': '2025-02-21T14:17:05Z', 'updatedAt': '2025-02-21T14:17:05Z', 'body': 'DeepSeek 相关的人工智能现在是火得一塌糊涂，本着学习的心态，基于现在的一些有限资源，也来体验一下。\r\n\r\n<!-- more -->\r\n\r\n## 参考文章\r\n\r\n- [用本地文件调教 DeepSeek](https://mp.weixin.qq.com/s/kzwOYEMtzzBZH7jD3kNRlA)\r\n- [ollama+open-webui，本地部署自己的大模型](https://blog.csdn.net/spiderwower/article/details/138463635)\r\n\r\n## 注意事项\r\n\r\n### 1. 依赖的一些问题\r\n\r\n`open-webui` 安装完成后，在 `backend` 目录执行 `bash start.sh` 如果出现 **ImportError: libGL.so.1: cannot open shared object file: No such file or directory** 错误，可以考虑降低 `transformers` 版本，个人测试 `mamba install transformers=4.36 --force-reinstall` 重装后恢复正常。\r\n\r\n### 2. 有限的资源，也能跑起来\r\n\r\n一台 2 核 4G 的云服务器，跑个 **deepseek-r1:1.5b** 模型毫无压力，非常流畅，一些简单的问题也能回答出来。\r\n\r\n![linux-deepseek-r1-1-5b](https://kg.weiyan.tech/2025/02/linux-deepseek-r1-demo.png)\r\n\r\n### 3. 交互问题\r\n\r\n`ollama serve`，或者 `systemctl start ollama` 默认可以通过 `http://localhost:11434` 看到 ollama 是否已经在运行，但无法与模型进行交互。《[用本地文件调教 DeepSeek](https://mp.weixin.qq.com/s/kzwOYEMtzzBZH7jD3kNRlA)》 一文说在终端运行 `ollama serve` 命令启动 Ollama 服务，服务启动后，可以通过访问 `http://localhost:11434` 来与模型进行交互。这是不正确的。          \r\n![ollama-service-11434](https://kg.weiyan.cc/2025/02/ollama-service-11434.png)    \r\n\r\n![ollama-is-running](https://kg.weiyan.cc/2025/02/ollama-is-running.png)\r\n\r\n### 4. 通过网页端访问和使用。\r\n\r\n如果想要通过网页把自己本地部署的 DeepSeek 模型开放给自己或者其他小伙伴使用，`open-webui` 是一个比较好的选择，安装和启动都很简单。\r\n![open-webui-start](https://kg.weiyan.cc/2025/02/open-webui-start.png)   \r\n     \r\n![open-webui-auth](https://kg.weiyan.cc/2025/02/open-webui-auth.png)  \r\n      \r\n![deepseek-open-webui](https://kg.weiyan.tech/2025/02/deepseek-open-webui.png)    ', 'bodyText': 'DeepSeek 相关的人工智能现在是火得一塌糊涂，本着学习的心态，基于现在的一些有限资源，也来体验一下。\n\n参考文章\n\n用本地文件调教 DeepSeek\nollama+open-webui，本地部署自己的大模型\n\n注意事项\n1. 依赖的一些问题\nopen-webui 安装完成后，在 backend 目录执行 bash start.sh 如果出现 ImportError: libGL.so.1: cannot open shared object file: No such file or directory 错误，可以考虑降低 transformers 版本，个人测试 mamba install transformers=4.36 --force-reinstall 重装后恢复正常。\n2. 有限的资源，也能跑起来\n一台 2 核 4G 的云服务器，跑个 deepseek-r1:1.5b 模型毫无压力，非常流畅，一些简单的问题也能回答出来。\n\n3. 交互问题\nollama serve，或者 systemctl start ollama 默认可以通过 http://localhost:11434 看到 ollama 是否已经在运行，但无法与模型进行交互。《用本地文件调教 DeepSeek》 一文说在终端运行 ollama serve 命令启动 Ollama 服务，服务启动后，可以通过访问 http://localhost:11434 来与模型进行交互。这是不正确的。\n\n\n4. 通过网页端访问和使用。\n如果想要通过网页把自己本地部署的 DeepSeek 模型开放给自己或者其他小伙伴使用，open-webui 是一个比较好的选择，安装和启动都很简单。', 'bodyHTML': '<p dir="auto">DeepSeek 相关的人工智能现在是火得一塌糊涂，本着学习的心态，基于现在的一些有限资源，也来体验一下。</p>\n\n<h2 dir="auto">参考文章</h2>\n<ul dir="auto">\n<li><a href="https://mp.weixin.qq.com/s/kzwOYEMtzzBZH7jD3kNRlA" rel="nofollow">用本地文件调教 DeepSeek</a></li>\n<li><a href="https://blog.csdn.net/spiderwower/article/details/138463635" rel="nofollow">ollama+open-webui，本地部署自己的大模型</a></li>\n</ul>\n<h2 dir="auto">注意事项</h2>\n<h3 dir="auto">1. 依赖的一些问题</h3>\n<p dir="auto"><code class="notranslate">open-webui</code> 安装完成后，在 <code class="notranslate">backend</code> 目录执行 <code class="notranslate">bash start.sh</code> 如果出现 <strong>ImportError: libGL.so.1: cannot open shared object file: No such file or directory</strong> 错误，可以考虑降低 <code class="notranslate">transformers</code> 版本，个人测试 <code class="notranslate">mamba install transformers=4.36 --force-reinstall</code> 重装后恢复正常。</p>\n<h3 dir="auto">2. 有限的资源，也能跑起来</h3>\n<p dir="auto">一台 2 核 4G 的云服务器，跑个 <strong>deepseek-r1:1.5b</strong> 模型毫无压力，非常流畅，一些简单的问题也能回答出来。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/2aca5fcfcc475ea6b60239f07ea1e971d467997d95f77a7e3a5361dbc868a173/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30322f6c696e75782d646565707365656b2d72312d64656d6f2e706e67"><img src="https://camo.githubusercontent.com/2aca5fcfcc475ea6b60239f07ea1e971d467997d95f77a7e3a5361dbc868a173/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30322f6c696e75782d646565707365656b2d72312d64656d6f2e706e67" alt="linux-deepseek-r1-1-5b" data-canonical-src="https://kg.weiyan.tech/2025/02/linux-deepseek-r1-demo.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">3. 交互问题</h3>\n<p dir="auto"><code class="notranslate">ollama serve</code>，或者 <code class="notranslate">systemctl start ollama</code> 默认可以通过 <code class="notranslate">http://localhost:11434</code> 看到 ollama 是否已经在运行，但无法与模型进行交互。《<a href="https://mp.weixin.qq.com/s/kzwOYEMtzzBZH7jD3kNRlA" rel="nofollow">用本地文件调教 DeepSeek</a>》 一文说在终端运行 <code class="notranslate">ollama serve</code> 命令启动 Ollama 服务，服务启动后，可以通过访问 <code class="notranslate">http://localhost:11434</code> 来与模型进行交互。这是不正确的。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/ec6be68e8148ed3795553faa842725c46fb31c79ec15cb092001c4d9b0fc3bc2/68747470733a2f2f6b672e77656979616e2e63632f323032352f30322f6f6c6c616d612d736572766963652d31313433342e706e67"><img src="https://camo.githubusercontent.com/ec6be68e8148ed3795553faa842725c46fb31c79ec15cb092001c4d9b0fc3bc2/68747470733a2f2f6b672e77656979616e2e63632f323032352f30322f6f6c6c616d612d736572766963652d31313433342e706e67" alt="ollama-service-11434" data-canonical-src="https://kg.weiyan.cc/2025/02/ollama-service-11434.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/6d3490b42987223aa714ee8c7fa054090cb7065b889bd62fcba679f586bf332b/68747470733a2f2f6b672e77656979616e2e63632f323032352f30322f6f6c6c616d612d69732d72756e6e696e672e706e67"><img src="https://camo.githubusercontent.com/6d3490b42987223aa714ee8c7fa054090cb7065b889bd62fcba679f586bf332b/68747470733a2f2f6b672e77656979616e2e63632f323032352f30322f6f6c6c616d612d69732d72756e6e696e672e706e67" alt="ollama-is-running" data-canonical-src="https://kg.weiyan.cc/2025/02/ollama-is-running.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">4. 通过网页端访问和使用。</h3>\n<p dir="auto">如果想要通过网页把自己本地部署的 DeepSeek 模型开放给自己或者其他小伙伴使用，<code class="notranslate">open-webui</code> 是一个比较好的选择，安装和启动都很简单。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b6a949328e3686706024905402e59edda8846897989d9eeeb0467524b54e854e/68747470733a2f2f6b672e77656979616e2e63632f323032352f30322f6f70656e2d77656275692d73746172742e706e67"><img src="https://camo.githubusercontent.com/b6a949328e3686706024905402e59edda8846897989d9eeeb0467524b54e854e/68747470733a2f2f6b672e77656979616e2e63632f323032352f30322f6f70656e2d77656275692d73746172742e706e67" alt="open-webui-start" data-canonical-src="https://kg.weiyan.cc/2025/02/open-webui-start.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/8072e182cfa3cb5b65f29cad51bb3eb975f9aed52c3820e187347b0c5bdb152c/68747470733a2f2f6b672e77656979616e2e63632f323032352f30322f6f70656e2d77656275692d617574682e706e67"><img src="https://camo.githubusercontent.com/8072e182cfa3cb5b65f29cad51bb3eb975f9aed52c3820e187347b0c5bdb152c/68747470733a2f2f6b672e77656979616e2e63632f323032352f30322f6f70656e2d77656275692d617574682e706e67" alt="open-webui-auth" data-canonical-src="https://kg.weiyan.cc/2025/02/open-webui-auth.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/50c6f15fd87057b56ae8b58901b2b17ef8020c0bcb13aa56f80fe42e85020035/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30322f646565707365656b2d6f70656e2d77656275692e706e67"><img src="https://camo.githubusercontent.com/50c6f15fd87057b56ae8b58901b2b17ef8020c0bcb13aa56f80fe42e85020035/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30322f646565707365656b2d6f70656e2d77656275692e706e67" alt="deepseek-open-webui" data-canonical-src="https://kg.weiyan.tech/2025/02/deepseek-open-webui.png" style="max-width: 100%;"></a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.3-折腾'}, 'labels': {'nodes': [{'name': '1.3.26-人工智能'}]}, 'comments': {'nodes': []}}, {'title': '技术人月刊（第 3 期 2025-03）', 'number': 100, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/100', 'createdAt': '2025-02-21T01:37:58Z', 'lastEditedAt': '2025-02-21T01:51:39Z', 'updatedAt': '2025-02-21T01:51:39Z', 'body': '个人的信息周刊，每月记录我看到的有价值的信息，主要针对生物学和互联网科技领域，内容主题极大程度被我个人喜好主导。这个项目核心目的在于记录让自己有印象的信息做一个留存以及共享。\r\n\r\n## 工具\r\n\r\n1. [HiveChat](https://github.com/HiveNexus/HiveChat) 一个给中小团队使用的 AI 聊天机器人   \r\n\r\n<p align="left"><img width=600 src="https://rc.weiyan.tech/2025/03/hivechat.png" alt></p>\r\n\r\n一个专为中小团队设计的 AI 聊天应用，支持 Deepseek、Open AI、Claude、Gemini 等模型。可手动添加用户，也可开启或关闭账号注册，适用于公司/学校/组织等小型团队。\r\n\r\n## 文章\r\n\r\n1. [详解 Linux 硬链接和软链接](https://bhoot.dev/2024/on-linux-file-and-links/)（英文）\r\n\r\n<p align="left"><img width=600 src="https://kg.weiyan.cc/2025/02/lin-hard-soft-links.png" alt></p>\r\n   \r\nLinux 有两种特殊文件：硬链接和软链接，本文详细解释它们的区别。\r\n\r\n3. [了解 CSS 的 overflow: clip](https://ishadeed.com/article/overflow-clip/)（英文）\r\n\r\n<p align="left"><img width=600 src="https://kg.weiyan.cc/2025/02/overflow-clip.png" alt=\'overflow-clip\'></p>     \r\n\r\nCSS 的 overflow 属性，有一个 clip 值，可以截去溢出部分。通过它，可以做出很多页面效果。\r\n\r\n4. [什么是网页的元信息？](https://www.thisdaysportion.com/posts/dublin-core-what-is-it-good-for)（英文）\r\n\r\n<p align="left"><img width=600 src="https://kg.weiyan.cc/2025/02/html-meta.png" alt></p>     \r\n\r\n本文介绍如何在网页中插入元信息（比如作者、关键词、内容描述等等），便于计算机检索。\r\n\r\n## 资源\r\n\r\n## 图片', 'bodyText': '个人的信息周刊，每月记录我看到的有价值的信息，主要针对生物学和互联网科技领域，内容主题极大程度被我个人喜好主导。这个项目核心目的在于记录让自己有印象的信息做一个留存以及共享。\n工具\n\nHiveChat 一个给中小团队使用的 AI 聊天机器人\n\n\n一个专为中小团队设计的 AI 聊天应用，支持 Deepseek、Open AI、Claude、Gemini 等模型。可手动添加用户，也可开启或关闭账号注册，适用于公司/学校/组织等小型团队。\n文章\n\n详解 Linux 硬链接和软链接（英文）\n\n\nLinux 有两种特殊文件：硬链接和软链接，本文详细解释它们的区别。\n\n了解 CSS 的 overflow: clip（英文）\n\n     \nCSS 的 overflow 属性，有一个 clip 值，可以截去溢出部分。通过它，可以做出很多页面效果。\n\n什么是网页的元信息？（英文）\n\n     \n本文介绍如何在网页中插入元信息（比如作者、关键词、内容描述等等），便于计算机检索。\n资源\n图片', 'bodyHTML': '<p dir="auto">个人的信息周刊，每月记录我看到的有价值的信息，主要针对生物学和互联网科技领域，内容主题极大程度被我个人喜好主导。这个项目核心目的在于记录让自己有印象的信息做一个留存以及共享。</p>\n<h2 dir="auto">工具</h2>\n<ol dir="auto">\n<li><a href="https://github.com/HiveNexus/HiveChat">HiveChat</a> 一个给中小团队使用的 AI 聊天机器人</li>\n</ol>\n<p align="left" dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/0ba2c2f9238f03e13f7af1ae055c47ac16b4f81f7f1a67b7bd8c56c2aabdca42/68747470733a2f2f72632e77656979616e2e746563682f323032352f30332f68697665636861742e706e67"><img width="600" src="https://camo.githubusercontent.com/0ba2c2f9238f03e13f7af1ae055c47ac16b4f81f7f1a67b7bd8c56c2aabdca42/68747470733a2f2f72632e77656979616e2e746563682f323032352f30332f68697665636861742e706e67" alt="" data-canonical-src="https://rc.weiyan.tech/2025/03/hivechat.png" style="max-width: 100%;"></a></p>\n<p dir="auto">一个专为中小团队设计的 AI 聊天应用，支持 Deepseek、Open AI、Claude、Gemini 等模型。可手动添加用户，也可开启或关闭账号注册，适用于公司/学校/组织等小型团队。</p>\n<h2 dir="auto">文章</h2>\n<ol dir="auto">\n<li><a href="https://bhoot.dev/2024/on-linux-file-and-links/" rel="nofollow">详解 Linux 硬链接和软链接</a>（英文）</li>\n</ol>\n<p align="left" dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/8f90e74201c97270ff8b259e90e786539cceb89462082892d8b036ce2b8945c4/68747470733a2f2f6b672e77656979616e2e63632f323032352f30322f6c696e2d686172642d736f66742d6c696e6b732e706e67"><img width="600" src="https://camo.githubusercontent.com/8f90e74201c97270ff8b259e90e786539cceb89462082892d8b036ce2b8945c4/68747470733a2f2f6b672e77656979616e2e63632f323032352f30322f6c696e2d686172642d736f66742d6c696e6b732e706e67" alt="" data-canonical-src="https://kg.weiyan.cc/2025/02/lin-hard-soft-links.png" style="max-width: 100%;"></a></p>\n<p dir="auto">Linux 有两种特殊文件：硬链接和软链接，本文详细解释它们的区别。</p>\n<ol start="3" dir="auto">\n<li><a href="https://ishadeed.com/article/overflow-clip/" rel="nofollow">了解 CSS 的 overflow: clip</a>（英文）</li>\n</ol>\n<p align="left" dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/2efa97bdc96688ac6f8a019a5550f3c450c63b67e050d9df530a30e75a1e607b/68747470733a2f2f6b672e77656979616e2e63632f323032352f30322f6f766572666c6f772d636c69702e706e67"><img width="600" src="https://camo.githubusercontent.com/2efa97bdc96688ac6f8a019a5550f3c450c63b67e050d9df530a30e75a1e607b/68747470733a2f2f6b672e77656979616e2e63632f323032352f30322f6f766572666c6f772d636c69702e706e67" alt="overflow-clip" data-canonical-src="https://kg.weiyan.cc/2025/02/overflow-clip.png" style="max-width: 100%;"></a></p>     \n<p dir="auto">CSS 的 overflow 属性，有一个 clip 值，可以截去溢出部分。通过它，可以做出很多页面效果。</p>\n<ol start="4" dir="auto">\n<li><a href="https://www.thisdaysportion.com/posts/dublin-core-what-is-it-good-for" rel="nofollow">什么是网页的元信息？</a>（英文）</li>\n</ol>\n<p align="left" dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/d09f8e44fea190af4790367195427a05a64c73e09cf0f3794728e6d4f8f5d24c/68747470733a2f2f6b672e77656979616e2e63632f323032352f30322f68746d6c2d6d6574612e706e67"><img width="600" src="https://camo.githubusercontent.com/d09f8e44fea190af4790367195427a05a64c73e09cf0f3794728e6d4f8f5d24c/68747470733a2f2f6b672e77656979616e2e63632f323032352f30322f68746d6c2d6d6574612e706e67" alt="" data-canonical-src="https://kg.weiyan.cc/2025/02/html-meta.png" style="max-width: 100%;"></a></p>     \n<p dir="auto">本文介绍如何在网页中插入元信息（比如作者、关键词、内容描述等等），便于计算机检索。</p>\n<h2 dir="auto">资源</h2>\n<h2 dir="auto">图片</h2>', 'author': {'login': 'shenweiyan'}, 'category': {'name': 'x.2-月刊'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '那些偶尔想起的幸福时刻', 'number': 99, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/99', 'createdAt': '2025-02-17T07:40:41Z', 'lastEditedAt': '2025-02-20T12:12:15Z', 'updatedAt': '2025-02-20T12:12:15Z', 'body': '最近偶尔浮现一些记忆中画面，记忆中是在家附近的金黄的稻田间散步，走在田埂上感受阳光明媚风微凉，脑袋里没有想太多的事情， 只是纯粹的感受美好......\r\n\r\n<!-- more -->\r\n\r\n![golden-rice](https://kg.weiyan.cc/2025/02/golden-rice.jpg)\r\n\r\n那段关于童年放牛的记忆，如同一幅幅温馨而生动的画卷，那时的天空总是格外晴朗，阳光透过树叶的缝隙，洒下斑驳陆离的光影，与三两玩伴的欢声笑语交织在一起，构成了最纯粹的快乐。我们在山林间自由穿梭，仿佛整个世界都属于我们这群小小的探险家。\r\n\r\n攀上枝头，与鸟儿嬉戏，那份无畏与好奇，探索那些隐蔽的小径，揭开大自然的神秘面纱，每一处新发现都像是宝藏，让我们的午后时光既舒适又充满了奇幻色彩。那时的我们，心中装满了对未知世界的好奇与向往，每一次探险都是对自我边界的拓宽。\r\n\r\n即使时光荏苒，岁月如梭，那份记忆依旧鲜明如初。当暮色悄然爬上远处的山脊，天边最后一抹夕阳也依依不舍地隐去，我的鼻尖似乎还能捕捉到那熟悉而又遥远的山间篝火炊烟的味道。\r\n\r\n![children-cattle](https://kg.weiyan.cc/2025/02/children-cattle.jpg)\r\n\r\n高考完的那年暑假，和班上一大堆同学跑到了深圳观澜的一家电子厂打暑假工。白天在车间焊接电子配件，炎热又忙碌，晚上泡网吧，周末爬山、瞎逛，试图着用脚步去丈量着这座城市的每一个角落。那年夏天，第一次体验了打工的新鲜和艰辛，第一次接触手机，第一次注册了自己的 QQ 号，没作业，不知道未来，带着青葱的稚嫩和对未来的憧憬，只有炎炎夏日和蝉叫，以及几个对未来不知所措的少年，刻骨铭心......\r\n\r\n<p align="center">\r\n    <img src="https://kg.weiyan.cc/2025/02/09-aug-09.jpg" alt><br>\r\n    <span>感受一下AI修复后的旧时照片</span>\r\n</p>\r\n\r\n\r\n那些记忆的画面很简单，但是那感受刻骨铭心。这种感受已经十几年没有过了，尤其在城市里，你甚至找不到一处安静的地方。人大了，事情多了，脑袋里总是有卸不完的事情，卸了一件再来一件。甚至这种回忆也不常有，有点麻木的感觉。', 'bodyText': '最近偶尔浮现一些记忆中画面，记忆中是在家附近的金黄的稻田间散步，走在田埂上感受阳光明媚风微凉，脑袋里没有想太多的事情， 只是纯粹的感受美好......\n\n\n那段关于童年放牛的记忆，如同一幅幅温馨而生动的画卷，那时的天空总是格外晴朗，阳光透过树叶的缝隙，洒下斑驳陆离的光影，与三两玩伴的欢声笑语交织在一起，构成了最纯粹的快乐。我们在山林间自由穿梭，仿佛整个世界都属于我们这群小小的探险家。\n攀上枝头，与鸟儿嬉戏，那份无畏与好奇，探索那些隐蔽的小径，揭开大自然的神秘面纱，每一处新发现都像是宝藏，让我们的午后时光既舒适又充满了奇幻色彩。那时的我们，心中装满了对未知世界的好奇与向往，每一次探险都是对自我边界的拓宽。\n即使时光荏苒，岁月如梭，那份记忆依旧鲜明如初。当暮色悄然爬上远处的山脊，天边最后一抹夕阳也依依不舍地隐去，我的鼻尖似乎还能捕捉到那熟悉而又遥远的山间篝火炊烟的味道。\n\n高考完的那年暑假，和班上一大堆同学跑到了深圳观澜的一家电子厂打暑假工。白天在车间焊接电子配件，炎热又忙碌，晚上泡网吧，周末爬山、瞎逛，试图着用脚步去丈量着这座城市的每一个角落。那年夏天，第一次体验了打工的新鲜和艰辛，第一次接触手机，第一次注册了自己的 QQ 号，没作业，不知道未来，带着青葱的稚嫩和对未来的憧憬，只有炎炎夏日和蝉叫，以及几个对未来不知所措的少年，刻骨铭心......\n\n    \n    感受一下AI修复后的旧时照片\n\n那些记忆的画面很简单，但是那感受刻骨铭心。这种感受已经十几年没有过了，尤其在城市里，你甚至找不到一处安静的地方。人大了，事情多了，脑袋里总是有卸不完的事情，卸了一件再来一件。甚至这种回忆也不常有，有点麻木的感觉。', 'bodyHTML': '<p dir="auto">最近偶尔浮现一些记忆中画面，记忆中是在家附近的金黄的稻田间散步，走在田埂上感受阳光明媚风微凉，脑袋里没有想太多的事情， 只是纯粹的感受美好......</p>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/67d78d7117c873f8cf914fbda0998a46ee546cb87f916b5967b37acf3a0142fa/68747470733a2f2f6b672e77656979616e2e63632f323032352f30322f676f6c64656e2d726963652e6a7067"><img src="https://camo.githubusercontent.com/67d78d7117c873f8cf914fbda0998a46ee546cb87f916b5967b37acf3a0142fa/68747470733a2f2f6b672e77656979616e2e63632f323032352f30322f676f6c64656e2d726963652e6a7067" alt="golden-rice" data-canonical-src="https://kg.weiyan.cc/2025/02/golden-rice.jpg" style="max-width: 100%;"></a></p>\n<p dir="auto">那段关于童年放牛的记忆，如同一幅幅温馨而生动的画卷，那时的天空总是格外晴朗，阳光透过树叶的缝隙，洒下斑驳陆离的光影，与三两玩伴的欢声笑语交织在一起，构成了最纯粹的快乐。我们在山林间自由穿梭，仿佛整个世界都属于我们这群小小的探险家。</p>\n<p dir="auto">攀上枝头，与鸟儿嬉戏，那份无畏与好奇，探索那些隐蔽的小径，揭开大自然的神秘面纱，每一处新发现都像是宝藏，让我们的午后时光既舒适又充满了奇幻色彩。那时的我们，心中装满了对未知世界的好奇与向往，每一次探险都是对自我边界的拓宽。</p>\n<p dir="auto">即使时光荏苒，岁月如梭，那份记忆依旧鲜明如初。当暮色悄然爬上远处的山脊，天边最后一抹夕阳也依依不舍地隐去，我的鼻尖似乎还能捕捉到那熟悉而又遥远的山间篝火炊烟的味道。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/20065c0177f710d54cbf456fcee58867292820e77711ed63bd8f0846b71e475c/68747470733a2f2f6b672e77656979616e2e63632f323032352f30322f6368696c6472656e2d636174746c652e6a7067"><img src="https://camo.githubusercontent.com/20065c0177f710d54cbf456fcee58867292820e77711ed63bd8f0846b71e475c/68747470733a2f2f6b672e77656979616e2e63632f323032352f30322f6368696c6472656e2d636174746c652e6a7067" alt="children-cattle" data-canonical-src="https://kg.weiyan.cc/2025/02/children-cattle.jpg" style="max-width: 100%;"></a></p>\n<p dir="auto">高考完的那年暑假，和班上一大堆同学跑到了深圳观澜的一家电子厂打暑假工。白天在车间焊接电子配件，炎热又忙碌，晚上泡网吧，周末爬山、瞎逛，试图着用脚步去丈量着这座城市的每一个角落。那年夏天，第一次体验了打工的新鲜和艰辛，第一次接触手机，第一次注册了自己的 QQ 号，没作业，不知道未来，带着青葱的稚嫩和对未来的憧憬，只有炎炎夏日和蝉叫，以及几个对未来不知所措的少年，刻骨铭心......</p>\n<p align="center" dir="auto">\n    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/cb434125848720d95d91316e277ae21d040a0f563335e4c02c49f86663170569/68747470733a2f2f6b672e77656979616e2e63632f323032352f30322f30392d6175672d30392e6a7067"><img src="https://camo.githubusercontent.com/cb434125848720d95d91316e277ae21d040a0f563335e4c02c49f86663170569/68747470733a2f2f6b672e77656979616e2e63632f323032352f30322f30392d6175672d30392e6a7067" alt="" data-canonical-src="https://kg.weiyan.cc/2025/02/09-aug-09.jpg" style="max-width: 100%;"></a><br>\n    <span>感受一下AI修复后的旧时照片</span>\n</p>\n<p dir="auto">那些记忆的画面很简单，但是那感受刻骨铭心。这种感受已经十几年没有过了，尤其在城市里，你甚至找不到一处安静的地方。人大了，事情多了，脑袋里总是有卸不完的事情，卸了一件再来一件。甚至这种回忆也不常有，有点麻木的感觉。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': 'R 语言中的 libpng 版本冲突', 'number': 98, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/98', 'createdAt': '2025-02-14T05:14:00Z', 'lastEditedAt': '2025-02-14T08:08:40Z', 'updatedAt': '2025-02-14T08:08:40Z', 'body': '事情起因是在 R 语言中调用 `png` 包的 `readPNG` 读取 png 图片的时候，碰到了错误：**libpng error: Incompatible libpng version in application and library**。\r\n\r\n```r\r\n> library(png)\r\n> p1 = readPNG("/bioinfo/polyA/circos.png")\r\nError in readPNG("/bioinfo/polyA/circos.png") :\r\n  libpng error: Incompatible libpng version in application and library\r\nIn addition: Warning messages:\r\n1: In readPNG("/bioinfo/polyA/circos.png") :\r\n  libpng warning: Application was compiled with png.h from libpng-1.6.37\r\n2: In readPNG("/bioinfo/polyA/circos.png") :\r\n  libpng warning: Application  is  running with png.c from libpng-1.2.49\r\n> \r\n```\r\n\r\n这个问题，其实在 《[RamiGO 安装及库依赖解决备忘](https://weiyan.cc/yuque/%E5%BC%80%E5%8F%91%E8%BF%90%E7%BB%B4/R/2019-07-15-r-ramigo/)》曾经遇到过，当时的解决方法，在现在看起来其实是并不完善的。所以，在问题解决前，我们先来看看这个问题到底是怎么导致的。\r\n\r\n首先，我的 R 是通过源码编译安装的，而且在安装的过程中 `configure` 时候指定了自己安装的 libpng-1.6.37。\r\n```\r\n./configure --prefix=bioinfo/software/r/r-4.4.2 --enable-R-shlib --with-libtiff --with-libpng --with-jpeglib --with-pcre1 \\\r\nLDFLAGS="-L/bioinfo/software/mylibs/zlib-1.2.6/lib \\\r\n            -L/bioinfo/software/mylibs/bzip2-1.0.6/lib \\\r\n            -L/bioinfo/software/mylibs/pcre-8.40/lib \\\r\n            -L/bioinfo/software/mylibs/tiff-4.0.9/lib \\\r\n            -L/bioinfo/software/mylibs/jpeg-9c/lib \\\r\n            -L/bioinfo/software/mylibs/libpng-1.6.37/lib \\\r\n            -L/bioinfo/software/mylibs/xz-5.2.3/lib \\\r\n            -L/bioinfo/software/mylibs/curl-7.64.1/lib -fopenmp" \\\r\nCPPFLAGS="-I/bioinfo/software/mylibs/zlib-1.2.6/include \\\r\n            -I/bioinfo/software/mylibs/bzip2-1.0.6/include \\\r\n            -I/bioinfo/software/mylibs/pcre-8.40/include \\\r\n            -I/bioinfo/software/mylibs/tiff-4.0.9/include \\\r\n            -I/bioinfo/software/mylibs/jpeg-9c/include \\\r\n            -I/bioinfo/software/mylibs/libpng-1.6.37/include \\\r\n            -I/bioinfo/software/mylibs/xz-5.2.3/include \\\r\n            -I/bioinfo/software/mylibs/curl-7.64.1/include"\r\n```\r\n\r\n第二，我使用的 `png` 是在 R 里面直接 `install.package(\'png\')` 安装的。\r\n\r\n```bash\r\n$ ldd /bioinfo/software/r/r-4.4.2/lib64/R/library/png/libs/png.so\r\n        linux-vdso.so.1 =>  (0x00007fff29dd9000)\r\n        libpng12.so.0 => /usr/lib64/libpng12.so.0 (0x00007f1a614bc000)\r\n        libz.so.1 => /bioinfo/software/r-3.3.2/lib/libz.so.1 (0x00007f1a612a4000)\r\n        libm.so.6 => /lib64/libm.so.6 (0x00007f1a61020000)\r\n        libR.so => /bioinfo/software/r/r-3.6.1/lib64/R/lib/libR.so (0x00007f1a6098e000)\r\n        libgomp.so.1 => bioinfo/software/gcc-7.3.0/lib64/libgomp.so.1 (0x00007f1a60760000)\r\n        libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f1a60543000)\r\n        libc.so.6 => /lib64/libc.so.6 (0x00007f1a601af000)\r\n        libRblas.so => /bioinfo/software/r/r-3.6.1/lib64/R/lib/libRblas.so (0x00007f1a5ff83000)\r\n        libgfortran.so.3 => /usr/lib64/libgfortran.so.3 (0x00007f1a5fc91000)\r\n        libreadline.so.6 => /lib64/libreadline.so.6 (0x00007f1a5fa4e000)\r\n        libpcre.so.1 => /bioinfo/software/r-3.3.2/lib/libpcre.so.1 (0x00007f1a5f81b000)\r\n        liblzma.so.5 => /bioinfo/software/r-3.3.2/lib/liblzma.so.5 (0x00007f1a5f5f6000)\r\n        librt.so.1 => /lib64/librt.so.1 (0x00007f1a5f3ee000)\r\n        libdl.so.2 => /lib64/libdl.so.2 (0x00007f1a5f1e9000)\r\n        libiconv.so.2 => /usr/local/lib/libiconv.so.2 (0x00007f1a5ef04000)\r\n        /lib64/ld-linux-x86-64.so.2 (0x0000003636a00000)\r\n        libtinfo.so.5 => /lib64/libtinfo.so.5 (0x00007f1a5ece2000)\r\n```\r\n\r\n从 `ldd` 的结果可以很明显看到，`install.package(\'png\')` 使用了系统默认的 `libpng`，也就是对应的 `libpng-1.2.49`。因此最后在调用 `png` 的时候就和编译使用的 `libpng-1.6.37` 发生了冲突。\r\n\r\n第三，所以最终的解决方法就是，先设置 `libpng-1.6.37`的 `PATH` 和 `LD_LIBRARY_PATH`。 \r\n```\r\nexport PATH=/bioinfo/software/mylib/libpng-1.6.37/bin:$PATH\r\nexport LD_LIBRARY_PATH=/bioinfo/software/mylib/libpng-1.6.37/lib:$LD_LIBRARY_PATH\r\n```\r\n\r\n卸载原来的 `png` 包，再重新安装。\r\n```r\r\nremove.packages(\'png\')\r\noptions("repos"=c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/"))\r\ninstall.packages(\'png\')\r\n```\r\n\r\n总的来说，最开始碰到这个问题的时候，虽然知道问题在哪，也设置过 `LD_LIBRARY_PATH` 后去重装 `png`，但是一直都没成功，后面尝试了几个方法。\r\n\r\n一是，怎么在 `install.packages()` 中指定 libpng-1.6.37 的 `LDFLAGS` 和 `CPPFLAGS`，因为没搞懂 `--configure-args` 具体是怎么用的，这条路没走通。另外，在 `HOME/.R/Makevars` 设置了 `LDFLAGS` 和 `CPPFLAGS` 进行了尝试，也依然不起作用。\r\n\r\n二是，想通过 `patchelf` 去直接修改 `png.so` 的动态库链接，虽然修改成功，但直接把 `png` 搞崩溃。\r\n\r\n直至把 libpng-1.6.37 的 bin 也一起增加到 `PATH`，才重装 `png` 后，这个问题才最终解决。个人猜测在安装 `png` 时检测 libpng 的过程中应该跟 `libpng-config` 的可执行文件有关系，因为系统默认的 `/usr/bin/libpng-config` 为 1.2.49 版本，而 libpng-1.6.37 的 `bin/libpng-config` 默认软连接至 `bin/libpng16-config`，对应 1.6.37。\r\n\r\n事后，去 `png` 的[源码仓库](https://github.com/s-u/png)一看，果然在 `src/Makevars` 中发现了链接库和依赖中调用了 `libpng-config`：\r\n```\r\nPKG_LIBS=$(PNG_LIBS) `libpng-config --static --ldflags`\r\nPKG_CFLAGS=$(PNG_CFLAGS) `libpng-config --cflags`\r\n```\r\n![png-src-makevars](https://kg.weiyan.cc/2025/02/png-src-makevars.png)\r\n\r\n而系统的 `libpng-config` 和 libpng-1.6.37 的 `bin/libpng-config` 的链接库和依赖：\r\n```bash\r\n$ /usr/bin/libpng-config --static --ldflags\r\n-L/usr/lib64 -lpng12 -lz -lm\r\n\r\n$ /bioinfo/software/mylib/libpng-1.6.37/bin/libpng-config --static --ldflags\r\n-L/bioinfo/software/mylib/libpng-1.6.37/lib -lpng16 -lm -lz -lm\r\n```\r\n\r\n正好印证了在安装 `png` 时，的确需要从默认 `PATH` 中调用 `libpng-config`，从而获取对应的链接库和依赖。', 'bodyText': '事情起因是在 R 语言中调用 png 包的 readPNG 读取 png 图片的时候，碰到了错误：libpng error: Incompatible libpng version in application and library。\n> library(png)\n> p1 = readPNG("/bioinfo/polyA/circos.png")\nError in readPNG("/bioinfo/polyA/circos.png") :\n  libpng error: Incompatible libpng version in application and library\nIn addition: Warning messages:\n1: In readPNG("/bioinfo/polyA/circos.png") :\n  libpng warning: Application was compiled with png.h from libpng-1.6.37\n2: In readPNG("/bioinfo/polyA/circos.png") :\n  libpng warning: Application  is  running with png.c from libpng-1.2.49\n> \n这个问题，其实在 《RamiGO 安装及库依赖解决备忘》曾经遇到过，当时的解决方法，在现在看起来其实是并不完善的。所以，在问题解决前，我们先来看看这个问题到底是怎么导致的。\n首先，我的 R 是通过源码编译安装的，而且在安装的过程中 configure 时候指定了自己安装的 libpng-1.6.37。\n./configure --prefix=bioinfo/software/r/r-4.4.2 --enable-R-shlib --with-libtiff --with-libpng --with-jpeglib --with-pcre1 \\\nLDFLAGS="-L/bioinfo/software/mylibs/zlib-1.2.6/lib \\\n            -L/bioinfo/software/mylibs/bzip2-1.0.6/lib \\\n            -L/bioinfo/software/mylibs/pcre-8.40/lib \\\n            -L/bioinfo/software/mylibs/tiff-4.0.9/lib \\\n            -L/bioinfo/software/mylibs/jpeg-9c/lib \\\n            -L/bioinfo/software/mylibs/libpng-1.6.37/lib \\\n            -L/bioinfo/software/mylibs/xz-5.2.3/lib \\\n            -L/bioinfo/software/mylibs/curl-7.64.1/lib -fopenmp" \\\nCPPFLAGS="-I/bioinfo/software/mylibs/zlib-1.2.6/include \\\n            -I/bioinfo/software/mylibs/bzip2-1.0.6/include \\\n            -I/bioinfo/software/mylibs/pcre-8.40/include \\\n            -I/bioinfo/software/mylibs/tiff-4.0.9/include \\\n            -I/bioinfo/software/mylibs/jpeg-9c/include \\\n            -I/bioinfo/software/mylibs/libpng-1.6.37/include \\\n            -I/bioinfo/software/mylibs/xz-5.2.3/include \\\n            -I/bioinfo/software/mylibs/curl-7.64.1/include"\n\n第二，我使用的 png 是在 R 里面直接 install.package(\'png\') 安装的。\n$ ldd /bioinfo/software/r/r-4.4.2/lib64/R/library/png/libs/png.so\n        linux-vdso.so.1 =>  (0x00007fff29dd9000)\n        libpng12.so.0 => /usr/lib64/libpng12.so.0 (0x00007f1a614bc000)\n        libz.so.1 => /bioinfo/software/r-3.3.2/lib/libz.so.1 (0x00007f1a612a4000)\n        libm.so.6 => /lib64/libm.so.6 (0x00007f1a61020000)\n        libR.so => /bioinfo/software/r/r-3.6.1/lib64/R/lib/libR.so (0x00007f1a6098e000)\n        libgomp.so.1 => bioinfo/software/gcc-7.3.0/lib64/libgomp.so.1 (0x00007f1a60760000)\n        libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f1a60543000)\n        libc.so.6 => /lib64/libc.so.6 (0x00007f1a601af000)\n        libRblas.so => /bioinfo/software/r/r-3.6.1/lib64/R/lib/libRblas.so (0x00007f1a5ff83000)\n        libgfortran.so.3 => /usr/lib64/libgfortran.so.3 (0x00007f1a5fc91000)\n        libreadline.so.6 => /lib64/libreadline.so.6 (0x00007f1a5fa4e000)\n        libpcre.so.1 => /bioinfo/software/r-3.3.2/lib/libpcre.so.1 (0x00007f1a5f81b000)\n        liblzma.so.5 => /bioinfo/software/r-3.3.2/lib/liblzma.so.5 (0x00007f1a5f5f6000)\n        librt.so.1 => /lib64/librt.so.1 (0x00007f1a5f3ee000)\n        libdl.so.2 => /lib64/libdl.so.2 (0x00007f1a5f1e9000)\n        libiconv.so.2 => /usr/local/lib/libiconv.so.2 (0x00007f1a5ef04000)\n        /lib64/ld-linux-x86-64.so.2 (0x0000003636a00000)\n        libtinfo.so.5 => /lib64/libtinfo.so.5 (0x00007f1a5ece2000)\n从 ldd 的结果可以很明显看到，install.package(\'png\') 使用了系统默认的 libpng，也就是对应的 libpng-1.2.49。因此最后在调用 png 的时候就和编译使用的 libpng-1.6.37 发生了冲突。\n第三，所以最终的解决方法就是，先设置 libpng-1.6.37的 PATH 和 LD_LIBRARY_PATH。\nexport PATH=/bioinfo/software/mylib/libpng-1.6.37/bin:$PATH\nexport LD_LIBRARY_PATH=/bioinfo/software/mylib/libpng-1.6.37/lib:$LD_LIBRARY_PATH\n\n卸载原来的 png 包，再重新安装。\nremove.packages(\'png\')\noptions("repos"=c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/"))\ninstall.packages(\'png\')\n总的来说，最开始碰到这个问题的时候，虽然知道问题在哪，也设置过 LD_LIBRARY_PATH 后去重装 png，但是一直都没成功，后面尝试了几个方法。\n一是，怎么在 install.packages() 中指定 libpng-1.6.37 的 LDFLAGS 和 CPPFLAGS，因为没搞懂 --configure-args 具体是怎么用的，这条路没走通。另外，在 HOME/.R/Makevars 设置了 LDFLAGS 和 CPPFLAGS 进行了尝试，也依然不起作用。\n二是，想通过 patchelf 去直接修改 png.so 的动态库链接，虽然修改成功，但直接把 png 搞崩溃。\n直至把 libpng-1.6.37 的 bin 也一起增加到 PATH，才重装 png 后，这个问题才最终解决。个人猜测在安装 png 时检测 libpng 的过程中应该跟 libpng-config 的可执行文件有关系，因为系统默认的 /usr/bin/libpng-config 为 1.2.49 版本，而 libpng-1.6.37 的 bin/libpng-config 默认软连接至 bin/libpng16-config，对应 1.6.37。\n事后，去 png 的源码仓库一看，果然在 src/Makevars 中发现了链接库和依赖中调用了 libpng-config：\nPKG_LIBS=$(PNG_LIBS) `libpng-config --static --ldflags`\nPKG_CFLAGS=$(PNG_CFLAGS) `libpng-config --cflags`\n\n\n而系统的 libpng-config 和 libpng-1.6.37 的 bin/libpng-config 的链接库和依赖：\n$ /usr/bin/libpng-config --static --ldflags\n-L/usr/lib64 -lpng12 -lz -lm\n\n$ /bioinfo/software/mylib/libpng-1.6.37/bin/libpng-config --static --ldflags\n-L/bioinfo/software/mylib/libpng-1.6.37/lib -lpng16 -lm -lz -lm\n正好印证了在安装 png 时，的确需要从默认 PATH 中调用 libpng-config，从而获取对应的链接库和依赖。', 'bodyHTML': '<p dir="auto">事情起因是在 R 语言中调用 <code class="notranslate">png</code> 包的 <code class="notranslate">readPNG</code> 读取 png 图片的时候，碰到了错误：<strong>libpng error: Incompatible libpng version in application and library</strong>。</p>\n<div class="highlight highlight-source-r notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt; library(png)\n&gt; p1 = readPNG(&quot;/bioinfo/polyA/circos.png&quot;)\nError in readPNG(&quot;/bioinfo/polyA/circos.png&quot;) :\n  libpng error: Incompatible libpng version in application and library\nIn addition: Warning messages:\n1: In readPNG(&quot;/bioinfo/polyA/circos.png&quot;) :\n  libpng warning: Application was compiled with png.h from libpng-1.6.37\n2: In readPNG(&quot;/bioinfo/polyA/circos.png&quot;) :\n  libpng warning: Application  is  running with png.c from libpng-1.2.49\n&gt; "><pre class="notranslate"><span class="pl-k">&gt;</span> library(<span class="pl-smi">png</span>)\n<span class="pl-k">&gt;</span> <span class="pl-v">p1</span> <span class="pl-k">=</span> readPNG(<span class="pl-s"><span class="pl-pds">"</span>/bioinfo/polyA/circos.png<span class="pl-pds">"</span></span>)\n<span class="pl-smi">Error</span> <span class="pl-k">in</span> readPNG(<span class="pl-s"><span class="pl-pds">"</span>/bioinfo/polyA/circos.png<span class="pl-pds">"</span></span>) <span class="pl-k">:</span>\n  <span class="pl-smi">libpng</span> <span class="pl-smi">error</span><span class="pl-k">:</span> <span class="pl-smi">Incompatible</span> <span class="pl-smi">libpng</span> <span class="pl-smi">version</span> <span class="pl-k">in</span> <span class="pl-smi">application</span> <span class="pl-smi">and</span> <span class="pl-smi">library</span>\n<span class="pl-smi">In</span> <span class="pl-smi">addition</span><span class="pl-k">:</span> <span class="pl-smi">Warning</span> <span class="pl-smi">messages</span><span class="pl-k">:</span>\n<span class="pl-c1">1</span><span class="pl-k">:</span> <span class="pl-smi">In</span> readPNG(<span class="pl-s"><span class="pl-pds">"</span>/bioinfo/polyA/circos.png<span class="pl-pds">"</span></span>) <span class="pl-k">:</span>\n  <span class="pl-smi">libpng</span> <span class="pl-smi">warning</span><span class="pl-k">:</span> <span class="pl-smi">Application</span> <span class="pl-smi">was</span> <span class="pl-smi">compiled</span> <span class="pl-smi">with</span> <span class="pl-smi">png.h</span> <span class="pl-smi">from</span> <span class="pl-smi">libpng</span><span class="pl-k">-</span><span class="pl-c1">1.6.37</span>\n<span class="pl-c1">2</span><span class="pl-k">:</span> <span class="pl-smi">In</span> readPNG(<span class="pl-s"><span class="pl-pds">"</span>/bioinfo/polyA/circos.png<span class="pl-pds">"</span></span>) <span class="pl-k">:</span>\n  <span class="pl-smi">libpng</span> <span class="pl-smi">warning</span><span class="pl-k">:</span> <span class="pl-smi">Application</span>  <span class="pl-smi">is</span>  <span class="pl-smi">running</span> <span class="pl-smi">with</span> <span class="pl-smi">png.c</span> <span class="pl-smi">from</span> <span class="pl-smi">libpng</span><span class="pl-k">-</span><span class="pl-c1">1.2.49</span>\n<span class="pl-k">&gt;</span> </pre></div>\n<p dir="auto">这个问题，其实在 《<a href="https://weiyan.cc/yuque/%E5%BC%80%E5%8F%91%E8%BF%90%E7%BB%B4/R/2019-07-15-r-ramigo/" rel="nofollow">RamiGO 安装及库依赖解决备忘</a>》曾经遇到过，当时的解决方法，在现在看起来其实是并不完善的。所以，在问题解决前，我们先来看看这个问题到底是怎么导致的。</p>\n<p dir="auto">首先，我的 R 是通过源码编译安装的，而且在安装的过程中 <code class="notranslate">configure</code> 时候指定了自己安装的 libpng-1.6.37。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="./configure --prefix=bioinfo/software/r/r-4.4.2 --enable-R-shlib --with-libtiff --with-libpng --with-jpeglib --with-pcre1 \\\nLDFLAGS=&quot;-L/bioinfo/software/mylibs/zlib-1.2.6/lib \\\n            -L/bioinfo/software/mylibs/bzip2-1.0.6/lib \\\n            -L/bioinfo/software/mylibs/pcre-8.40/lib \\\n            -L/bioinfo/software/mylibs/tiff-4.0.9/lib \\\n            -L/bioinfo/software/mylibs/jpeg-9c/lib \\\n            -L/bioinfo/software/mylibs/libpng-1.6.37/lib \\\n            -L/bioinfo/software/mylibs/xz-5.2.3/lib \\\n            -L/bioinfo/software/mylibs/curl-7.64.1/lib -fopenmp&quot; \\\nCPPFLAGS=&quot;-I/bioinfo/software/mylibs/zlib-1.2.6/include \\\n            -I/bioinfo/software/mylibs/bzip2-1.0.6/include \\\n            -I/bioinfo/software/mylibs/pcre-8.40/include \\\n            -I/bioinfo/software/mylibs/tiff-4.0.9/include \\\n            -I/bioinfo/software/mylibs/jpeg-9c/include \\\n            -I/bioinfo/software/mylibs/libpng-1.6.37/include \\\n            -I/bioinfo/software/mylibs/xz-5.2.3/include \\\n            -I/bioinfo/software/mylibs/curl-7.64.1/include&quot;"><pre class="notranslate"><code class="notranslate">./configure --prefix=bioinfo/software/r/r-4.4.2 --enable-R-shlib --with-libtiff --with-libpng --with-jpeglib --with-pcre1 \\\nLDFLAGS="-L/bioinfo/software/mylibs/zlib-1.2.6/lib \\\n            -L/bioinfo/software/mylibs/bzip2-1.0.6/lib \\\n            -L/bioinfo/software/mylibs/pcre-8.40/lib \\\n            -L/bioinfo/software/mylibs/tiff-4.0.9/lib \\\n            -L/bioinfo/software/mylibs/jpeg-9c/lib \\\n            -L/bioinfo/software/mylibs/libpng-1.6.37/lib \\\n            -L/bioinfo/software/mylibs/xz-5.2.3/lib \\\n            -L/bioinfo/software/mylibs/curl-7.64.1/lib -fopenmp" \\\nCPPFLAGS="-I/bioinfo/software/mylibs/zlib-1.2.6/include \\\n            -I/bioinfo/software/mylibs/bzip2-1.0.6/include \\\n            -I/bioinfo/software/mylibs/pcre-8.40/include \\\n            -I/bioinfo/software/mylibs/tiff-4.0.9/include \\\n            -I/bioinfo/software/mylibs/jpeg-9c/include \\\n            -I/bioinfo/software/mylibs/libpng-1.6.37/include \\\n            -I/bioinfo/software/mylibs/xz-5.2.3/include \\\n            -I/bioinfo/software/mylibs/curl-7.64.1/include"\n</code></pre></div>\n<p dir="auto">第二，我使用的 <code class="notranslate">png</code> 是在 R 里面直接 <code class="notranslate">install.package(\'png\')</code> 安装的。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ ldd /bioinfo/software/r/r-4.4.2/lib64/R/library/png/libs/png.so\n        linux-vdso.so.1 =&gt;  (0x00007fff29dd9000)\n        libpng12.so.0 =&gt; /usr/lib64/libpng12.so.0 (0x00007f1a614bc000)\n        libz.so.1 =&gt; /bioinfo/software/r-3.3.2/lib/libz.so.1 (0x00007f1a612a4000)\n        libm.so.6 =&gt; /lib64/libm.so.6 (0x00007f1a61020000)\n        libR.so =&gt; /bioinfo/software/r/r-3.6.1/lib64/R/lib/libR.so (0x00007f1a6098e000)\n        libgomp.so.1 =&gt; bioinfo/software/gcc-7.3.0/lib64/libgomp.so.1 (0x00007f1a60760000)\n        libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x00007f1a60543000)\n        libc.so.6 =&gt; /lib64/libc.so.6 (0x00007f1a601af000)\n        libRblas.so =&gt; /bioinfo/software/r/r-3.6.1/lib64/R/lib/libRblas.so (0x00007f1a5ff83000)\n        libgfortran.so.3 =&gt; /usr/lib64/libgfortran.so.3 (0x00007f1a5fc91000)\n        libreadline.so.6 =&gt; /lib64/libreadline.so.6 (0x00007f1a5fa4e000)\n        libpcre.so.1 =&gt; /bioinfo/software/r-3.3.2/lib/libpcre.so.1 (0x00007f1a5f81b000)\n        liblzma.so.5 =&gt; /bioinfo/software/r-3.3.2/lib/liblzma.so.5 (0x00007f1a5f5f6000)\n        librt.so.1 =&gt; /lib64/librt.so.1 (0x00007f1a5f3ee000)\n        libdl.so.2 =&gt; /lib64/libdl.so.2 (0x00007f1a5f1e9000)\n        libiconv.so.2 =&gt; /usr/local/lib/libiconv.so.2 (0x00007f1a5ef04000)\n        /lib64/ld-linux-x86-64.so.2 (0x0000003636a00000)\n        libtinfo.so.5 =&gt; /lib64/libtinfo.so.5 (0x00007f1a5ece2000)"><pre class="notranslate">$ ldd /bioinfo/software/r/r-4.4.2/lib64/R/library/png/libs/png.so\n        linux-vdso.so.1 =<span class="pl-k">&gt;</span>  (0x00007fff29dd9000)\n        libpng12.so.0 =<span class="pl-k">&gt;</span> /usr/lib64/libpng12.so.0 (0x00007f1a614bc000)\n        libz.so.1 =<span class="pl-k">&gt;</span> /bioinfo/software/r-3.3.2/lib/libz.so.1 (0x00007f1a612a4000)\n        libm.so.6 =<span class="pl-k">&gt;</span> /lib64/libm.so.6 (0x00007f1a61020000)\n        libR.so =<span class="pl-k">&gt;</span> /bioinfo/software/r/r-3.6.1/lib64/R/lib/libR.so (0x00007f1a6098e000)\n        libgomp.so.1 =<span class="pl-k">&gt;</span> bioinfo/software/gcc-7.3.0/lib64/libgomp.so.1 (0x00007f1a60760000)\n        libpthread.so.0 =<span class="pl-k">&gt;</span> /lib64/libpthread.so.0 (0x00007f1a60543000)\n        libc.so.6 =<span class="pl-k">&gt;</span> /lib64/libc.so.6 (0x00007f1a601af000)\n        libRblas.so =<span class="pl-k">&gt;</span> /bioinfo/software/r/r-3.6.1/lib64/R/lib/libRblas.so (0x00007f1a5ff83000)\n        libgfortran.so.3 =<span class="pl-k">&gt;</span> /usr/lib64/libgfortran.so.3 (0x00007f1a5fc91000)\n        libreadline.so.6 =<span class="pl-k">&gt;</span> /lib64/libreadline.so.6 (0x00007f1a5fa4e000)\n        libpcre.so.1 =<span class="pl-k">&gt;</span> /bioinfo/software/r-3.3.2/lib/libpcre.so.1 (0x00007f1a5f81b000)\n        liblzma.so.5 =<span class="pl-k">&gt;</span> /bioinfo/software/r-3.3.2/lib/liblzma.so.5 (0x00007f1a5f5f6000)\n        librt.so.1 =<span class="pl-k">&gt;</span> /lib64/librt.so.1 (0x00007f1a5f3ee000)\n        libdl.so.2 =<span class="pl-k">&gt;</span> /lib64/libdl.so.2 (0x00007f1a5f1e9000)\n        libiconv.so.2 =<span class="pl-k">&gt;</span> /usr/local/lib/libiconv.so.2 (0x00007f1a5ef04000)\n        /lib64/ld-linux-x86-64.so.2 (0x0000003636a00000)\n        libtinfo.so.5 =<span class="pl-k">&gt;</span> /lib64/libtinfo.so.5 (0x00007f1a5ece2000)</pre></div>\n<p dir="auto">从 <code class="notranslate">ldd</code> 的结果可以很明显看到，<code class="notranslate">install.package(\'png\')</code> 使用了系统默认的 <code class="notranslate">libpng</code>，也就是对应的 <code class="notranslate">libpng-1.2.49</code>。因此最后在调用 <code class="notranslate">png</code> 的时候就和编译使用的 <code class="notranslate">libpng-1.6.37</code> 发生了冲突。</p>\n<p dir="auto">第三，所以最终的解决方法就是，先设置 <code class="notranslate">libpng-1.6.37</code>的 <code class="notranslate">PATH</code> 和 <code class="notranslate">LD_LIBRARY_PATH</code>。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="export PATH=/bioinfo/software/mylib/libpng-1.6.37/bin:$PATH\nexport LD_LIBRARY_PATH=/bioinfo/software/mylib/libpng-1.6.37/lib:$LD_LIBRARY_PATH"><pre class="notranslate"><code class="notranslate">export PATH=/bioinfo/software/mylib/libpng-1.6.37/bin:$PATH\nexport LD_LIBRARY_PATH=/bioinfo/software/mylib/libpng-1.6.37/lib:$LD_LIBRARY_PATH\n</code></pre></div>\n<p dir="auto">卸载原来的 <code class="notranslate">png</code> 包，再重新安装。</p>\n<div class="highlight highlight-source-r notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="remove.packages(\'png\')\noptions(&quot;repos&quot;=c(CRAN=&quot;https://mirrors.tuna.tsinghua.edu.cn/CRAN/&quot;))\ninstall.packages(\'png\')"><pre class="notranslate">remove.packages(<span class="pl-s"><span class="pl-pds">\'</span>png<span class="pl-pds">\'</span></span>)\noptions(<span class="pl-s"><span class="pl-pds">"</span>repos<span class="pl-pds">"</span></span><span class="pl-k">=</span>c(<span class="pl-v">CRAN</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://mirrors.tuna.tsinghua.edu.cn/CRAN/<span class="pl-pds">"</span></span>))\ninstall.packages(<span class="pl-s"><span class="pl-pds">\'</span>png<span class="pl-pds">\'</span></span>)</pre></div>\n<p dir="auto">总的来说，最开始碰到这个问题的时候，虽然知道问题在哪，也设置过 <code class="notranslate">LD_LIBRARY_PATH</code> 后去重装 <code class="notranslate">png</code>，但是一直都没成功，后面尝试了几个方法。</p>\n<p dir="auto">一是，怎么在 <code class="notranslate">install.packages()</code> 中指定 libpng-1.6.37 的 <code class="notranslate">LDFLAGS</code> 和 <code class="notranslate">CPPFLAGS</code>，因为没搞懂 <code class="notranslate">--configure-args</code> 具体是怎么用的，这条路没走通。另外，在 <code class="notranslate">HOME/.R/Makevars</code> 设置了 <code class="notranslate">LDFLAGS</code> 和 <code class="notranslate">CPPFLAGS</code> 进行了尝试，也依然不起作用。</p>\n<p dir="auto">二是，想通过 <code class="notranslate">patchelf</code> 去直接修改 <code class="notranslate">png.so</code> 的动态库链接，虽然修改成功，但直接把 <code class="notranslate">png</code> 搞崩溃。</p>\n<p dir="auto">直至把 libpng-1.6.37 的 bin 也一起增加到 <code class="notranslate">PATH</code>，才重装 <code class="notranslate">png</code> 后，这个问题才最终解决。个人猜测在安装 <code class="notranslate">png</code> 时检测 libpng 的过程中应该跟 <code class="notranslate">libpng-config</code> 的可执行文件有关系，因为系统默认的 <code class="notranslate">/usr/bin/libpng-config</code> 为 1.2.49 版本，而 libpng-1.6.37 的 <code class="notranslate">bin/libpng-config</code> 默认软连接至 <code class="notranslate">bin/libpng16-config</code>，对应 1.6.37。</p>\n<p dir="auto">事后，去 <code class="notranslate">png</code> 的<a href="https://github.com/s-u/png">源码仓库</a>一看，果然在 <code class="notranslate">src/Makevars</code> 中发现了链接库和依赖中调用了 <code class="notranslate">libpng-config</code>：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="PKG_LIBS=$(PNG_LIBS) `libpng-config --static --ldflags`\nPKG_CFLAGS=$(PNG_CFLAGS) `libpng-config --cflags`"><pre class="notranslate"><code class="notranslate">PKG_LIBS=$(PNG_LIBS) `libpng-config --static --ldflags`\nPKG_CFLAGS=$(PNG_CFLAGS) `libpng-config --cflags`\n</code></pre></div>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/587fd67870bf437c40020199220c40f33d0e034f1bfc1d8bfe353785e1b531e0/68747470733a2f2f6b672e77656979616e2e63632f323032352f30322f706e672d7372632d6d616b65766172732e706e67"><img src="https://camo.githubusercontent.com/587fd67870bf437c40020199220c40f33d0e034f1bfc1d8bfe353785e1b531e0/68747470733a2f2f6b672e77656979616e2e63632f323032352f30322f706e672d7372632d6d616b65766172732e706e67" alt="png-src-makevars" data-canonical-src="https://kg.weiyan.cc/2025/02/png-src-makevars.png" style="max-width: 100%;"></a></p>\n<p dir="auto">而系统的 <code class="notranslate">libpng-config</code> 和 libpng-1.6.37 的 <code class="notranslate">bin/libpng-config</code> 的链接库和依赖：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ /usr/bin/libpng-config --static --ldflags\n-L/usr/lib64 -lpng12 -lz -lm\n\n$ /bioinfo/software/mylib/libpng-1.6.37/bin/libpng-config --static --ldflags\n-L/bioinfo/software/mylib/libpng-1.6.37/lib -lpng16 -lm -lz -lm"><pre class="notranslate">$ /usr/bin/libpng-config --static --ldflags\n-L/usr/lib64 -lpng12 -lz -lm\n\n$ /bioinfo/software/mylib/libpng-1.6.37/bin/libpng-config --static --ldflags\n-L/bioinfo/software/mylib/libpng-1.6.37/lib -lpng16 -lm -lz -lm</pre></div>\n<p dir="auto">正好印证了在安装 <code class="notranslate">png</code> 时，的确需要从默认 <code class="notranslate">PATH</code> 中调用 <code class="notranslate">libpng-config</code>，从而获取对应的链接库和依赖。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.3-折腾'}, 'labels': {'nodes': [{'name': '1.3.6-R'}]}, 'comments': {'nodes': []}}, {'title': 'Python 包 matplotlib 安装的一些问题', 'number': 97, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/97', 'createdAt': '2025-02-12T02:13:51Z', 'lastEditedAt': '2025-02-13T01:14:40Z', 'updatedAt': '2025-02-13T01:14:40Z', 'body': 'Python 的 matplotlib 在安装的过程中一直无法解决 freetype2 自动下载的问题，导致始终安装不成功。\r\n\r\n<!-- more -->\r\n\r\nPython-3.10.16 通过本地（或者是在线）方式安装 matplotlib-3.10.0 的时候，发现对应 `freetype2`、`qhull` 通过对应的 URL 无法正常下载，以至于 `matplotlib` 一直安装不成功，详细信息如下面代码所示。\r\n\r\n```bash\r\n$ pip3 install .\r\nLooking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple\r\nProcessing /bioinfo/src/py/matplotlib-3.10.0\r\n  Installing build dependencies ... done\r\n  Getting requirements to build wheel ... done\r\n  Installing backend dependencies ... done\r\n  Preparing metadata (pyproject.toml) ... error\r\n  error: subprocess-exited-with-error\r\n\r\n  × Preparing metadata (pyproject.toml) did not run successfully.\r\n  │ exit code: 1\r\n  ╰─> [48 lines of output]\r\n      + meson setup /bioinfo/src/py/matplotlib-3.10.0 /bioinfo/src/py/matplotlib-3.10.0/.mesonpy-smx69lrx -Dbuildtype=release -Db_ndebug=if-release -Db_vscrt=md --native-file=/bioinfo/src/py/matplotlib-3.10.0/.mesonpy-smx69lrx/meson-python-native-file.ini\r\n      The Meson build system\r\n      Version: 1.7.0\r\n      Source dir: /bioinfo/src/py/matplotlib-3.10.0\r\n      Build dir: /bioinfo/src/py/matplotlib-3.10.0/.mesonpy-smx69lrx\r\n      Build type: native build\r\n      Program python3 found: YES (/bioinfo/software/Python-3.10.16/bin/python3)\r\n      Project name: matplotlib\r\n      Project version: 3.10.0\r\n      C compiler for the host machine: cc (gcc 4.4.7 "cc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-4)")\r\n      C linker for the host machine: cc ld.bfd 2.20.51.0.2-5\r\n      C++ compiler for the host machine: c++ (gcc 4.4.7 "c++ (GCC) 4.4.7 20120313 (Red Hat 4.4.7-4)")\r\n      C++ linker for the host machine: c++ ld.bfd 2.20.51.0.2-5\r\n      Host machine cpu family: x86_64\r\n      Host machine cpu: x86_64\r\n      Program python found: YES (/bioinfo/software/Python-3.10.16/bin/python3.10)\r\n      Found pkg-config: YES (/usr/bin/pkg-config) 0.23\r\n      Run-time dependency python found: YES 3.10\r\n      pybind11-config found: YES (/tmp/pip-build-env-gf0psrg8/overlay/bin/pybind11-config) 2.13.6\r\n      Run-time dependency pybind11 found: YES 2.13.6\r\n      Downloading freetype-2.6.1 source from https://download.savannah.gnu.org/releases/freetype/freetype-old/freetype-2.6.1.tar.gz\r\n      <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)>\r\n      WARNING: failed to download with error: could not get https://download.savannah.gnu.org/releases/freetype/freetype-old/freetype-2.6.1.tar.gz is the internet available?. Trying after a delay...\r\n      <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)>\r\n      WARNING: failed to download with error: could not get https://download.savannah.gnu.org/releases/freetype/freetype-old/freetype-2.6.1.tar.gz is the internet available?. Trying after a delay...\r\n      <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)>\r\n      WARNING: failed to download with error: could not get https://download.savannah.gnu.org/releases/freetype/freetype-old/freetype-2.6.1.tar.gz is the internet available?. Trying after a delay...\r\n      <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)>\r\n      WARNING: failed to download with error: could not get https://download.savannah.gnu.org/releases/freetype/freetype-old/freetype-2.6.1.tar.gz is the internet available?. Trying after a delay...\r\n      <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)>\r\n      WARNING: failed to download with error: could not get https://download.savannah.gnu.org/releases/freetype/freetype-old/freetype-2.6.1.tar.gz is the internet available?. Trying after a delay...\r\n      <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)>\r\n      Downloading freetype-2.6.1 source from https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz\r\n      <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)>\r\n      WARNING: failed to download with error: could not get https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz is the internet available?. Trying after a delay...\r\n      <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)>\r\n      WARNING: failed to download with error: could not get https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz is the internet available?. Trying after a delay...\r\n      <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)>\r\n      WARNING: failed to download with error: could not get https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz is the internet available?. Trying after a delay...\r\n      <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)>\r\n      WARNING: failed to download with error: could not get https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz is the internet available?. Trying after a delay...\r\n      <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)>\r\n      WARNING: failed to download with error: could not get https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz is the internet available?. Trying after a delay...\r\n      <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)>\r\n\r\n      ../extern/meson.build:18:18: ERROR: could not get https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz is the internet available?\r\n\r\n      A full log can be found at /bioinfo/src/py/matplotlib-3.10.0/.mesonpy-smx69lrx/meson-logs/meson-log.txt\r\n      [end of output]\r\n\r\n  note: This error originates from a subprocess, and is likely not a problem with pip.\r\nerror: metadata-generation-failed\r\n\r\n× Encountered error while generating package metadata.\r\n╰─> See above for output.\r\n\r\nnote: This is an issue with the package mentioned above, not pip.\r\nhint: See above for details.\r\n\r\n[notice] A new release of pip is available: 23.0.1 -> 25.0.1\r\n[notice] To update, run: pip3 install --upgrade pip\r\n```\r\n\r\n对于这种情况，可以：\r\n1. 根据提示给出的 URL 下载好相应的依赖（这个 URL 也可以在 `matplotlib-3.10.0/subprojects/*.wrap` 中找到），并把依赖包保存的服务器任何一个目录下。          \r\n   - [freetype-2.6.1.wrap](https://github.com/matplotlib/matplotlib/blob/v3.10.x/subprojects/freetype-2.6.1.wrap)：`/bioinfo/src/py/freetype-2.6.1.tar.gz`；         \r\n   - [qhull.wrap](https://github.com/matplotlib/matplotlib/blob/v3.10.x/subprojects/qhull.wrap)：`/bioinfo/src/py/qhull-8.0.2.tar.gz`\r\n   \r\n2. 修改 `matplotlib-3.10.0/subprojects/*.wrap`。      \r\n   - freetype-2.6.1.wrap\r\n   ```\r\n   [wrap-file]\r\n   source_url = file:///bioinfo/src/py/freetype-2.6.1.tar.gz\r\n   source_fallback_url = file:///bioinfo/src/py/freetype-2.6.1.tar.gz\r\n   source_filename = freetype-2.6.1.tar.gz\r\n   source_hash = 0a3c7dfbda6da1e8fce29232e8e96d987ababbbf71ebc8c75659e4132c367014\r\n\r\n   patch_directory = freetype-2.6.1-meson\r\n\r\n   [provide]\r\n   freetype-2.6.1 = freetype_dep\r\n   ```\r\n   \r\n   - qhull.wrap\r\n   ```\r\n   [wrap-file]\r\n   # Also bump the cache key in `.circleci/config.yml`.\r\n   # Also update the docs in `docs/devel/dependencies.rst`.\r\n   directory = qhull-8.0.2\r\n   source_url = file:///bioinfo/src/py/qhull-8.0.2.tar.gz\r\n   source_filename = qhull-8.0.2.tgz\r\n   source_hash = 8774e9a12c70b0180b95d6b0b563c5aa4bea8d5960c15e18ae3b6d2521d64f8b\r\n\r\n   patch_directory = qhull-8.0.2\r\n   ```\r\n\r\n3. 最后，再次执行安装。\r\n   ```bash\r\n   pip3 install .\r\n   ```\r\n   ![pip3-matplotlib](https://kg.weiyan.cc/2025/02/pip3-matplotlib.png)\r\n   \r\n', 'bodyText': 'Python 的 matplotlib 在安装的过程中一直无法解决 freetype2 自动下载的问题，导致始终安装不成功。\n\nPython-3.10.16 通过本地（或者是在线）方式安装 matplotlib-3.10.0 的时候，发现对应 freetype2、qhull 通过对应的 URL 无法正常下载，以至于 matplotlib 一直安装不成功，详细信息如下面代码所示。\n$ pip3 install .\nLooking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple\nProcessing /bioinfo/src/py/matplotlib-3.10.0\n  Installing build dependencies ... done\n  Getting requirements to build wheel ... done\n  Installing backend dependencies ... done\n  Preparing metadata (pyproject.toml) ... error\n  error: subprocess-exited-with-error\n\n  × Preparing metadata (pyproject.toml) did not run successfully.\n  │ exit code: 1\n  ╰─> [48 lines of output]\n      + meson setup /bioinfo/src/py/matplotlib-3.10.0 /bioinfo/src/py/matplotlib-3.10.0/.mesonpy-smx69lrx -Dbuildtype=release -Db_ndebug=if-release -Db_vscrt=md --native-file=/bioinfo/src/py/matplotlib-3.10.0/.mesonpy-smx69lrx/meson-python-native-file.ini\n      The Meson build system\n      Version: 1.7.0\n      Source dir: /bioinfo/src/py/matplotlib-3.10.0\n      Build dir: /bioinfo/src/py/matplotlib-3.10.0/.mesonpy-smx69lrx\n      Build type: native build\n      Program python3 found: YES (/bioinfo/software/Python-3.10.16/bin/python3)\n      Project name: matplotlib\n      Project version: 3.10.0\n      C compiler for the host machine: cc (gcc 4.4.7 "cc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-4)")\n      C linker for the host machine: cc ld.bfd 2.20.51.0.2-5\n      C++ compiler for the host machine: c++ (gcc 4.4.7 "c++ (GCC) 4.4.7 20120313 (Red Hat 4.4.7-4)")\n      C++ linker for the host machine: c++ ld.bfd 2.20.51.0.2-5\n      Host machine cpu family: x86_64\n      Host machine cpu: x86_64\n      Program python found: YES (/bioinfo/software/Python-3.10.16/bin/python3.10)\n      Found pkg-config: YES (/usr/bin/pkg-config) 0.23\n      Run-time dependency python found: YES 3.10\n      pybind11-config found: YES (/tmp/pip-build-env-gf0psrg8/overlay/bin/pybind11-config) 2.13.6\n      Run-time dependency pybind11 found: YES 2.13.6\n      Downloading freetype-2.6.1 source from https://download.savannah.gnu.org/releases/freetype/freetype-old/freetype-2.6.1.tar.gz\n      <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)>\n      WARNING: failed to download with error: could not get https://download.savannah.gnu.org/releases/freetype/freetype-old/freetype-2.6.1.tar.gz is the internet available?. Trying after a delay...\n      <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)>\n      WARNING: failed to download with error: could not get https://download.savannah.gnu.org/releases/freetype/freetype-old/freetype-2.6.1.tar.gz is the internet available?. Trying after a delay...\n      <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)>\n      WARNING: failed to download with error: could not get https://download.savannah.gnu.org/releases/freetype/freetype-old/freetype-2.6.1.tar.gz is the internet available?. Trying after a delay...\n      <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)>\n      WARNING: failed to download with error: could not get https://download.savannah.gnu.org/releases/freetype/freetype-old/freetype-2.6.1.tar.gz is the internet available?. Trying after a delay...\n      <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)>\n      WARNING: failed to download with error: could not get https://download.savannah.gnu.org/releases/freetype/freetype-old/freetype-2.6.1.tar.gz is the internet available?. Trying after a delay...\n      <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)>\n      Downloading freetype-2.6.1 source from https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz\n      <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)>\n      WARNING: failed to download with error: could not get https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz is the internet available?. Trying after a delay...\n      <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)>\n      WARNING: failed to download with error: could not get https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz is the internet available?. Trying after a delay...\n      <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)>\n      WARNING: failed to download with error: could not get https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz is the internet available?. Trying after a delay...\n      <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)>\n      WARNING: failed to download with error: could not get https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz is the internet available?. Trying after a delay...\n      <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)>\n      WARNING: failed to download with error: could not get https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz is the internet available?. Trying after a delay...\n      <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)>\n\n      ../extern/meson.build:18:18: ERROR: could not get https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz is the internet available?\n\n      A full log can be found at /bioinfo/src/py/matplotlib-3.10.0/.mesonpy-smx69lrx/meson-logs/meson-log.txt\n      [end of output]\n\n  note: This error originates from a subprocess, and is likely not a problem with pip.\nerror: metadata-generation-failed\n\n× Encountered error while generating package metadata.\n╰─> See above for output.\n\nnote: This is an issue with the package mentioned above, not pip.\nhint: See above for details.\n\n[notice] A new release of pip is available: 23.0.1 -> 25.0.1\n[notice] To update, run: pip3 install --upgrade pip\n对于这种情况，可以：\n\n\n根据提示给出的 URL 下载好相应的依赖（这个 URL 也可以在 matplotlib-3.10.0/subprojects/*.wrap 中找到），并把依赖包保存的服务器任何一个目录下。\n\nfreetype-2.6.1.wrap：/bioinfo/src/py/freetype-2.6.1.tar.gz；\nqhull.wrap：/bioinfo/src/py/qhull-8.0.2.tar.gz\n\n\n\n修改 matplotlib-3.10.0/subprojects/*.wrap。\n\nfreetype-2.6.1.wrap\n\n[wrap-file]\nsource_url = file:///bioinfo/src/py/freetype-2.6.1.tar.gz\nsource_fallback_url = file:///bioinfo/src/py/freetype-2.6.1.tar.gz\nsource_filename = freetype-2.6.1.tar.gz\nsource_hash = 0a3c7dfbda6da1e8fce29232e8e96d987ababbbf71ebc8c75659e4132c367014\n\npatch_directory = freetype-2.6.1-meson\n\n[provide]\nfreetype-2.6.1 = freetype_dep\n\n\nqhull.wrap\n\n[wrap-file]\n# Also bump the cache key in `.circleci/config.yml`.\n# Also update the docs in `docs/devel/dependencies.rst`.\ndirectory = qhull-8.0.2\nsource_url = file:///bioinfo/src/py/qhull-8.0.2.tar.gz\nsource_filename = qhull-8.0.2.tgz\nsource_hash = 8774e9a12c70b0180b95d6b0b563c5aa4bea8d5960c15e18ae3b6d2521d64f8b\n\npatch_directory = qhull-8.0.2\n\n\n\n最后，再次执行安装。\npip3 install .', 'bodyHTML': '<p dir="auto">Python 的 matplotlib 在安装的过程中一直无法解决 freetype2 自动下载的问题，导致始终安装不成功。</p>\n\n<p dir="auto">Python-3.10.16 通过本地（或者是在线）方式安装 matplotlib-3.10.0 的时候，发现对应 <code class="notranslate">freetype2</code>、<code class="notranslate">qhull</code> 通过对应的 URL 无法正常下载，以至于 <code class="notranslate">matplotlib</code> 一直安装不成功，详细信息如下面代码所示。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ pip3 install .\nLooking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple\nProcessing /bioinfo/src/py/matplotlib-3.10.0\n  Installing build dependencies ... done\n  Getting requirements to build wheel ... done\n  Installing backend dependencies ... done\n  Preparing metadata (pyproject.toml) ... error\n  error: subprocess-exited-with-error\n\n  × Preparing metadata (pyproject.toml) did not run successfully.\n  │ exit code: 1\n  ╰─&gt; [48 lines of output]\n      + meson setup /bioinfo/src/py/matplotlib-3.10.0 /bioinfo/src/py/matplotlib-3.10.0/.mesonpy-smx69lrx -Dbuildtype=release -Db_ndebug=if-release -Db_vscrt=md --native-file=/bioinfo/src/py/matplotlib-3.10.0/.mesonpy-smx69lrx/meson-python-native-file.ini\n      The Meson build system\n      Version: 1.7.0\n      Source dir: /bioinfo/src/py/matplotlib-3.10.0\n      Build dir: /bioinfo/src/py/matplotlib-3.10.0/.mesonpy-smx69lrx\n      Build type: native build\n      Program python3 found: YES (/bioinfo/software/Python-3.10.16/bin/python3)\n      Project name: matplotlib\n      Project version: 3.10.0\n      C compiler for the host machine: cc (gcc 4.4.7 &quot;cc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-4)&quot;)\n      C linker for the host machine: cc ld.bfd 2.20.51.0.2-5\n      C++ compiler for the host machine: c++ (gcc 4.4.7 &quot;c++ (GCC) 4.4.7 20120313 (Red Hat 4.4.7-4)&quot;)\n      C++ linker for the host machine: c++ ld.bfd 2.20.51.0.2-5\n      Host machine cpu family: x86_64\n      Host machine cpu: x86_64\n      Program python found: YES (/bioinfo/software/Python-3.10.16/bin/python3.10)\n      Found pkg-config: YES (/usr/bin/pkg-config) 0.23\n      Run-time dependency python found: YES 3.10\n      pybind11-config found: YES (/tmp/pip-build-env-gf0psrg8/overlay/bin/pybind11-config) 2.13.6\n      Run-time dependency pybind11 found: YES 2.13.6\n      Downloading freetype-2.6.1 source from https://download.savannah.gnu.org/releases/freetype/freetype-old/freetype-2.6.1.tar.gz\n      &lt;urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)&gt;\n      WARNING: failed to download with error: could not get https://download.savannah.gnu.org/releases/freetype/freetype-old/freetype-2.6.1.tar.gz is the internet available?. Trying after a delay...\n      &lt;urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)&gt;\n      WARNING: failed to download with error: could not get https://download.savannah.gnu.org/releases/freetype/freetype-old/freetype-2.6.1.tar.gz is the internet available?. Trying after a delay...\n      &lt;urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)&gt;\n      WARNING: failed to download with error: could not get https://download.savannah.gnu.org/releases/freetype/freetype-old/freetype-2.6.1.tar.gz is the internet available?. Trying after a delay...\n      &lt;urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)&gt;\n      WARNING: failed to download with error: could not get https://download.savannah.gnu.org/releases/freetype/freetype-old/freetype-2.6.1.tar.gz is the internet available?. Trying after a delay...\n      &lt;urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)&gt;\n      WARNING: failed to download with error: could not get https://download.savannah.gnu.org/releases/freetype/freetype-old/freetype-2.6.1.tar.gz is the internet available?. Trying after a delay...\n      &lt;urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)&gt;\n      Downloading freetype-2.6.1 source from https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz\n      &lt;urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)&gt;\n      WARNING: failed to download with error: could not get https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz is the internet available?. Trying after a delay...\n      &lt;urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)&gt;\n      WARNING: failed to download with error: could not get https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz is the internet available?. Trying after a delay...\n      &lt;urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)&gt;\n      WARNING: failed to download with error: could not get https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz is the internet available?. Trying after a delay...\n      &lt;urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)&gt;\n      WARNING: failed to download with error: could not get https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz is the internet available?. Trying after a delay...\n      &lt;urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)&gt;\n      WARNING: failed to download with error: could not get https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz is the internet available?. Trying after a delay...\n      &lt;urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)&gt;\n\n      ../extern/meson.build:18:18: ERROR: could not get https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz is the internet available?\n\n      A full log can be found at /bioinfo/src/py/matplotlib-3.10.0/.mesonpy-smx69lrx/meson-logs/meson-log.txt\n      [end of output]\n\n  note: This error originates from a subprocess, and is likely not a problem with pip.\nerror: metadata-generation-failed\n\n× Encountered error while generating package metadata.\n╰─&gt; See above for output.\n\nnote: This is an issue with the package mentioned above, not pip.\nhint: See above for details.\n\n[notice] A new release of pip is available: 23.0.1 -&gt; 25.0.1\n[notice] To update, run: pip3 install --upgrade pip"><pre class="notranslate">$ pip3 install <span class="pl-c1">.</span>\nLooking <span class="pl-k">in</span> indexes: https://pypi.tuna.tsinghua.edu.cn/simple\nProcessing /bioinfo/src/py/matplotlib-3.10.0\n  Installing build dependencies ... <span class="pl-k">done</span>\n  Getting requirements to build wheel ... <span class="pl-k">done</span>\n  Installing backend dependencies ... <span class="pl-k">done</span>\n  Preparing metadata (pyproject.toml) ... error\n  error: subprocess-exited-with-error\n\n  × Preparing metadata (pyproject.toml) did not run successfully.\n  │ <span class="pl-c1">exit</span> code: 1\n  ╰─<span class="pl-k">&gt;</span> [48 lines of output]\n      + meson setup /bioinfo/src/py/matplotlib-3.10.0 /bioinfo/src/py/matplotlib-3.10.0/.mesonpy-smx69lrx -Dbuildtype=release -Db_ndebug=if-release -Db_vscrt=md --native-file=/bioinfo/src/py/matplotlib-3.10.0/.mesonpy-smx69lrx/meson-python-native-file.ini\n      The Meson build system\n      Version: 1.7.0\n      Source dir: /bioinfo/src/py/matplotlib-3.10.0\n      Build dir: /bioinfo/src/py/matplotlib-3.10.0/.mesonpy-smx69lrx\n      Build type: native build\n      Program python3 found: YES (/bioinfo/software/Python-3.10.16/bin/python3)\n      Project name: matplotlib\n      Project version: 3.10.0\n      C compiler <span class="pl-k">for</span> the host machine: cc (gcc 4.4.7 <span class="pl-s"><span class="pl-pds">"</span>cc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-4)<span class="pl-pds">"</span></span>)\n      C linker <span class="pl-k">for</span> the host machine: cc ld.bfd 2.20.51.0.2-5\n      C++ compiler <span class="pl-k">for</span> the host machine: c++ (gcc 4.4.7 <span class="pl-s"><span class="pl-pds">"</span>c++ (GCC) 4.4.7 20120313 (Red Hat 4.4.7-4)<span class="pl-pds">"</span></span>)\n      C++ linker <span class="pl-k">for</span> the host machine: c++ ld.bfd 2.20.51.0.2-5\n      Host machine cpu family: x86_64\n      Host machine cpu: x86_64\n      Program python found: YES (/bioinfo/software/Python-3.10.16/bin/python3.10)\n      Found pkg-config: YES (/usr/bin/pkg-config) 0.23\n      Run-time dependency python found: YES 3.10\n      pybind11-config found: YES (/tmp/pip-build-env-gf0psrg8/overlay/bin/pybind11-config) 2.13.6\n      Run-time dependency pybind11 found: YES 2.13.6\n      Downloading freetype-2.6.1 <span class="pl-c1">source</span> from https://download.savannah.gnu.org/releases/freetype/freetype-old/freetype-2.6.1.tar.gz\n      <span class="pl-k">&lt;</span>urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get <span class="pl-k">local</span> issuer certificate (_ssl.c:1007)<span class="pl-k">&gt;</span>\n      WARNING: failed to download with error: could not get https://download.savannah.gnu.org/releases/freetype/freetype-old/freetype-2.6.1.tar.gz is the internet available<span class="pl-k">?</span>. Trying after a delay...\n      <span class="pl-k">&lt;</span>urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get <span class="pl-k">local</span> issuer certificate (_ssl.c:1007)<span class="pl-k">&gt;</span>\n      WARNING: failed to download with error: could not get https://download.savannah.gnu.org/releases/freetype/freetype-old/freetype-2.6.1.tar.gz is the internet available<span class="pl-k">?</span>. Trying after a delay...\n      <span class="pl-k">&lt;</span>urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get <span class="pl-k">local</span> issuer certificate (_ssl.c:1007)<span class="pl-k">&gt;</span>\n      WARNING: failed to download with error: could not get https://download.savannah.gnu.org/releases/freetype/freetype-old/freetype-2.6.1.tar.gz is the internet available<span class="pl-k">?</span>. Trying after a delay...\n      <span class="pl-k">&lt;</span>urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get <span class="pl-k">local</span> issuer certificate (_ssl.c:1007)<span class="pl-k">&gt;</span>\n      WARNING: failed to download with error: could not get https://download.savannah.gnu.org/releases/freetype/freetype-old/freetype-2.6.1.tar.gz is the internet available<span class="pl-k">?</span>. Trying after a delay...\n      <span class="pl-k">&lt;</span>urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get <span class="pl-k">local</span> issuer certificate (_ssl.c:1007)<span class="pl-k">&gt;</span>\n      WARNING: failed to download with error: could not get https://download.savannah.gnu.org/releases/freetype/freetype-old/freetype-2.6.1.tar.gz is the internet available<span class="pl-k">?</span>. Trying after a delay...\n      <span class="pl-k">&lt;</span>urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get <span class="pl-k">local</span> issuer certificate (_ssl.c:1007)<span class="pl-k">&gt;</span>\n      Downloading freetype-2.6.1 <span class="pl-c1">source</span> from https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz\n      <span class="pl-k">&lt;</span>urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get <span class="pl-k">local</span> issuer certificate (_ssl.c:1007)<span class="pl-k">&gt;</span>\n      WARNING: failed to download with error: could not get https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz is the internet available<span class="pl-k">?</span>. Trying after a delay...\n      <span class="pl-k">&lt;</span>urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get <span class="pl-k">local</span> issuer certificate (_ssl.c:1007)<span class="pl-k">&gt;</span>\n      WARNING: failed to download with error: could not get https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz is the internet available<span class="pl-k">?</span>. Trying after a delay...\n      <span class="pl-k">&lt;</span>urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get <span class="pl-k">local</span> issuer certificate (_ssl.c:1007)<span class="pl-k">&gt;</span>\n      WARNING: failed to download with error: could not get https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz is the internet available<span class="pl-k">?</span>. Trying after a delay...\n      <span class="pl-k">&lt;</span>urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get <span class="pl-k">local</span> issuer certificate (_ssl.c:1007)<span class="pl-k">&gt;</span>\n      WARNING: failed to download with error: could not get https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz is the internet available<span class="pl-k">?</span>. Trying after a delay...\n      <span class="pl-k">&lt;</span>urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get <span class="pl-k">local</span> issuer certificate (_ssl.c:1007)<span class="pl-k">&gt;</span>\n      WARNING: failed to download with error: could not get https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz is the internet available<span class="pl-k">?</span>. Trying after a delay...\n      <span class="pl-k">&lt;</span>urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get <span class="pl-k">local</span> issuer certificate (_ssl.c:1007)<span class="pl-k">&gt;</span>\n\n      ../extern/meson.build:18:18: ERROR: could not get https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz is the internet available<span class="pl-k">?</span>\n\n      A full log can be found at /bioinfo/src/py/matplotlib-3.10.0/.mesonpy-smx69lrx/meson-logs/meson-log.txt\n      [end of output]\n\n  note: This error originates from a subprocess, and is likely not a problem with pip.\nerror: metadata-generation-failed\n\n× Encountered error <span class="pl-k">while</span> generating package metadata.\n╰─<span class="pl-k">&gt;</span> See above <span class="pl-k">for</span> output.\n\nnote: This is an issue with the package mentioned above, not pip.\nhint: See above <span class="pl-k">for</span> details.\n\n[notice] A new release of pip is available: 23.0.1 -<span class="pl-k">&gt;</span> 25.0.1\n[notice] To update, run: pip3 install --upgrade pip</pre></div>\n<p dir="auto">对于这种情况，可以：</p>\n<ol dir="auto">\n<li>\n<p dir="auto">根据提示给出的 URL 下载好相应的依赖（这个 URL 也可以在 <code class="notranslate">matplotlib-3.10.0/subprojects/*.wrap</code> 中找到），并把依赖包保存的服务器任何一个目录下。</p>\n<ul dir="auto">\n<li><a href="https://github.com/matplotlib/matplotlib/blob/v3.10.x/subprojects/freetype-2.6.1.wrap">freetype-2.6.1.wrap</a>：<code class="notranslate">/bioinfo/src/py/freetype-2.6.1.tar.gz</code>；</li>\n<li><a href="https://github.com/matplotlib/matplotlib/blob/v3.10.x/subprojects/qhull.wrap">qhull.wrap</a>：<code class="notranslate">/bioinfo/src/py/qhull-8.0.2.tar.gz</code></li>\n</ul>\n</li>\n<li>\n<p dir="auto">修改 <code class="notranslate">matplotlib-3.10.0/subprojects/*.wrap</code>。</p>\n<ul dir="auto">\n<li>freetype-2.6.1.wrap</li>\n</ul>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="[wrap-file]\nsource_url = file:///bioinfo/src/py/freetype-2.6.1.tar.gz\nsource_fallback_url = file:///bioinfo/src/py/freetype-2.6.1.tar.gz\nsource_filename = freetype-2.6.1.tar.gz\nsource_hash = 0a3c7dfbda6da1e8fce29232e8e96d987ababbbf71ebc8c75659e4132c367014\n\npatch_directory = freetype-2.6.1-meson\n\n[provide]\nfreetype-2.6.1 = freetype_dep"><pre class="notranslate"><code class="notranslate">[wrap-file]\nsource_url = file:///bioinfo/src/py/freetype-2.6.1.tar.gz\nsource_fallback_url = file:///bioinfo/src/py/freetype-2.6.1.tar.gz\nsource_filename = freetype-2.6.1.tar.gz\nsource_hash = 0a3c7dfbda6da1e8fce29232e8e96d987ababbbf71ebc8c75659e4132c367014\n\npatch_directory = freetype-2.6.1-meson\n\n[provide]\nfreetype-2.6.1 = freetype_dep\n</code></pre></div>\n<ul dir="auto">\n<li>qhull.wrap</li>\n</ul>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="[wrap-file]\n# Also bump the cache key in `.circleci/config.yml`.\n# Also update the docs in `docs/devel/dependencies.rst`.\ndirectory = qhull-8.0.2\nsource_url = file:///bioinfo/src/py/qhull-8.0.2.tar.gz\nsource_filename = qhull-8.0.2.tgz\nsource_hash = 8774e9a12c70b0180b95d6b0b563c5aa4bea8d5960c15e18ae3b6d2521d64f8b\n\npatch_directory = qhull-8.0.2"><pre class="notranslate"><code class="notranslate">[wrap-file]\n# Also bump the cache key in `.circleci/config.yml`.\n# Also update the docs in `docs/devel/dependencies.rst`.\ndirectory = qhull-8.0.2\nsource_url = file:///bioinfo/src/py/qhull-8.0.2.tar.gz\nsource_filename = qhull-8.0.2.tgz\nsource_hash = 8774e9a12c70b0180b95d6b0b563c5aa4bea8d5960c15e18ae3b6d2521d64f8b\n\npatch_directory = qhull-8.0.2\n</code></pre></div>\n</li>\n<li>\n<p dir="auto">最后，再次执行安装。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pip3 install ."><pre class="notranslate">pip3 install <span class="pl-c1">.</span></pre></div>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/054d06a0d7c49e8d457c6fa23534c443bd3675b31e9e4c9094240346c9a9729e/68747470733a2f2f6b672e77656979616e2e63632f323032352f30322f706970332d6d6174706c6f746c69622e706e67"><img src="https://camo.githubusercontent.com/054d06a0d7c49e8d457c6fa23534c443bd3675b31e9e4c9094240346c9a9729e/68747470733a2f2f6b672e77656979616e2e63632f323032352f30322f706970332d6d6174706c6f746c69622e706e67" alt="pip3-matplotlib" data-canonical-src="https://kg.weiyan.cc/2025/02/pip3-matplotlib.png" style="max-width: 100%;"></a></p>\n</li>\n</ol>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.3-折腾'}, 'labels': {'nodes': [{'name': '1.3.5-Python'}]}, 'comments': {'nodes': []}}, {'title': '我的 2024 年总结', 'number': 96, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/96', 'createdAt': '2025-01-15T03:01:57Z', 'lastEditedAt': '2025-01-21T03:05:05Z', 'updatedAt': '2025-01-21T03:05:05Z', 'body': '2024 年已过去，距离农历新年还有将近半个月的时间，趁着这个时间简单来盘点一下 2024 年走过的一些坑坑洼洼。\r\n\r\n<!-- more -->\r\n\r\n## 工作那些事\r\n\r\n工作上的事情，早在公司层面已经梳理了一次，到了这里实在是乏善可陈，也不太想再来这里赘述了，只想聊聊一些想法。\r\n\r\n当一个人一年到头安装、测试过上百款软件/包，在 configure/make/make install 这条路上趟过太多坑后，会对 mamba/conda/virtualenv 一类的解决方案更加关注，但是对于老旧服务器甚至是集群 docker/singularity 却又是另一个可望不可及的痛 —— 想用却用不上。总的来说，软件这条路，依旧是源码加 conda 流混合双打的局面，借助 Google 或者是 AI 还是能打上几个回合的。\r\n\r\n在另外一个赛道上，AI 火的一塌糊涂的今天，PyTorch/TensorFlow，AlphaFold 3/HelixFold 3，... 成为了个人的另外一个选择和挑战，2024 年没能真正躬身入局，2025 年的路还会远吗？GPU 带来的问题仿佛还在耳边，路漫漫看不见脚下的路。\r\n\r\n都说这是艰难的一年，[寒冬将至](https://weiyan.cc/blog/discussions-81/)，2025 年又何尝不会更加艰难！\r\n\r\n## 享受生活\r\n\r\n2024 年绝对是陪娃打卡室外活动最多的一年。在爬山和徒步这条路上，从华峰寺、南香山、油麻山、火炉山，到博物馆、儿童公园、黄埔欢乐跑、玉岩书院徒步，萌鸡小队一年以来可谓战绩辉煌，欢乐满满。\r\n\r\n2024 年 7 月中旬，经历了公司体检后，成功带领公司的小伙伴们入坑羽毛球。把公司附近大大小小的球馆打过一遍后，羽毛球成为了每周的常态，养生局和对抗局轮流转。随着周围羽毛球馆越开越多，打球虽然越来越方便，但人却越来越分散，价格也越加参差不齐。\r\n\r\n## 聊聊其他\r\n\r\n2024 年是全面游走在黄埔、增城两区的一年，通勤、生活日渐适应，完美的过渡。\r\n\r\n2024 年家人经历了一些职场变动，经历了一些健康困扰，幸运的是这一年大家一路扶持一路鼓励，让包容给了这个家更多温暖。\r\n\r\n## 愿你所愿\r\n\r\n2025 年，愿你所愿 —— 这盛世每一天，山河无恙，烟火寻常。', 'bodyText': '2024 年已过去，距离农历新年还有将近半个月的时间，趁着这个时间简单来盘点一下 2024 年走过的一些坑坑洼洼。\n\n工作那些事\n工作上的事情，早在公司层面已经梳理了一次，到了这里实在是乏善可陈，也不太想再来这里赘述了，只想聊聊一些想法。\n当一个人一年到头安装、测试过上百款软件/包，在 configure/make/make install 这条路上趟过太多坑后，会对 mamba/conda/virtualenv 一类的解决方案更加关注，但是对于老旧服务器甚至是集群 docker/singularity 却又是另一个可望不可及的痛 —— 想用却用不上。总的来说，软件这条路，依旧是源码加 conda 流混合双打的局面，借助 Google 或者是 AI 还是能打上几个回合的。\n在另外一个赛道上，AI 火的一塌糊涂的今天，PyTorch/TensorFlow，AlphaFold 3/HelixFold 3，... 成为了个人的另外一个选择和挑战，2024 年没能真正躬身入局，2025 年的路还会远吗？GPU 带来的问题仿佛还在耳边，路漫漫看不见脚下的路。\n都说这是艰难的一年，寒冬将至，2025 年又何尝不会更加艰难！\n享受生活\n2024 年绝对是陪娃打卡室外活动最多的一年。在爬山和徒步这条路上，从华峰寺、南香山、油麻山、火炉山，到博物馆、儿童公园、黄埔欢乐跑、玉岩书院徒步，萌鸡小队一年以来可谓战绩辉煌，欢乐满满。\n2024 年 7 月中旬，经历了公司体检后，成功带领公司的小伙伴们入坑羽毛球。把公司附近大大小小的球馆打过一遍后，羽毛球成为了每周的常态，养生局和对抗局轮流转。随着周围羽毛球馆越开越多，打球虽然越来越方便，但人却越来越分散，价格也越加参差不齐。\n聊聊其他\n2024 年是全面游走在黄埔、增城两区的一年，通勤、生活日渐适应，完美的过渡。\n2024 年家人经历了一些职场变动，经历了一些健康困扰，幸运的是这一年大家一路扶持一路鼓励，让包容给了这个家更多温暖。\n愿你所愿\n2025 年，愿你所愿 —— 这盛世每一天，山河无恙，烟火寻常。', 'bodyHTML': '<p dir="auto">2024 年已过去，距离农历新年还有将近半个月的时间，趁着这个时间简单来盘点一下 2024 年走过的一些坑坑洼洼。</p>\n\n<h2 dir="auto">工作那些事</h2>\n<p dir="auto">工作上的事情，早在公司层面已经梳理了一次，到了这里实在是乏善可陈，也不太想再来这里赘述了，只想聊聊一些想法。</p>\n<p dir="auto">当一个人一年到头安装、测试过上百款软件/包，在 configure/make/make install 这条路上趟过太多坑后，会对 mamba/conda/virtualenv 一类的解决方案更加关注，但是对于老旧服务器甚至是集群 docker/singularity 却又是另一个可望不可及的痛 —— 想用却用不上。总的来说，软件这条路，依旧是源码加 conda 流混合双打的局面，借助 Google 或者是 AI 还是能打上几个回合的。</p>\n<p dir="auto">在另外一个赛道上，AI 火的一塌糊涂的今天，PyTorch/TensorFlow，AlphaFold 3/HelixFold 3，... 成为了个人的另外一个选择和挑战，2024 年没能真正躬身入局，2025 年的路还会远吗？GPU 带来的问题仿佛还在耳边，路漫漫看不见脚下的路。</p>\n<p dir="auto">都说这是艰难的一年，<a href="https://weiyan.cc/blog/discussions-81/" rel="nofollow">寒冬将至</a>，2025 年又何尝不会更加艰难！</p>\n<h2 dir="auto">享受生活</h2>\n<p dir="auto">2024 年绝对是陪娃打卡室外活动最多的一年。在爬山和徒步这条路上，从华峰寺、南香山、油麻山、火炉山，到博物馆、儿童公园、黄埔欢乐跑、玉岩书院徒步，萌鸡小队一年以来可谓战绩辉煌，欢乐满满。</p>\n<p dir="auto">2024 年 7 月中旬，经历了公司体检后，成功带领公司的小伙伴们入坑羽毛球。把公司附近大大小小的球馆打过一遍后，羽毛球成为了每周的常态，养生局和对抗局轮流转。随着周围羽毛球馆越开越多，打球虽然越来越方便，但人却越来越分散，价格也越加参差不齐。</p>\n<h2 dir="auto">聊聊其他</h2>\n<p dir="auto">2024 年是全面游走在黄埔、增城两区的一年，通勤、生活日渐适应，完美的过渡。</p>\n<p dir="auto">2024 年家人经历了一些职场变动，经历了一些健康困扰，幸运的是这一年大家一路扶持一路鼓励，让包容给了这个家更多温暖。</p>\n<h2 dir="auto">愿你所愿</h2>\n<p dir="auto">2025 年，愿你所愿 —— 这盛世每一天，山河无恙，烟火寻常。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '生活跌宕，羽球向阳', 'number': 95, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/95', 'createdAt': '2024-12-03T07:44:42Z', 'lastEditedAt': '2025-04-28T07:49:55Z', 'updatedAt': '2025-04-28T07:49:55Z', 'body': '羽毛球这项运动真是很神奇，就想多巴胺一样，过程总能让人乐此不疲，就像平常生活中的一束光或是一拂尘，拂去生活的阴霾与不快。\r\n\r\n<!-- more -->\r\n\r\n> 生活无非就是上班下班，过了初出茅庐的迷茫与昂扬，一切都开始变得按部就班有条不紊，也经历了没遇到过的波折与离别，很多事情都只能放在心里，让别人放心。就这样不知不觉间成为了一些人事物的支撑，俗称高个的。但只有自己才知道，自己也需要一个支撑，一个途径，一个宣泄口，一个目标让自己能扛得下去，于是我说生活跌宕，羽球向阳。\r\n\r\n或许这正是羽毛球的治愈力，它让疲惫的灵魂暂时抽离现实，在攻防的博弈里，找回对生活的掌控感与热忱。', 'bodyText': '羽毛球这项运动真是很神奇，就想多巴胺一样，过程总能让人乐此不疲，就像平常生活中的一束光或是一拂尘，拂去生活的阴霾与不快。\n\n\n生活无非就是上班下班，过了初出茅庐的迷茫与昂扬，一切都开始变得按部就班有条不紊，也经历了没遇到过的波折与离别，很多事情都只能放在心里，让别人放心。就这样不知不觉间成为了一些人事物的支撑，俗称高个的。但只有自己才知道，自己也需要一个支撑，一个途径，一个宣泄口，一个目标让自己能扛得下去，于是我说生活跌宕，羽球向阳。\n\n或许这正是羽毛球的治愈力，它让疲惫的灵魂暂时抽离现实，在攻防的博弈里，找回对生活的掌控感与热忱。', 'bodyHTML': '<p dir="auto">羽毛球这项运动真是很神奇，就想多巴胺一样，过程总能让人乐此不疲，就像平常生活中的一束光或是一拂尘，拂去生活的阴霾与不快。</p>\n\n<blockquote>\n<p dir="auto">生活无非就是上班下班，过了初出茅庐的迷茫与昂扬，一切都开始变得按部就班有条不紊，也经历了没遇到过的波折与离别，很多事情都只能放在心里，让别人放心。就这样不知不觉间成为了一些人事物的支撑，俗称高个的。但只有自己才知道，自己也需要一个支撑，一个途径，一个宣泄口，一个目标让自己能扛得下去，于是我说生活跌宕，羽球向阳。</p>\n</blockquote>\n<p dir="auto">或许这正是羽毛球的治愈力，它让疲惫的灵魂暂时抽离现实，在攻防的博弈里，找回对生活的掌控感与热忱。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '手机流量与套餐', 'number': 94, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/94', 'createdAt': '2024-11-22T02:33:40Z', 'lastEditedAt': None, 'updatedAt': '2024-11-22T02:33:42Z', 'body': '都到 2024 年了，还在为手机流量和套餐的事情纠结。身处广东，不管移动联通电信，还是新出来的广电，就想问一下现在还有比较便宜的套餐吗？\r\n\r\n<!-- more -->\r\n\r\n起源是老母亲现在用的移动 39 元/月的套餐，老人觉得费用太高，想要换一个费用低一点的套餐。所以问题就来了。\r\n\r\n- 主要给老人（未满 60 周岁）用。\r\n- 平时就用微信、抖音。\r\n- 在不换号码前提下有没有比较便宜的套餐（例如，19 元的套餐挺好）。\r\n\r\n看到一些建议，说给老人买一张副卡，把主卡转为 8 元保号套餐，这也是一个方法，但这样一来，问题就变成了：哪些副卡比较划算？\r\n\r\n![china-mobile-operators](https://kg.weiyan.cc/2024/11/china-mobile-operators.jpg)\r\n\r\n家里有老人的，不知道大家都是怎么给他们选择套餐的，现在的套餐五花八门，一时间还真不知道该怎么选。', 'bodyText': '都到 2024 年了，还在为手机流量和套餐的事情纠结。身处广东，不管移动联通电信，还是新出来的广电，就想问一下现在还有比较便宜的套餐吗？\n\n起源是老母亲现在用的移动 39 元/月的套餐，老人觉得费用太高，想要换一个费用低一点的套餐。所以问题就来了。\n\n主要给老人（未满 60 周岁）用。\n平时就用微信、抖音。\n在不换号码前提下有没有比较便宜的套餐（例如，19 元的套餐挺好）。\n\n看到一些建议，说给老人买一张副卡，把主卡转为 8 元保号套餐，这也是一个方法，但这样一来，问题就变成了：哪些副卡比较划算？\n\n家里有老人的，不知道大家都是怎么给他们选择套餐的，现在的套餐五花八门，一时间还真不知道该怎么选。', 'bodyHTML': '<p dir="auto">都到 2024 年了，还在为手机流量和套餐的事情纠结。身处广东，不管移动联通电信，还是新出来的广电，就想问一下现在还有比较便宜的套餐吗？</p>\n\n<p dir="auto">起源是老母亲现在用的移动 39 元/月的套餐，老人觉得费用太高，想要换一个费用低一点的套餐。所以问题就来了。</p>\n<ul dir="auto">\n<li>主要给老人（未满 60 周岁）用。</li>\n<li>平时就用微信、抖音。</li>\n<li>在不换号码前提下有没有比较便宜的套餐（例如，19 元的套餐挺好）。</li>\n</ul>\n<p dir="auto">看到一些建议，说给老人买一张副卡，把主卡转为 8 元保号套餐，这也是一个方法，但这样一来，问题就变成了：哪些副卡比较划算？</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/2d74c6af25a7bb9b5ec506a7a12bf9a03428f9ce4ea8ecca581d1a1d08160d66/68747470733a2f2f6b672e77656979616e2e63632f323032342f31312f6368696e612d6d6f62696c652d6f70657261746f72732e6a7067"><img src="https://camo.githubusercontent.com/2d74c6af25a7bb9b5ec506a7a12bf9a03428f9ce4ea8ecca581d1a1d08160d66/68747470733a2f2f6b672e77656979616e2e63632f323032342f31312f6368696e612d6d6f62696c652d6f70657261746f72732e6a7067" alt="china-mobile-operators" data-canonical-src="https://kg.weiyan.cc/2024/11/china-mobile-operators.jpg" style="max-width: 100%;"></a></p>\n<p dir="auto">家里有老人的，不知道大家都是怎么给他们选择套餐的，现在的套餐五花八门，一时间还真不知道该怎么选。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': 'GitHub Actions 更新 Submodule', 'number': 93, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/93', 'createdAt': '2024-11-06T03:31:21Z', 'lastEditedAt': None, 'updatedAt': '2024-11-06T03:31:22Z', 'body': '怎么通过 GitHub Actions 实时更新 Git 仓库中的子模块（submodules）。\r\n\r\n<!-- more -->\r\n\r\n```yaml\r\nname: Send submodule updates to parent repo\r\n\r\non:\r\n  push:\r\n    branches: \r\n      - main\r\n\r\njobs:\r\n  update:\r\n    runs-on: ubuntu-latest\r\n\r\n    steps:\r\n      - uses: actions/checkout@v2\r\n        with: \r\n          repository: xxx/parent_xxx\r\n          token: ${{ secrets.PRIVATE_TOKEN_GITHUB }}\r\n\r\n      - name: Pull & update submodules recursively\r\n        run: |\r\n          git submodule update --init --recursive\r\n          git submodule update --recursive --remote\r\n      - name: Commit\r\n        run: |\r\n          git config user.email "actions@github.com"\r\n          git config user.name "GitHub Actions - update submodules"\r\n          git add --all\r\n          git commit -m "Update submodules" || echo "No changes to commit"\r\n          git push\r\n```\r\n\r\n1. `git submodule update --init --recursive`\r\n\r\n这个命令用于初始化并更新仓库中的子模块。具体来说：\r\n\r\n- `--init` 参数会初始化在 `.gitmodules` 文件中指定的每个子模块的配置信息，但不会更新子模块的内容。这个步骤是必须的，因为 Git 不会自动初始化子模块的配置信息。\r\n- `--recursive` 参数确保命令递归地应用于任何嵌套的子模块。这意味着如果子模块本身还包含子模块，这些子模块也会被初始化。\r\n\r\n简而言之，这个命令会初始化仓库中所有（包括嵌套的）子模块的配置，并更新它们到在父仓库中记录的提交。\r\n\r\n2. `git submodule update --recursive --remote`\r\n\r\n这个命令用于更新仓库中的子模块到它们的远程仓库中的最新状态（或指定的分支/标签）。具体来说：\r\n\r\n- `--recursive` 的作用与上述命令相同，确保命令递归地应用于所有嵌套的子模块。\r\n- `--remot`e 参数指示 Git 更新每个子模块到其远程仓库的当前分支的最新提交。如果没有指定分支，则默认为在 `.gitmodules ` 文件中为每个子模块指定的分支。\r\n\r\n注意，这个命令并不会改变父仓库中记录的子模块的提交。它只是更新了子模块的工作目录和索引，以匹配远程仓库的最新状态。如果你想在父仓库中记录这些更新，你需要在子模块中执行提交，然后回到父仓库中，添加子模块的变更并提交。\r\n\r\n3. 总结\r\n\r\n- `git submodule update --init --recursive` 用于初始化并更新子模块到父仓库中记录的提交。\r\n- `git submodule update --recursive --remote` 用于将子模块更新到其远程仓库的最新状态，但不会在父仓库中记录这些更新。\r\n', 'bodyText': '怎么通过 GitHub Actions 实时更新 Git 仓库中的子模块（submodules）。\n\nname: Send submodule updates to parent repo\n\non:\n  push:\n    branches: \n      - main\n\njobs:\n  update:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n        with: \n          repository: xxx/parent_xxx\n          token: ${{ secrets.PRIVATE_TOKEN_GITHUB }}\n\n      - name: Pull & update submodules recursively\n        run: |\n          git submodule update --init --recursive\n          git submodule update --recursive --remote\n      - name: Commit\n        run: |\n          git config user.email "actions@github.com"\n          git config user.name "GitHub Actions - update submodules"\n          git add --all\n          git commit -m "Update submodules" || echo "No changes to commit"\n          git push\n\ngit submodule update --init --recursive\n\n这个命令用于初始化并更新仓库中的子模块。具体来说：\n\n--init 参数会初始化在 .gitmodules 文件中指定的每个子模块的配置信息，但不会更新子模块的内容。这个步骤是必须的，因为 Git 不会自动初始化子模块的配置信息。\n--recursive 参数确保命令递归地应用于任何嵌套的子模块。这意味着如果子模块本身还包含子模块，这些子模块也会被初始化。\n\n简而言之，这个命令会初始化仓库中所有（包括嵌套的）子模块的配置，并更新它们到在父仓库中记录的提交。\n\ngit submodule update --recursive --remote\n\n这个命令用于更新仓库中的子模块到它们的远程仓库中的最新状态（或指定的分支/标签）。具体来说：\n\n--recursive 的作用与上述命令相同，确保命令递归地应用于所有嵌套的子模块。\n--remote 参数指示 Git 更新每个子模块到其远程仓库的当前分支的最新提交。如果没有指定分支，则默认为在 .gitmodules  文件中为每个子模块指定的分支。\n\n注意，这个命令并不会改变父仓库中记录的子模块的提交。它只是更新了子模块的工作目录和索引，以匹配远程仓库的最新状态。如果你想在父仓库中记录这些更新，你需要在子模块中执行提交，然后回到父仓库中，添加子模块的变更并提交。\n\n总结\n\n\ngit submodule update --init --recursive 用于初始化并更新子模块到父仓库中记录的提交。\ngit submodule update --recursive --remote 用于将子模块更新到其远程仓库的最新状态，但不会在父仓库中记录这些更新。', 'bodyHTML': '<p dir="auto">怎么通过 GitHub Actions 实时更新 Git 仓库中的子模块（submodules）。</p>\n\n<div class="highlight highlight-source-yaml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="name: Send submodule updates to parent repo\n\non:\n  push:\n    branches: \n      - main\n\njobs:\n  update:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n        with: \n          repository: xxx/parent_xxx\n          token: ${{ secrets.PRIVATE_TOKEN_GITHUB }}\n\n      - name: Pull &amp; update submodules recursively\n        run: |\n          git submodule update --init --recursive\n          git submodule update --recursive --remote\n      - name: Commit\n        run: |\n          git config user.email &quot;actions@github.com&quot;\n          git config user.name &quot;GitHub Actions - update submodules&quot;\n          git add --all\n          git commit -m &quot;Update submodules&quot; || echo &quot;No changes to commit&quot;\n          git push"><pre class="notranslate"><span class="pl-ent">name</span>: <span class="pl-s">Send submodule updates to parent repo</span>\n\n<span class="pl-ent">on</span>:\n  <span class="pl-ent">push</span>:\n    <span class="pl-ent">branches</span>: \n      - <span class="pl-s">main</span>\n\n<span class="pl-ent">jobs</span>:\n  <span class="pl-ent">update</span>:\n    <span class="pl-ent">runs-on</span>: <span class="pl-s">ubuntu-latest</span>\n\n    <span class="pl-ent">steps</span>:\n      - <span class="pl-ent">uses</span>: <span class="pl-s">actions/checkout@v2</span>\n        <span class="pl-ent">with</span>: \n          <span class="pl-ent">repository</span>: <span class="pl-s">xxx/parent_xxx</span>\n          <span class="pl-ent">token</span>: <span class="pl-s">${{ secrets.PRIVATE_TOKEN_GITHUB }}</span>\n\n      - <span class="pl-ent">name</span>: <span class="pl-s">Pull &amp; update submodules recursively</span>\n        <span class="pl-ent">run</span>: <span class="pl-s">|</span>\n<span class="pl-s">          git submodule update --init --recursive</span>\n<span class="pl-s">          git submodule update --recursive --remote</span>\n<span class="pl-s"></span>      - <span class="pl-ent">name</span>: <span class="pl-s">Commit</span>\n        <span class="pl-ent">run</span>: <span class="pl-s">|</span>\n<span class="pl-s">          git config user.email "actions@github.com"</span>\n<span class="pl-s">          git config user.name "GitHub Actions - update submodules"</span>\n<span class="pl-s">          git add --all</span>\n<span class="pl-s">          git commit -m "Update submodules" || echo "No changes to commit"</span>\n<span class="pl-s">          git push</span></pre></div>\n<ol dir="auto">\n<li><code class="notranslate">git submodule update --init --recursive</code></li>\n</ol>\n<p dir="auto">这个命令用于初始化并更新仓库中的子模块。具体来说：</p>\n<ul dir="auto">\n<li><code class="notranslate">--init</code> 参数会初始化在 <code class="notranslate">.gitmodules</code> 文件中指定的每个子模块的配置信息，但不会更新子模块的内容。这个步骤是必须的，因为 Git 不会自动初始化子模块的配置信息。</li>\n<li><code class="notranslate">--recursive</code> 参数确保命令递归地应用于任何嵌套的子模块。这意味着如果子模块本身还包含子模块，这些子模块也会被初始化。</li>\n</ul>\n<p dir="auto">简而言之，这个命令会初始化仓库中所有（包括嵌套的）子模块的配置，并更新它们到在父仓库中记录的提交。</p>\n<ol start="2" dir="auto">\n<li><code class="notranslate">git submodule update --recursive --remote</code></li>\n</ol>\n<p dir="auto">这个命令用于更新仓库中的子模块到它们的远程仓库中的最新状态（或指定的分支/标签）。具体来说：</p>\n<ul dir="auto">\n<li><code class="notranslate">--recursive</code> 的作用与上述命令相同，确保命令递归地应用于所有嵌套的子模块。</li>\n<li><code class="notranslate">--remot</code>e 参数指示 Git 更新每个子模块到其远程仓库的当前分支的最新提交。如果没有指定分支，则默认为在 <code class="notranslate">.gitmodules </code> 文件中为每个子模块指定的分支。</li>\n</ul>\n<p dir="auto">注意，这个命令并不会改变父仓库中记录的子模块的提交。它只是更新了子模块的工作目录和索引，以匹配远程仓库的最新状态。如果你想在父仓库中记录这些更新，你需要在子模块中执行提交，然后回到父仓库中，添加子模块的变更并提交。</p>\n<ol start="3" dir="auto">\n<li>总结</li>\n</ol>\n<ul dir="auto">\n<li><code class="notranslate">git submodule update --init --recursive</code> 用于初始化并更新子模块到父仓库中记录的提交。</li>\n<li><code class="notranslate">git submodule update --recursive --remote</code> 用于将子模块更新到其远程仓库的最新状态，但不会在父仓库中记录这些更新。</li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.3-折腾'}, 'labels': {'nodes': [{'name': '1.3.18-版本控制'}]}, 'comments': {'nodes': []}}, {'title': 'Follow 初体验', 'number': 92, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/92', 'createdAt': '2024-10-29T09:10:42Z', 'lastEditedAt': '2024-10-31T03:00:25Z', 'updatedAt': '2024-10-31T03:00:25Z', 'body': '在 2024 年国庆前后的这一段时间，[Follow](https://follow.is/) 的这个号称 Next-Gen Information Browser 的 RSS 阅读器在各大平台相当的火，各种疯抢激活码的帖子也是起此彼伏。直到 10 月 24，开始公测，上去体验了一下，发现也就跟其它 RSS 软件没啥太大区别，并没有说的那么玄乎。\r\n\r\n<!-- more -->\r\n\r\n## 卡顿\r\n\r\n有人提到的公测遇到的第一个问题 **"卡"**，加载缓慢。这个问题，我也感受到了，我一直用的 Web 版本，刚开始的时候的确不够流畅。有人说这跟代理工具和节点有关，通过更换工具和节点解决。\r\n\r\n## 解析异常\r\n\r\n一个 RSS 最核心的还是要能订阅并正常获取并解析订阅源的内容。这一点 Follow 给我的感觉不好。在订阅 [袁凡](https://yuanfan.rbind.io/) 老师的博客，就出现了无法正常解析。     \r\n![follow-earfanfan](https://kg.weiyan.cc/2024/10/follow-earfanfan.png)\r\n\r\n同样的订阅，在 [QiReader](https://github.com/shenweiyan/Knowledge-Garden/discussions/73) 上却表现很好。     \r\n![qireader-earfanfan](https://kg.weiyan.cc/2024/10/qireader-earfanfan.png)\r\n\r\n\r\n## 列表赚钱\r\n\r\n> 之前为什么水军这么多到处发订阅列表，今天用了下才知道原来 RSS 列表真的可以赚钱。第一次见到这种创新，和之前的饥饿营销绝配了。然而阅读器本身做得不怎样。    \r\n\r\n很同意这个评论，对于这一种赚钱方式，的确第一次见到。\r\n\r\n## 其他看法\r\n\r\n在细节处理，希望这一款 **Next-Gen Information Browser** 继续打磨。\r\n\r\n![follow-joe-hou](https://kg.weiyan.cc/2024/10/follow-joe-hou.png)', 'bodyText': '在 2024 年国庆前后的这一段时间，Follow 的这个号称 Next-Gen Information Browser 的 RSS 阅读器在各大平台相当的火，各种疯抢激活码的帖子也是起此彼伏。直到 10 月 24，开始公测，上去体验了一下，发现也就跟其它 RSS 软件没啥太大区别，并没有说的那么玄乎。\n\n卡顿\n有人提到的公测遇到的第一个问题 "卡"，加载缓慢。这个问题，我也感受到了，我一直用的 Web 版本，刚开始的时候的确不够流畅。有人说这跟代理工具和节点有关，通过更换工具和节点解决。\n解析异常\n一个 RSS 最核心的还是要能订阅并正常获取并解析订阅源的内容。这一点 Follow 给我的感觉不好。在订阅 袁凡 老师的博客，就出现了无法正常解析。\n\n同样的订阅，在 QiReader 上却表现很好。\n\n列表赚钱\n\n之前为什么水军这么多到处发订阅列表，今天用了下才知道原来 RSS 列表真的可以赚钱。第一次见到这种创新，和之前的饥饿营销绝配了。然而阅读器本身做得不怎样。\n\n很同意这个评论，对于这一种赚钱方式，的确第一次见到。\n其他看法\n在细节处理，希望这一款 Next-Gen Information Browser 继续打磨。', 'bodyHTML': '<p dir="auto">在 2024 年国庆前后的这一段时间，<a href="https://follow.is/" rel="nofollow">Follow</a> 的这个号称 Next-Gen Information Browser 的 RSS 阅读器在各大平台相当的火，各种疯抢激活码的帖子也是起此彼伏。直到 10 月 24，开始公测，上去体验了一下，发现也就跟其它 RSS 软件没啥太大区别，并没有说的那么玄乎。</p>\n\n<h2 dir="auto">卡顿</h2>\n<p dir="auto">有人提到的公测遇到的第一个问题 <strong>"卡"</strong>，加载缓慢。这个问题，我也感受到了，我一直用的 Web 版本，刚开始的时候的确不够流畅。有人说这跟代理工具和节点有关，通过更换工具和节点解决。</p>\n<h2 dir="auto">解析异常</h2>\n<p dir="auto">一个 RSS 最核心的还是要能订阅并正常获取并解析订阅源的内容。这一点 Follow 给我的感觉不好。在订阅 <a href="https://yuanfan.rbind.io/" rel="nofollow">袁凡</a> 老师的博客，就出现了无法正常解析。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/e92b7eb1e09a20538353219627ac1b6417e494010ca598c6821cafc035cf948c/68747470733a2f2f6b672e77656979616e2e63632f323032342f31302f666f6c6c6f772d65617266616e66616e2e706e67"><img src="https://camo.githubusercontent.com/e92b7eb1e09a20538353219627ac1b6417e494010ca598c6821cafc035cf948c/68747470733a2f2f6b672e77656979616e2e63632f323032342f31302f666f6c6c6f772d65617266616e66616e2e706e67" alt="follow-earfanfan" data-canonical-src="https://kg.weiyan.cc/2024/10/follow-earfanfan.png" style="max-width: 100%;"></a></p>\n<p dir="auto">同样的订阅，在 <a href="https://github.com/shenweiyan/Knowledge-Garden/discussions/73" data-hovercard-type="discussion" data-hovercard-url="/shenweiyan/Digital-Garden/discussions/73/hovercard">QiReader</a> 上却表现很好。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/2f3db1d62cb760fe9e7958159199b5b4a0e12a11be04eb2287bc0174c581cba3/68747470733a2f2f6b672e77656979616e2e63632f323032342f31302f71697265616465722d65617266616e66616e2e706e67"><img src="https://camo.githubusercontent.com/2f3db1d62cb760fe9e7958159199b5b4a0e12a11be04eb2287bc0174c581cba3/68747470733a2f2f6b672e77656979616e2e63632f323032342f31302f71697265616465722d65617266616e66616e2e706e67" alt="qireader-earfanfan" data-canonical-src="https://kg.weiyan.cc/2024/10/qireader-earfanfan.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">列表赚钱</h2>\n<blockquote>\n<p dir="auto">之前为什么水军这么多到处发订阅列表，今天用了下才知道原来 RSS 列表真的可以赚钱。第一次见到这种创新，和之前的饥饿营销绝配了。然而阅读器本身做得不怎样。</p>\n</blockquote>\n<p dir="auto">很同意这个评论，对于这一种赚钱方式，的确第一次见到。</p>\n<h2 dir="auto">其他看法</h2>\n<p dir="auto">在细节处理，希望这一款 <strong>Next-Gen Information Browser</strong> 继续打磨。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/85fb77f4ef2def87891be85863ca25d545ac1ca09f50f9b78b4d163cffbe27d1/68747470733a2f2f6b672e77656979616e2e63632f323032342f31302f666f6c6c6f772d6a6f652d686f752e706e67"><img src="https://camo.githubusercontent.com/85fb77f4ef2def87891be85863ca25d545ac1ca09f50f9b78b4d163cffbe27d1/68747470733a2f2f6b672e77656979616e2e63632f323032342f31302f666f6c6c6f772d6a6f652d686f752e706e67" alt="follow-joe-hou" data-canonical-src="https://kg.weiyan.cc/2024/10/follow-joe-hou.png" style="max-width: 100%;"></a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': 'hisat2-build RAM 不足', 'number': 91, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/91', 'createdAt': '2024-10-23T07:39:36Z', 'lastEditedAt': None, 'updatedAt': '2024-10-23T07:39:37Z', 'body': '在 96G RAM 的节点跑 T2T-CHM13v2.0 的 HISAT2 index 时候，发现任务居然被系统 Killed 掉了。\r\n\r\n<!-- more -->\r\n\r\n排查一下才发现是因为 RAM 内存不够！      \r\n![hisat2-resource-usage-summary](https://kg.weiyan.cc/2024/10/hisat2-resource.png)\r\n\r\n> Note: If you use [--snp](https://open.bioqueue.org/home/knowledge/showKnowledge/sig/hisat2-build#--snp), [--ss](https://open.bioqueue.org/home/knowledge/showKnowledge/sig/hisat2-build#--ss), and/or [--exon](https://open.bioqueue.org/home/knowledge/showKnowledge/sig/hisat2-build#--exon), hisat2-build will need about **200 GB** RAM for the human genome size as index building involves a graph construction. Otherwise, you will be able to build an index on your desktop with 8GB RAM.\r\n>    \r\n> From [hisat2-build manual with usage examples | BioQueue Encyclopedia](https://open.bioqueue.org/home/knowledge/showKnowledge/sig/hisat2-build)', 'bodyText': '在 96G RAM 的节点跑 T2T-CHM13v2.0 的 HISAT2 index 时候，发现任务居然被系统 Killed 掉了。\n\n排查一下才发现是因为 RAM 内存不够！\n\n\nNote: If you use --snp, --ss, and/or --exon, hisat2-build will need about 200 GB RAM for the human genome size as index building involves a graph construction. Otherwise, you will be able to build an index on your desktop with 8GB RAM.\nFrom hisat2-build manual with usage examples | BioQueue Encyclopedia', 'bodyHTML': '<p dir="auto">在 96G RAM 的节点跑 T2T-CHM13v2.0 的 HISAT2 index 时候，发现任务居然被系统 Killed 掉了。</p>\n\n<p dir="auto">排查一下才发现是因为 RAM 内存不够！<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/6154f20114bba10ada398f4a085a8646e850cebddae410693cf2618d2fe493e5/68747470733a2f2f6b672e77656979616e2e63632f323032342f31302f6869736174322d7265736f757263652e706e67"><img src="https://camo.githubusercontent.com/6154f20114bba10ada398f4a085a8646e850cebddae410693cf2618d2fe493e5/68747470733a2f2f6b672e77656979616e2e63632f323032342f31302f6869736174322d7265736f757263652e706e67" alt="hisat2-resource-usage-summary" data-canonical-src="https://kg.weiyan.cc/2024/10/hisat2-resource.png" style="max-width: 100%;"></a></p>\n<blockquote>\n<p dir="auto">Note: If you use <a href="https://open.bioqueue.org/home/knowledge/showKnowledge/sig/hisat2-build#--snp" rel="nofollow">--snp</a>, <a href="https://open.bioqueue.org/home/knowledge/showKnowledge/sig/hisat2-build#--ss" rel="nofollow">--ss</a>, and/or <a href="https://open.bioqueue.org/home/knowledge/showKnowledge/sig/hisat2-build#--exon" rel="nofollow">--exon</a>, hisat2-build will need about <strong>200 GB</strong> RAM for the human genome size as index building involves a graph construction. Otherwise, you will be able to build an index on your desktop with 8GB RAM.</p>\n<p dir="auto">From <a href="https://open.bioqueue.org/home/knowledge/showKnowledge/sig/hisat2-build" rel="nofollow">hisat2-build manual with usage examples | BioQueue Encyclopedia</a></p>\n</blockquote>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.1-生信'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': 'Galaxy 平台 release_24.x 升级之路', 'number': 90, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/90', 'createdAt': '2024-10-18T02:40:04Z', 'lastEditedAt': '2025-03-20T01:10:03Z', 'updatedAt': '2025-03-20T01:10:03Z', 'body': '记录一下 Galaxy 分析平台从 **release_20.09** 升级到 **release_24.0**，横跨九个发布版本的升级之路。\r\n\r\n<!-- more -->\r\n\r\n## 为什么要升级\r\n\r\n很主要的一个原因是随着新技术的更新，旧版本的使用可能会存在一些安全隐患，尤其对于提供互联网公开访问的平台。新版本的升级有助于捕获并应用所有先前的安全更新，以确保平台的安全性。\r\n\r\n## 版本选择\r\n\r\n最开始选择的是 [release_24.1](https://docs.galaxyproject.org/en/master/releases/24.1_announce_user.html) 版本，但好不容易安装完成后才发现，这个新版本中增加了一个常规途径下无法隐藏的 **Activity Bar Interface**，一时间无法忍受。\r\n![23.1-activity-bar](https://kg.weiyan.cc/2024/10/23.1-activity-bar.png)     \r\n![galaxy-24.1](https://kg.weiyan.cc/2024/10/galaxy-24.1.png)\r\n\r\n第二个原因是，后台 PostgreSQL 数据库的升级遇到了 [function gen_random_uuid() does not exist](https://help.galaxyproject.org/t/database-upgrade-error/13687) 异常，一下子没法解决也不想去升级 PostgreSQL 版本。\r\n\r\n所以，最终选择了从 **release_20.09** 升级到次新的 **release_24.0** 版本方案。\r\n\r\n## 安装系统环境\r\n\r\n这里以 release_24.1 作为示例，该环境要求同样适用于 release_24.0。\r\n\r\nGalaxy release_24.1 默认安装 node-v18.12.1，参考：`run.sh` → `./scripts/common_startup_functions.sh` → `./scripts/common_startup.sh` → `nodeenv -n "$NODE_VERSION" -p` 的安装代码。\r\n\r\nnode-v18.12.1 下载地址：<https://nodejs.org/download/release/v18.12.1/>\r\n\r\nnode-v18.12.1 要求 g++ 8.3.0 or clang++ 8.0.0：    \r\n![node-v18.12.1-gcc](https://kg.weiyan.cc/2024/10/node-v18.12.1-gcc.webp)\r\n\r\n可以通过安装 Devtoolset 的方式解决：    \r\n\r\n1. 手动调整  CentOS 7 的 SCL YUM 源（也可以 yum 安装），注意变更 `baseurl` 为阿里云或者其他的源链接。\r\n   ```bash\r\n   # 会默认在 /etc/yum.repos.d 下生成 2 个 repo 源文件\r\n   # CentOS-SCLo-scl.repo\r\n   # CentOS-SCLo-scl-rh.repo\r\n   yum install centos-release-scl centos-release-scl-rh\r\n   ```\r\n2. 更新 yum 源的缓存。\r\n   ```bash\r\n   cd /etc/yum.repos.d\r\n   yum clean all\r\n   yum makecache\r\n   ```\r\n3. 安装 scl-utils，scl-utils 是管理 SCL (Software Collection) 环境设置和运行软件的一套软件工具。\r\n   ```bash\r\n   yum install scl-utils\r\n   ```\r\n4. 安装 devtoolset-9。\r\n   ```bash\r\n   yum install devtoolset-9\r\n   ```\r\n5. 激活 devtoolset-9。\r\n   ```bash\r\n   source /opt/rh/devtoolset-9/enable\r\n   ```\r\n\r\n## Python 环境\r\n\r\nGalaxy 要求 Python >= 3.8，node-v18.12.1 要求 3.6<=Python<=3.10，这里选择 Python-3.9.18，安装如下。\r\n\r\n```bash\r\nwget https://www.python.org/ftp/python/3.9.18/Python-3.9.18.tgz\r\ntar zvxf Python-3.9.18.tgz\r\ncd Python-3.9.18\r\n$enabledevtoolset9\r\nexport TCLTK_LIBS="-L/home/shenweiyan/software/tcltK-8.5.19/lib -ltcl8.5 -ltk8.5"\r\nexport TCLTK_CFLAGS="-I/home/shenweiyan/software/tcltK-8.5.19/include"\r\n./configure --enable-optimizations --prefix=/home/shenweiyan/software/python-3.9.18 --with-openssl=/home/shenweiyan/software/openssl-1.1.1/ --with-tcltk-includes="-I/home/shenweiyan/software/tcltK-8.5.19/include" --with-tcltk-libs="-L/home/shenweiyan/software/tcltK-8.5.19/lib -ltcl8.5 -ltk8.5" \r\nmake -j 4\r\nmake install\r\n```\r\n\r\nPython-3.9.18 安装完成后，避免 `ssl` 模块无法正常 `import` 使用，需要在环境中增加以下设置。\r\n```bash\r\nexport LD_LIBRARY_PATH=/home/shenweiyan/software/openssl-1.1.1/lib:$LD_LIBRARY_PATH\r\n```\r\n\r\n## Node 环境\r\n\r\nGalaxy 的 `sh run.sh` 默认通过 `ssl` 的方式安装已经提前编译好的 node-v18.12.1-linux-x64.tar.gz（直接解压即可使用），对于系统版本比较低的服务器（如 CentOS 7）会存在 GLIBC 异常，因此需要调整为 `ignore_ssl_certs` 的下载方式 + source 源码安装的方式安装 node-v18.12.1。     \r\n![nodeenv--help](https://kg.weiyan.tech/2024/10/nodeenv-help.webp)\r\n\r\n所以，最终的方法为调整 `./scripts/common_startup.sh` 中 `nodeenv -n "$NODE_VERSION" -p` 的安装代码如下：\r\n```bash\r\nnodeenv -n "$NODE_VERSION" -p --source --ignore_ssl_certs --jobs=1\r\n```\r\n\r\nnode-v18.12.1 下载地址：<https://nodejs.org/download/release/v18.12.1/>。\r\n\r\n由于编译非常耗时（4核8G 的服务器编译了 1 个小时左右），且对 Python 版本有要求，建议手动安装，具体安装步骤如下。\r\n```bash\r\nshenweiyan@centos-vm-7 10:30:34 /home/shenweiyan/src/node-v18.12.1\r\n$ ./configure --prefix=/home/shenweiyan/software/node-v18.12.1\r\nNode.js configure: Found Python 3.11.6...\r\nPlease use python3.10 or python3.9 or python3.8 or python3.7 or python3.6.\r\n```\r\n\r\n```bash\r\n$ wget https://nodejs.org/download/release/v18.12.1/node-v18.12.1.tar.gz\r\n$ tar zvxf node-v18.12.1.tar.gz\r\n$ cd node-v18.12.1\r\n$ source /opt/rh/devtoolset-9/enable\r\n$ ./configure --prefix=/home/shenweiyan/software/node-v18.12.1\r\nNode.js configure: Found Python 3.9.18...\r\nINFO: configure completed successfully\r\n$ make -j 4\r\n$ make install\r\n```\r\n\r\n## Yarn 环境\r\n\r\n注意要先设置 `npm` 的路径，如果有多个版本的 `npm`，会因为版本混乱导致语法异常。\r\n\r\n```bash\r\nexport PATH=/home/shenweiyan/software/node-v18.12.1/bin:$PATH\r\n/home/shenweiyan/software/node-v18.12.1/bin/npm install --global yarn\r\n```\r\n\r\n## pip 源\r\n\r\nGalaxy 在安装 `requirements.txt` 的时候默认使用下面两个源：\r\n\r\n- <https://wheels.galaxyproject.org/simple>\r\n- <https://pypi.python.org/simple>\r\n\r\n对于国内服务器，可以考虑更换为阿里云或者清华大学的 pip 源。可以：\r\n\r\n- 在 `scripts/common_startup.sh` 中修改：\r\n  ```bash\r\n  : ${PYPI_INDEX_URL:="https://mirrors.aliyun.com/pypi/simple/"}\r\n  ```\r\n\r\n- 在 `requirements.txt` 头部增加：\r\n  ```bash\r\n  -i https://mirrors.aliyun.com/pypi/simple/\r\n  --extra-index-url https://wheels.galaxyproject.org/simple\r\n  ```\r\n\r\n## 数据库升级\r\n\r\n这是本次 Galaxy 核心版本升级时候遇到的最大问题。\r\n\r\n由于 Galaxy 在 release_21.05 新增加了一个 [`history_audit`](https://github.com/galaxyproject/galaxy/pull/11914) 数据表，release_20.09 的数据库直接执行 `sh manage_db.sh upgrade` 升级的时候 `history_audit` 数据表并不会一并创建和更新，因此最终导致在 Galaxy 服务启动的时候发生错误。\r\n\r\n这应该是数据库升级时候的一个bug，经过摸索发现，目前可以参考下面的文章，通过分步升级的方式解决。\r\n\r\n- <https://mp.weixin.qq.com/s/arRZ-3mMrpUIsXYuqg4sGQ>\r\n\r\n以上解决方法，参考：[galaxyproject/galaxy #19016](https://github.com/galaxyproject/galaxy/issues/19016)   \r\n  \r\n![galaxy-issues-19016](https://kg.weiyan.cc/2024/10/galaxy-issues-19016.png)\r\n\r\n## 总结\r\n\r\n更新后的 release_24.0 界面看起来比旧版本要更加清爽舒服一些，各个页面的汉化功能也有所改善，新增的 Notifications 功能也挺不错，总之升级之后各个方面还是挺满意的，其他细节和功能还在体验中。\r\n', 'bodyText': '记录一下 Galaxy 分析平台从 release_20.09 升级到 release_24.0，横跨九个发布版本的升级之路。\n\n为什么要升级\n很主要的一个原因是随着新技术的更新，旧版本的使用可能会存在一些安全隐患，尤其对于提供互联网公开访问的平台。新版本的升级有助于捕获并应用所有先前的安全更新，以确保平台的安全性。\n版本选择\n最开始选择的是 release_24.1 版本，但好不容易安装完成后才发现，这个新版本中增加了一个常规途径下无法隐藏的 Activity Bar Interface，一时间无法忍受。\n\n\n第二个原因是，后台 PostgreSQL 数据库的升级遇到了 function gen_random_uuid() does not exist 异常，一下子没法解决也不想去升级 PostgreSQL 版本。\n所以，最终选择了从 release_20.09 升级到次新的 release_24.0 版本方案。\n安装系统环境\n这里以 release_24.1 作为示例，该环境要求同样适用于 release_24.0。\nGalaxy release_24.1 默认安装 node-v18.12.1，参考：run.sh → ./scripts/common_startup_functions.sh → ./scripts/common_startup.sh → nodeenv -n "$NODE_VERSION" -p 的安装代码。\nnode-v18.12.1 下载地址：https://nodejs.org/download/release/v18.12.1/\nnode-v18.12.1 要求 g++ 8.3.0 or clang++ 8.0.0：\n\n可以通过安装 Devtoolset 的方式解决：\n\n手动调整  CentOS 7 的 SCL YUM 源（也可以 yum 安装），注意变更 baseurl 为阿里云或者其他的源链接。\n# 会默认在 /etc/yum.repos.d 下生成 2 个 repo 源文件\n# CentOS-SCLo-scl.repo\n# CentOS-SCLo-scl-rh.repo\nyum install centos-release-scl centos-release-scl-rh\n\n更新 yum 源的缓存。\ncd /etc/yum.repos.d\nyum clean all\nyum makecache\n\n安装 scl-utils，scl-utils 是管理 SCL (Software Collection) 环境设置和运行软件的一套软件工具。\nyum install scl-utils\n\n安装 devtoolset-9。\nyum install devtoolset-9\n\n激活 devtoolset-9。\nsource /opt/rh/devtoolset-9/enable\n\n\nPython 环境\nGalaxy 要求 Python >= 3.8，node-v18.12.1 要求 3.6<=Python<=3.10，这里选择 Python-3.9.18，安装如下。\nwget https://www.python.org/ftp/python/3.9.18/Python-3.9.18.tgz\ntar zvxf Python-3.9.18.tgz\ncd Python-3.9.18\n$enabledevtoolset9\nexport TCLTK_LIBS="-L/home/shenweiyan/software/tcltK-8.5.19/lib -ltcl8.5 -ltk8.5"\nexport TCLTK_CFLAGS="-I/home/shenweiyan/software/tcltK-8.5.19/include"\n./configure --enable-optimizations --prefix=/home/shenweiyan/software/python-3.9.18 --with-openssl=/home/shenweiyan/software/openssl-1.1.1/ --with-tcltk-includes="-I/home/shenweiyan/software/tcltK-8.5.19/include" --with-tcltk-libs="-L/home/shenweiyan/software/tcltK-8.5.19/lib -ltcl8.5 -ltk8.5" \nmake -j 4\nmake install\nPython-3.9.18 安装完成后，避免 ssl 模块无法正常 import 使用，需要在环境中增加以下设置。\nexport LD_LIBRARY_PATH=/home/shenweiyan/software/openssl-1.1.1/lib:$LD_LIBRARY_PATH\nNode 环境\nGalaxy 的 sh run.sh 默认通过 ssl 的方式安装已经提前编译好的 node-v18.12.1-linux-x64.tar.gz（直接解压即可使用），对于系统版本比较低的服务器（如 CentOS 7）会存在 GLIBC 异常，因此需要调整为 ignore_ssl_certs 的下载方式 + source 源码安装的方式安装 node-v18.12.1。\n\n所以，最终的方法为调整 ./scripts/common_startup.sh 中 nodeenv -n "$NODE_VERSION" -p 的安装代码如下：\nnodeenv -n "$NODE_VERSION" -p --source --ignore_ssl_certs --jobs=1\nnode-v18.12.1 下载地址：https://nodejs.org/download/release/v18.12.1/。\n由于编译非常耗时（4核8G 的服务器编译了 1 个小时左右），且对 Python 版本有要求，建议手动安装，具体安装步骤如下。\nshenweiyan@centos-vm-7 10:30:34 /home/shenweiyan/src/node-v18.12.1\n$ ./configure --prefix=/home/shenweiyan/software/node-v18.12.1\nNode.js configure: Found Python 3.11.6...\nPlease use python3.10 or python3.9 or python3.8 or python3.7 or python3.6.\n$ wget https://nodejs.org/download/release/v18.12.1/node-v18.12.1.tar.gz\n$ tar zvxf node-v18.12.1.tar.gz\n$ cd node-v18.12.1\n$ source /opt/rh/devtoolset-9/enable\n$ ./configure --prefix=/home/shenweiyan/software/node-v18.12.1\nNode.js configure: Found Python 3.9.18...\nINFO: configure completed successfully\n$ make -j 4\n$ make install\nYarn 环境\n注意要先设置 npm 的路径，如果有多个版本的 npm，会因为版本混乱导致语法异常。\nexport PATH=/home/shenweiyan/software/node-v18.12.1/bin:$PATH\n/home/shenweiyan/software/node-v18.12.1/bin/npm install --global yarn\npip 源\nGalaxy 在安装 requirements.txt 的时候默认使用下面两个源：\n\nhttps://wheels.galaxyproject.org/simple\nhttps://pypi.python.org/simple\n\n对于国内服务器，可以考虑更换为阿里云或者清华大学的 pip 源。可以：\n\n\n在 scripts/common_startup.sh 中修改：\n: ${PYPI_INDEX_URL:="https://mirrors.aliyun.com/pypi/simple/"}\n\n\n在 requirements.txt 头部增加：\n-i https://mirrors.aliyun.com/pypi/simple/\n--extra-index-url https://wheels.galaxyproject.org/simple\n\n\n数据库升级\n这是本次 Galaxy 核心版本升级时候遇到的最大问题。\n由于 Galaxy 在 release_21.05 新增加了一个 history_audit 数据表，release_20.09 的数据库直接执行 sh manage_db.sh upgrade 升级的时候 history_audit 数据表并不会一并创建和更新，因此最终导致在 Galaxy 服务启动的时候发生错误。\n这应该是数据库升级时候的一个bug，经过摸索发现，目前可以参考下面的文章，通过分步升级的方式解决。\n\nhttps://mp.weixin.qq.com/s/arRZ-3mMrpUIsXYuqg4sGQ\n\n以上解决方法，参考：galaxyproject/galaxy #19016\n\n总结\n更新后的 release_24.0 界面看起来比旧版本要更加清爽舒服一些，各个页面的汉化功能也有所改善，新增的 Notifications 功能也挺不错，总之升级之后各个方面还是挺满意的，其他细节和功能还在体验中。', 'bodyHTML': '<p dir="auto">记录一下 Galaxy 分析平台从 <strong>release_20.09</strong> 升级到 <strong>release_24.0</strong>，横跨九个发布版本的升级之路。</p>\n\n<h2 dir="auto">为什么要升级</h2>\n<p dir="auto">很主要的一个原因是随着新技术的更新，旧版本的使用可能会存在一些安全隐患，尤其对于提供互联网公开访问的平台。新版本的升级有助于捕获并应用所有先前的安全更新，以确保平台的安全性。</p>\n<h2 dir="auto">版本选择</h2>\n<p dir="auto">最开始选择的是 <a href="https://docs.galaxyproject.org/en/master/releases/24.1_announce_user.html" rel="nofollow">release_24.1</a> 版本，但好不容易安装完成后才发现，这个新版本中增加了一个常规途径下无法隐藏的 <strong>Activity Bar Interface</strong>，一时间无法忍受。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/94b458de7a9afa4cccb540097badfa4d97e0b48b7fff152946c29443fb6d9c13/68747470733a2f2f6b672e77656979616e2e63632f323032342f31302f32332e312d61637469766974792d6261722e706e67"><img src="https://camo.githubusercontent.com/94b458de7a9afa4cccb540097badfa4d97e0b48b7fff152946c29443fb6d9c13/68747470733a2f2f6b672e77656979616e2e63632f323032342f31302f32332e312d61637469766974792d6261722e706e67" alt="23.1-activity-bar" data-canonical-src="https://kg.weiyan.cc/2024/10/23.1-activity-bar.png" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/ac8f1f7726175d8087b84d45657ab5999b0a746d9d60f7a0963815ec01feda20/68747470733a2f2f6b672e77656979616e2e63632f323032342f31302f67616c6178792d32342e312e706e67"><img src="https://camo.githubusercontent.com/ac8f1f7726175d8087b84d45657ab5999b0a746d9d60f7a0963815ec01feda20/68747470733a2f2f6b672e77656979616e2e63632f323032342f31302f67616c6178792d32342e312e706e67" alt="galaxy-24.1" data-canonical-src="https://kg.weiyan.cc/2024/10/galaxy-24.1.png" style="max-width: 100%;"></a></p>\n<p dir="auto">第二个原因是，后台 PostgreSQL 数据库的升级遇到了 <a href="https://help.galaxyproject.org/t/database-upgrade-error/13687" rel="nofollow">function gen_random_uuid() does not exist</a> 异常，一下子没法解决也不想去升级 PostgreSQL 版本。</p>\n<p dir="auto">所以，最终选择了从 <strong>release_20.09</strong> 升级到次新的 <strong>release_24.0</strong> 版本方案。</p>\n<h2 dir="auto">安装系统环境</h2>\n<p dir="auto">这里以 release_24.1 作为示例，该环境要求同样适用于 release_24.0。</p>\n<p dir="auto">Galaxy release_24.1 默认安装 node-v18.12.1，参考：<code class="notranslate">run.sh</code> → <code class="notranslate">./scripts/common_startup_functions.sh</code> → <code class="notranslate">./scripts/common_startup.sh</code> → <code class="notranslate">nodeenv -n "$NODE_VERSION" -p</code> 的安装代码。</p>\n<p dir="auto">node-v18.12.1 下载地址：<a href="https://nodejs.org/download/release/v18.12.1/" rel="nofollow">https://nodejs.org/download/release/v18.12.1/</a></p>\n<p dir="auto">node-v18.12.1 要求 g++ 8.3.0 or clang++ 8.0.0：<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/ebf2441c9af519b655c284f7aeb88f98e9fbac47cc23ae34560b2bde0b430771/68747470733a2f2f6b672e77656979616e2e63632f323032342f31302f6e6f64652d7631382e31322e312d6763632e77656270"><img src="https://camo.githubusercontent.com/ebf2441c9af519b655c284f7aeb88f98e9fbac47cc23ae34560b2bde0b430771/68747470733a2f2f6b672e77656979616e2e63632f323032342f31302f6e6f64652d7631382e31322e312d6763632e77656270" alt="node-v18.12.1-gcc" data-canonical-src="https://kg.weiyan.cc/2024/10/node-v18.12.1-gcc.webp" style="max-width: 100%;"></a></p>\n<p dir="auto">可以通过安装 Devtoolset 的方式解决：</p>\n<ol dir="auto">\n<li>手动调整  CentOS 7 的 SCL YUM 源（也可以 yum 安装），注意变更 <code class="notranslate">baseurl</code> 为阿里云或者其他的源链接。\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# 会默认在 /etc/yum.repos.d 下生成 2 个 repo 源文件\n# CentOS-SCLo-scl.repo\n# CentOS-SCLo-scl-rh.repo\nyum install centos-release-scl centos-release-scl-rh"><pre class="notranslate"><span class="pl-c"><span class="pl-c">#</span> 会默认在 /etc/yum.repos.d 下生成 2 个 repo 源文件</span>\n<span class="pl-c"><span class="pl-c">#</span> CentOS-SCLo-scl.repo</span>\n<span class="pl-c"><span class="pl-c">#</span> CentOS-SCLo-scl-rh.repo</span>\nyum install centos-release-scl centos-release-scl-rh</pre></div>\n</li>\n<li>更新 yum 源的缓存。\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="cd /etc/yum.repos.d\nyum clean all\nyum makecache"><pre class="notranslate"><span class="pl-c1">cd</span> /etc/yum.repos.d\nyum clean all\nyum makecache</pre></div>\n</li>\n<li>安装 scl-utils，scl-utils 是管理 SCL (Software Collection) 环境设置和运行软件的一套软件工具。\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="yum install scl-utils"><pre class="notranslate">yum install scl-utils</pre></div>\n</li>\n<li>安装 devtoolset-9。\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="yum install devtoolset-9"><pre class="notranslate">yum install devtoolset-9</pre></div>\n</li>\n<li>激活 devtoolset-9。\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="source /opt/rh/devtoolset-9/enable"><pre class="notranslate"><span class="pl-c1">source</span> /opt/rh/devtoolset-9/enable</pre></div>\n</li>\n</ol>\n<h2 dir="auto">Python 环境</h2>\n<p dir="auto">Galaxy 要求 Python &gt;= 3.8，node-v18.12.1 要求 3.6&lt;=Python&lt;=3.10，这里选择 Python-3.9.18，安装如下。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="wget https://www.python.org/ftp/python/3.9.18/Python-3.9.18.tgz\ntar zvxf Python-3.9.18.tgz\ncd Python-3.9.18\n$enabledevtoolset9\nexport TCLTK_LIBS=&quot;-L/home/shenweiyan/software/tcltK-8.5.19/lib -ltcl8.5 -ltk8.5&quot;\nexport TCLTK_CFLAGS=&quot;-I/home/shenweiyan/software/tcltK-8.5.19/include&quot;\n./configure --enable-optimizations --prefix=/home/shenweiyan/software/python-3.9.18 --with-openssl=/home/shenweiyan/software/openssl-1.1.1/ --with-tcltk-includes=&quot;-I/home/shenweiyan/software/tcltK-8.5.19/include&quot; --with-tcltk-libs=&quot;-L/home/shenweiyan/software/tcltK-8.5.19/lib -ltcl8.5 -ltk8.5&quot; \nmake -j 4\nmake install"><pre class="notranslate">wget https://www.python.org/ftp/python/3.9.18/Python-3.9.18.tgz\ntar zvxf Python-3.9.18.tgz\n<span class="pl-c1">cd</span> Python-3.9.18\n<span class="pl-smi">$enabledevtoolset9</span>\n<span class="pl-k">export</span> TCLTK_LIBS=<span class="pl-s"><span class="pl-pds">"</span>-L/home/shenweiyan/software/tcltK-8.5.19/lib -ltcl8.5 -ltk8.5<span class="pl-pds">"</span></span>\n<span class="pl-k">export</span> TCLTK_CFLAGS=<span class="pl-s"><span class="pl-pds">"</span>-I/home/shenweiyan/software/tcltK-8.5.19/include<span class="pl-pds">"</span></span>\n./configure --enable-optimizations --prefix=/home/shenweiyan/software/python-3.9.18 --with-openssl=/home/shenweiyan/software/openssl-1.1.1/ --with-tcltk-includes=<span class="pl-s"><span class="pl-pds">"</span>-I/home/shenweiyan/software/tcltK-8.5.19/include<span class="pl-pds">"</span></span> --with-tcltk-libs=<span class="pl-s"><span class="pl-pds">"</span>-L/home/shenweiyan/software/tcltK-8.5.19/lib -ltcl8.5 -ltk8.5<span class="pl-pds">"</span></span> \nmake -j 4\nmake install</pre></div>\n<p dir="auto">Python-3.9.18 安装完成后，避免 <code class="notranslate">ssl</code> 模块无法正常 <code class="notranslate">import</code> 使用，需要在环境中增加以下设置。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="export LD_LIBRARY_PATH=/home/shenweiyan/software/openssl-1.1.1/lib:$LD_LIBRARY_PATH"><pre class="notranslate"><span class="pl-k">export</span> LD_LIBRARY_PATH=/home/shenweiyan/software/openssl-1.1.1/lib:<span class="pl-smi">$LD_LIBRARY_PATH</span></pre></div>\n<h2 dir="auto">Node 环境</h2>\n<p dir="auto">Galaxy 的 <code class="notranslate">sh run.sh</code> 默认通过 <code class="notranslate">ssl</code> 的方式安装已经提前编译好的 node-v18.12.1-linux-x64.tar.gz（直接解压即可使用），对于系统版本比较低的服务器（如 CentOS 7）会存在 GLIBC 异常，因此需要调整为 <code class="notranslate">ignore_ssl_certs</code> 的下载方式 + source 源码安装的方式安装 node-v18.12.1。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b603acbc7d608d55f8a6d5ba30275041b843032d3e1f9ebdd18b11f4105fb32c/68747470733a2f2f6b672e77656979616e2e746563682f323032342f31302f6e6f6465656e762d68656c702e77656270"><img src="https://camo.githubusercontent.com/b603acbc7d608d55f8a6d5ba30275041b843032d3e1f9ebdd18b11f4105fb32c/68747470733a2f2f6b672e77656979616e2e746563682f323032342f31302f6e6f6465656e762d68656c702e77656270" alt="nodeenv--help" data-canonical-src="https://kg.weiyan.tech/2024/10/nodeenv-help.webp" style="max-width: 100%;"></a></p>\n<p dir="auto">所以，最终的方法为调整 <code class="notranslate">./scripts/common_startup.sh</code> 中 <code class="notranslate">nodeenv -n "$NODE_VERSION" -p</code> 的安装代码如下：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="nodeenv -n &quot;$NODE_VERSION&quot; -p --source --ignore_ssl_certs --jobs=1"><pre class="notranslate">nodeenv -n <span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$NODE_VERSION</span><span class="pl-pds">"</span></span> -p --source --ignore_ssl_certs --jobs=1</pre></div>\n<p dir="auto">node-v18.12.1 下载地址：<a href="https://nodejs.org/download/release/v18.12.1/" rel="nofollow">https://nodejs.org/download/release/v18.12.1/</a>。</p>\n<p dir="auto">由于编译非常耗时（4核8G 的服务器编译了 1 个小时左右），且对 Python 版本有要求，建议手动安装，具体安装步骤如下。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="shenweiyan@centos-vm-7 10:30:34 /home/shenweiyan/src/node-v18.12.1\n$ ./configure --prefix=/home/shenweiyan/software/node-v18.12.1\nNode.js configure: Found Python 3.11.6...\nPlease use python3.10 or python3.9 or python3.8 or python3.7 or python3.6."><pre class="notranslate">shenweiyan@centos-vm-7 10:30:34 /home/shenweiyan/src/node-v18.12.1\n$ ./configure --prefix=/home/shenweiyan/software/node-v18.12.1\nNode.js configure: Found Python 3.11.6...\nPlease use python3.10 or python3.9 or python3.8 or python3.7 or python3.6.</pre></div>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ wget https://nodejs.org/download/release/v18.12.1/node-v18.12.1.tar.gz\n$ tar zvxf node-v18.12.1.tar.gz\n$ cd node-v18.12.1\n$ source /opt/rh/devtoolset-9/enable\n$ ./configure --prefix=/home/shenweiyan/software/node-v18.12.1\nNode.js configure: Found Python 3.9.18...\nINFO: configure completed successfully\n$ make -j 4\n$ make install"><pre class="notranslate">$ wget https://nodejs.org/download/release/v18.12.1/node-v18.12.1.tar.gz\n$ tar zvxf node-v18.12.1.tar.gz\n$ <span class="pl-c1">cd</span> node-v18.12.1\n$ <span class="pl-c1">source</span> /opt/rh/devtoolset-9/enable\n$ ./configure --prefix=/home/shenweiyan/software/node-v18.12.1\nNode.js configure: Found Python 3.9.18...\nINFO: configure completed successfully\n$ make -j 4\n$ make install</pre></div>\n<h2 dir="auto">Yarn 环境</h2>\n<p dir="auto">注意要先设置 <code class="notranslate">npm</code> 的路径，如果有多个版本的 <code class="notranslate">npm</code>，会因为版本混乱导致语法异常。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="export PATH=/home/shenweiyan/software/node-v18.12.1/bin:$PATH\n/home/shenweiyan/software/node-v18.12.1/bin/npm install --global yarn"><pre class="notranslate"><span class="pl-k">export</span> PATH=/home/shenweiyan/software/node-v18.12.1/bin:<span class="pl-smi">$PATH</span>\n/home/shenweiyan/software/node-v18.12.1/bin/npm install --global yarn</pre></div>\n<h2 dir="auto">pip 源</h2>\n<p dir="auto">Galaxy 在安装 <code class="notranslate">requirements.txt</code> 的时候默认使用下面两个源：</p>\n<ul dir="auto">\n<li><a href="https://wheels.galaxyproject.org/simple" rel="nofollow">https://wheels.galaxyproject.org/simple</a></li>\n<li><a href="https://pypi.python.org/simple" rel="nofollow">https://pypi.python.org/simple</a></li>\n</ul>\n<p dir="auto">对于国内服务器，可以考虑更换为阿里云或者清华大学的 pip 源。可以：</p>\n<ul dir="auto">\n<li>\n<p dir="auto">在 <code class="notranslate">scripts/common_startup.sh</code> 中修改：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content=": ${PYPI_INDEX_URL:=&quot;https://mirrors.aliyun.com/pypi/simple/&quot;}"><pre class="notranslate"><span class="pl-c1">:</span> <span class="pl-smi">${PYPI_INDEX_URL<span class="pl-k">:=</span><span class="pl-s"><span class="pl-pds">"</span>https://mirrors.aliyun.com/pypi/simple/<span class="pl-pds">"</span></span>}</span></pre></div>\n</li>\n<li>\n<p dir="auto">在 <code class="notranslate">requirements.txt</code> 头部增加：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="-i https://mirrors.aliyun.com/pypi/simple/\n--extra-index-url https://wheels.galaxyproject.org/simple"><pre class="notranslate">-i https://mirrors.aliyun.com/pypi/simple/\n--extra-index-url https://wheels.galaxyproject.org/simple</pre></div>\n</li>\n</ul>\n<h2 dir="auto">数据库升级</h2>\n<p dir="auto">这是本次 Galaxy 核心版本升级时候遇到的最大问题。</p>\n<p dir="auto">由于 Galaxy 在 release_21.05 新增加了一个 <a href="https://github.com/galaxyproject/galaxy/pull/11914" data-hovercard-type="pull_request" data-hovercard-url="/galaxyproject/galaxy/pull/11914/hovercard"><code class="notranslate">history_audit</code></a> 数据表，release_20.09 的数据库直接执行 <code class="notranslate">sh manage_db.sh upgrade</code> 升级的时候 <code class="notranslate">history_audit</code> 数据表并不会一并创建和更新，因此最终导致在 Galaxy 服务启动的时候发生错误。</p>\n<p dir="auto">这应该是数据库升级时候的一个bug，经过摸索发现，目前可以参考下面的文章，通过分步升级的方式解决。</p>\n<ul dir="auto">\n<li><a href="https://mp.weixin.qq.com/s/arRZ-3mMrpUIsXYuqg4sGQ" rel="nofollow">https://mp.weixin.qq.com/s/arRZ-3mMrpUIsXYuqg4sGQ</a></li>\n</ul>\n<p dir="auto">以上解决方法，参考：<a href="https://github.com/galaxyproject/galaxy/issues/19016" data-hovercard-type="issue" data-hovercard-url="/galaxyproject/galaxy/issues/19016/hovercard">galaxyproject/galaxy #19016</a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/73593d93851e3da2d664fb0916b5d9d8f450f2b6a61e299da40d3db55cecebe2/68747470733a2f2f6b672e77656979616e2e63632f323032342f31302f67616c6178792d6973737565732d31393031362e706e67"><img src="https://camo.githubusercontent.com/73593d93851e3da2d664fb0916b5d9d8f450f2b6a61e299da40d3db55cecebe2/68747470733a2f2f6b672e77656979616e2e63632f323032342f31302f67616c6178792d6973737565732d31393031362e706e67" alt="galaxy-issues-19016" data-canonical-src="https://kg.weiyan.cc/2024/10/galaxy-issues-19016.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">总结</h2>\n<p dir="auto">更新后的 release_24.0 界面看起来比旧版本要更加清爽舒服一些，各个页面的汉化功能也有所改善，新增的 Notifications 功能也挺不错，总之升级之后各个方面还是挺满意的，其他细节和功能还在体验中。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '3.1-Galaxy'}, 'labels': {'nodes': [{'name': '3.1.x-GalaxyOther'}]}, 'comments': {'nodes': []}}, {'title': '上下班听广播', 'number': 89, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/89', 'createdAt': '2024-09-29T06:11:30Z', 'lastEditedAt': '2024-09-29T06:33:13Z', 'updatedAt': '2024-09-29T07:09:40Z', 'body': '自从切换了电动车的通勤方式，同时就打开了广播的大门。\r\n\r\n<!-- more -->\r\n\r\n![hello-morning](https://kg.weiyan.cc/2024/09/hello-morning.webp)\r\n\r\n符合自己兴趣的电台不好找，尤其是下午下班的这段时间。\r\n\r\n## 珠江第一线\r\n\r\n珠江第一线，朝朝陪你饮早茶！\r\n\r\n早上的选择中个人尤其喜欢珠江经济台的《珠江第一线》，它的播出时间是周一到周五的 07:30-09:00，是珠江经济台重点打造的一档粤语民生新闻名牌节目，李嘉、淼钧、郑达等一众名嘴的组合，加上独具的广府文化韵味，针砭时弊，作风硬朗，嬉笑怒骂，亦庄亦谐，让人在上班的路上更加放松。\r\n\r\n> 《珠江第一线》开播之时，就在广东广播界率先提出“打造听众上班路上的新闻资讯大餐”的口号。节目立足民生视觉，着重在内容碎片化上下功夫，让海量资讯更有层次感，更适合伴随性收听的人群；另外增加生活化话题、软性资讯，讲老百姓身边的故事，塑造老百姓“贴心老友”节目品牌形象；同时强化新闻时评的针对性，聘请最强广播评论专家团队，与市民评论员联袂，每天对社会热点话题进行精辟点评；节目主持人也一改传统的新闻节目播报方式，使用个性化的“说新闻”，节目过程还不时插播上班路上的交通、天气状况，使节目更接地气，更具亲和力。\r\n\r\n## 放工路上\r\n\r\n下班时间段的选择，要说十分喜欢的节目目前没找到，虽然会听同样是珠江经济台的《珠江晚高峰》，但找不到《珠江第一线》的舒适感。\r\n', 'bodyText': '自从切换了电动车的通勤方式，同时就打开了广播的大门。\n\n\n符合自己兴趣的电台不好找，尤其是下午下班的这段时间。\n珠江第一线\n珠江第一线，朝朝陪你饮早茶！\n早上的选择中个人尤其喜欢珠江经济台的《珠江第一线》，它的播出时间是周一到周五的 07:30-09:00，是珠江经济台重点打造的一档粤语民生新闻名牌节目，李嘉、淼钧、郑达等一众名嘴的组合，加上独具的广府文化韵味，针砭时弊，作风硬朗，嬉笑怒骂，亦庄亦谐，让人在上班的路上更加放松。\n\n《珠江第一线》开播之时，就在广东广播界率先提出“打造听众上班路上的新闻资讯大餐”的口号。节目立足民生视觉，着重在内容碎片化上下功夫，让海量资讯更有层次感，更适合伴随性收听的人群；另外增加生活化话题、软性资讯，讲老百姓身边的故事，塑造老百姓“贴心老友”节目品牌形象；同时强化新闻时评的针对性，聘请最强广播评论专家团队，与市民评论员联袂，每天对社会热点话题进行精辟点评；节目主持人也一改传统的新闻节目播报方式，使用个性化的“说新闻”，节目过程还不时插播上班路上的交通、天气状况，使节目更接地气，更具亲和力。\n\n放工路上\n下班时间段的选择，要说十分喜欢的节目目前没找到，虽然会听同样是珠江经济台的《珠江晚高峰》，但找不到《珠江第一线》的舒适感。', 'bodyHTML': '<p dir="auto">自从切换了电动车的通勤方式，同时就打开了广播的大门。</p>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/c8c7f9438077ca0ae4c10c3de251a20d47408d6485fe55a1d6b98f25624a712f/68747470733a2f2f6b672e77656979616e2e63632f323032342f30392f68656c6c6f2d6d6f726e696e672e77656270"><img src="https://camo.githubusercontent.com/c8c7f9438077ca0ae4c10c3de251a20d47408d6485fe55a1d6b98f25624a712f/68747470733a2f2f6b672e77656979616e2e63632f323032342f30392f68656c6c6f2d6d6f726e696e672e77656270" alt="hello-morning" data-canonical-src="https://kg.weiyan.cc/2024/09/hello-morning.webp" style="max-width: 100%;"></a></p>\n<p dir="auto">符合自己兴趣的电台不好找，尤其是下午下班的这段时间。</p>\n<h2 dir="auto">珠江第一线</h2>\n<p dir="auto">珠江第一线，朝朝陪你饮早茶！</p>\n<p dir="auto">早上的选择中个人尤其喜欢珠江经济台的《珠江第一线》，它的播出时间是周一到周五的 07:30-09:00，是珠江经济台重点打造的一档粤语民生新闻名牌节目，李嘉、淼钧、郑达等一众名嘴的组合，加上独具的广府文化韵味，针砭时弊，作风硬朗，嬉笑怒骂，亦庄亦谐，让人在上班的路上更加放松。</p>\n<blockquote>\n<p dir="auto">《珠江第一线》开播之时，就在广东广播界率先提出“打造听众上班路上的新闻资讯大餐”的口号。节目立足民生视觉，着重在内容碎片化上下功夫，让海量资讯更有层次感，更适合伴随性收听的人群；另外增加生活化话题、软性资讯，讲老百姓身边的故事，塑造老百姓“贴心老友”节目品牌形象；同时强化新闻时评的针对性，聘请最强广播评论专家团队，与市民评论员联袂，每天对社会热点话题进行精辟点评；节目主持人也一改传统的新闻节目播报方式，使用个性化的“说新闻”，节目过程还不时插播上班路上的交通、天气状况，使节目更接地气，更具亲和力。</p>\n</blockquote>\n<h2 dir="auto">放工路上</h2>\n<p dir="auto">下班时间段的选择，要说十分喜欢的节目目前没找到，虽然会听同样是珠江经济台的《珠江晚高峰》，但找不到《珠江第一线》的舒适感。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': 'All in one', 'number': 88, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/88', 'createdAt': '2024-09-24T07:36:36Z', 'lastEditedAt': None, 'updatedAt': '2024-12-20T03:53:31Z', 'body': '写笔记，做表格的很多时候，总有一个 All in one 的魔咒在脑海挥之不去，以前用语雀就想当然 All in yuque，后来又想着 All in GitHub，但现实终究是现实。\r\n\r\n<!-- more -->\r\n\r\n没有十全十美的平台，语雀就没有邮箱、日历之类的功能；小记也没有浮墨笔记那么好用。\r\n\r\nGitHub 虽好，但始终有一堵长城横亘在前面，时时刻刻提醒着你小心翼翼。\r\n\r\n现在的飞书，各种功能都很齐全，但是不能实时查看文档的 Markdown，自己也没有能力去造这样一个轮子。有很多的时候，都有一个 All in feishu 的魔咒的诱惑着我，但又一次一次被它的木桶理论劝退。\r\n\r\n知识的沉淀，对于承受的载体没有什么是可以从一而终一成不变的，很多东西虽然分散，但也印证了不要把所有的鸡蛋放进一个篮子。逐渐的，我用上了飞书国际版的邮箱，我用上了语雀（小记/知识库）来记录我的一些碎片想法和文字，最终还是选择 GitHub 来记录这一切。\r\n\r\n不得不说，GitHub 真是个码字的好地方。', 'bodyText': '写笔记，做表格的很多时候，总有一个 All in one 的魔咒在脑海挥之不去，以前用语雀就想当然 All in yuque，后来又想着 All in GitHub，但现实终究是现实。\n\n没有十全十美的平台，语雀就没有邮箱、日历之类的功能；小记也没有浮墨笔记那么好用。\nGitHub 虽好，但始终有一堵长城横亘在前面，时时刻刻提醒着你小心翼翼。\n现在的飞书，各种功能都很齐全，但是不能实时查看文档的 Markdown，自己也没有能力去造这样一个轮子。有很多的时候，都有一个 All in feishu 的魔咒的诱惑着我，但又一次一次被它的木桶理论劝退。\n知识的沉淀，对于承受的载体没有什么是可以从一而终一成不变的，很多东西虽然分散，但也印证了不要把所有的鸡蛋放进一个篮子。逐渐的，我用上了飞书国际版的邮箱，我用上了语雀（小记/知识库）来记录我的一些碎片想法和文字，最终还是选择 GitHub 来记录这一切。\n不得不说，GitHub 真是个码字的好地方。', 'bodyHTML': '<p dir="auto">写笔记，做表格的很多时候，总有一个 All in one 的魔咒在脑海挥之不去，以前用语雀就想当然 All in yuque，后来又想着 All in GitHub，但现实终究是现实。</p>\n\n<p dir="auto">没有十全十美的平台，语雀就没有邮箱、日历之类的功能；小记也没有浮墨笔记那么好用。</p>\n<p dir="auto">GitHub 虽好，但始终有一堵长城横亘在前面，时时刻刻提醒着你小心翼翼。</p>\n<p dir="auto">现在的飞书，各种功能都很齐全，但是不能实时查看文档的 Markdown，自己也没有能力去造这样一个轮子。有很多的时候，都有一个 All in feishu 的魔咒的诱惑着我，但又一次一次被它的木桶理论劝退。</p>\n<p dir="auto">知识的沉淀，对于承受的载体没有什么是可以从一而终一成不变的，很多东西虽然分散，但也印证了不要把所有的鸡蛋放进一个篮子。逐渐的，我用上了飞书国际版的邮箱，我用上了语雀（小记/知识库）来记录我的一些碎片想法和文字，最终还是选择 GitHub 来记录这一切。</p>\n<p dir="auto">不得不说，GitHub 真是个码字的好地方。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': [{'body': 'all in obsidian', 'author': {'login': 'R-957'}}]}}, {'title': 'GCC 版本不一致导致的 R magick 包安装错误', 'number': 87, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/87', 'createdAt': '2024-09-10T05:43:01Z', 'lastEditedAt': '2024-09-11T03:00:33Z', 'updatedAt': '2024-09-11T03:00:33Z', 'body': '在安装 Y 叔的 `yyplot` 时候，发现 `magick` 依赖包安装的时候的一些棘手问题，特此记录一下。\r\n\r\n<!-- more -->\r\n\r\n## R-4.0.3 安装\r\n\r\n```r\r\n> library(remotes)\r\n> remotes::install_github("GuangchuangYu/yyplot")\r\n...\r\n* installing *source* package ‘magick’ ...\r\n** package ‘magick’ successfully unpacked and MD5 sums checked\r\n** using staged installation\r\nPackage Magick++ was not found in the pkg-config search path.\r\nPerhaps you should add the directory containing `Magick++.pc\'\r\nto the PKG_CONFIG_PATH environment variable\r\nNo package \'Magick++\' found\r\nUsing PKG_CFLAGS=\r\nUsing PKG_LIBS=-lMagick++-6.Q16 -lMagickWand-6.Q16 -lMagickCore-6.Q16\r\n--------------------------- [ANTICONF] --------------------------------\r\nConfiguration failed to find the Magick++ library. Try installing:\r\n - deb: libmagick++-dev (Debian, Ubuntu)\r\n - rpm: ImageMagick-c++-devel (Fedora, CentOS, RHEL)\r\n - brew: imagemagick or imagemagick@6 (MacOS)\r\nIf Magick++ is already installed, check that \'pkg-config\' is in your\r\nPATH and PKG_CONFIG_PATH contains a Magick++.pc file. If pkg-config\r\nis unavailable you can set INCLUDE_DIR and LIB_DIR manually via:\r\nR CMD INSTALL --configure-vars=\'INCLUDE_DIR=... LIB_DIR=...\'\r\n-------------------------- [ERROR MESSAGE] ---------------------------\r\n<stdin>:1:22: fatal error: Magick++.h: No such file or directory\r\ncompilation terminated.\r\n--------------------------------------------------------------------\r\nERROR: configuration failed for package ‘magick’\r\n* removing ‘/home/shenweiyan/software/R/R-4.0.3/lib64/R/library/magick’\r\nError: Failed to install \'yyplot\' from GitHub:\r\n  (converted from warning) installation of package ‘magick’ had non-zero exit status\r\n> quit()\r\nSave workspace image? [y/n/c]: n\r\n```\r\n\r\n仅在 Bash 环境配置了 `PATH` 和 `PKG_CONFIG_PATH` 是不够的，安装过程会提示动态库的问题。    \r\n```\r\n# export PATH=/home/shenweiyan/software/ImageMagick-7.0.10/bin:$PATH\r\n# export PKG_CONFIG_PATH=/home/shenweiyan/software/ImageMagick-7.0.10/lib/pkgconfig:$PKG_CONFIG_PATH\r\n```\r\n\r\n```r\r\n> library(remotes)\r\n> remotes::install_github("GuangchuangYu/yyplot")\r\n...\r\n** R\r\n** inst\r\n** byte-compile and prepare package for lazy loading\r\n** help\r\n*** installing help indices\r\n** building package indices\r\n** installing vignettes\r\n** testing if installed package can be loaded from temporary location\r\nError: package or namespace load failed for ‘magick’ in dyn.load(file, DLLpath = DLLpath, ...):\r\n unable to load shared object \'/home/shenweiyan/software/R/R-4.0.3/lib64/R/library/00LOCK-magick/00new/magick/libs/magick.so\':\r\n  libMagick++-7.Q16HDRI.so.4: cannot open shared object file: No such file or directory\r\nError: loading failed\r\nExecution halted\r\nERROR: loading failed\r\n* removing ‘/home/shenweiyan/software/R/R-4.0.3/lib64/R/library/magick’\r\nError: Failed to install \'yyplot\' from GitHub:\r\n  (converted from warning) installation of package ‘magick’ had non-zero exit status\r\n> quit()\r\nSave workspace image? [y/n/c]: n\r\n```\r\n最终解决方案：\r\n\r\n1. 手动安装 `ggimage_0.3.1`。\r\n```r\r\npkg <- \'http://cran.r-project.org/src/contrib/Archive/ggimage/ggimage_0.3.1.tar.gz\'\r\ninstall.packages(pkg, repos=NULL, type="source")\r\n```\r\n\r\n2. 配置必要环境。\r\n```bash\r\nexport PATH=/home/shenweiyan/software/ImageMagick-7.0.10/bin:$PATH\r\nexport PKG_CONFIG_PATH=/home/shenweiyan/software/ImageMagick-7.0.10/lib/pkgconfig:$PKG_CONFIG_PATH\r\nexport LD_LIBRARY_PATH=/home/shenweiyan/software/ImageMagick-7.0.10/lib:$LD_LIBRARY_PATH\r\n```\r\n\r\n3. 安装。根据提示，先安装缺失的 `meme` 包，然后再安装 `yyplot`。\r\n```r\r\n> library(remotes)\r\n> options("repos"=c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/"))\r\n> install.packages(\'meme\')\r\n> remotes::install_github("GuangchuangYu/yyplot")\r\n```\r\n\r\n## R-4.3.0 安装\r\n\r\nR-4.3.0 安装 `magick_2.8.4` 会出现 [ropensci/magick#166](https://github.com/ropensci/magick/issues/166) 的问题。根据 [ropensci/magick#166#issuecomment-457875591](https://github.com/ropensci/magick/issues/166#issuecomment-457875591) 的描述，**编译 ImageMagick 的 gcc 需要跟编译 R 的 gcc 保持版本一致**。\r\n\r\n1. 重新编译安装 ImageMagick\r\n```bash\r\nwget https://download.imagemagick.org/archive/releases/ImageMagick-7.0.10-24.tar.xz\r\nextract ImageMagick-7.0.10-24.tar.xz\r\ncd ImageMagick-7.0.10-24\r\n./configure CC=/home/shenweiyan/software/gcc-7.3.0/bin/gcc CXX=/home/shenweiyan/software/gcc-7.3.0/bin/g++ --prefix=/home/shenweiyan/software/ImageMagick-7.0.10-24\r\nmake \r\nmake install\r\n```\r\n\r\n2. 安装 `magick` 包\r\n```bash\r\n# export PATH=/home/shenweiyan/software/ImageMagick-7.0.10-24/bin:$PATH\r\n# export PKG_CONFIG_PATH=/home/shenweiyan/software/ImageMagick-7.0.10-24/lib/pkgconfig:$PKG_CONFIG_PATH\r\n# export LD_LIBRARY_PATH=/home/shenweiyan/software/ImageMagick-7.0.10-24/lib:$LD_LIBRARY_PATH\r\n/home/shenweiyan/software/R/R-4.3.0/bin/R\r\n> options("repos"=c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/"))\r\n> install.packages(\'magick\')\r\n...\r\n```\r\n\r\n3. 根据提示，先安装缺失的 `meme` 包，然后再安装 `yyplot`。\r\n```r\r\n> library(remotes)\r\n> options("repos"=c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/"))\r\n> install.packages(\'meme\')\r\n> remotes::install_github("GuangchuangYu/yyplot")\r\n```', 'bodyText': '在安装 Y 叔的 yyplot 时候，发现 magick 依赖包安装的时候的一些棘手问题，特此记录一下。\n\nR-4.0.3 安装\n> library(remotes)\n> remotes::install_github("GuangchuangYu/yyplot")\n...\n* installing *source* package ‘magick’ ...\n** package ‘magick’ successfully unpacked and MD5 sums checked\n** using staged installation\nPackage Magick++ was not found in the pkg-config search path.\nPerhaps you should add the directory containing `Magick++.pc\'\nto the PKG_CONFIG_PATH environment variable\nNo package \'Magick++\' found\nUsing PKG_CFLAGS=\nUsing PKG_LIBS=-lMagick++-6.Q16 -lMagickWand-6.Q16 -lMagickCore-6.Q16\n--------------------------- [ANTICONF] --------------------------------\nConfiguration failed to find the Magick++ library. Try installing:\n - deb: libmagick++-dev (Debian, Ubuntu)\n - rpm: ImageMagick-c++-devel (Fedora, CentOS, RHEL)\n - brew: imagemagick or imagemagick@6 (MacOS)\nIf Magick++ is already installed, check that \'pkg-config\' is in your\nPATH and PKG_CONFIG_PATH contains a Magick++.pc file. If pkg-config\nis unavailable you can set INCLUDE_DIR and LIB_DIR manually via:\nR CMD INSTALL --configure-vars=\'INCLUDE_DIR=... LIB_DIR=...\'\n-------------------------- [ERROR MESSAGE] ---------------------------\n<stdin>:1:22: fatal error: Magick++.h: No such file or directory\ncompilation terminated.\n--------------------------------------------------------------------\nERROR: configuration failed for package ‘magick’\n* removing ‘/home/shenweiyan/software/R/R-4.0.3/lib64/R/library/magick’\nError: Failed to install \'yyplot\' from GitHub:\n  (converted from warning) installation of package ‘magick’ had non-zero exit status\n> quit()\nSave workspace image? [y/n/c]: n\n仅在 Bash 环境配置了 PATH 和 PKG_CONFIG_PATH 是不够的，安装过程会提示动态库的问题。\n# export PATH=/home/shenweiyan/software/ImageMagick-7.0.10/bin:$PATH\n# export PKG_CONFIG_PATH=/home/shenweiyan/software/ImageMagick-7.0.10/lib/pkgconfig:$PKG_CONFIG_PATH\n\n> library(remotes)\n> remotes::install_github("GuangchuangYu/yyplot")\n...\n** R\n** inst\n** byte-compile and prepare package for lazy loading\n** help\n*** installing help indices\n** building package indices\n** installing vignettes\n** testing if installed package can be loaded from temporary location\nError: package or namespace load failed for ‘magick’ in dyn.load(file, DLLpath = DLLpath, ...):\n unable to load shared object \'/home/shenweiyan/software/R/R-4.0.3/lib64/R/library/00LOCK-magick/00new/magick/libs/magick.so\':\n  libMagick++-7.Q16HDRI.so.4: cannot open shared object file: No such file or directory\nError: loading failed\nExecution halted\nERROR: loading failed\n* removing ‘/home/shenweiyan/software/R/R-4.0.3/lib64/R/library/magick’\nError: Failed to install \'yyplot\' from GitHub:\n  (converted from warning) installation of package ‘magick’ had non-zero exit status\n> quit()\nSave workspace image? [y/n/c]: n\n最终解决方案：\n\n手动安装 ggimage_0.3.1。\n\npkg <- \'http://cran.r-project.org/src/contrib/Archive/ggimage/ggimage_0.3.1.tar.gz\'\ninstall.packages(pkg, repos=NULL, type="source")\n\n配置必要环境。\n\nexport PATH=/home/shenweiyan/software/ImageMagick-7.0.10/bin:$PATH\nexport PKG_CONFIG_PATH=/home/shenweiyan/software/ImageMagick-7.0.10/lib/pkgconfig:$PKG_CONFIG_PATH\nexport LD_LIBRARY_PATH=/home/shenweiyan/software/ImageMagick-7.0.10/lib:$LD_LIBRARY_PATH\n\n安装。根据提示，先安装缺失的 meme 包，然后再安装 yyplot。\n\n> library(remotes)\n> options("repos"=c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/"))\n> install.packages(\'meme\')\n> remotes::install_github("GuangchuangYu/yyplot")\nR-4.3.0 安装\nR-4.3.0 安装 magick_2.8.4 会出现 ropensci/magick#166 的问题。根据 ropensci/magick#166#issuecomment-457875591 的描述，编译 ImageMagick 的 gcc 需要跟编译 R 的 gcc 保持版本一致。\n\n重新编译安装 ImageMagick\n\nwget https://download.imagemagick.org/archive/releases/ImageMagick-7.0.10-24.tar.xz\nextract ImageMagick-7.0.10-24.tar.xz\ncd ImageMagick-7.0.10-24\n./configure CC=/home/shenweiyan/software/gcc-7.3.0/bin/gcc CXX=/home/shenweiyan/software/gcc-7.3.0/bin/g++ --prefix=/home/shenweiyan/software/ImageMagick-7.0.10-24\nmake \nmake install\n\n安装 magick 包\n\n# export PATH=/home/shenweiyan/software/ImageMagick-7.0.10-24/bin:$PATH\n# export PKG_CONFIG_PATH=/home/shenweiyan/software/ImageMagick-7.0.10-24/lib/pkgconfig:$PKG_CONFIG_PATH\n# export LD_LIBRARY_PATH=/home/shenweiyan/software/ImageMagick-7.0.10-24/lib:$LD_LIBRARY_PATH\n/home/shenweiyan/software/R/R-4.3.0/bin/R\n> options("repos"=c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/"))\n> install.packages(\'magick\')\n...\n\n根据提示，先安装缺失的 meme 包，然后再安装 yyplot。\n\n> library(remotes)\n> options("repos"=c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/"))\n> install.packages(\'meme\')\n> remotes::install_github("GuangchuangYu/yyplot")', 'bodyHTML': '<p dir="auto">在安装 Y 叔的 <code class="notranslate">yyplot</code> 时候，发现 <code class="notranslate">magick</code> 依赖包安装的时候的一些棘手问题，特此记录一下。</p>\n\n<h2 dir="auto">R-4.0.3 安装</h2>\n<div class="highlight highlight-source-r notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt; library(remotes)\n&gt; remotes::install_github(&quot;GuangchuangYu/yyplot&quot;)\n...\n* installing *source* package ‘magick’ ...\n** package ‘magick’ successfully unpacked and MD5 sums checked\n** using staged installation\nPackage Magick++ was not found in the pkg-config search path.\nPerhaps you should add the directory containing `Magick++.pc\'\nto the PKG_CONFIG_PATH environment variable\nNo package \'Magick++\' found\nUsing PKG_CFLAGS=\nUsing PKG_LIBS=-lMagick++-6.Q16 -lMagickWand-6.Q16 -lMagickCore-6.Q16\n--------------------------- [ANTICONF] --------------------------------\nConfiguration failed to find the Magick++ library. Try installing:\n - deb: libmagick++-dev (Debian, Ubuntu)\n - rpm: ImageMagick-c++-devel (Fedora, CentOS, RHEL)\n - brew: imagemagick or imagemagick@6 (MacOS)\nIf Magick++ is already installed, check that \'pkg-config\' is in your\nPATH and PKG_CONFIG_PATH contains a Magick++.pc file. If pkg-config\nis unavailable you can set INCLUDE_DIR and LIB_DIR manually via:\nR CMD INSTALL --configure-vars=\'INCLUDE_DIR=... LIB_DIR=...\'\n-------------------------- [ERROR MESSAGE] ---------------------------\n&lt;stdin&gt;:1:22: fatal error: Magick++.h: No such file or directory\ncompilation terminated.\n--------------------------------------------------------------------\nERROR: configuration failed for package ‘magick’\n* removing ‘/home/shenweiyan/software/R/R-4.0.3/lib64/R/library/magick’\nError: Failed to install \'yyplot\' from GitHub:\n  (converted from warning) installation of package ‘magick’ had non-zero exit status\n&gt; quit()\nSave workspace image? [y/n/c]: n"><pre class="notranslate"><span class="pl-k">&gt;</span> library(<span class="pl-smi">remotes</span>)\n<span class="pl-k">&gt;</span> <span class="pl-e">remotes</span><span class="pl-k">::</span>install_github(<span class="pl-s"><span class="pl-pds">"</span>GuangchuangYu/yyplot<span class="pl-pds">"</span></span>)\n<span class="pl-k">...</span>\n<span class="pl-k">*</span> <span class="pl-smi">installing</span> <span class="pl-k">*</span><span class="pl-smi">source</span><span class="pl-k">*</span> <span class="pl-smi">package</span> ‘<span class="pl-smi">magick</span>’ <span class="pl-k">...</span>\n<span class="pl-k">**</span> <span class="pl-smi">package</span> ‘<span class="pl-smi">magick</span>’ <span class="pl-smi">successfully</span> <span class="pl-smi">unpacked</span> <span class="pl-smi">and</span> <span class="pl-smi">MD5</span> <span class="pl-smi">sums</span> <span class="pl-smi">checked</span>\n<span class="pl-k">**</span> <span class="pl-smi">using</span> <span class="pl-smi">staged</span> <span class="pl-smi">installation</span>\n<span class="pl-smi">Package</span> <span class="pl-smi">Magick</span><span class="pl-k">++</span> <span class="pl-smi">was</span> <span class="pl-smi">not</span> <span class="pl-smi">found</span> <span class="pl-k">in</span> <span class="pl-smi">the</span> <span class="pl-smi">pkg</span><span class="pl-k">-</span><span class="pl-smi">config</span> <span class="pl-smi">search</span> <span class="pl-smi">path.</span>\n<span class="pl-smi">Perhaps</span> <span class="pl-smi">you</span> <span class="pl-smi">should</span> <span class="pl-smi">add</span> <span class="pl-smi">the</span> <span class="pl-smi">directory</span> <span class="pl-smi">containing</span> `<span class="pl-smi">Magick</span><span class="pl-k">++</span><span class="pl-smi">.pc</span><span class="pl-s"><span class="pl-pds">\'</span></span>\n<span class="pl-s">to the PKG_CONFIG_PATH environment variable</span>\n<span class="pl-s">No package <span class="pl-pds">\'</span></span><span class="pl-smi">Magick</span><span class="pl-k">++</span><span class="pl-s"><span class="pl-pds">\'</span> found</span>\n<span class="pl-s">Using PKG_CFLAGS=</span>\n<span class="pl-s">Using PKG_LIBS=-lMagick++-6.Q16 -lMagickWand-6.Q16 -lMagickCore-6.Q16</span>\n<span class="pl-s">--------------------------- [ANTICONF] --------------------------------</span>\n<span class="pl-s">Configuration failed to find the Magick++ library. Try installing:</span>\n<span class="pl-s"> - deb: libmagick++-dev (Debian, Ubuntu)</span>\n<span class="pl-s"> - rpm: ImageMagick-c++-devel (Fedora, CentOS, RHEL)</span>\n<span class="pl-s"> - brew: imagemagick or imagemagick@6 (MacOS)</span>\n<span class="pl-s">If Magick++ is already installed, check that <span class="pl-pds">\'</span></span><span class="pl-smi">pkg</span><span class="pl-k">-</span><span class="pl-smi">config</span><span class="pl-s"><span class="pl-pds">\'</span> is in your</span>\n<span class="pl-s">PATH and PKG_CONFIG_PATH contains a Magick++.pc file. If pkg-config</span>\n<span class="pl-s">is unavailable you can set INCLUDE_DIR and LIB_DIR manually via:</span>\n<span class="pl-s">R CMD INSTALL --configure-vars=<span class="pl-pds">\'</span></span><span class="pl-v">INCLUDE_DIR</span><span class="pl-k">=</span><span class="pl-k">...</span> <span class="pl-v">LIB_DIR</span><span class="pl-k">=</span><span class="pl-k">...</span><span class="pl-s"><span class="pl-pds">\'</span></span>\n<span class="pl-s">-------------------------- [ERROR MESSAGE] ---------------------------</span>\n<span class="pl-s">&lt;stdin&gt;:1:22: fatal error: Magick++.h: No such file or directory</span>\n<span class="pl-s">compilation terminated.</span>\n<span class="pl-s">--------------------------------------------------------------------</span>\n<span class="pl-s">ERROR: configuration failed for package ‘magick’</span>\n<span class="pl-s">* removing ‘/home/shenweiyan/software/R/R-4.0.3/lib64/R/library/magick’</span>\n<span class="pl-s">Error: Failed to install <span class="pl-pds">\'</span></span><span class="pl-smi">yyplot</span><span class="pl-s"><span class="pl-pds">\'</span> from GitHub:</span>\n<span class="pl-s">  (converted from warning) installation of package ‘magick’ had non-zero exit status</span>\n<span class="pl-s">&gt; quit()</span>\n<span class="pl-s">Save workspace image? [y/n/c]: n</span></pre></div>\n<p dir="auto">仅在 Bash 环境配置了 <code class="notranslate">PATH</code> 和 <code class="notranslate">PKG_CONFIG_PATH</code> 是不够的，安装过程会提示动态库的问题。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# export PATH=/home/shenweiyan/software/ImageMagick-7.0.10/bin:$PATH\n# export PKG_CONFIG_PATH=/home/shenweiyan/software/ImageMagick-7.0.10/lib/pkgconfig:$PKG_CONFIG_PATH"><pre class="notranslate"><code class="notranslate"># export PATH=/home/shenweiyan/software/ImageMagick-7.0.10/bin:$PATH\n# export PKG_CONFIG_PATH=/home/shenweiyan/software/ImageMagick-7.0.10/lib/pkgconfig:$PKG_CONFIG_PATH\n</code></pre></div>\n<div class="highlight highlight-source-r notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt; library(remotes)\n&gt; remotes::install_github(&quot;GuangchuangYu/yyplot&quot;)\n...\n** R\n** inst\n** byte-compile and prepare package for lazy loading\n** help\n*** installing help indices\n** building package indices\n** installing vignettes\n** testing if installed package can be loaded from temporary location\nError: package or namespace load failed for ‘magick’ in dyn.load(file, DLLpath = DLLpath, ...):\n unable to load shared object \'/home/shenweiyan/software/R/R-4.0.3/lib64/R/library/00LOCK-magick/00new/magick/libs/magick.so\':\n  libMagick++-7.Q16HDRI.so.4: cannot open shared object file: No such file or directory\nError: loading failed\nExecution halted\nERROR: loading failed\n* removing ‘/home/shenweiyan/software/R/R-4.0.3/lib64/R/library/magick’\nError: Failed to install \'yyplot\' from GitHub:\n  (converted from warning) installation of package ‘magick’ had non-zero exit status\n&gt; quit()\nSave workspace image? [y/n/c]: n"><pre class="notranslate"><span class="pl-k">&gt;</span> library(<span class="pl-smi">remotes</span>)\n<span class="pl-k">&gt;</span> <span class="pl-e">remotes</span><span class="pl-k">::</span>install_github(<span class="pl-s"><span class="pl-pds">"</span>GuangchuangYu/yyplot<span class="pl-pds">"</span></span>)\n<span class="pl-k">...</span>\n<span class="pl-k">**</span> <span class="pl-smi">R</span>\n<span class="pl-k">**</span> <span class="pl-smi">inst</span>\n<span class="pl-k">**</span> <span class="pl-smi">byte</span><span class="pl-k">-</span><span class="pl-smi">compile</span> <span class="pl-smi">and</span> <span class="pl-smi">prepare</span> <span class="pl-smi">package</span> <span class="pl-k">for</span> <span class="pl-smi">lazy</span> <span class="pl-smi">loading</span>\n<span class="pl-k">**</span> <span class="pl-smi">help</span>\n<span class="pl-k">***</span> <span class="pl-smi">installing</span> <span class="pl-smi">help</span> <span class="pl-smi">indices</span>\n<span class="pl-k">**</span> <span class="pl-smi">building</span> <span class="pl-smi">package</span> <span class="pl-smi">indices</span>\n<span class="pl-k">**</span> <span class="pl-smi">installing</span> <span class="pl-smi">vignettes</span>\n<span class="pl-k">**</span> <span class="pl-smi">testing</span> <span class="pl-k">if</span> <span class="pl-smi">installed</span> <span class="pl-smi">package</span> <span class="pl-smi">can</span> <span class="pl-smi">be</span> <span class="pl-smi">loaded</span> <span class="pl-smi">from</span> <span class="pl-smi">temporary</span> <span class="pl-smi">location</span>\n<span class="pl-smi">Error</span><span class="pl-k">:</span> <span class="pl-smi">package</span> <span class="pl-smi">or</span> <span class="pl-smi">namespace</span> <span class="pl-smi">load</span> <span class="pl-smi">failed</span> <span class="pl-k">for</span> ‘<span class="pl-smi">magick</span>’ <span class="pl-k">in</span> dyn.load(<span class="pl-smi">file</span>, <span class="pl-v">DLLpath</span> <span class="pl-k">=</span> <span class="pl-smi">DLLpath</span>, <span class="pl-k">...</span>)<span class="pl-k">:</span>\n <span class="pl-smi">unable</span> <span class="pl-smi">to</span> <span class="pl-smi">load</span> <span class="pl-smi">shared</span> <span class="pl-smi">object</span> <span class="pl-s"><span class="pl-pds">\'</span>/home/shenweiyan/software/R/R-4.0.3/lib64/R/library/00LOCK-magick/00new/magick/libs/magick.so<span class="pl-pds">\'</span></span><span class="pl-k">:</span>\n  <span class="pl-smi">libMagick</span><span class="pl-k">++-</span><span class="pl-c1">7.</span><span class="pl-smi">Q16HDRI.so.4</span><span class="pl-k">:</span> <span class="pl-smi">cannot</span> <span class="pl-smi">open</span> <span class="pl-smi">shared</span> <span class="pl-smi">object</span> <span class="pl-smi">file</span><span class="pl-k">:</span> <span class="pl-smi">No</span> <span class="pl-smi">such</span> <span class="pl-smi">file</span> <span class="pl-smi">or</span> <span class="pl-smi">directory</span>\n<span class="pl-smi">Error</span><span class="pl-k">:</span> <span class="pl-smi">loading</span> <span class="pl-smi">failed</span>\n<span class="pl-smi">Execution</span> <span class="pl-smi">halted</span>\n<span class="pl-smi">ERROR</span><span class="pl-k">:</span> <span class="pl-smi">loading</span> <span class="pl-smi">failed</span>\n<span class="pl-k">*</span> <span class="pl-smi">removing</span> ‘<span class="pl-k">/</span><span class="pl-smi">home</span><span class="pl-k">/</span><span class="pl-smi">shenweiyan</span><span class="pl-k">/</span><span class="pl-smi">software</span><span class="pl-k">/</span><span class="pl-smi">R</span><span class="pl-k">/</span><span class="pl-smi">R</span><span class="pl-k">-</span><span class="pl-c1">4.0.3</span><span class="pl-k">/</span><span class="pl-smi">lib64</span><span class="pl-k">/</span><span class="pl-smi">R</span><span class="pl-k">/</span><span class="pl-smi">library</span><span class="pl-k">/</span><span class="pl-smi">magick</span>’\n<span class="pl-smi">Error</span><span class="pl-k">:</span> <span class="pl-smi">Failed</span> <span class="pl-smi">to</span> <span class="pl-smi">install</span> <span class="pl-s"><span class="pl-pds">\'</span>yyplot<span class="pl-pds">\'</span></span> <span class="pl-smi">from</span> <span class="pl-smi">GitHub</span><span class="pl-k">:</span>\n  (<span class="pl-smi">converted</span> <span class="pl-smi">from</span> <span class="pl-smi">warning</span>) <span class="pl-smi">installation</span> <span class="pl-smi">of</span> <span class="pl-smi">package</span> ‘<span class="pl-smi">magick</span>’ <span class="pl-smi">had</span> <span class="pl-smi">non</span><span class="pl-k">-</span><span class="pl-smi">zero</span> <span class="pl-smi">exit</span> <span class="pl-smi">status</span>\n<span class="pl-k">&gt;</span> quit()\n<span class="pl-smi">Save</span> <span class="pl-smi">workspace</span> <span class="pl-smi">image</span>? [<span class="pl-smi">y</span><span class="pl-k">/</span><span class="pl-smi">n</span><span class="pl-k">/</span><span class="pl-smi">c</span>]<span class="pl-k">:</span> <span class="pl-smi">n</span></pre></div>\n<p dir="auto">最终解决方案：</p>\n<ol dir="auto">\n<li>手动安装 <code class="notranslate">ggimage_0.3.1</code>。</li>\n</ol>\n<div class="highlight highlight-source-r notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg &lt;- \'http://cran.r-project.org/src/contrib/Archive/ggimage/ggimage_0.3.1.tar.gz\'\ninstall.packages(pkg, repos=NULL, type=&quot;source&quot;)"><pre class="notranslate"><span class="pl-smi">pkg</span> <span class="pl-k">&lt;-</span> <span class="pl-s"><span class="pl-pds">\'</span>http://cran.r-project.org/src/contrib/Archive/ggimage/ggimage_0.3.1.tar.gz<span class="pl-pds">\'</span></span>\ninstall.packages(<span class="pl-smi">pkg</span>, <span class="pl-v">repos</span><span class="pl-k">=</span><span class="pl-c1">NULL</span>, <span class="pl-v">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>source<span class="pl-pds">"</span></span>)</pre></div>\n<ol start="2" dir="auto">\n<li>配置必要环境。</li>\n</ol>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="export PATH=/home/shenweiyan/software/ImageMagick-7.0.10/bin:$PATH\nexport PKG_CONFIG_PATH=/home/shenweiyan/software/ImageMagick-7.0.10/lib/pkgconfig:$PKG_CONFIG_PATH\nexport LD_LIBRARY_PATH=/home/shenweiyan/software/ImageMagick-7.0.10/lib:$LD_LIBRARY_PATH"><pre class="notranslate"><span class="pl-k">export</span> PATH=/home/shenweiyan/software/ImageMagick-7.0.10/bin:<span class="pl-smi">$PATH</span>\n<span class="pl-k">export</span> PKG_CONFIG_PATH=/home/shenweiyan/software/ImageMagick-7.0.10/lib/pkgconfig:<span class="pl-smi">$PKG_CONFIG_PATH</span>\n<span class="pl-k">export</span> LD_LIBRARY_PATH=/home/shenweiyan/software/ImageMagick-7.0.10/lib:<span class="pl-smi">$LD_LIBRARY_PATH</span></pre></div>\n<ol start="3" dir="auto">\n<li>安装。根据提示，先安装缺失的 <code class="notranslate">meme</code> 包，然后再安装 <code class="notranslate">yyplot</code>。</li>\n</ol>\n<div class="highlight highlight-source-r notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt; library(remotes)\n&gt; options(&quot;repos&quot;=c(CRAN=&quot;https://mirrors.tuna.tsinghua.edu.cn/CRAN/&quot;))\n&gt; install.packages(\'meme\')\n&gt; remotes::install_github(&quot;GuangchuangYu/yyplot&quot;)"><pre class="notranslate"><span class="pl-k">&gt;</span> library(<span class="pl-smi">remotes</span>)\n<span class="pl-k">&gt;</span> options(<span class="pl-s"><span class="pl-pds">"</span>repos<span class="pl-pds">"</span></span><span class="pl-k">=</span>c(<span class="pl-v">CRAN</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://mirrors.tuna.tsinghua.edu.cn/CRAN/<span class="pl-pds">"</span></span>))\n<span class="pl-k">&gt;</span> install.packages(<span class="pl-s"><span class="pl-pds">\'</span>meme<span class="pl-pds">\'</span></span>)\n<span class="pl-k">&gt;</span> <span class="pl-e">remotes</span><span class="pl-k">::</span>install_github(<span class="pl-s"><span class="pl-pds">"</span>GuangchuangYu/yyplot<span class="pl-pds">"</span></span>)</pre></div>\n<h2 dir="auto">R-4.3.0 安装</h2>\n<p dir="auto">R-4.3.0 安装 <code class="notranslate">magick_2.8.4</code> 会出现 <a href="https://github.com/ropensci/magick/issues/166" data-hovercard-type="issue" data-hovercard-url="/ropensci/magick/issues/166/hovercard">ropensci/magick#166</a> 的问题。根据 <a href="https://github.com/ropensci/magick/issues/166#issuecomment-457875591" data-hovercard-type="issue" data-hovercard-url="/ropensci/magick/issues/166/hovercard">ropensci/magick#166#issuecomment-457875591</a> 的描述，<strong>编译 ImageMagick 的 gcc 需要跟编译 R 的 gcc 保持版本一致</strong>。</p>\n<ol dir="auto">\n<li>重新编译安装 ImageMagick</li>\n</ol>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="wget https://download.imagemagick.org/archive/releases/ImageMagick-7.0.10-24.tar.xz\nextract ImageMagick-7.0.10-24.tar.xz\ncd ImageMagick-7.0.10-24\n./configure CC=/home/shenweiyan/software/gcc-7.3.0/bin/gcc CXX=/home/shenweiyan/software/gcc-7.3.0/bin/g++ --prefix=/home/shenweiyan/software/ImageMagick-7.0.10-24\nmake \nmake install"><pre class="notranslate">wget https://download.imagemagick.org/archive/releases/ImageMagick-7.0.10-24.tar.xz\nextract ImageMagick-7.0.10-24.tar.xz\n<span class="pl-c1">cd</span> ImageMagick-7.0.10-24\n./configure CC=/home/shenweiyan/software/gcc-7.3.0/bin/gcc CXX=/home/shenweiyan/software/gcc-7.3.0/bin/g++ --prefix=/home/shenweiyan/software/ImageMagick-7.0.10-24\nmake \nmake install</pre></div>\n<ol start="2" dir="auto">\n<li>安装 <code class="notranslate">magick</code> 包</li>\n</ol>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# export PATH=/home/shenweiyan/software/ImageMagick-7.0.10-24/bin:$PATH\n# export PKG_CONFIG_PATH=/home/shenweiyan/software/ImageMagick-7.0.10-24/lib/pkgconfig:$PKG_CONFIG_PATH\n# export LD_LIBRARY_PATH=/home/shenweiyan/software/ImageMagick-7.0.10-24/lib:$LD_LIBRARY_PATH\n/home/shenweiyan/software/R/R-4.3.0/bin/R\n&gt; options(&quot;repos&quot;=c(CRAN=&quot;https://mirrors.tuna.tsinghua.edu.cn/CRAN/&quot;))\n&gt; install.packages(\'magick\')\n..."><pre class="notranslate"><span class="pl-c"><span class="pl-c">#</span> export PATH=/home/shenweiyan/software/ImageMagick-7.0.10-24/bin:$PATH</span>\n<span class="pl-c"><span class="pl-c">#</span> export PKG_CONFIG_PATH=/home/shenweiyan/software/ImageMagick-7.0.10-24/lib/pkgconfig:$PKG_CONFIG_PATH</span>\n<span class="pl-c"><span class="pl-c">#</span> export LD_LIBRARY_PATH=/home/shenweiyan/software/ImageMagick-7.0.10-24/lib:$LD_LIBRARY_PATH</span>\n/home/shenweiyan/software/R/R-4.3.0/bin/R\n<span class="pl-k">&gt;</span> options(<span class="pl-s"><span class="pl-pds">"</span>repos<span class="pl-pds">"</span></span>=c(CRAN=<span class="pl-s"><span class="pl-pds">"</span>https://mirrors.tuna.tsinghua.edu.cn/CRAN/<span class="pl-pds">"</span></span>))\n<span class="pl-k">&gt;</span> install.packages(<span class="pl-s"><span class="pl-pds">\'</span>magick<span class="pl-pds">\'</span></span>)\n...</pre></div>\n<ol start="3" dir="auto">\n<li>根据提示，先安装缺失的 <code class="notranslate">meme</code> 包，然后再安装 <code class="notranslate">yyplot</code>。</li>\n</ol>\n<div class="highlight highlight-source-r notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt; library(remotes)\n&gt; options(&quot;repos&quot;=c(CRAN=&quot;https://mirrors.tuna.tsinghua.edu.cn/CRAN/&quot;))\n&gt; install.packages(\'meme\')\n&gt; remotes::install_github(&quot;GuangchuangYu/yyplot&quot;)"><pre class="notranslate"><span class="pl-k">&gt;</span> library(<span class="pl-smi">remotes</span>)\n<span class="pl-k">&gt;</span> options(<span class="pl-s"><span class="pl-pds">"</span>repos<span class="pl-pds">"</span></span><span class="pl-k">=</span>c(<span class="pl-v">CRAN</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://mirrors.tuna.tsinghua.edu.cn/CRAN/<span class="pl-pds">"</span></span>))\n<span class="pl-k">&gt;</span> install.packages(<span class="pl-s"><span class="pl-pds">\'</span>meme<span class="pl-pds">\'</span></span>)\n<span class="pl-k">&gt;</span> <span class="pl-e">remotes</span><span class="pl-k">::</span>install_github(<span class="pl-s"><span class="pl-pds">"</span>GuangchuangYu/yyplot<span class="pl-pds">"</span></span>)</pre></div>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.3-折腾'}, 'labels': {'nodes': [{'name': '1.3.6-R'}]}, 'comments': {'nodes': []}}, {'title': 'Linux 下 PostgreSQL 源码编译安装', 'number': 86, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/86', 'createdAt': '2024-09-03T02:03:58Z', 'lastEditedAt': '2024-09-04T01:00:39Z', 'updatedAt': '2024-09-04T01:00:39Z', 'body': 'PostgreSQL 是一个功能强大的开源对象关系数据库管理系统(ORDBMS)，它从伯克利写的 POSTGRES 软件包发展而来（1995 年几个 UCB 的学生为 Post-Ingres 开发了 SQL 的接口，正式发布了 PostgreSQL95，随后一步步在开源社区中成长起来），经过十几年的发展， PostgreSQL 已经成为世界上发展最快最受欢迎的数据库系统之一。\r\n\r\n本文章主要介绍在 CentOS 下源码编码安装 PostgreSQL-10.0 的一些简单步骤，以供参考。\r\n\r\n<!-- more -->\r\n\r\n## 1. 新增用户组及用户\r\n\r\nPostgreSQL 默认是通过 `postgres:postgres` 来启动和使用的，因此在安装 PostgreSQL 前需要先创建 `postgres` 用户组及 `postgres` 用户。\r\n\r\n```bash\r\n# 在root权限下进行\r\ngroupadd postgres                    # 添加postgres用户组\r\nuseradd postgres -g postgres         # 添加postgres用户\r\npasswd postgres                      # 设置postgres用户密码\r\n```\r\n\r\n## 2. 安装\r\n\r\n```\r\n$ wget https://ftp.postgresql.org/pub/source/v10.0/postgresql-10.0.tar.gz\r\n$ tar zvxf postgresql-10.0.tar.gz\r\n$ cd postgresql-10.0\r\n$ ./configure --prefix=/data/softwares/pgsql\r\n$ make\r\n$ make install\r\n```\r\n\r\n解决依赖：\r\n\r\n```\r\nFAQ1：configure: error: readline library not found\r\n$ yum install readline-devel\r\n\r\nFAQ2：configure: error: zlib library not found\r\n$ yum install zlib-devel\r\n```\r\n\r\n## 3. 启动\r\n\r\n```\r\n＃ 新建数据库数据文件目录\r\n$ mkdir /data/softwares/pgsql/data\r\n \r\n# 新建数据库 log 文件目录\r\n$ mkdir /data/softwares/pgsql/log\r\n \r\n# 修改目录拥有者\r\n$ chown postgres:postgres /data/softwares/pgsql/data -R\r\n$ chown postgres:postgres /data/softwares/pgsql/log -R\r\n \r\n# 执行数据库初始化脚本\r\n$ su postgres\r\n$ /data/softwares/pgsql/bin/initdb --encoding=utf8 -D /data/softwares/pgsql/data\r\n \r\n# 启动 PostgreSQL 服务\r\n$ /data/softwares/pgsql/bin/pg_ctl -D /data/softwares/pgsql/data -l /data/softwares/pgsql/log/postgresql.log start    #postgres 用户下执行\r\n \r\n# 登录 PostgreSQL 数据库\r\n$ psql\r\n```\r\n\r\n![psql-db-list](https://kg.weiyan.cc/2024/09/psql-db-list.webp)\r\n\r\n## 4. 重启\r\n\r\n```\r\n$ su postgres\r\n$ /data/softwares/pgsql/bin/pg_ctl -D /data/softwares/pgsql/data -l /data/softwares/pgsql/log/postgresql.log restart\r\n```\r\n\r\n## 5. 设置开机启动\r\n\r\n解压后的 postgresql-x.x.x 下提供了基于 freebsd、linux、osx 3 个系统的 `postgresql` 启动命令。\r\n\r\n**1）对于通过源码自定义安装的 pgsql，需要修改相关启动脚本：**\r\n\r\n```bash\r\n$ cd postgresql-10.0/postgresql-10.0/contrib/start-scripts\r\n$ vi linux\r\n......\r\n......\r\n# Installation prefix\r\nprefix=/data/softwares/pgsql\r\n  \r\n# Data directory\r\nPGDATA="/data/softwares/pgsql/data"\r\n  \r\n# Who to run the postmaster as, usually "postgres".  (NOT "root")\r\nPGUSER=postgres\r\n  \r\n# Where to keep a log file\r\nPGLOG="$PGDATA/serverlog"\r\n......\r\n......\r\n```\r\n\r\n**2）设置数据库开机启动：**\r\n\r\n```bash\r\n$ cp /data/softwares/source/postgresql-10.0/postgresql-10.0/contrib/start-scripts/linux /etc/init.d/postgresql\r\n\r\n# 添加执行权限\r\n$ chmod a+x /etc/init.d/postgresql\r\n\r\n# 添加至开机启动\r\n$ chkconfig --add postgresql\r\n$ chkconfig postgresql on\r\n```\r\n\r\n**3）查看 postgresql 状态**\r\n\r\n```bash\r\n$ service postgresql status\r\npg_ctl: server is running (PID: 32586)\r\n/data/softwares/pgsql/bin/postgres "-D" "/data/softwares/pgsql/data"\r\n```\r\n\r\n## 6. 禁止管理员空密码登录\r\n\r\n在 PostgreSQL 中，如果你想禁止管理员（通常是 `postgres` 用户）使用空密码登录（正常情况下 `postgres` 用户可以直接使用 `psql` 命令直接登录 PostgreSQL），你可以通过修改 `pg_hba.conf` 文件来实现。\r\n\r\n1. 找到你的 `pg_hba.conf` 文件。这个文件通常位于 PostgreSQL 的数据目录中，例如 `/var/lib/pgsql/data` 或 `/etc/postgresql/<version>/main`。\r\n\r\n2. 修改 `pg_hba.conf` 文件，将管理员的登录方式从 `trust` 更改为 `md5` 或 `password`。这意味着所有连接，包括 `postgres` 用户的，都需要提供密码。\r\n\r\n例如，将以下行：\r\n```\r\nlocal   all             postgres                                trust\r\n```\r\n\r\n修改为：\r\n```\r\nlocal   all             postgres                                md5\r\n```\r\n\r\n3. 重新加载或重启 PostgreSQL 服务以应用更改。\r\n\r\n重新加载配置的命令通常是：\r\n```bash\r\npg_ctl reload\r\n```\r\n\r\n或者重启服务：\r\n```bash\r\nsystemctl restart postgresql\r\n```\r\n\r\n或者在不同的系统中可能是：\r\n```bash\r\nservice postgresql restart\r\n```\r\n\r\n完成这些步骤后，`postgres` 用户将不能再使用空密码登录数据库。其他用户如果想登录数据库，也需要提供密码。\r\n', 'bodyText': 'PostgreSQL 是一个功能强大的开源对象关系数据库管理系统(ORDBMS)，它从伯克利写的 POSTGRES 软件包发展而来（1995 年几个 UCB 的学生为 Post-Ingres 开发了 SQL 的接口，正式发布了 PostgreSQL95，随后一步步在开源社区中成长起来），经过十几年的发展， PostgreSQL 已经成为世界上发展最快最受欢迎的数据库系统之一。\n本文章主要介绍在 CentOS 下源码编码安装 PostgreSQL-10.0 的一些简单步骤，以供参考。\n\n1. 新增用户组及用户\nPostgreSQL 默认是通过 postgres:postgres 来启动和使用的，因此在安装 PostgreSQL 前需要先创建 postgres 用户组及 postgres 用户。\n# 在root权限下进行\ngroupadd postgres                    # 添加postgres用户组\nuseradd postgres -g postgres         # 添加postgres用户\npasswd postgres                      # 设置postgres用户密码\n2. 安装\n$ wget https://ftp.postgresql.org/pub/source/v10.0/postgresql-10.0.tar.gz\n$ tar zvxf postgresql-10.0.tar.gz\n$ cd postgresql-10.0\n$ ./configure --prefix=/data/softwares/pgsql\n$ make\n$ make install\n\n解决依赖：\nFAQ1：configure: error: readline library not found\n$ yum install readline-devel\n\nFAQ2：configure: error: zlib library not found\n$ yum install zlib-devel\n\n3. 启动\n＃ 新建数据库数据文件目录\n$ mkdir /data/softwares/pgsql/data\n \n# 新建数据库 log 文件目录\n$ mkdir /data/softwares/pgsql/log\n \n# 修改目录拥有者\n$ chown postgres:postgres /data/softwares/pgsql/data -R\n$ chown postgres:postgres /data/softwares/pgsql/log -R\n \n# 执行数据库初始化脚本\n$ su postgres\n$ /data/softwares/pgsql/bin/initdb --encoding=utf8 -D /data/softwares/pgsql/data\n \n# 启动 PostgreSQL 服务\n$ /data/softwares/pgsql/bin/pg_ctl -D /data/softwares/pgsql/data -l /data/softwares/pgsql/log/postgresql.log start    #postgres 用户下执行\n \n# 登录 PostgreSQL 数据库\n$ psql\n\n\n4. 重启\n$ su postgres\n$ /data/softwares/pgsql/bin/pg_ctl -D /data/softwares/pgsql/data -l /data/softwares/pgsql/log/postgresql.log restart\n\n5. 设置开机启动\n解压后的 postgresql-x.x.x 下提供了基于 freebsd、linux、osx 3 个系统的 postgresql 启动命令。\n1）对于通过源码自定义安装的 pgsql，需要修改相关启动脚本：\n$ cd postgresql-10.0/postgresql-10.0/contrib/start-scripts\n$ vi linux\n......\n......\n# Installation prefix\nprefix=/data/softwares/pgsql\n  \n# Data directory\nPGDATA="/data/softwares/pgsql/data"\n  \n# Who to run the postmaster as, usually "postgres".  (NOT "root")\nPGUSER=postgres\n  \n# Where to keep a log file\nPGLOG="$PGDATA/serverlog"\n......\n......\n2）设置数据库开机启动：\n$ cp /data/softwares/source/postgresql-10.0/postgresql-10.0/contrib/start-scripts/linux /etc/init.d/postgresql\n\n# 添加执行权限\n$ chmod a+x /etc/init.d/postgresql\n\n# 添加至开机启动\n$ chkconfig --add postgresql\n$ chkconfig postgresql on\n3）查看 postgresql 状态\n$ service postgresql status\npg_ctl: server is running (PID: 32586)\n/data/softwares/pgsql/bin/postgres "-D" "/data/softwares/pgsql/data"\n6. 禁止管理员空密码登录\n在 PostgreSQL 中，如果你想禁止管理员（通常是 postgres 用户）使用空密码登录（正常情况下 postgres 用户可以直接使用 psql 命令直接登录 PostgreSQL），你可以通过修改 pg_hba.conf 文件来实现。\n\n\n找到你的 pg_hba.conf 文件。这个文件通常位于 PostgreSQL 的数据目录中，例如 /var/lib/pgsql/data 或 /etc/postgresql/<version>/main。\n\n\n修改 pg_hba.conf 文件，将管理员的登录方式从 trust 更改为 md5 或 password。这意味着所有连接，包括 postgres 用户的，都需要提供密码。\n\n\n例如，将以下行：\nlocal   all             postgres                                trust\n\n修改为：\nlocal   all             postgres                                md5\n\n\n重新加载或重启 PostgreSQL 服务以应用更改。\n\n重新加载配置的命令通常是：\npg_ctl reload\n或者重启服务：\nsystemctl restart postgresql\n或者在不同的系统中可能是：\nservice postgresql restart\n完成这些步骤后，postgres 用户将不能再使用空密码登录数据库。其他用户如果想登录数据库，也需要提供密码。', 'bodyHTML': '<p dir="auto">PostgreSQL 是一个功能强大的开源对象关系数据库管理系统(ORDBMS)，它从伯克利写的 POSTGRES 软件包发展而来（1995 年几个 UCB 的学生为 Post-Ingres 开发了 SQL 的接口，正式发布了 PostgreSQL95，随后一步步在开源社区中成长起来），经过十几年的发展， PostgreSQL 已经成为世界上发展最快最受欢迎的数据库系统之一。</p>\n<p dir="auto">本文章主要介绍在 CentOS 下源码编码安装 PostgreSQL-10.0 的一些简单步骤，以供参考。</p>\n\n<h2 dir="auto">1. 新增用户组及用户</h2>\n<p dir="auto">PostgreSQL 默认是通过 <code class="notranslate">postgres:postgres</code> 来启动和使用的，因此在安装 PostgreSQL 前需要先创建 <code class="notranslate">postgres</code> 用户组及 <code class="notranslate">postgres</code> 用户。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# 在root权限下进行\ngroupadd postgres                    # 添加postgres用户组\nuseradd postgres -g postgres         # 添加postgres用户\npasswd postgres                      # 设置postgres用户密码"><pre class="notranslate"><span class="pl-c"><span class="pl-c">#</span> 在root权限下进行</span>\ngroupadd postgres                    <span class="pl-c"><span class="pl-c">#</span> 添加postgres用户组</span>\nuseradd postgres -g postgres         <span class="pl-c"><span class="pl-c">#</span> 添加postgres用户</span>\npasswd postgres                      <span class="pl-c"><span class="pl-c">#</span> 设置postgres用户密码</span></pre></div>\n<h2 dir="auto">2. 安装</h2>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ wget https://ftp.postgresql.org/pub/source/v10.0/postgresql-10.0.tar.gz\n$ tar zvxf postgresql-10.0.tar.gz\n$ cd postgresql-10.0\n$ ./configure --prefix=/data/softwares/pgsql\n$ make\n$ make install"><pre class="notranslate"><code class="notranslate">$ wget https://ftp.postgresql.org/pub/source/v10.0/postgresql-10.0.tar.gz\n$ tar zvxf postgresql-10.0.tar.gz\n$ cd postgresql-10.0\n$ ./configure --prefix=/data/softwares/pgsql\n$ make\n$ make install\n</code></pre></div>\n<p dir="auto">解决依赖：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="FAQ1：configure: error: readline library not found\n$ yum install readline-devel\n\nFAQ2：configure: error: zlib library not found\n$ yum install zlib-devel"><pre class="notranslate"><code class="notranslate">FAQ1：configure: error: readline library not found\n$ yum install readline-devel\n\nFAQ2：configure: error: zlib library not found\n$ yum install zlib-devel\n</code></pre></div>\n<h2 dir="auto">3. 启动</h2>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="＃ 新建数据库数据文件目录\n$ mkdir /data/softwares/pgsql/data\n \n# 新建数据库 log 文件目录\n$ mkdir /data/softwares/pgsql/log\n \n# 修改目录拥有者\n$ chown postgres:postgres /data/softwares/pgsql/data -R\n$ chown postgres:postgres /data/softwares/pgsql/log -R\n \n# 执行数据库初始化脚本\n$ su postgres\n$ /data/softwares/pgsql/bin/initdb --encoding=utf8 -D /data/softwares/pgsql/data\n \n# 启动 PostgreSQL 服务\n$ /data/softwares/pgsql/bin/pg_ctl -D /data/softwares/pgsql/data -l /data/softwares/pgsql/log/postgresql.log start    #postgres 用户下执行\n \n# 登录 PostgreSQL 数据库\n$ psql"><pre class="notranslate"><code class="notranslate">＃ 新建数据库数据文件目录\n$ mkdir /data/softwares/pgsql/data\n \n# 新建数据库 log 文件目录\n$ mkdir /data/softwares/pgsql/log\n \n# 修改目录拥有者\n$ chown postgres:postgres /data/softwares/pgsql/data -R\n$ chown postgres:postgres /data/softwares/pgsql/log -R\n \n# 执行数据库初始化脚本\n$ su postgres\n$ /data/softwares/pgsql/bin/initdb --encoding=utf8 -D /data/softwares/pgsql/data\n \n# 启动 PostgreSQL 服务\n$ /data/softwares/pgsql/bin/pg_ctl -D /data/softwares/pgsql/data -l /data/softwares/pgsql/log/postgresql.log start    #postgres 用户下执行\n \n# 登录 PostgreSQL 数据库\n$ psql\n</code></pre></div>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/446f82aea067d7bf8c3b8268bf657cfeb26cee9a66d27cb12cac608f78596ffe/68747470733a2f2f6b672e77656979616e2e63632f323032342f30392f7073716c2d64622d6c6973742e77656270"><img src="https://camo.githubusercontent.com/446f82aea067d7bf8c3b8268bf657cfeb26cee9a66d27cb12cac608f78596ffe/68747470733a2f2f6b672e77656979616e2e63632f323032342f30392f7073716c2d64622d6c6973742e77656270" alt="psql-db-list" data-canonical-src="https://kg.weiyan.cc/2024/09/psql-db-list.webp" style="max-width: 100%;"></a></p>\n<h2 dir="auto">4. 重启</h2>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ su postgres\n$ /data/softwares/pgsql/bin/pg_ctl -D /data/softwares/pgsql/data -l /data/softwares/pgsql/log/postgresql.log restart"><pre class="notranslate"><code class="notranslate">$ su postgres\n$ /data/softwares/pgsql/bin/pg_ctl -D /data/softwares/pgsql/data -l /data/softwares/pgsql/log/postgresql.log restart\n</code></pre></div>\n<h2 dir="auto">5. 设置开机启动</h2>\n<p dir="auto">解压后的 postgresql-x.x.x 下提供了基于 freebsd、linux、osx 3 个系统的 <code class="notranslate">postgresql</code> 启动命令。</p>\n<p dir="auto"><strong>1）对于通过源码自定义安装的 pgsql，需要修改相关启动脚本：</strong></p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ cd postgresql-10.0/postgresql-10.0/contrib/start-scripts\n$ vi linux\n......\n......\n# Installation prefix\nprefix=/data/softwares/pgsql\n  \n# Data directory\nPGDATA=&quot;/data/softwares/pgsql/data&quot;\n  \n# Who to run the postmaster as, usually &quot;postgres&quot;.  (NOT &quot;root&quot;)\nPGUSER=postgres\n  \n# Where to keep a log file\nPGLOG=&quot;$PGDATA/serverlog&quot;\n......\n......"><pre class="notranslate">$ <span class="pl-c1">cd</span> postgresql-10.0/postgresql-10.0/contrib/start-scripts\n$ vi linux\n......\n......\n<span class="pl-c"><span class="pl-c">#</span> Installation prefix</span>\nprefix=/data/softwares/pgsql\n  \n<span class="pl-c"><span class="pl-c">#</span> Data directory</span>\nPGDATA=<span class="pl-s"><span class="pl-pds">"</span>/data/softwares/pgsql/data<span class="pl-pds">"</span></span>\n  \n<span class="pl-c"><span class="pl-c">#</span> Who to run the postmaster as, usually "postgres".  (NOT "root")</span>\nPGUSER=postgres\n  \n<span class="pl-c"><span class="pl-c">#</span> Where to keep a log file</span>\nPGLOG=<span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$PGDATA</span>/serverlog<span class="pl-pds">"</span></span>\n......\n......</pre></div>\n<p dir="auto"><strong>2）设置数据库开机启动：</strong></p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ cp /data/softwares/source/postgresql-10.0/postgresql-10.0/contrib/start-scripts/linux /etc/init.d/postgresql\n\n# 添加执行权限\n$ chmod a+x /etc/init.d/postgresql\n\n# 添加至开机启动\n$ chkconfig --add postgresql\n$ chkconfig postgresql on"><pre class="notranslate">$ cp /data/softwares/source/postgresql-10.0/postgresql-10.0/contrib/start-scripts/linux /etc/init.d/postgresql\n\n<span class="pl-c"><span class="pl-c">#</span> 添加执行权限</span>\n$ chmod a+x /etc/init.d/postgresql\n\n<span class="pl-c"><span class="pl-c">#</span> 添加至开机启动</span>\n$ chkconfig --add postgresql\n$ chkconfig postgresql on</pre></div>\n<p dir="auto"><strong>3）查看 postgresql 状态</strong></p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ service postgresql status\npg_ctl: server is running (PID: 32586)\n/data/softwares/pgsql/bin/postgres &quot;-D&quot; &quot;/data/softwares/pgsql/data&quot;"><pre class="notranslate">$ service postgresql status\npg_ctl: server is running (PID: 32586)\n/data/softwares/pgsql/bin/postgres <span class="pl-s"><span class="pl-pds">"</span>-D<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>/data/softwares/pgsql/data<span class="pl-pds">"</span></span></pre></div>\n<h2 dir="auto">6. 禁止管理员空密码登录</h2>\n<p dir="auto">在 PostgreSQL 中，如果你想禁止管理员（通常是 <code class="notranslate">postgres</code> 用户）使用空密码登录（正常情况下 <code class="notranslate">postgres</code> 用户可以直接使用 <code class="notranslate">psql</code> 命令直接登录 PostgreSQL），你可以通过修改 <code class="notranslate">pg_hba.conf</code> 文件来实现。</p>\n<ol dir="auto">\n<li>\n<p dir="auto">找到你的 <code class="notranslate">pg_hba.conf</code> 文件。这个文件通常位于 PostgreSQL 的数据目录中，例如 <code class="notranslate">/var/lib/pgsql/data</code> 或 <code class="notranslate">/etc/postgresql/&lt;version&gt;/main</code>。</p>\n</li>\n<li>\n<p dir="auto">修改 <code class="notranslate">pg_hba.conf</code> 文件，将管理员的登录方式从 <code class="notranslate">trust</code> 更改为 <code class="notranslate">md5</code> 或 <code class="notranslate">password</code>。这意味着所有连接，包括 <code class="notranslate">postgres</code> 用户的，都需要提供密码。</p>\n</li>\n</ol>\n<p dir="auto">例如，将以下行：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="local   all             postgres                                trust"><pre class="notranslate"><code class="notranslate">local   all             postgres                                trust\n</code></pre></div>\n<p dir="auto">修改为：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="local   all             postgres                                md5"><pre class="notranslate"><code class="notranslate">local   all             postgres                                md5\n</code></pre></div>\n<ol start="3" dir="auto">\n<li>重新加载或重启 PostgreSQL 服务以应用更改。</li>\n</ol>\n<p dir="auto">重新加载配置的命令通常是：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pg_ctl reload"><pre class="notranslate">pg_ctl reload</pre></div>\n<p dir="auto">或者重启服务：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="systemctl restart postgresql"><pre class="notranslate">systemctl restart postgresql</pre></div>\n<p dir="auto">或者在不同的系统中可能是：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="service postgresql restart"><pre class="notranslate">service postgresql restart</pre></div>\n<p dir="auto">完成这些步骤后，<code class="notranslate">postgres</code> 用户将不能再使用空密码登录数据库。其他用户如果想登录数据库，也需要提供密码。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.4-数据库'}, 'labels': {'nodes': [{'name': '1.4.1-PostgreSQL'}]}, 'comments': {'nodes': []}}, {'title': 'R 包安装指定 GCC 和 G++ 并开启 C++11 支持', 'number': 85, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/85', 'createdAt': '2024-08-30T03:00:33Z', 'lastEditedAt': '2024-08-30T03:07:53Z', 'updatedAt': '2024-08-30T03:07:53Z', 'body': '如果你的 R 是使用比较低版本的 GCC（如 Red Hat 6.5 + GCC/G++ 4.4.7），但安装的 R 包需要开启 C++11 支持，或者需要更高版本的 GCC 和 G++，可以参考一下这个方法。\r\n\r\n<!-- more -->\r\n\r\n首先，在 `home` 目录创建一个 `~/.R/Makevars` 文件。\r\n\r\n```bash\r\nmkdir ~/.R\r\nvi ~/.R/Makevars\r\n```\r\n\r\n然后，在 `Makevars` 文件中加入以下内容。\r\n\r\n```bash\r\nCXX11 = /opt/rh/devtoolset-7/root/usr/bin/g++ -std=c++11 -fPIC\r\nCXX14 = /opt/rh/devtoolset-7/root/usr/bin/g++\r\nCXX14FLAGS = -g -O2 $(LTO)\r\nCXX14PICFLAGS = -fpic\r\nCXX14STD = -std=gnu++14\r\n```\r\n\r\n最后，重新打开 R，执行对应包安装。\r\n\r\n```r\r\noptions("repos"=c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/"))\r\ninstall.packages("gridtext")\r\n```\r\n\r\n![install-packages-gridtext](https://kg.weiyan.cc/2024/08/install-packages-gridtext.webp)\r\n\r\n参考资料：\r\n\r\n1. [ERROR: compilation failed for package \'gridtext\' - wilkelab/gridtext#7](https://github.com/wilkelab/gridtext/issues/7)\r\n', 'bodyText': '如果你的 R 是使用比较低版本的 GCC（如 Red Hat 6.5 + GCC/G++ 4.4.7），但安装的 R 包需要开启 C++11 支持，或者需要更高版本的 GCC 和 G++，可以参考一下这个方法。\n\n首先，在 home 目录创建一个 ~/.R/Makevars 文件。\nmkdir ~/.R\nvi ~/.R/Makevars\n然后，在 Makevars 文件中加入以下内容。\nCXX11 = /opt/rh/devtoolset-7/root/usr/bin/g++ -std=c++11 -fPIC\nCXX14 = /opt/rh/devtoolset-7/root/usr/bin/g++\nCXX14FLAGS = -g -O2 $(LTO)\nCXX14PICFLAGS = -fpic\nCXX14STD = -std=gnu++14\n最后，重新打开 R，执行对应包安装。\noptions("repos"=c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/"))\ninstall.packages("gridtext")\n\n参考资料：\n\nERROR: compilation failed for package \'gridtext\' - wilkelab/gridtext#7', 'bodyHTML': '<p dir="auto">如果你的 R 是使用比较低版本的 GCC（如 Red Hat 6.5 + GCC/G++ 4.4.7），但安装的 R 包需要开启 C++11 支持，或者需要更高版本的 GCC 和 G++，可以参考一下这个方法。</p>\n\n<p dir="auto">首先，在 <code class="notranslate">home</code> 目录创建一个 <code class="notranslate">~/.R/Makevars</code> 文件。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="mkdir ~/.R\nvi ~/.R/Makevars"><pre class="notranslate">mkdir <span class="pl-k">~</span>/.R\nvi <span class="pl-k">~</span>/.R/Makevars</pre></div>\n<p dir="auto">然后，在 <code class="notranslate">Makevars</code> 文件中加入以下内容。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="CXX11 = /opt/rh/devtoolset-7/root/usr/bin/g++ -std=c++11 -fPIC\nCXX14 = /opt/rh/devtoolset-7/root/usr/bin/g++\nCXX14FLAGS = -g -O2 $(LTO)\nCXX14PICFLAGS = -fpic\nCXX14STD = -std=gnu++14"><pre class="notranslate">CXX11 = /opt/rh/devtoolset-7/root/usr/bin/g++ -std=c++11 -fPIC\nCXX14 = /opt/rh/devtoolset-7/root/usr/bin/g++\nCXX14FLAGS = -g -O2 <span class="pl-s"><span class="pl-pds">$(</span>LTO<span class="pl-pds">)</span></span>\nCXX14PICFLAGS = -fpic\nCXX14STD = -std=gnu++14</pre></div>\n<p dir="auto">最后，重新打开 R，执行对应包安装。</p>\n<div class="highlight highlight-source-r notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="options(&quot;repos&quot;=c(CRAN=&quot;https://mirrors.tuna.tsinghua.edu.cn/CRAN/&quot;))\ninstall.packages(&quot;gridtext&quot;)"><pre class="notranslate">options(<span class="pl-s"><span class="pl-pds">"</span>repos<span class="pl-pds">"</span></span><span class="pl-k">=</span>c(<span class="pl-v">CRAN</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://mirrors.tuna.tsinghua.edu.cn/CRAN/<span class="pl-pds">"</span></span>))\ninstall.packages(<span class="pl-s"><span class="pl-pds">"</span>gridtext<span class="pl-pds">"</span></span>)</pre></div>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/af169e59008cc304d689377bbd7685ddd00250374a146815e8ecb5cb9d4c38c2/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f696e7374616c6c2d7061636b616765732d67726964746578742e77656270"><img src="https://camo.githubusercontent.com/af169e59008cc304d689377bbd7685ddd00250374a146815e8ecb5cb9d4c38c2/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f696e7374616c6c2d7061636b616765732d67726964746578742e77656270" alt="install-packages-gridtext" data-canonical-src="https://kg.weiyan.cc/2024/08/install-packages-gridtext.webp" style="max-width: 100%;"></a></p>\n<p dir="auto">参考资料：</p>\n<ol dir="auto">\n<li><a href="https://github.com/wilkelab/gridtext/issues/7" data-hovercard-type="issue" data-hovercard-url="/wilkelab/gridtext/issues/7/hovercard">ERROR: compilation failed for package \'gridtext\' - wilkelab/gridtext#7</a></li>\n</ol>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.3-折腾'}, 'labels': {'nodes': [{'name': '1.3.6-R'}]}, 'comments': {'nodes': []}}, {'title': '诛仙', 'number': 84, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/84', 'createdAt': '2024-08-20T03:55:13Z', 'lastEditedAt': '2024-08-20T04:23:23Z', 'updatedAt': '2024-08-20T04:23:23Z', 'body': '闲来看剧，无意中在腾讯视频看了几集《诛仙》动漫，虽然个别人物在建模还不算特别满意，但总体还是很不错，而且冲着对原著的高度还原，瞬间有种入坑不能自拔的感觉。\r\n\r\n<!-- more -->\r\n\r\n第一次接触诛仙小说应该也是十几年前的事情，高一高二一度沉迷网络小说，一发不可收拾，断断续续的看了不少。惊叹于作者对于诛仙世界架构和故事逻辑，主副线也很完整，人物鲜活丰满，而且文笔也不错。最引人瞩目的当属主人公的感情纠葛，碧瑶的虽死不悔的爱，陆雪琪的温婉素雅和为了张小凡的付出都是让那时的我特别特别感动的，从当时来说，诛仙确实是非常可以带给人一种震撼的感觉的。      \r\n\r\n\r\n如今从动漫入局，又把原小说看了一遍，梦回青春年少的仙侠错觉，总有种说不清道不明的神奇滋味。', 'bodyText': '闲来看剧，无意中在腾讯视频看了几集《诛仙》动漫，虽然个别人物在建模还不算特别满意，但总体还是很不错，而且冲着对原著的高度还原，瞬间有种入坑不能自拔的感觉。\n\n第一次接触诛仙小说应该也是十几年前的事情，高一高二一度沉迷网络小说，一发不可收拾，断断续续的看了不少。惊叹于作者对于诛仙世界架构和故事逻辑，主副线也很完整，人物鲜活丰满，而且文笔也不错。最引人瞩目的当属主人公的感情纠葛，碧瑶的虽死不悔的爱，陆雪琪的温婉素雅和为了张小凡的付出都是让那时的我特别特别感动的，从当时来说，诛仙确实是非常可以带给人一种震撼的感觉的。\n如今从动漫入局，又把原小说看了一遍，梦回青春年少的仙侠错觉，总有种说不清道不明的神奇滋味。', 'bodyHTML': '<p dir="auto">闲来看剧，无意中在腾讯视频看了几集《诛仙》动漫，虽然个别人物在建模还不算特别满意，但总体还是很不错，而且冲着对原著的高度还原，瞬间有种入坑不能自拔的感觉。</p>\n\n<p dir="auto">第一次接触诛仙小说应该也是十几年前的事情，高一高二一度沉迷网络小说，一发不可收拾，断断续续的看了不少。惊叹于作者对于诛仙世界架构和故事逻辑，主副线也很完整，人物鲜活丰满，而且文笔也不错。最引人瞩目的当属主人公的感情纠葛，碧瑶的虽死不悔的爱，陆雪琪的温婉素雅和为了张小凡的付出都是让那时的我特别特别感动的，从当时来说，诛仙确实是非常可以带给人一种震撼的感觉的。</p>\n<p dir="auto">如今从动漫入局，又把原小说看了一遍，梦回青春年少的仙侠错觉，总有种说不清道不明的神奇滋味。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '解决 GitHub 提交次数多导致仓库体积过大的问题', 'number': 83, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/83', 'createdAt': '2024-08-12T03:28:22Z', 'lastEditedAt': '2025-03-26T05:24:08Z', 'updatedAt': '2025-04-07T02:56:05Z', 'body': '提交代码要控制节奏，不能随心所欲，尤其是团队协作开发；如果发现 `.git` 目录太大，推荐使用 Git LFS 来管理大文件。\r\n\r\n<!-- more -->\r\n\r\n参考以下几篇文章的解决方案：\r\n\r\n1. [被吐槽 GitHub仓 库太大，直接 600M 瘦身到 6M，这下舒服了](https://www.cnblogs.com/chengxy-nds/p/17306115.html) - 博客园\r\n2. [如何解决 GitHub 提交次数过多 .git 文件过大的问题？](https://www.zhihu.com/question/29769130) - 知乎\r\n\r\n## 完全重建版本库\r\n\r\n```bash\r\n$ rm -rf .git\r\n$ git config --global init.defaultBranch main\r\n$ git init\r\n$ git add --all\r\n$ git commit -m "Initial commit"\r\n$ git remote add origin https://<github_token>@github.com/shenweiyan/Digital-Garden.git\r\n$ git push -f -u origin main\r\n```', 'bodyText': '提交代码要控制节奏，不能随心所欲，尤其是团队协作开发；如果发现 .git 目录太大，推荐使用 Git LFS 来管理大文件。\n\n参考以下几篇文章的解决方案：\n\n被吐槽 GitHub仓 库太大，直接 600M 瘦身到 6M，这下舒服了 - 博客园\n如何解决 GitHub 提交次数过多 .git 文件过大的问题？ - 知乎\n\n完全重建版本库\n$ rm -rf .git\n$ git config --global init.defaultBranch main\n$ git init\n$ git add --all\n$ git commit -m "Initial commit"\n$ git remote add origin https://<github_token>@github.com/shenweiyan/Digital-Garden.git\n$ git push -f -u origin main', 'bodyHTML': '<p dir="auto">提交代码要控制节奏，不能随心所欲，尤其是团队协作开发；如果发现 <code class="notranslate">.git</code> 目录太大，推荐使用 Git LFS 来管理大文件。</p>\n\n<p dir="auto">参考以下几篇文章的解决方案：</p>\n<ol dir="auto">\n<li><a href="https://www.cnblogs.com/chengxy-nds/p/17306115.html" rel="nofollow">被吐槽 GitHub仓 库太大，直接 600M 瘦身到 6M，这下舒服了</a> - 博客园</li>\n<li><a href="https://www.zhihu.com/question/29769130" rel="nofollow">如何解决 GitHub 提交次数过多 .git 文件过大的问题？</a> - 知乎</li>\n</ol>\n<h2 dir="auto">完全重建版本库</h2>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ rm -rf .git\n$ git config --global init.defaultBranch main\n$ git init\n$ git add --all\n$ git commit -m &quot;Initial commit&quot;\n$ git remote add origin https://&lt;github_token&gt;@github.com/shenweiyan/Digital-Garden.git\n$ git push -f -u origin main"><pre class="notranslate">$ rm -rf .git\n$ git config --global init.defaultBranch main\n$ git init\n$ git add --all\n$ git commit -m <span class="pl-s"><span class="pl-pds">"</span>Initial commit<span class="pl-pds">"</span></span>\n$ git remote add origin https://<span class="pl-k">&lt;</span>github_token<span class="pl-k">&gt;</span>@github.com/shenweiyan/Digital-Garden.git\n$ git push -f -u origin main</pre></div>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': [{'name': '1.3.18-版本控制'}]}, 'comments': {'nodes': []}}, {'title': '巴黎奥运', 'number': 82, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/82', 'createdAt': '2024-07-29T06:27:29Z', 'lastEditedAt': '2024-08-05T03:00:45Z', 'updatedAt': '2024-08-05T03:00:45Z', 'body': '2024 年的巴黎奥运会各项比赛正在如火如荼进行，但是在个人感官上，这一届的奥运会热度好像有点低。\r\n\r\n<!-- more -->\r\n\r\n对于开幕式，有两点切身的感受比较深刻。一个是时间定于 7 月 27 日（星期六）凌晨，第二个是可以在电影院观看 2024 年巴黎奥运会开幕式直播。这些信息基于都是来源于自己在上班路上的听广播习惯，广州可进行奥运会开幕式观影预约的影院仅有 4 家，但需要达到最低拼场人数才可 "开团"！\r\n\r\n作为史上第一次把开幕式放在室外搞，也是首次摈弃以往步行进入体育场的传统，让运动员乘船沿着巴黎的"主干道" ——塞纳河前进。这届奥运会的确有点别出心裁。个人对于开幕式并没有什么特别值得期待的，也就事后通过各种短视频看了一下中国代表团出场、点燃圣火，以及其他零零散散的一些画面，感觉相比上一届的日本奥运会，巴黎奥运会给人印象更加深刻，文化底蕴、开放性、包容性都很不错，但也不可否认开幕式过后的各种两极分化评论，这的确也是争议性相当大的异常奥运会。\r\n\r\n奥运会最大的看点还是比赛。作为四年难得一遇的体育盛宴，各项赛程都很吸引人。\r\n\r\n个人最大的期待，还是在于羽毛球，小组赛的赛程也追了很多场，接下来依旧值得期待。跳水、游泳、排球、篮球，时间允许下肯定也是不能错过的。\r\n\r\n------\r\n\r\n记录一下那些自己看过的一些赛事，为这个夏天的运动健儿们加油。\r\n\r\n- 7 月 28 - 19:30 - 周日  篮球 | 女子小组赛 - A组(1)：西班牙（90） VS 中国（89）     \r\n  没顶住！女篮首战憾负西班牙！     \r\n\r\n- 7 月 29 - 21:40 - 周一  羽毛球 | 男子双打小组赛 - D组(5)：丹麦（2） VS 中国（0）          \r\n  <img src=\'https://kg.weiyan.cc/2024/08/badminton-0729.png\' width=600 alt=\'badminton-0729\'>\r\n\r\n- 7 月 30 - 20:30 - 周二 乒乓球 | 混合双打金牌赛：中国（4） VS 朝鲜（2）     \r\n  乒乓球中国的首个奥运混双金牌！终于到手！     \r\n  <img src=\'https://kg.weiyan.cc/2024/08/ping-pong-china-korea-2024.jpg\' width=600 alt=\'ping-pong-china-korea-2024\'>\r\n\r\n- 7 月 30 - 21:40 - 周二 羽毛球 | 男子双打小组赛 - D组(8)：中国（2） VS 日本（0）     \r\n  保木卓朗/小林优吾 vs  欧烜屹/刘雨辰，图欧组合终于赢了，不容易。     \r\n\r\n- 7 月 31 - 19:30 - 周三 篮球 | 女子小组赛 - A组(4)：塞尔维亚（81） VS 中国（59）     \r\n  两连败！中国女篮22分惨负塞尔维亚，看的揪心，后面两节完全被碾压！     \r\n  <img src=\'https://kg.weiyan.cc/2024/08/basketball-0731.png\' width=600 alt=\'basketball-0731\'>\r\n\r\n- 8 月 1 - 19:00 - 周四 羽毛球 | 男子双打1/4决赛(2)：中国（2） VS 印尼（0）         \r\n  梁王（梁伟铿/王昶） 2 比 0 胜双阿（阿尔菲安/阿迪安托），晋级巴黎奥运会 4 强！     \r\n  <img src=\'https://kg.weiyan.cc/2024/08/badminton-lw-paris-2024.jpg\' width=600 alt=\'badminton-lw-paris-2024\'>\r\n\r\n- 8 月 1 - 21:20 - 周四 羽毛球 | 男子单打16强赛(5)：中国（0） VS 新加坡（2）    \r\n  李诗沣 0 比 2 不敌骆建佑，脑子不够叠加勇气不够，战术执行不起来，输得不冤。。。  \r\n\r\n- 8 月 2 - 22:10 - 周五 羽毛球 | 混合双打金牌赛：中国（2）VS 韩国（0）        \r\n  雅思组合（黄雅琼/郑思维）2:0 胜韩国金银组合（金元昊/郑那银），成就大满贯，圆梦巴黎！这场决赛不得不说，郑思维状态是真的好，打疯了！      \r\n  <img src=\'https://kg.weiyan.cc/2024/08/zheng-huang-paris-gold.jpg\' width=600 alt=\'zheng-huang-paris-gold\'>    \r\n\r\n- 8 月 3 - 00:45 - 周六 羽毛球 | 男子单打1/4决赛(2)    \r\n  爆冷，石宇奇 0-2 昆拉武特·威提讪，无缘羽毛球男单四强。第一次熬夜看的比赛，石头状态不好，战术上完全被压制，真的破防了！           \r\n  <img src=\'https://kg.weiyan.cc/2024/08/badminton-shiyuqi-paris-2024.jpg\' width=600 alt=\'badminton-shiyuqi-paris-2024\'>     \r\n\r\n- 8 月 3 - 22:10 - 周六 羽毛球 | 女子双打金牌赛：中国（2）VS 中国（0）     \r\n  凡尘组合（陈清晨/贾一凡）2:0 圣坛组合（谭宁/刘圣书），正如赛后她们身披国旗大喊 **"中国女双第一"**！     \r\n  <img src=\'https://kg.weiyan.cc/2024/08/badminton-women-gold-paris-2024.jpg\' width=600 alt=\'badminton-women-gold-paris-2024\'>      \r\n\r\n- 8 月 4 - 20:30 - 周日 乒乓球 | 男子单打金牌赛    \r\n  4-1！樊振东击败莫雷加德勇夺男单冠军，成国乒第11位大满贯得主！    \r\n  <img src=\'https://kg.weiyan.cc/2024/08/fanzhendong-gold-paris-2024.webp\' width=600 alt=\'fanzhendong-gold-paris-2024\'>\r\n\r\n- 8 月 4 - 22:30 - 周日 羽毛球 | 男子双打金牌赛     \r\n  梁王组合（王昶/梁伟铿）1-2 惜败羚羊组合（李洋/王齐麟），遗憾摘银。接发球失误太多，加上随意挑战，顶着夺冠压力和政治压力打到决胜局的 19-21，也算尽力了！     \r\n  <img src=\'https://kg.weiyan.cc/2024/08/badminton-lw-silver-paris-2024.jpg\' width=600 alt=\'badminton-lw-silver-paris-2024\'>\r\n\r\n\r\n                    ', 'bodyText': '2024 年的巴黎奥运会各项比赛正在如火如荼进行，但是在个人感官上，这一届的奥运会热度好像有点低。\n\n对于开幕式，有两点切身的感受比较深刻。一个是时间定于 7 月 27 日（星期六）凌晨，第二个是可以在电影院观看 2024 年巴黎奥运会开幕式直播。这些信息基于都是来源于自己在上班路上的听广播习惯，广州可进行奥运会开幕式观影预约的影院仅有 4 家，但需要达到最低拼场人数才可 "开团"！\n作为史上第一次把开幕式放在室外搞，也是首次摈弃以往步行进入体育场的传统，让运动员乘船沿着巴黎的"主干道" ——塞纳河前进。这届奥运会的确有点别出心裁。个人对于开幕式并没有什么特别值得期待的，也就事后通过各种短视频看了一下中国代表团出场、点燃圣火，以及其他零零散散的一些画面，感觉相比上一届的日本奥运会，巴黎奥运会给人印象更加深刻，文化底蕴、开放性、包容性都很不错，但也不可否认开幕式过后的各种两极分化评论，这的确也是争议性相当大的异常奥运会。\n奥运会最大的看点还是比赛。作为四年难得一遇的体育盛宴，各项赛程都很吸引人。\n个人最大的期待，还是在于羽毛球，小组赛的赛程也追了很多场，接下来依旧值得期待。跳水、游泳、排球、篮球，时间允许下肯定也是不能错过的。\n\n记录一下那些自己看过的一些赛事，为这个夏天的运动健儿们加油。\n\n\n7 月 28 - 19:30 - 周日  篮球 | 女子小组赛 - A组(1)：西班牙（90） VS 中国（89）\n没顶住！女篮首战憾负西班牙！\n\n\n7 月 29 - 21:40 - 周一  羽毛球 | 男子双打小组赛 - D组(5)：丹麦（2） VS 中国（0）\n\n\n\n7 月 30 - 20:30 - 周二 乒乓球 | 混合双打金牌赛：中国（4） VS 朝鲜（2）\n乒乓球中国的首个奥运混双金牌！终于到手！\n\n\n\n7 月 30 - 21:40 - 周二 羽毛球 | 男子双打小组赛 - D组(8)：中国（2） VS 日本（0）\n保木卓朗/小林优吾 vs  欧烜屹/刘雨辰，图欧组合终于赢了，不容易。\n\n\n7 月 31 - 19:30 - 周三 篮球 | 女子小组赛 - A组(4)：塞尔维亚（81） VS 中国（59）\n两连败！中国女篮22分惨负塞尔维亚，看的揪心，后面两节完全被碾压！\n\n\n\n8 月 1 - 19:00 - 周四 羽毛球 | 男子双打1/4决赛(2)：中国（2） VS 印尼（0）\n梁王（梁伟铿/王昶） 2 比 0 胜双阿（阿尔菲安/阿迪安托），晋级巴黎奥运会 4 强！\n\n\n\n8 月 1 - 21:20 - 周四 羽毛球 | 男子单打16强赛(5)：中国（0） VS 新加坡（2）\n李诗沣 0 比 2 不敌骆建佑，脑子不够叠加勇气不够，战术执行不起来，输得不冤。。。\n\n\n8 月 2 - 22:10 - 周五 羽毛球 | 混合双打金牌赛：中国（2）VS 韩国（0）\n雅思组合（黄雅琼/郑思维）2:0 胜韩国金银组合（金元昊/郑那银），成就大满贯，圆梦巴黎！这场决赛不得不说，郑思维状态是真的好，打疯了！\n\n\n\n8 月 3 - 00:45 - 周六 羽毛球 | 男子单打1/4决赛(2)\n爆冷，石宇奇 0-2 昆拉武特·威提讪，无缘羽毛球男单四强。第一次熬夜看的比赛，石头状态不好，战术上完全被压制，真的破防了！\n\n\n\n8 月 3 - 22:10 - 周六 羽毛球 | 女子双打金牌赛：中国（2）VS 中国（0）\n凡尘组合（陈清晨/贾一凡）2:0 圣坛组合（谭宁/刘圣书），正如赛后她们身披国旗大喊 "中国女双第一"！\n\n\n\n8 月 4 - 20:30 - 周日 乒乓球 | 男子单打金牌赛\n4-1！樊振东击败莫雷加德勇夺男单冠军，成国乒第11位大满贯得主！\n\n\n\n8 月 4 - 22:30 - 周日 羽毛球 | 男子双打金牌赛\n梁王组合（王昶/梁伟铿）1-2 惜败羚羊组合（李洋/王齐麟），遗憾摘银。接发球失误太多，加上随意挑战，顶着夺冠压力和政治压力打到决胜局的 19-21，也算尽力了！', 'bodyHTML': '<p dir="auto">2024 年的巴黎奥运会各项比赛正在如火如荼进行，但是在个人感官上，这一届的奥运会热度好像有点低。</p>\n\n<p dir="auto">对于开幕式，有两点切身的感受比较深刻。一个是时间定于 7 月 27 日（星期六）凌晨，第二个是可以在电影院观看 2024 年巴黎奥运会开幕式直播。这些信息基于都是来源于自己在上班路上的听广播习惯，广州可进行奥运会开幕式观影预约的影院仅有 4 家，但需要达到最低拼场人数才可 "开团"！</p>\n<p dir="auto">作为史上第一次把开幕式放在室外搞，也是首次摈弃以往步行进入体育场的传统，让运动员乘船沿着巴黎的"主干道" ——塞纳河前进。这届奥运会的确有点别出心裁。个人对于开幕式并没有什么特别值得期待的，也就事后通过各种短视频看了一下中国代表团出场、点燃圣火，以及其他零零散散的一些画面，感觉相比上一届的日本奥运会，巴黎奥运会给人印象更加深刻，文化底蕴、开放性、包容性都很不错，但也不可否认开幕式过后的各种两极分化评论，这的确也是争议性相当大的异常奥运会。</p>\n<p dir="auto">奥运会最大的看点还是比赛。作为四年难得一遇的体育盛宴，各项赛程都很吸引人。</p>\n<p dir="auto">个人最大的期待，还是在于羽毛球，小组赛的赛程也追了很多场，接下来依旧值得期待。跳水、游泳、排球、篮球，时间允许下肯定也是不能错过的。</p>\n<hr>\n<p dir="auto">记录一下那些自己看过的一些赛事，为这个夏天的运动健儿们加油。</p>\n<ul dir="auto">\n<li>\n<p dir="auto">7 月 28 - 19:30 - 周日  篮球 | 女子小组赛 - A组(1)：西班牙（90） VS 中国（89）<br>\n没顶住！女篮首战憾负西班牙！</p>\n</li>\n<li>\n<p dir="auto">7 月 29 - 21:40 - 周一  羽毛球 | 男子双打小组赛 - D组(5)：丹麦（2） VS 中国（0）<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/be62d8fca9fe6a08dc3e293112e0c66e79f0a667259a8c4d4c1ffafa56a1520d/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f6261646d696e746f6e2d303732392e706e67"><img src="https://camo.githubusercontent.com/be62d8fca9fe6a08dc3e293112e0c66e79f0a667259a8c4d4c1ffafa56a1520d/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f6261646d696e746f6e2d303732392e706e67" width="600" alt="badminton-0729" data-canonical-src="https://kg.weiyan.cc/2024/08/badminton-0729.png" style="max-width: 100%;"></a></p>\n</li>\n<li>\n<p dir="auto">7 月 30 - 20:30 - 周二 乒乓球 | 混合双打金牌赛：中国（4） VS 朝鲜（2）<br>\n乒乓球中国的首个奥运混双金牌！终于到手！<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/9e9b81f415a37f3e3786b91adda9b02959f7a842c98385dd31be150a80226921/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f70696e672d706f6e672d6368696e612d6b6f7265612d323032342e6a7067"><img src="https://camo.githubusercontent.com/9e9b81f415a37f3e3786b91adda9b02959f7a842c98385dd31be150a80226921/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f70696e672d706f6e672d6368696e612d6b6f7265612d323032342e6a7067" width="600" alt="ping-pong-china-korea-2024" data-canonical-src="https://kg.weiyan.cc/2024/08/ping-pong-china-korea-2024.jpg" style="max-width: 100%;"></a></p>\n</li>\n<li>\n<p dir="auto">7 月 30 - 21:40 - 周二 羽毛球 | 男子双打小组赛 - D组(8)：中国（2） VS 日本（0）<br>\n保木卓朗/小林优吾 vs  欧烜屹/刘雨辰，图欧组合终于赢了，不容易。</p>\n</li>\n<li>\n<p dir="auto">7 月 31 - 19:30 - 周三 篮球 | 女子小组赛 - A组(4)：塞尔维亚（81） VS 中国（59）<br>\n两连败！中国女篮22分惨负塞尔维亚，看的揪心，后面两节完全被碾压！<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/4bef440eef557c243243f874b73522648885984756c958314abc4659e7ffc34d/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f6261736b657462616c6c2d303733312e706e67"><img src="https://camo.githubusercontent.com/4bef440eef557c243243f874b73522648885984756c958314abc4659e7ffc34d/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f6261736b657462616c6c2d303733312e706e67" width="600" alt="basketball-0731" data-canonical-src="https://kg.weiyan.cc/2024/08/basketball-0731.png" style="max-width: 100%;"></a></p>\n</li>\n<li>\n<p dir="auto">8 月 1 - 19:00 - 周四 羽毛球 | 男子双打1/4决赛(2)：中国（2） VS 印尼（0）<br>\n梁王（梁伟铿/王昶） 2 比 0 胜双阿（阿尔菲安/阿迪安托），晋级巴黎奥运会 4 强！<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/43b3a44a2f1e5f1dcc023dc204d1f42af4a35043e118266318eb4bd8265b53ef/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f6261646d696e746f6e2d6c772d70617269732d323032342e6a7067"><img src="https://camo.githubusercontent.com/43b3a44a2f1e5f1dcc023dc204d1f42af4a35043e118266318eb4bd8265b53ef/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f6261646d696e746f6e2d6c772d70617269732d323032342e6a7067" width="600" alt="badminton-lw-paris-2024" data-canonical-src="https://kg.weiyan.cc/2024/08/badminton-lw-paris-2024.jpg" style="max-width: 100%;"></a></p>\n</li>\n<li>\n<p dir="auto">8 月 1 - 21:20 - 周四 羽毛球 | 男子单打16强赛(5)：中国（0） VS 新加坡（2）<br>\n李诗沣 0 比 2 不敌骆建佑，脑子不够叠加勇气不够，战术执行不起来，输得不冤。。。</p>\n</li>\n<li>\n<p dir="auto">8 月 2 - 22:10 - 周五 羽毛球 | 混合双打金牌赛：中国（2）VS 韩国（0）<br>\n雅思组合（黄雅琼/郑思维）2:0 胜韩国金银组合（金元昊/郑那银），成就大满贯，圆梦巴黎！这场决赛不得不说，郑思维状态是真的好，打疯了！<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/1bae032c5a566ed887bdd0ec9ef14ae1a1eaa4c1d3fcfa22b2d11223e56b1844/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f7a68656e672d6875616e672d70617269732d676f6c642e6a7067"><img src="https://camo.githubusercontent.com/1bae032c5a566ed887bdd0ec9ef14ae1a1eaa4c1d3fcfa22b2d11223e56b1844/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f7a68656e672d6875616e672d70617269732d676f6c642e6a7067" width="600" alt="zheng-huang-paris-gold" data-canonical-src="https://kg.weiyan.cc/2024/08/zheng-huang-paris-gold.jpg" style="max-width: 100%;"></a></p>\n</li>\n<li>\n<p dir="auto">8 月 3 - 00:45 - 周六 羽毛球 | 男子单打1/4决赛(2)<br>\n爆冷，石宇奇 0-2 昆拉武特·威提讪，无缘羽毛球男单四强。第一次熬夜看的比赛，石头状态不好，战术上完全被压制，真的破防了！<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b8ccf2bec0ea705f974c668015d099611d6376357ea9d547064e2a06d8329f5b/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f6261646d696e746f6e2d736869797571692d70617269732d323032342e6a7067"><img src="https://camo.githubusercontent.com/b8ccf2bec0ea705f974c668015d099611d6376357ea9d547064e2a06d8329f5b/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f6261646d696e746f6e2d736869797571692d70617269732d323032342e6a7067" width="600" alt="badminton-shiyuqi-paris-2024" data-canonical-src="https://kg.weiyan.cc/2024/08/badminton-shiyuqi-paris-2024.jpg" style="max-width: 100%;"></a></p>\n</li>\n<li>\n<p dir="auto">8 月 3 - 22:10 - 周六 羽毛球 | 女子双打金牌赛：中国（2）VS 中国（0）<br>\n凡尘组合（陈清晨/贾一凡）2:0 圣坛组合（谭宁/刘圣书），正如赛后她们身披国旗大喊 <strong>"中国女双第一"</strong>！<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/fe17c4e1e1c4cd32cf02109a427db9bf5c51f4a8ebb12f1af13d3db9119f03eb/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f6261646d696e746f6e2d776f6d656e2d676f6c642d70617269732d323032342e6a7067"><img src="https://camo.githubusercontent.com/fe17c4e1e1c4cd32cf02109a427db9bf5c51f4a8ebb12f1af13d3db9119f03eb/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f6261646d696e746f6e2d776f6d656e2d676f6c642d70617269732d323032342e6a7067" width="600" alt="badminton-women-gold-paris-2024" data-canonical-src="https://kg.weiyan.cc/2024/08/badminton-women-gold-paris-2024.jpg" style="max-width: 100%;"></a></p>\n</li>\n<li>\n<p dir="auto">8 月 4 - 20:30 - 周日 乒乓球 | 男子单打金牌赛<br>\n4-1！樊振东击败莫雷加德勇夺男单冠军，成国乒第11位大满贯得主！<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b56cc3018c5c180a0ecb586ecee27fc84ac85513a30635162a3ed16c3c717e95/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f66616e7a68656e646f6e672d676f6c642d70617269732d323032342e77656270"><img src="https://camo.githubusercontent.com/b56cc3018c5c180a0ecb586ecee27fc84ac85513a30635162a3ed16c3c717e95/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f66616e7a68656e646f6e672d676f6c642d70617269732d323032342e77656270" width="600" alt="fanzhendong-gold-paris-2024" data-canonical-src="https://kg.weiyan.cc/2024/08/fanzhendong-gold-paris-2024.webp" style="max-width: 100%;"></a></p>\n</li>\n<li>\n<p dir="auto">8 月 4 - 22:30 - 周日 羽毛球 | 男子双打金牌赛<br>\n梁王组合（王昶/梁伟铿）1-2 惜败羚羊组合（李洋/王齐麟），遗憾摘银。接发球失误太多，加上随意挑战，顶着夺冠压力和政治压力打到决胜局的 19-21，也算尽力了！<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b30a3ed3eb38495a50d2e541c0597af3552e288bb80a367d9d8094ce14f40a67/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f6261646d696e746f6e2d6c772d73696c7665722d70617269732d323032342e6a7067"><img src="https://camo.githubusercontent.com/b30a3ed3eb38495a50d2e541c0597af3552e288bb80a367d9d8094ce14f40a67/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f6261646d696e746f6e2d6c772d73696c7665722d70617269732d323032342e6a7067" width="600" alt="badminton-lw-silver-paris-2024" data-canonical-src="https://kg.weiyan.cc/2024/08/badminton-lw-silver-paris-2024.jpg" style="max-width: 100%;"></a></p>\n</li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '寒冬将至', 'number': 81, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/81', 'createdAt': '2024-07-15T02:24:05Z', 'lastEditedAt': '2024-07-15T02:38:07Z', 'updatedAt': '2024-08-16T02:39:26Z', 'body': "经济不景气，就像一股寒风，吹得人心颤颤，市场更是进入严冬，就业、消费和投资都变得如履薄冰。\r\n\r\n<!-- more -->\r\n\r\n从最近身边的很多人身上，由于大环境不景气带来的裁员比比皆是，IVD 行业、生信行业订单以肉眼可见的速度越来越少，小公司首先扛不住开启裁员，大公司从考核到绩效各种手段轮番上阵。\r\n\r\n<img src='https://kg.weiyan.cc/2024/07/you-are-fired.webp' width=600>\r\n\r\n好一点的公司 N+1 赔偿，但凤毛麟角；次一点的公司礼仪性的赔偿 1、2 个月的工资；更多的是领完当月工资走人；更有甚者，老板跑路，变相裁人的 ......\r\n\r\n裁人失业年年有，今年的暴风雨可能会更加猛烈些。铁打的营盘，流水的兵，除了比比谁更卷，还是要多思考一下自身的选择和规划。", 'bodyText': '经济不景气，就像一股寒风，吹得人心颤颤，市场更是进入严冬，就业、消费和投资都变得如履薄冰。\n\n从最近身边的很多人身上，由于大环境不景气带来的裁员比比皆是，IVD 行业、生信行业订单以肉眼可见的速度越来越少，小公司首先扛不住开启裁员，大公司从考核到绩效各种手段轮番上阵。\n\n好一点的公司 N+1 赔偿，但凤毛麟角；次一点的公司礼仪性的赔偿 1、2 个月的工资；更多的是领完当月工资走人；更有甚者，老板跑路，变相裁人的 ......\n裁人失业年年有，今年的暴风雨可能会更加猛烈些。铁打的营盘，流水的兵，除了比比谁更卷，还是要多思考一下自身的选择和规划。', 'bodyHTML': '<p dir="auto">经济不景气，就像一股寒风，吹得人心颤颤，市场更是进入严冬，就业、消费和投资都变得如履薄冰。</p>\n\n<p dir="auto">从最近身边的很多人身上，由于大环境不景气带来的裁员比比皆是，IVD 行业、生信行业订单以肉眼可见的速度越来越少，小公司首先扛不住开启裁员，大公司从考核到绩效各种手段轮番上阵。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/21adb84fbd56672a5475ad3c7fdf2b3785e3277ea4e78939409f7774801ce18c/68747470733a2f2f6b672e77656979616e2e63632f323032342f30372f796f752d6172652d66697265642e77656270"><img src="https://camo.githubusercontent.com/21adb84fbd56672a5475ad3c7fdf2b3785e3277ea4e78939409f7774801ce18c/68747470733a2f2f6b672e77656979616e2e63632f323032342f30372f796f752d6172652d66697265642e77656270" width="600" data-canonical-src="https://kg.weiyan.cc/2024/07/you-are-fired.webp" style="max-width: 100%;"></a></p>\n<p dir="auto">好一点的公司 N+1 赔偿，但凤毛麟角；次一点的公司礼仪性的赔偿 1、2 个月的工资；更多的是领完当月工资走人；更有甚者，老板跑路，变相裁人的 ......</p>\n<p dir="auto">裁人失业年年有，今年的暴风雨可能会更加猛烈些。铁打的营盘，流水的兵，除了比比谁更卷，还是要多思考一下自身的选择和规划。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': [{'body': '更加艰难了', 'author': {'login': 'obaby'}}]}}, {'title': '晒桌面', 'number': 80, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/80', 'createdAt': '2024-07-08T03:43:13Z', 'lastEditedAt': None, 'updatedAt': '2024-07-08T03:43:14Z', 'body': '文艺男青年对于烟火气息的干净整洁桌面总有一种迷之吸引，热衷于各种晒桌面带来的解压感，其中的细节让我觉得这才是生活应该有的部分，尤其在这样的桌面上摆上各种我喜欢的影音娱乐设备，更能点亮我的生活。\r\n\r\n<!-- more -->', 'bodyText': '文艺男青年对于烟火气息的干净整洁桌面总有一种迷之吸引，热衷于各种晒桌面带来的解压感，其中的细节让我觉得这才是生活应该有的部分，尤其在这样的桌面上摆上各种我喜欢的影音娱乐设备，更能点亮我的生活。', 'bodyHTML': '<p dir="auto">文艺男青年对于烟火气息的干净整洁桌面总有一种迷之吸引，热衷于各种晒桌面带来的解压感，其中的细节让我觉得这才是生活应该有的部分，尤其在这样的桌面上摆上各种我喜欢的影音娱乐设备，更能点亮我的生活。</p>\n', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': 'Python 陷阱之 strip、lstrip、rstrip 可以删除比预期更多的内容', 'number': 79, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/79', 'createdAt': '2024-07-03T08:05:40Z', 'lastEditedAt': None, 'updatedAt': '2024-07-03T08:05:40Z', 'body': '> 原文：[Python Gotcha: strip, lstrip, rstrip can remove more than expected](https://andrewwegner.com/python-gotcha-strip-functions-unexpected-behavior.html)\r\n\r\n## 介绍\r\n\r\n作为一名软件工程师，你处理过不少脏字符串。删除用户输入中的前导或尾随空格可能是最常见的工作之一。\r\n\r\n在 Python 中，这是通过 `.strip()` 、 `.lstrip()` 或 `.rstrip()` 函数完成的，通常如下所示：\r\n```python\r\n>>> "     Andrew Wegner     ".lower().strip()\r\n\'andrew wegner\'\r\n>>> "     Andrew Wegner     ".lower().lstrip()\r\n\'andrew wegner     \'\r\n>>> "     Andrew Wegner     ".lower().rstrip()\r\n\'     andrew wegner\'\r\n```\r\n\r\n这非常简单，并且没有什么意外的事情发生。\r\n\r\n## 陷阱\r\n\r\n陷阱在于，这些函数中的每一个都可以接受一个要删除的字符列表。\r\n\r\n```python\r\n>>> "Andrew Wegner".lower().rstrip(" wegner")\r\n\'and\'\r\n```\r\n\r\n发生了什么？为什么结果不只是：\r\n```bash\r\n\'andrew\'\r\n```\r\n\r\n## 解释\r\n\r\n再次仔细阅读文档中的这行说明：\r\n\r\n> A list of **characters**\r\n\r\n不是字符串列表 (Not a list of strings.)。\r\n\r\n> [str.rstrip([chars])](https://docs.python.org/3/library/stdtypes.html#str.rstrip)\r\n> \r\n> Return a copy of the string with trailing characters removed. The chars argument is a string specifying the set of characters to be removed. If omitted or `None`, the chars argument defaults to removing whitespace. The chars argument is **not a suffix**; rather, **all combinations of its values are stripped**.\r\n> \r\n> From [Built-in Types — Python 3.12.4 documentation](https://docs.python.org/3/library/stdtypes.html)\r\n\r\n文档中已经明确并举例说明了这一行为及其含义。然而，对于新开发者来说，这是出乎意料的行为。毕竟，这些函数看起来都很直观。\r\n\r\n我的示例执行以下操作：\r\n', 'bodyText': '原文：Python Gotcha: strip, lstrip, rstrip can remove more than expected\n\n介绍\n作为一名软件工程师，你处理过不少脏字符串。删除用户输入中的前导或尾随空格可能是最常见的工作之一。\n在 Python 中，这是通过 .strip() 、 .lstrip() 或 .rstrip() 函数完成的，通常如下所示：\n>>> "     Andrew Wegner     ".lower().strip()\n\'andrew wegner\'\n>>> "     Andrew Wegner     ".lower().lstrip()\n\'andrew wegner     \'\n>>> "     Andrew Wegner     ".lower().rstrip()\n\'     andrew wegner\'\n这非常简单，并且没有什么意外的事情发生。\n陷阱\n陷阱在于，这些函数中的每一个都可以接受一个要删除的字符列表。\n>>> "Andrew Wegner".lower().rstrip(" wegner")\n\'and\'\n发生了什么？为什么结果不只是：\n\'andrew\'\n解释\n再次仔细阅读文档中的这行说明：\n\nA list of characters\n\n不是字符串列表 (Not a list of strings.)。\n\nstr.rstrip([chars])\nReturn a copy of the string with trailing characters removed. The chars argument is a string specifying the set of characters to be removed. If omitted or None, the chars argument defaults to removing whitespace. The chars argument is not a suffix; rather, all combinations of its values are stripped.\nFrom Built-in Types — Python 3.12.4 documentation\n\n文档中已经明确并举例说明了这一行为及其含义。然而，对于新开发者来说，这是出乎意料的行为。毕竟，这些函数看起来都很直观。\n我的示例执行以下操作：', 'bodyHTML': '<blockquote>\n<p dir="auto">原文：<a href="https://andrewwegner.com/python-gotcha-strip-functions-unexpected-behavior.html" rel="nofollow">Python Gotcha: strip, lstrip, rstrip can remove more than expected</a></p>\n</blockquote>\n<h2 dir="auto">介绍</h2>\n<p dir="auto">作为一名软件工程师，你处理过不少脏字符串。删除用户输入中的前导或尾随空格可能是最常见的工作之一。</p>\n<p dir="auto">在 Python 中，这是通过 <code class="notranslate">.strip()</code> 、 <code class="notranslate">.lstrip()</code> 或 <code class="notranslate">.rstrip()</code> 函数完成的，通常如下所示：</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt;&gt; &quot;     Andrew Wegner     &quot;.lower().strip()\n\'andrew wegner\'\n&gt;&gt;&gt; &quot;     Andrew Wegner     &quot;.lower().lstrip()\n\'andrew wegner     \'\n&gt;&gt;&gt; &quot;     Andrew Wegner     &quot;.lower().rstrip()\n\'     andrew wegner\'"><pre class="notranslate"><span class="pl-c1">&gt;</span><span class="pl-c1">&gt;&gt;</span> <span class="pl-s">"     Andrew Wegner     "</span>.<span class="pl-c1">lower</span>().<span class="pl-c1">strip</span>()\n<span class="pl-s">\'andrew wegner\'</span>\n<span class="pl-c1">&gt;</span><span class="pl-c1">&gt;&gt;</span> <span class="pl-s">"     Andrew Wegner     "</span>.<span class="pl-c1">lower</span>().<span class="pl-c1">lstrip</span>()\n<span class="pl-s">\'andrew wegner     \'</span>\n<span class="pl-c1">&gt;</span><span class="pl-c1">&gt;&gt;</span> <span class="pl-s">"     Andrew Wegner     "</span>.<span class="pl-c1">lower</span>().<span class="pl-c1">rstrip</span>()\n<span class="pl-s">\'     andrew wegner\'</span></pre></div>\n<p dir="auto">这非常简单，并且没有什么意外的事情发生。</p>\n<h2 dir="auto">陷阱</h2>\n<p dir="auto">陷阱在于，这些函数中的每一个都可以接受一个要删除的字符列表。</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt;&gt; &quot;Andrew Wegner&quot;.lower().rstrip(&quot; wegner&quot;)\n\'and\'"><pre class="notranslate"><span class="pl-c1">&gt;</span><span class="pl-c1">&gt;&gt;</span> <span class="pl-s">"Andrew Wegner"</span>.<span class="pl-c1">lower</span>().<span class="pl-c1">rstrip</span>(<span class="pl-s">" wegner"</span>)\n<span class="pl-s">\'and\'</span></pre></div>\n<p dir="auto">发生了什么？为什么结果不只是：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="\'andrew\'"><pre class="notranslate"><span class="pl-s"><span class="pl-pds">\'</span>andrew<span class="pl-pds">\'</span></span></pre></div>\n<h2 dir="auto">解释</h2>\n<p dir="auto">再次仔细阅读文档中的这行说明：</p>\n<blockquote>\n<p dir="auto">A list of <strong>characters</strong></p>\n</blockquote>\n<p dir="auto">不是字符串列表 (Not a list of strings.)。</p>\n<blockquote>\n<p dir="auto"><a href="https://docs.python.org/3/library/stdtypes.html#str.rstrip" rel="nofollow">str.rstrip([chars])</a></p>\n<p dir="auto">Return a copy of the string with trailing characters removed. The chars argument is a string specifying the set of characters to be removed. If omitted or <code class="notranslate">None</code>, the chars argument defaults to removing whitespace. The chars argument is <strong>not a suffix</strong>; rather, <strong>all combinations of its values are stripped</strong>.</p>\n<p dir="auto">From <a href="https://docs.python.org/3/library/stdtypes.html" rel="nofollow">Built-in Types — Python 3.12.4 documentation</a></p>\n</blockquote>\n<p dir="auto">文档中已经明确并举例说明了这一行为及其含义。然而，对于新开发者来说，这是出乎意料的行为。毕竟，这些函数看起来都很直观。</p>\n<p dir="auto">我的示例执行以下操作：</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.2-编程'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '手机', 'number': 78, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/78', 'createdAt': '2024-06-25T07:05:40Z', 'lastEditedAt': None, 'updatedAt': '2024-06-25T07:05:40Z', 'body': '手机对大部分人来说，现在更像是一个外置的私密部位：能随意触碰的人只有自己，伴侣想碰也得防着，只有万不得已的时候，才能交到专业人士手上（指修手机的）。\r\n\r\n<!-- more -->', 'bodyText': '手机对大部分人来说，现在更像是一个外置的私密部位：能随意触碰的人只有自己，伴侣想碰也得防着，只有万不得已的时候，才能交到专业人士手上（指修手机的）。', 'bodyHTML': '<p dir="auto">手机对大部分人来说，现在更像是一个外置的私密部位：能随意触碰的人只有自己，伴侣想碰也得防着，只有万不得已的时候，才能交到专业人士手上（指修手机的）。</p>\n', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '最舒服的字号和字体大小', 'number': 77, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/77', 'createdAt': '2024-06-18T02:19:36Z', 'lastEditedAt': '2024-06-18T02:24:11Z', 'updatedAt': '2024-06-18T02:24:11Z', 'body': '最舒服的字号目前没有确切的定论，默认的微软雅黑还能接受。但是在字体大小这一块，个人对小字体情有独钟。\r\n\r\n<!-- more -->\r\n\r\n在手机端一直都会把系统(或者是常用 APP)的字体设置为最小，很重要的一个原因就是能在一页上容纳更多的信息，排版布局看起来更加舒服。在知乎看到有人说喜欢用小字体的人，其性格可能会相对内向，日常生活中并不是特别外向开放的人，或许也有一定的道理。\r\n\r\n浏览器端最常用的 Google Chrome 和备用的 Edge 用的也是 **14px** 的字体大小。    \r\n\r\n![chrome-14px](https://kg.weiyan.cc/2024/06/chrome-14px.png)', 'bodyText': '最舒服的字号目前没有确切的定论，默认的微软雅黑还能接受。但是在字体大小这一块，个人对小字体情有独钟。\n\n在手机端一直都会把系统(或者是常用 APP)的字体设置为最小，很重要的一个原因就是能在一页上容纳更多的信息，排版布局看起来更加舒服。在知乎看到有人说喜欢用小字体的人，其性格可能会相对内向，日常生活中并不是特别外向开放的人，或许也有一定的道理。\n浏览器端最常用的 Google Chrome 和备用的 Edge 用的也是 14px 的字体大小。', 'bodyHTML': '<p dir="auto">最舒服的字号目前没有确切的定论，默认的微软雅黑还能接受。但是在字体大小这一块，个人对小字体情有独钟。</p>\n\n<p dir="auto">在手机端一直都会把系统(或者是常用 APP)的字体设置为最小，很重要的一个原因就是能在一页上容纳更多的信息，排版布局看起来更加舒服。在知乎看到有人说喜欢用小字体的人，其性格可能会相对内向，日常生活中并不是特别外向开放的人，或许也有一定的道理。</p>\n<p dir="auto">浏览器端最常用的 Google Chrome 和备用的 Edge 用的也是 <strong>14px</strong> 的字体大小。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/7051374cbd9fe6478d8403205521debd817694ee74ee249579dbf844e5c71716/68747470733a2f2f6b672e77656979616e2e63632f323032342f30362f6368726f6d652d313470782e706e67"><img src="https://camo.githubusercontent.com/7051374cbd9fe6478d8403205521debd817694ee74ee249579dbf844e5c71716/68747470733a2f2f6b672e77656979616e2e63632f323032342f30362f6368726f6d652d313470782e706e67" alt="chrome-14px" data-canonical-src="https://kg.weiyan.cc/2024/06/chrome-14px.png" style="max-width: 100%;"></a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '生活的后花园', 'number': 76, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/76', 'createdAt': '2024-06-12T03:34:57Z', 'lastEditedAt': '2024-08-22T02:07:10Z', 'updatedAt': '2024-08-22T02:07:10Z', 'body': '年纪越大，越期待短暂的一些独处时光，安静且惬意。\r\n\r\n不知道大家的后花园都是什么，在 V2EX 看到，对有些人来说，备菜+做饭的一个小时，不接收外界信息，完全沉浸在只有自己的世界里，是他近几年找到了最好的放松方式了。对我自己可能就在于游戏+看电影，但是能有这样时间的机会确实不多。\r\n\r\n<!-- more -->\r\n\r\n看到有人说家里玩游戏会有压力，这一点是同意的，尤其有了娃以后，放空自己的机会就更少了。所以，建立自己的精神后花园，去运运动其实也是一个不错的选择。', 'bodyText': '年纪越大，越期待短暂的一些独处时光，安静且惬意。\n不知道大家的后花园都是什么，在 V2EX 看到，对有些人来说，备菜+做饭的一个小时，不接收外界信息，完全沉浸在只有自己的世界里，是他近几年找到了最好的放松方式了。对我自己可能就在于游戏+看电影，但是能有这样时间的机会确实不多。\n\n看到有人说家里玩游戏会有压力，这一点是同意的，尤其有了娃以后，放空自己的机会就更少了。所以，建立自己的精神后花园，去运运动其实也是一个不错的选择。', 'bodyHTML': '<p dir="auto">年纪越大，越期待短暂的一些独处时光，安静且惬意。</p>\n<p dir="auto">不知道大家的后花园都是什么，在 V2EX 看到，对有些人来说，备菜+做饭的一个小时，不接收外界信息，完全沉浸在只有自己的世界里，是他近几年找到了最好的放松方式了。对我自己可能就在于游戏+看电影，但是能有这样时间的机会确实不多。</p>\n\n<p dir="auto">看到有人说家里玩游戏会有压力，这一点是同意的，尤其有了娃以后，放空自己的机会就更少了。所以，建立自己的精神后花园，去运运动其实也是一个不错的选择。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': [{'body': '其实我们需要的是随心所欲的生活片段。', 'author': {'login': 'immelon0097'}}]}}, {'title': '使用 Python 的 argparse 构建命令行界面', 'number': 75, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/75', 'createdAt': '2024-06-06T06:23:52Z', 'lastEditedAt': '2024-06-07T08:35:09Z', 'updatedAt': '2024-06-07T08:35:09Z', 'body': '> 原文：[Build Command-Line Interfaces With Python\'s argparse](https://realpython.com/command-line-interfaces-python-argparse/)     \r\n\r\n\r\n命令行应用在普通用户空间中可能并不常见，但它们存在于开发、数据科学、系统管理和许多其他操作中。每个命令行应用都需要一个用户友好的命令行界面 （CLI），以便你可以与应用本身进行交互。在 Python 中，您可以使用标准库中的 `argparse` 模块创建功能齐全的 CLI。\r\n\r\n<!-- more -->\r\n\r\n在本文中，你将了解如何：    \r\n\r\n- 命令行界面入门；\r\n- 在 Python 中组织和布局命令行应用项目；\r\n- 使用 Python `argparse` 创建命令行界面（command-line interfaces）；\r\n- 使用 `argparse` 一些强大的功能深度自定义您的 CLI；\r\n\r\n若要充分利用本教程，应熟悉 Python 编程，包括面向对象编程、脚本开发和执行以及 Python 包和模块等概念。如果您熟悉与使用命令行或终端相关的一般概念和主题，这也将很有帮助。\r\n\r\n## 了解命令行界面\r\n\r\n自从计算机发明以来，人类一直需要并找到与这些机器交互和共享信息的方法。信息交换在人、计算机软件和硬件组件之间流动。其中任意两个元素之间的共享边界通常称为接口([interface](https://en.wikipedia.org/wiki/Interface_(computing)))。\r\n\r\n在软件开发中，接口是给定软件的特殊部分，它允许计算机系统组件之间的交互。当涉及到人机交互和软件交互时，这个重要的组件被称为用户界面（[user interface](https://en.wikipedia.org/wiki/User_interface)）。\r\n\r\n您会在编程中找到不同类型的用户界面。图形用户界面 （GUI） 可能是当今最常见的。但是，您还可以找到为其用户提供命令行界面 （CLI） 的应用和程序。在本教程中，你将了解 CLI 以及如何在 Python 中创建它们。\r\n\r\n## 命令行界面 （CLI）\r\n\r\n命令行界面允许您通过操作系统命令行、终端或控制台与应用程序或程序进行交互。\r\n\r\n要了解命令行界面及其工作原理，请考虑此实际示例。假设您有一个名为 sample 包含三个示例文件的目录。如果您使用的是类 Unix 操作系统，例如 Linux 或 macOS，请继续在父目录中打开命令行窗口或终端，然后执行以下命令：    \r\n```bash\r\n$ ls sample/\r\nhello.txt     lorem.md      realpython.md\r\n```\r\n\r\nUnix 的 `ls` 命令列出目标目录中包含的文件和子目录，该目录默认为当前工作目录。上面的命令调用没有显示有关 的内容 sample 的太多信息。它只在屏幕上显示文件名。\r\n\r\n假设你想要获取有关目录及其内容的更丰富信息，那么你不需要寻找其他程序，因为 ls 命令有一个功能齐全的命令行界面，并且提供了一组有用的选项，可以用来定制命令的行为。\r\n\r\n例如，继续执行带有 `-l` 选项的 `ls` 命令：    \r\n```bash\r\n$ ls -l sample/\r\ntotal 24\r\n-rw-r--r--@ 1 user  staff    83 Aug 17 22:15 hello.txt\r\n-rw-r--r--@ 1 user  staff  2609 Aug 17 22:15 lorem.md\r\n-rw-r--r--@ 1 user  staff   428 Aug 17 22:15 realpython.md\r\n```\r\n\r\n现在，`ls` 命令的输出完全不同了。该命令显示了有关 sample 目录中文件的更多信息，包括权限、所有者、组、日期和大小。它还显示了这些文件在你计算机磁盘上使用的总空间。\r\n\r\n这种更丰富的输出结果是由于使用了 `-l` 选项，这是 Unix `ls` 命令行界面的一部分，它启用了详细的输出格式。\r\n\r\n## 命令、参数、选项、参数和子命令\r\n\r\n在本教程中，您将深入了解**命令**(commands)及其**子命令**(subcommands)，同时还会学习到**命令行参数**(command-line arguments)、**选项**(options)和**参数**(parameters)的相关知识。因此，建议您将这些术语纳入您的技术词汇库中。\r\n\r\n- **命令(Command)**：在命令行或终端窗口中运行的程序或例程。通常，您可以通过其背后的程序(underlying program)或例程(routine)的名称来识别一个命令。     \r\n- **参数(Argument)**：命令在执行其预期操作时所需或可选的信息片段。命令通常接受一个或多个参数，您可以在命令行中以空格分隔或逗号分隔的列表形式提供这些参数。     \r\n- **选项(Option)**，也称为 **flag** 或 **switch**：一种可选的参数，用于修改命令的行为。选项通过特定的名称（如前一个示例中的 `-l`）传递给命令。     \r\n- **参数(Parameter)**：一个选项用于执行其预期操作或动作时所使用的参数。     \r\n- 子命令(Subcommand)**：一个预定义的名称，可以传递给应用程序来执行特定的操作。\r\n\r\n参考上一节中的示例命令结构：\r\n```bash\r\n$ ls -l sample/\r\n```\r\n\r\n在这个例子中，您组合了命令行界面（CLI）的以下组件：    \r\n\r\n- **ls**：命令的名称或应用的名称；\r\n- **-l**：启用详细输出的选项(option)、开关(switch)或标志(flag)；    \r\n- **sample**：为命令执行提供附加信息的参数(argument)；    \r\n\r\n现在，让我们来看下面的命令结构，它展示了 Python 包管理器 `pip` 的命令行界面（CLI）：    \r\n```bash\r\n$ pip install -r requirements.txt\r\n```\r\n\r\n这是一个常见的 `pip` 命令结构，您可能之前已经见过。它允许您使用 `requirements.txt` 文件来给指定的 Python 项目安装依赖项。在这个例子中，您使用了以下命令行界面（CLI）组件：   \r\n \r\n- **pip**：命令的名称；\r\n- **install**：`pip` 的子命令(subcommand)名称；\r\n- **-r**：`install` 子命令的选项(option)；\r\n- **requirements.txt**：一个参数，特别是 `-r` 选项的参数。\r\n\r\n现在您已经了解了命令行界面（CLI）是什么以及其主要部分或组件有哪些。接下来，是时候学习如何在 Python 中创建自己的 CLI 了。\r\n\r\n## Python 中的 CLI 入门\r\n\r\nPython 附带了一些工具，这些工具可帮助您为程序和应用程序编写命令行界面（CLI）。若您需要快速为小型程序构建一个简洁的 CLI，那么可以利用 [`sys`](https://docs.python.org/3/library/sys.html#module-sys) 模块中的 [`argv`](https://docs.python.org/3/library/sys.html#sys.argv) 属性。这个属性会自动存储您在命令行中传递给特定程序的参数。\r\n\r\n### 使用 `sys.argv` 构建最小的 CLI\r\n\r\n以使用 `argv` 创建最小命令行界面（CLI）为例，假设您需要编写一个小程序，该程序类似于 `ls` 命令，能够列出给定目录下的所有文件。在这种情况下，您可以编写如下代码：    \r\n```python\r\n# ls_argv.py\r\n\r\nimport sys\r\nfrom pathlib import Path\r\n\r\nif (args_count := len(sys.argv)) > 2:\r\n    print(f"One argument expected, got {args_count - 1}")\r\n    raise SystemExit(2)\r\nelif args_count < 2:\r\n    print("You must specify the target directory")\r\n    raise SystemExit(2)\r\n\r\ntarget_dir = Path(sys.argv[1])\r\n\r\nif not target_dir.is_dir():\r\n    print("The target directory doesn\'t exist")\r\n    raise SystemExit(1)\r\n\r\nfor entry in target_dir.iterdir():\r\n    print(entry.name)\r\n```\r\n\r\n该程序通过手动处理命令行提供的参数来实现了一个简单的命令行界面（CLI），这些参数会自动存储在 `sys.argv` 中。`sys.argv` 的第一个元素始终是程序名称，第二个元素则是目标目录。由于应用程序不应接受超过一个目标目录，因此 `args_count` 不得超过 2。\r\n\r\n在检查 `sys.argv` 的内容后，您创建一个`pathlib.Path`对象来存储目标目录的路径。如果该目录不存在，您将通知用户并退出程序。接下来的`for`循环将列出目录内容，每行一个条目。\r\n\r\n如果从命令行运行该脚本，您将得到以下结果：    \r\n```bash\r\n$ python ls_argv.py sample/\r\nhello.txt\r\nlorem.md\r\nrealpython.md\r\n\r\n$ python ls_argv.py\r\nYou must specify the target directory\r\n\r\n$ python ls_argv.py sample/ other_dir/\r\nOne argument expected, got 2\r\n\r\n$ python ls_argv.py non_existing/\r\nThe target directory doesn\'t exist\r\n```\r\n\r\n您的程序接受一个目录作为参数，并列出其内容。如果您运行命令时没有提供参数，您将收到一个错误消息。如果您运行命令时指定了超过一个目标目录，您同样会收到一个错误消息。如果尝试运行命令并指定一个不存在的目录，程序将输出另一个错误消息。\r\n\r\n虽然您的程序运行正常，但对于更复杂的 CLI 应用程序来说，使用`sys.argv`属性手动解析命令行参数并不是一个可扩展的解决方案。如果您的应用需要接受更多的参数和选项，那么解析`sys.argv`将变得复杂且容易出错。您需要一个更好的解决方案，这就是 Python 中的`argparse`模块所提供的。\r\n\r\n### 使用 `argparse` 创建 CLI\r\n\r\n在 Python 中创建 CLI 应用程序的更便捷方法是使用标准库中的 [`argparse`](https://docs.python.org/3/library/argparse.html?highlight=argparse#module-argparse) 模块。该模块首次在 Python 3.2 中随 [PEP-389](https://www.python.org/dev/peps/pep-0389/) 一同发布，是快速创建 Python CLI 应用程序的利器，无需安装如 Typer 或 Click 这样的第三方库。\r\n\r\n`argparse` 模块是作为较旧的 [`getopt`](https://docs.python.org/3/library/getopt.html) 和 [`optparse`](https://docs.python.org/3/library/optparse.html) 模块的替代品而发布的，因为它们缺乏一些重要的功能。\r\n\r\nPython 的 `argparse` 模块允许您：     \r\n\r\n- 解析命令行**参数**(arguments)和**选项**(options)；\r\n- 在一个单一选项中接受**可变数量的参数**(variable number of parameters)；\r\n- 在 CLI 中提供子命令(subcommands)。\r\n\r\n这些特性使 `argparse` 成为了一个强大的 CLI 框架，您在创建 CLI 应用程序时可以放心地依赖它。要使用 Python 的 `argparse`，您需要遵循以下四个简单的步骤：\r\n\r\n1. 导入 `argparse`；\r\n2. 通过实例化 [`ArgumentParser`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser) 创建**参数解析器**(argument parser)；\r\n3. 使用 [`.add_argument()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_argument) 方法向解析器添加**参数**(arguments)和**选项**(options)；\r\n4. 在解析器上调用 [`.parse_args()`](https://docs.python.org/3/library/argparse.html?highlight=argparse#argparse.ArgumentParser.parse_args) 以获取参数 [`Namespace`](https://docs.python.org/3/library/argparse.html#namespace)。\r\n\r\n例如，您可以使用 `argparse` 来改进您的 `ls_argv.py` 脚本。现在，您可以创建一个名为 `ls.py` 的脚本，并编写以下代码：\r\n```python\r\n# ls.py v1\r\n\r\nimport argparse\r\nfrom pathlib import Path\r\n\r\nparser = argparse.ArgumentParser()\r\n\r\nparser.add_argument("path")\r\n\r\nargs = parser.parse_args()\r\n\r\ntarget_dir = Path(args.path)\r\n\r\nif not target_dir.exists():\r\n    print("The target directory doesn\'t exist")\r\n    raise SystemExit(1)\r\n\r\nfor entry in target_dir.iterdir():\r\n    print(entry.name)\r\n```\r\n\r\n随着 `argparse` 的引入，您的代码发生了显著的变化。与之前的版本相比，最明显的不同是，用于检查用户提供的参数的条件语句已经消失了。这是因为 `argparse` 会自动为您检查参数的存在性。\r\n\r\n在这个新的实现中，您首先导入 `argparse` 并创建一个参数解析器。要创建解析器，您可以使用 `ArgumentParser` 类。接下来，您定义一个名为 `path` 的参数，用于获取用户的目标目录。\r\n\r\n接下来，您需要调用 `.parse_args()` 方法来解析输入参数，并获取一个包含所有用户参数的 `Namespace` 对象。请注意，现在 `args` 变量保存了一个 `Namespace` 对象，该对象具有从命令行收集的每个参数所对应的属性。\r\n\r\n在这个例子中，您只有一个参数，名为 `path`。`Namespace` 对象允许您使用点表示法通过 `args` 来访问 `path`。其余的代码与第一个实现相同。\r\n\r\n现在继续从命令行运行这个新脚本：\r\n```bash\r\n$ python ls.py sample/\r\nlorem.md\r\nrealpython.md\r\nhello.txt\r\n\r\n$ python ls.py\r\nusage: ls.py [-h] path\r\nls.py: error: the following arguments are required: path\r\n\r\n$ python ls.py sample/ other_dir/\r\nusage: ls.py [-h] path\r\nls.py: error: unrecognized arguments: other_dir/\r\n\r\n$ python ls.py non_existing/\r\nThe target directory doesn\'t exist\r\n```\r\n\r\n第一个命令的输出与您的原始脚本 `ls_argv.py` 相同。而第二个命令的输出则与 `ls_argv.py` 中的输出大不相同。程序现在会显示一个使用说明消息，并发出错误提示，告诉您必须提供 `path` 参数。\r\n\r\n在第三个命令中，您传递了两个目标目录，但应用程序并未为此做好准备。因此，它再次显示使用说明消息，并抛出一个错误，告知您潜在的问题。\r\n\r\n最后，如果您运行脚本时传递了一个不存在的目录作为参数，那么您会收到一个错误，告知您目标目录不存在，因此程序无法执行其工作。\r\n\r\n现在，您可以使用一个新的隐式特性。现在，您的程序接受一个可选的 `-h` 标志。不妨尝试一下：\r\n```bash\r\n$ python ls.py -h\r\nusage: ls.py [-h] path\r\n\r\npositional arguments:\r\n  path\r\n\r\noptions:\r\n  -h, --help  show this help message and exit\r\n```\r\n\r\n太棒了，现在您的程序会自动响应 `-h` 或 `--help` 标志，并为您显示带有使用说明的帮助消息。这真是一个很棒的特性，而且您只需在代码中引入 `argparse` 就能轻松获得！\r\n\r\n经过这个快速介绍如何在 Python 中创建 CLI 应用后，您现在就可以深入研究 `argparse` 模块及其所有炫酷特性了。\r\n\r\n## 使用 Python 的 argparse 创建 CLI\r\n\r\n您可以使用 `argparse` 模块为您的应用程序和项目编写用户友好的命令行界面。该模块允许您定义应用程序所需的参数和选项。然后，`argparse` 将负责为您解析 `sys.argv` 的参数和选项。\r\n\r\n`argparse` 的另一个酷炫特性是它可以自动为您的 CLI 应用程序生成使用说明和帮助消息。该模块还会在参数无效时发出错误提示，并具备更多功能。\r\n\r\n在深入研究 `argparse` 之前，您需要知道该模块的文档可识别两种不同类型的命令行参数：     \r\n\r\n- **位置参数**(Positional arguments)，您称为参数(arguments)；\r\n- **可选参数**(Optional arguments)，即选项(options)、标志(flags)或开关(switches)。\r\n\r\n在 `ls.py` 的示例中，`path` 是一个**位置参数**(positional argument)。这样的参数之所以被称为位置参数，是因为它在命令构造中的相对位置定义了其作用。\r\n\r\n与位置参数不同，**可选参数**(Optional arguments)并不是必需的。它们允许你修改命令的行为。以 Unix 命令 `ls` 为例，`-l` 标志就是一个可选参数，它使得命令以详细模式显示输出。\r\n\r\n在明确了这些概念之后，你就可以着手使用 Python 和 `argparse` 库来构建自己的命令行界面（CLI）应用程序了。\r\n\r\n### 创建命令行参数解析器\r\n\r\n命令行参数解析器是任何使用 `argparse` 的命令行界面（CLI）中最为关键的部分。你在命令行上提供的所有参数和选项都会经过这个解析器的处理，它会为你完成繁重的解析工作。\r\n\r\n要使用 `argparse` 创建命令行参数解析器，您需要实例化 [`ArgumentParser`](https://docs.python.org/3/library/argparse.html#argumentparser-objects) 类：    \r\n```python\r\n>>> from argparse import ArgumentParser\r\n\r\n>>> parser = ArgumentParser()\r\n>>> parser\r\nArgumentParser(\r\n    prog=\'\',\r\n    usage=None,\r\n    description=None,\r\n    formatter_class=<class \'argparse.HelpFormatter\'>,\r\n    conflict_handler=\'error\',\r\n    add_help=True\r\n)\r\n```\r\n\r\n`ArgumentParser` 的构造函数接受多种不同的参数，你可以利用这些参数来微调你的 CLI 的多个特性。由于所有这些参数都是可选的，因此你可以通过不传入任何参数直接实例化 `ArgumentParser` 来创建一个最基本的解析器。\r\n\r\n在本教程中，你将会更深入地了解 `ArgumentParser` 构造函数的参数，特别是在定制你的参数解析器的部分。目前，你可以开始使用 `argparse` 创建 CLI 的下一步了。这一步就是通过解析器对象来添加参数和选项。\r\n\r\n### 添加参数和选项\r\n\r\n要为 `argparse` 的 CLI 添加参数和选项，你将使用 `ArgumentParser` 实例的 [`.add_argument()`](https://docs.python.org/3/library/argparse.html#the-add-argument-method) 方法。请注意，这个方法对参数和选项都是通用的。在 `argparse` 的术语中，参数被称为**位置参数**(positional arguments)，而选项被称为**可选参数**(optional arguments)。\r\n\r\n`.add_argument()` 方法的第一个参数决定了参数和选项之间的区别。这个参数被标识为[名称（name）或标志（flag）](https://docs.python.org/3/library/argparse.html?highlight=argparse#name-or-flags)。因此，如果你提供一个 name，那么你将定义一个参数(argument)。相反，如果你使用一个 flag，那么你将添加一个选项(option)。\r\n\r\n你已经在使用 `argparse` 时处理过命令行参数了。现在，考虑以下你自定义的 `ls` 命令的增强版本，它向 CLI 添加了一个 `-l` 选项：     \r\n```python\r\n# ls.py v2\r\n\r\nimport argparse\r\nimport datetime\r\nfrom pathlib import Path\r\n\r\nparser = argparse.ArgumentParser()\r\n\r\nparser.add_argument("path")\r\n\r\nparser.add_argument("-l", "--long", action="store_true")\r\n\r\nargs = parser.parse_args()\r\n\r\ntarget_dir = Path(args.path)\r\n\r\nif not target_dir.exists():\r\n    print("The target directory doesn\'t exist")\r\n    raise SystemExit(1)\r\n\r\ndef build_output(entry, long=False):\r\n    if long:\r\n        size = entry.stat().st_size\r\n        date = datetime.datetime.fromtimestamp(\r\n            entry.stat().st_mtime).strftime(\r\n            "%b %d %H:%M:%S"\r\n        )\r\n        return f"{size:>6d} {date} {entry.name}"\r\n    return entry.name\r\n\r\nfor entry in target_dir.iterdir():\r\n    print(build_output(entry, long=args.long))\r\n```\r\n\r\n在这个例子中，第 11 行代码创建了一个带有 `-l` 和 `--long` 标志的选项。参数(arguments)和选项(options)在语法上的区别在于，选项名称以短横线 `-` 开头表示简写标志，以双短横线 `--` 开头表示完整标志。\r\n\r\n请注意，在这个特定例子中，与 `-l` 或 `--long` 选项一同设置了一个 `action` 参数为 `"store_true"`，这意味着这个选项将存储一个布尔值。如果你在命令行上提供了这个选项，那么它的值将为 `True`。如果你省略了这个选项，那么它的值将为 `False`。在 "设置 Option 背后的 Action" 部分内容中，你将了解更多关于 `.add_argument()` 中的 `action` 参数的信息。\r\n\r\n在第 21 行的 `build_output()` 函数中，当 `long` 为 `True` 时，它会返回一个详细的输出，否则返回一个简短的输出。详细的输出将包含目标目录中所有条目的大小、修改日期和名称。它使用了诸如 `Path.stat()` 这样的工具，以及带有自定义字符串格式的 `datetime.datetime` 对象。\r\n\r\n继续在 `sample` 上执行您的程序，以检查 `-l` 选项如何工作：    \r\n```bash\r\n$ python ls.py -l sample/\r\n  2609 Oct 28 14:07:04 lorem.md\r\n   428 Oct 28 14:07:04 realpython.md\r\n    83 Oct 28 14:07:04 hello.txt\r\n```\r\n\r\n新增的 `-l` 选项允许你生成并显示关于目标目录内容的更详细输出。\r\n\r\n既然你已经知道了如何向 CLI 添加命令行参数和选项，接下来就是深入解析这些参数和选项的时候了。这将是你在接下来部分要探索的内容。\r\n\r\n### 解析命令行参数和选项\r\n\r\n解析命令行参数是基于 `argparse` 的任何 CLI 应用中的另一个重要步骤。一旦你解析了参数，你就可以根据它们的值来执行相应的操作。在你自定义的 `ls` 命令示例中，参数解析发生在包含 `args = parser.parse_args()` 语句的行上。\r\n\r\n这个语句调用了 [`.parse_args()`](https://docs.python.org/3/library/argparse.html#the-parse-args-method) 方法，并将其返回值赋给 `args` 变量。`.parse_args()` 的返回值是一个 [`Namespace`](https://docs.python.org/3/library/argparse.html#the-namespace-object) 对象，其中包含了在命令行上提供的所有参数和选项以及它们对应的值。\r\n\r\n考虑以下简单的示例：      \r\n```python\r\n>>> from argparse import ArgumentParser\r\n\r\n>>> parser = ArgumentParser()\r\n\r\n>>> parser.add_argument("site")\r\n_StoreAction(...)\r\n\r\n>>> parser.add_argument("-c", "--connect", action="store_true")\r\n_StoreTrueAction(...)\r\n\r\n>>> args = parser.parse_args(["Real Python", "-c"])\r\n>>> args\r\nNamespace(site=\'Real Python\', connect=True)\r\n\r\n>>> args.site\r\n\'Real Python\'\r\n>>> args.connect\r\nTrue\r\n```\r\n\r\n通过在命令行参数解析器上调用 `.parse_args()` 方法得到的 `Namespace` 对象，你可以使用**点表示法**(dot notation)访问所有输入参数、选项以及它们对应的值。这样，你就可以检查输入参数和选项的列表，并根据用户在命令行上的选择来执行相应的操作。\r\n\r\n你将在应用程序的主代码中使用这个 `Namespace` 对象。这与你在自定义 `ls` 命令示例中的 `for` 循环下所做的类似。\r\n\r\n到目前为止，你已经了解了创建基于 `argparse` 的 CLI 的主要步骤。现在，你可以花些时间学习如何在 Python 中组织和构建 CLI 应用程序的基础知识了。\r\n\r\n### 设置 CLI 应用程序的布局和构建系统\r\n\r\n在继续你的 `argparse` 学习之旅之前，你应该暂停一下，思考如何组织你的代码和规划一个 CLI 项目。首先，你应该考虑以下几点：    \r\n\r\n- 你可以创建模块和包来组织代码。\r\n- 你可以将 Python 应用的核心包命名为应用本身的名字。\r\n- 你会根据每个 Python 模块的具体内容或功能来命名它们。\r\n- 如果你希望某个包可以直接执行，你可以在该 Python 包中添加一个 `__main__.py` 模块。\r\n\r\n将这些想法铭记于心，并考虑到模型-视图-控制器（MVC）模式是一种有效组织应用程序结构的方法，你在规划 CLI 项目时可以采用以下目录结构：    \r\n```\r\nhello_cli/\r\n│\r\n├── hello_cli/\r\n│   ├── __init__.py\r\n│   ├── __main__.py\r\n│   ├── cli.py\r\n│   └── model.py\r\n│\r\n├── tests/\r\n│   ├── __init__.py\r\n│   ├── test_cli.py\r\n│   └── test_model.py\r\n│\r\n├── pyproject.toml\r\n├── README.md\r\n└── requirements.txt\r\n```\r\n\r\n`hello_cli/` 目录是项目的根目录。在那里，您将放置以下文件：    \r\n\r\n- pyproject.toml 是一个 TOML 文件，用于指定项目的构建系统(build system)和其他配置(configurations)。\r\n- README.md 文件提供了项目的描述以及安装和运行应用程序的说明。为你的项目添加一个描述性且详细的 README.md 文件是编程中的最佳实践，特别是如果你打算将项目作为开源解决方案发布的话。\r\n- requirements.txt 是一个常规文件，列出了项目的外部依赖项(external dependencies)。你将使用这个文件，结合 `pip` 的 `-r` 选项，来自动安装这些依赖项。\r\n\r\n接下来是 `hello_cli/` 目录，它包含了应用的核心包，该包包含以下模块：    \r\n\r\n- `__init__.py` 文件使得 `hello_cli/` 可以作为一个 Python 包被识别。\r\n- `__main__.py` 文件提供了应用程序的**入口点脚本**(entry-point script)或可执行文件，这是启动程序的主要入口。\r\n- `cli.py` 文件为应用提供了命令行界面。在此文件中的代码将扮演基于 MVC 架构中的视图-控制器角色。\r\n- `model.py` 文件包含了支持应用主要功能的代码。这部分代码将在你的 MVC 布局中扮演模型角色。\r\n\r\n你还需要一个 `tests/` 包，其中包含针对应用程序组件的单元测试文件。在这个具体的项目布局示例中，你有 `test_cli.py` 用于检查 CLI 功能的单元测试，以及 `test_model.py` 用于检查你的模型代码的单元测试。\r\n\r\n`pyproject.toml` 文件允许你定义应用程序的构建系统以及许多其他常规配置。以下是一个如何为你的示例 hello_cli 项目填写此文件的简单示例：    \r\n```toml\r\n# pyproject.toml\r\n\r\n[build-system]\r\nrequires = ["setuptools>=64.0.0", "wheel"]\r\nbuild-backend = "setuptools.build_meta"\r\n\r\n[project]\r\nname = "hello_cli"\r\nversion = "0.0.1"\r\ndescription = "My awesome Hello CLI application"\r\nreadme = "README.md"\r\nauthors = [{ name = "Real Python", email = "info@realpython.com" }]\r\n\r\n[project.scripts]\r\nhello_cli = "hello_cli.__main__:main"\r\n```\r\n\r\n`[build-system]` 表头将 `setuptools` 设置为应用程序的构建系统，并指定 Python 需要安装哪些依赖项来构建应用程序。`[project]` 表头为你的应用提供了通用元数据。这些元数据在你想要将应用发布到 Python 包索引（PyPI）时非常有用。最后， `[project.scripts]` 表头定义了你的应用程序的入口点。\r\n\r\n经过这次对 CLI 项目布局和构建的快速探索，你已经准备好继续学习 `argparse` 了，特别是如何自定义你的命令行参数解析器。\r\n\r\n## 自定义你的命令行参数解析器\r\n\r\n在前面的部分中，你已经学习了如何使用 Python 的 `argparse` 模块为你的程序或应用实现命令行接口的基础知识。同时，你也了解了如何按照 MVC 模式组织和规划 CLI 应用项目。\r\n\r\n在接下来的部分中，你将更深入地探索 `argparse` 的许多其他强大功能。特别是，你将学习如何在 `ArgumentParser` 构造函数中使用一些最有用的参数，这将使你能够自定义 CLI 应用的一般行为。\r\n\r\n### 调整程序的 Help 和 Usage 内容\r\n\r\n向 CLI 应用程序的用户提供使用说明和帮助是一种最佳实践，可以通过出色的用户体验 (UX) 让用户更加愉快。在本节中，你将了解如何利用 `ArgumentParser` 的一些参数来微调 CLI 应用程序向用户显示帮助和使用消息的方式。你将学习如何：    \r\n- 设置程序名称\r\n- 定义程序的描述和结束消息\r\n- 对参数和选项进行分组显示帮助\r\n\r\n首先，你将开始设置你的程序名称，并指定该名称在帮助或使用说明消息中的显示方式。\r\n\r\n#### 设置程序名称\r\n\r\n默认情况下，`argparse` 会使用 `sys.argv` 中的第一个值来设置程序的名称。这个第一项包含你刚刚执行的 Python 文件的名称。这个文件名在使用说明消息中看起来会有些奇怪。\r\n\r\n例如，继续使用 `-h` 选项运行自定义 `ls` 命令：\r\n```bash\r\n$ python ls.py -h\r\nusage: ls.py [-h] [-l] path\r\n\r\npositional arguments:\r\n  path\r\n\r\noptions:\r\n  -h, --help  show this help message and exit\r\n  -l, --long\r\n```\r\n\r\n命令输出中的高亮行显示 `argparse` 正在使用文件名 `ls.py` 作为程序的名称。这看起来有些奇怪，因为在使用说明消息中，应用名称很少包含文件扩展名。\r\n\r\n幸运的是，你可以使用 `prog` 参数来指定你的程序名称，就像下面的代码片段所示：     \r\n```python\r\n# ls.py v3\r\n\r\nimport argparse\r\nimport datetime\r\nfrom pathlib import Path\r\n\r\nparser = argparse.ArgumentParser(prog="ls")\r\n\r\n# ...\r\n\r\nfor entry in target_dir.iterdir():\r\n    print(build_output(entry, long=args.long))\r\n```\r\n\r\n使用 `prog` 参数，你可以指定将在使用说明消息中使用的程序名称。在这个例子中，你使用了字符串 "ls"。现在，继续运行你的应用：     \r\n```bash\r\n$ python ls.py -h\r\nusage: ls [-h] [-l] path\r\n\r\npositional arguments:\r\n  path\r\n\r\noptions:\r\n  -h, --help  show this help message and exit\r\n  -l, --long\r\n```\r\n\r\n很好！这个输出的第一行中的使用说明消息显示程序名称为 `ls`，而不是 `ls.py`。\r\n\r\n除了设置程序名称外，`argparse` 还允许你定义应用的描述和结尾信息。在接下来的部分中，你将学习如何进行这两方面的操作。\r\n\r\n#### 定义程序的描述和结语消息\r\n\r\n你还可以为你的应用定义一个通用的描述和一个结尾或结束语。为此，你将分别使用 `description` 和 `epilog` 参数。接下来，请更新 `ls.py` 文件，在 `ArgumentParser` 构造函数中添加以下内容：     \r\n```python\r\n# ls.py v4\r\n\r\nimport argparse\r\nimport datetime\r\nfrom pathlib import Path\r\n\r\nparser = argparse.ArgumentParser(\r\n    prog="ls",\r\n    description="List the content of a directory",\r\n    epilog="Thanks for using %(prog)s! :)",\r\n)\r\n\r\n# ...\r\n\r\nfor entry in target_dir.iterdir():\r\n    print(build_output(entry, long=args.long))\r\n```\r\n\r\n在这次更新中，`description` 参数允许你为应用提供一个通用的描述。这个描述将显示在帮助消息的开头。`epilog` 参数则允许你定义一些文本作为应用的结尾或结束语。请注意，你可以使用旧式的字符串格式化操作符(`%`)将 `prog` 参数插入到 `epilog` 字符串中。    \r\n\r\n如果再次运行该应用程序，你将得到如下输出：     \r\n```bash\r\n$ python ls.py -h\r\nusage: ls [-h] [-l] path\r\n\r\nList the content of a directory\r\n\r\npositional arguments:\r\n  path\r\n\r\noptions:\r\n  -h, --help  show this help message and exit\r\n  -l, --long\r\n\r\nThanks for using ls! :)\r\n```\r\n\r\n现在，输出会在使用消息之后显示描述消息，并在帮助文本末尾显示结语消息。\r\n\r\n#### 显示参数和选项的分组帮助\r\n\r\n**帮助分组**(Help groups)是 `argparse` 的另一个有趣特性。它们允许你将相关的命令和参数进行分组，从而帮助你组织应用的帮助消息。要创建这些帮助分组，你将使用 `ArgumentParser` 的 `.add_argument_group()` 方法。\r\n\r\n作为一个例子，请考虑你自定义的 `ls` 命令的以下更新版本：     \r\n```python\r\n# ls.py v5\r\n# ...\r\n\r\nparser = argparse.ArgumentParser(\r\n    prog="ls",\r\n    description="List the content of a directory",\r\n    epilog="Thanks for using %(prog)s! :)",\r\n)\r\n\r\ngeneral = parser.add_argument_group("general output")\r\ngeneral.add_argument("path")\r\n\r\ndetailed = parser.add_argument_group("detailed output")\r\ndetailed.add_argument("-l", "--long", action="store_true")\r\n\r\nargs = parser.parse_args()\r\n\r\n# ...\r\n\r\nfor entry in target_dir.iterdir():\r\n    print(build_output(entry, long=args.long))\r\n```\r\n\r\n在这次更新中，你为显示一般输出的参数和选项创建了一个帮助分组，并为显示详细输出的参数和选项创建了另一个分组。\r\n\r\n如果你在命令行中使用 `-h` 选项运行应用程序，那么你将获得以下输出：   \r\n```bash\r\npython ls.py -h\r\nusage: ls [-h] [-l] path\r\n\r\nList the content of a directory\r\n\r\noptions:\r\n  -h, --help  show this help message and exit\r\n\r\ngeneral output:\r\n  path\r\n\r\ndetailed output:\r\n  -l, --long\r\n\r\nThanks for using ls! :)\r\n```\r\n\r\n现在，你的应用的参数和选项在帮助消息中以描述性的标题进行了方便的分组。这个整洁的特性将帮助你为用户提供更多的上下文，并帮助他们更好地理解应用的工作原理。\r\n\r\n### 为参数和选项提供全局设置\r\n\r\n除了自定义使用说明和帮助消息外，`ArgumentParser` 还允许你对命令行界面（CLI）应用进行其他一些有趣的调整。这些调整包括：\r\n\r\n- 为参数和选项定义全局默认值\r\n- 从外部文件中加载参数和选项\r\n- 允许或禁止选项缩写\r\n\r\n有时，你可能需要为你的应用的参数和选项指定一个全局默认值。你可以通过在调用 `ArgumentParser` 构造函数时，将默认值传递给 `argument_default` 参数来实现这一点（注意：实际上 `ArgumentParser` 没有 `argument_default` 这个参数，但这里是为了说明可以全局设置默认值的概念。在实际应用中，你可能需要为每个参数单独设置默认值）。\r\n\r\n这个特性可能并不常用，因为参数和选项通常具有不同的数据类型或意义，很难找到一个满足所有需求的值。\r\n\r\n然而，`argument_default`(尽管 `ArgumentParser` 并没有直接提供这个参数，但这里是为了说明概念）的一个常见用例是当你想要避免将参数和选项添加到 `Namespace` 对象中。在这种情况下，你可以使用 `SUPPRESS` 常量作为默认值。这个默认值将确保只有命令行中提供的参数和选项才会被存储在 `arguments` 的 `Namespace` 中。\r\n\r\n作为一个例子，请继续修改你的自定义 `ls` 命令，如下面的代码片段所示：     \r\n```python\r\n# ls.py v6\r\n\r\nimport argparse\r\nimport datetime\r\nfrom pathlib import Path\r\n\r\nparser = argparse.ArgumentParser(\r\n    prog="ls",\r\n    description="List the content of a directory",\r\n    epilog="Thanks for using %(prog)s! :)",\r\n    argument_default=argparse.SUPPRESS,\r\n)\r\n\r\n# ...\r\n\r\nfor entry in target_dir.iterdir():\r\n    try:\r\n        long = args.long\r\n    except AttributeError:\r\n        long = False\r\n    print(build_output(entry, long=long))\r\n```\r\n\r\n通过将 `SUPPRESS` 传递给 `ArgumentParser` 构造函数，你可以防止未提供的参数被存储在 `argparse.Namespace` 对象中。这就是为什么在调用 `build_output()` 之前，你需要检查 `-l` 或 `--long` 选项是否实际被传递了。否则，你的代码会因为 `args` 中不存在 `long` 属性而引发 `AttributeError` 错误。\r\n\r\n`ArgumentParser` 的另一个酷炫功能是允许你从外部文件中加载参数值。当你有一个具有冗长或复杂的命令行结构的应用，并希望自动化加载参数值的过程时，这个功能就非常有用。\r\n\r\n在这种情况下，你可以将参数值存储在一个外部文件中，并让你的程序从该文件中加载它们。为了尝试这个功能，请继续创建一个简单的命令行界面（CLI）应用，如下所示：     \r\n```python\r\n# fromfile.py\r\n\r\nimport argparse\r\n\r\nparser = argparse.ArgumentParser(fromfile_prefix_chars="@")\r\n\r\nparser.add_argument("one")\r\nparser.add_argument("two")\r\nparser.add_argument("three")\r\n\r\nargs = parser.parse_args()\r\n\r\nprint(args)\r\n```\r\n\r\n在这里，你向 `ArgumentParser` 的 `fromfile_prefix_chars` 参数传递 `@` 符号。然后，你创建了三个必须在命令行中提供的必需参数。\r\n\r\n现在，假设你经常使用此应用程序，并且总是使用相同的一组参数值。为了简化和优化你的工作流程，你可以创建一个文件，其中包含所有必需参数的适当值，每个参数占一行，就像下面的 `args.txt` 文件一样：   \r\n```\r\nfirst\r\nsecond\r\nthird\r\n```\r\n\r\n有了这个文件，您现在可以调用您的程序并指示它从 `args.txt` 文件加载值，如以下命令运行所示：    \r\n```bash\r\n$ python fromfile.py @args.txt\r\nNamespace(one=\'first\', two=\'second\', three=\'third\')\r\n```\r\n\r\n在此命令的输出中，你可以看到 `argparse` 已经读取了 `args.txt` 的内容，并顺序地将值分配给了 `fromfile.py` 程序的每个参数。所有参数及其值都已成功存储在 `Namespace` 对象中。\r\n\r\n接受缩写选项名称的能力是 `argparse` 命令行界面（CLI）的另一个酷炫特性。这个特性是默认启用的，当你的程序具有长选项名称时非常有用。例如，考虑以下程序，它会在命令行下打印出你在 `--argument-with-a-long-name` 选项后指定的值：     \r\n```python\r\n# abbreviate.py\r\n\r\nimport argparse\r\n\r\nparser = argparse.ArgumentParser()\r\n\r\nparser.add_argument("--argument-with-a-long-name")\r\n\r\nargs = parser.parse_args()\r\n\r\nprint(args.argument_with_a_long_name)\r\n```\r\n\r\n这个程序会打印出你在 `--argument-with-a-long-name` 选项后传入的任何参数值。现在，请继续运行以下命令来检查 Python 的 `argparse` 模块如何处理这些缩写：    \r\n```bash\r\n$ python abbreviate.py --argument-with-a-long-name 42\r\n42\r\n\r\n$ python abbreviate.py --argument 42\r\n42\r\n\r\n$ python abbreviate.py --a 42\r\n42\r\n```\r\n\r\n这些示例展示了如何缩写 `--argument-with-a-long-name` 选项的名称，而应用程序仍能正常工作。此功能是默认启用的。如果你希望禁用它并禁止缩写，那么可以在 `ArgumentParser` 中使用 `allow_abbrev` 参数：    \r\n```python\r\n# abbreviate.py\r\n\r\nimport argparse\r\n\r\nparser = argparse.ArgumentParser(allow_abbrev=False)\r\n\r\nparser.add_argument("--argument-with-a-long-name")\r\n\r\nargs = parser.parse_args()\r\n\r\nprint(args.argument_with_a_long_name)\r\n```\r\n\r\n将 `allow_abbrev` 设置为 `False` 会禁用命令行选项中的缩写。从这一点开始，你将需要为程序提供完整的选项名称才能正确工作。否则，你会收到一个错误：     \r\n```bash\r\n$ python abbreviate.py --argument-with-a-long-name 42\r\n42\r\n\r\n$ python abbreviate.py --argument 42\r\nusage: abbreviate.py [-h] [--argument-with-a-long-name ...]\r\nabbreviate.py: error: unrecognized arguments: --argument 42\r\n```\r\n\r\n第二个示例中的错误消息告诉你 `--argument` 选项没有被识别为有效的选项。要使用该选项，你需要提供它的完整名称。\r\n\r\n## 微调你的命令行参数和选项\r\n\r\n到目前为止，你已经学习了如何定制 `ArgumentParser` 类的多个功能，以改善你的命令行界面（CLI）的用户体验。现在，你知道了如何调整你的应用程序的使用说明和帮助信息，以及如何微调命令行参数和选项的一些全局方面。\r\n\r\n在本节中，你将学习如何定制你的 CLI 的命令行参数和选项的其他几个功能。在这种情况下，你将使用 `.add_argument()` 方法及其一些最相关的参数，包括 `action`、`type`、`nargs`、`default`、`help` 等。     \r\n\r\n### 设置 Option 背后的 Action\r\n\r\n当你向命令行界面添加一个选项或标志时，通常需要定义如何将选项的值存储在调用 `.parse_args()` 后得到的 `Namespace` 对象中。为此，你会使用 `.add_argument()` 的 `action` 参数。`action` 参数的默认值为 "store"，意味着提供的选项值将原样存储在 `Namespace` 中。\r\n\r\n`action` 参数可以接受几个可能的值。以下是这些可能值的列表及其含义：', 'bodyText': '原文：Build Command-Line Interfaces With Python\'s argparse\n\n命令行应用在普通用户空间中可能并不常见，但它们存在于开发、数据科学、系统管理和许多其他操作中。每个命令行应用都需要一个用户友好的命令行界面 （CLI），以便你可以与应用本身进行交互。在 Python 中，您可以使用标准库中的 argparse 模块创建功能齐全的 CLI。\n\n在本文中，你将了解如何：\n\n命令行界面入门；\n在 Python 中组织和布局命令行应用项目；\n使用 Python argparse 创建命令行界面（command-line interfaces）；\n使用 argparse 一些强大的功能深度自定义您的 CLI；\n\n若要充分利用本教程，应熟悉 Python 编程，包括面向对象编程、脚本开发和执行以及 Python 包和模块等概念。如果您熟悉与使用命令行或终端相关的一般概念和主题，这也将很有帮助。\n了解命令行界面\n自从计算机发明以来，人类一直需要并找到与这些机器交互和共享信息的方法。信息交换在人、计算机软件和硬件组件之间流动。其中任意两个元素之间的共享边界通常称为接口(interface)。\n在软件开发中，接口是给定软件的特殊部分，它允许计算机系统组件之间的交互。当涉及到人机交互和软件交互时，这个重要的组件被称为用户界面（user interface）。\n您会在编程中找到不同类型的用户界面。图形用户界面 （GUI） 可能是当今最常见的。但是，您还可以找到为其用户提供命令行界面 （CLI） 的应用和程序。在本教程中，你将了解 CLI 以及如何在 Python 中创建它们。\n命令行界面 （CLI）\n命令行界面允许您通过操作系统命令行、终端或控制台与应用程序或程序进行交互。\n要了解命令行界面及其工作原理，请考虑此实际示例。假设您有一个名为 sample 包含三个示例文件的目录。如果您使用的是类 Unix 操作系统，例如 Linux 或 macOS，请继续在父目录中打开命令行窗口或终端，然后执行以下命令：\n$ ls sample/\nhello.txt     lorem.md      realpython.md\nUnix 的 ls 命令列出目标目录中包含的文件和子目录，该目录默认为当前工作目录。上面的命令调用没有显示有关 的内容 sample 的太多信息。它只在屏幕上显示文件名。\n假设你想要获取有关目录及其内容的更丰富信息，那么你不需要寻找其他程序，因为 ls 命令有一个功能齐全的命令行界面，并且提供了一组有用的选项，可以用来定制命令的行为。\n例如，继续执行带有 -l 选项的 ls 命令：\n$ ls -l sample/\ntotal 24\n-rw-r--r--@ 1 user  staff    83 Aug 17 22:15 hello.txt\n-rw-r--r--@ 1 user  staff  2609 Aug 17 22:15 lorem.md\n-rw-r--r--@ 1 user  staff   428 Aug 17 22:15 realpython.md\n现在，ls 命令的输出完全不同了。该命令显示了有关 sample 目录中文件的更多信息，包括权限、所有者、组、日期和大小。它还显示了这些文件在你计算机磁盘上使用的总空间。\n这种更丰富的输出结果是由于使用了 -l 选项，这是 Unix ls 命令行界面的一部分，它启用了详细的输出格式。\n命令、参数、选项、参数和子命令\n在本教程中，您将深入了解命令(commands)及其子命令(subcommands)，同时还会学习到命令行参数(command-line arguments)、选项(options)和参数(parameters)的相关知识。因此，建议您将这些术语纳入您的技术词汇库中。\n\n命令(Command)：在命令行或终端窗口中运行的程序或例程。通常，您可以通过其背后的程序(underlying program)或例程(routine)的名称来识别一个命令。\n参数(Argument)：命令在执行其预期操作时所需或可选的信息片段。命令通常接受一个或多个参数，您可以在命令行中以空格分隔或逗号分隔的列表形式提供这些参数。\n选项(Option)，也称为 flag 或 switch：一种可选的参数，用于修改命令的行为。选项通过特定的名称（如前一个示例中的 -l）传递给命令。\n参数(Parameter)：一个选项用于执行其预期操作或动作时所使用的参数。\n子命令(Subcommand)**：一个预定义的名称，可以传递给应用程序来执行特定的操作。\n\n参考上一节中的示例命令结构：\n$ ls -l sample/\n在这个例子中，您组合了命令行界面（CLI）的以下组件：\n\nls：命令的名称或应用的名称；\n-l：启用详细输出的选项(option)、开关(switch)或标志(flag)；\nsample：为命令执行提供附加信息的参数(argument)；\n\n现在，让我们来看下面的命令结构，它展示了 Python 包管理器 pip 的命令行界面（CLI）：\n$ pip install -r requirements.txt\n这是一个常见的 pip 命令结构，您可能之前已经见过。它允许您使用 requirements.txt 文件来给指定的 Python 项目安装依赖项。在这个例子中，您使用了以下命令行界面（CLI）组件：\n\npip：命令的名称；\ninstall：pip 的子命令(subcommand)名称；\n-r：install 子命令的选项(option)；\nrequirements.txt：一个参数，特别是 -r 选项的参数。\n\n现在您已经了解了命令行界面（CLI）是什么以及其主要部分或组件有哪些。接下来，是时候学习如何在 Python 中创建自己的 CLI 了。\nPython 中的 CLI 入门\nPython 附带了一些工具，这些工具可帮助您为程序和应用程序编写命令行界面（CLI）。若您需要快速为小型程序构建一个简洁的 CLI，那么可以利用 sys 模块中的 argv 属性。这个属性会自动存储您在命令行中传递给特定程序的参数。\n使用 sys.argv 构建最小的 CLI\n以使用 argv 创建最小命令行界面（CLI）为例，假设您需要编写一个小程序，该程序类似于 ls 命令，能够列出给定目录下的所有文件。在这种情况下，您可以编写如下代码：\n# ls_argv.py\n\nimport sys\nfrom pathlib import Path\n\nif (args_count := len(sys.argv)) > 2:\n    print(f"One argument expected, got {args_count - 1}")\n    raise SystemExit(2)\nelif args_count < 2:\n    print("You must specify the target directory")\n    raise SystemExit(2)\n\ntarget_dir = Path(sys.argv[1])\n\nif not target_dir.is_dir():\n    print("The target directory doesn\'t exist")\n    raise SystemExit(1)\n\nfor entry in target_dir.iterdir():\n    print(entry.name)\n该程序通过手动处理命令行提供的参数来实现了一个简单的命令行界面（CLI），这些参数会自动存储在 sys.argv 中。sys.argv 的第一个元素始终是程序名称，第二个元素则是目标目录。由于应用程序不应接受超过一个目标目录，因此 args_count 不得超过 2。\n在检查 sys.argv 的内容后，您创建一个pathlib.Path对象来存储目标目录的路径。如果该目录不存在，您将通知用户并退出程序。接下来的for循环将列出目录内容，每行一个条目。\n如果从命令行运行该脚本，您将得到以下结果：\n$ python ls_argv.py sample/\nhello.txt\nlorem.md\nrealpython.md\n\n$ python ls_argv.py\nYou must specify the target directory\n\n$ python ls_argv.py sample/ other_dir/\nOne argument expected, got 2\n\n$ python ls_argv.py non_existing/\nThe target directory doesn\'t exist\n您的程序接受一个目录作为参数，并列出其内容。如果您运行命令时没有提供参数，您将收到一个错误消息。如果您运行命令时指定了超过一个目标目录，您同样会收到一个错误消息。如果尝试运行命令并指定一个不存在的目录，程序将输出另一个错误消息。\n虽然您的程序运行正常，但对于更复杂的 CLI 应用程序来说，使用sys.argv属性手动解析命令行参数并不是一个可扩展的解决方案。如果您的应用需要接受更多的参数和选项，那么解析sys.argv将变得复杂且容易出错。您需要一个更好的解决方案，这就是 Python 中的argparse模块所提供的。\n使用 argparse 创建 CLI\n在 Python 中创建 CLI 应用程序的更便捷方法是使用标准库中的 argparse 模块。该模块首次在 Python 3.2 中随 PEP-389 一同发布，是快速创建 Python CLI 应用程序的利器，无需安装如 Typer 或 Click 这样的第三方库。\nargparse 模块是作为较旧的 getopt 和 optparse 模块的替代品而发布的，因为它们缺乏一些重要的功能。\nPython 的 argparse 模块允许您：\n\n解析命令行参数(arguments)和选项(options)；\n在一个单一选项中接受可变数量的参数(variable number of parameters)；\n在 CLI 中提供子命令(subcommands)。\n\n这些特性使 argparse 成为了一个强大的 CLI 框架，您在创建 CLI 应用程序时可以放心地依赖它。要使用 Python 的 argparse，您需要遵循以下四个简单的步骤：\n\n导入 argparse；\n通过实例化 ArgumentParser 创建参数解析器(argument parser)；\n使用 .add_argument() 方法向解析器添加参数(arguments)和选项(options)；\n在解析器上调用 .parse_args() 以获取参数 Namespace。\n\n例如，您可以使用 argparse 来改进您的 ls_argv.py 脚本。现在，您可以创建一个名为 ls.py 的脚本，并编写以下代码：\n# ls.py v1\n\nimport argparse\nfrom pathlib import Path\n\nparser = argparse.ArgumentParser()\n\nparser.add_argument("path")\n\nargs = parser.parse_args()\n\ntarget_dir = Path(args.path)\n\nif not target_dir.exists():\n    print("The target directory doesn\'t exist")\n    raise SystemExit(1)\n\nfor entry in target_dir.iterdir():\n    print(entry.name)\n随着 argparse 的引入，您的代码发生了显著的变化。与之前的版本相比，最明显的不同是，用于检查用户提供的参数的条件语句已经消失了。这是因为 argparse 会自动为您检查参数的存在性。\n在这个新的实现中，您首先导入 argparse 并创建一个参数解析器。要创建解析器，您可以使用 ArgumentParser 类。接下来，您定义一个名为 path 的参数，用于获取用户的目标目录。\n接下来，您需要调用 .parse_args() 方法来解析输入参数，并获取一个包含所有用户参数的 Namespace 对象。请注意，现在 args 变量保存了一个 Namespace 对象，该对象具有从命令行收集的每个参数所对应的属性。\n在这个例子中，您只有一个参数，名为 path。Namespace 对象允许您使用点表示法通过 args 来访问 path。其余的代码与第一个实现相同。\n现在继续从命令行运行这个新脚本：\n$ python ls.py sample/\nlorem.md\nrealpython.md\nhello.txt\n\n$ python ls.py\nusage: ls.py [-h] path\nls.py: error: the following arguments are required: path\n\n$ python ls.py sample/ other_dir/\nusage: ls.py [-h] path\nls.py: error: unrecognized arguments: other_dir/\n\n$ python ls.py non_existing/\nThe target directory doesn\'t exist\n第一个命令的输出与您的原始脚本 ls_argv.py 相同。而第二个命令的输出则与 ls_argv.py 中的输出大不相同。程序现在会显示一个使用说明消息，并发出错误提示，告诉您必须提供 path 参数。\n在第三个命令中，您传递了两个目标目录，但应用程序并未为此做好准备。因此，它再次显示使用说明消息，并抛出一个错误，告知您潜在的问题。\n最后，如果您运行脚本时传递了一个不存在的目录作为参数，那么您会收到一个错误，告知您目标目录不存在，因此程序无法执行其工作。\n现在，您可以使用一个新的隐式特性。现在，您的程序接受一个可选的 -h 标志。不妨尝试一下：\n$ python ls.py -h\nusage: ls.py [-h] path\n\npositional arguments:\n  path\n\noptions:\n  -h, --help  show this help message and exit\n太棒了，现在您的程序会自动响应 -h 或 --help 标志，并为您显示带有使用说明的帮助消息。这真是一个很棒的特性，而且您只需在代码中引入 argparse 就能轻松获得！\n经过这个快速介绍如何在 Python 中创建 CLI 应用后，您现在就可以深入研究 argparse 模块及其所有炫酷特性了。\n使用 Python 的 argparse 创建 CLI\n您可以使用 argparse 模块为您的应用程序和项目编写用户友好的命令行界面。该模块允许您定义应用程序所需的参数和选项。然后，argparse 将负责为您解析 sys.argv 的参数和选项。\nargparse 的另一个酷炫特性是它可以自动为您的 CLI 应用程序生成使用说明和帮助消息。该模块还会在参数无效时发出错误提示，并具备更多功能。\n在深入研究 argparse 之前，您需要知道该模块的文档可识别两种不同类型的命令行参数：\n\n位置参数(Positional arguments)，您称为参数(arguments)；\n可选参数(Optional arguments)，即选项(options)、标志(flags)或开关(switches)。\n\n在 ls.py 的示例中，path 是一个位置参数(positional argument)。这样的参数之所以被称为位置参数，是因为它在命令构造中的相对位置定义了其作用。\n与位置参数不同，可选参数(Optional arguments)并不是必需的。它们允许你修改命令的行为。以 Unix 命令 ls 为例，-l 标志就是一个可选参数，它使得命令以详细模式显示输出。\n在明确了这些概念之后，你就可以着手使用 Python 和 argparse 库来构建自己的命令行界面（CLI）应用程序了。\n创建命令行参数解析器\n命令行参数解析器是任何使用 argparse 的命令行界面（CLI）中最为关键的部分。你在命令行上提供的所有参数和选项都会经过这个解析器的处理，它会为你完成繁重的解析工作。\n要使用 argparse 创建命令行参数解析器，您需要实例化 ArgumentParser 类：\n>>> from argparse import ArgumentParser\n\n>>> parser = ArgumentParser()\n>>> parser\nArgumentParser(\n    prog=\'\',\n    usage=None,\n    description=None,\n    formatter_class=<class \'argparse.HelpFormatter\'>,\n    conflict_handler=\'error\',\n    add_help=True\n)\nArgumentParser 的构造函数接受多种不同的参数，你可以利用这些参数来微调你的 CLI 的多个特性。由于所有这些参数都是可选的，因此你可以通过不传入任何参数直接实例化 ArgumentParser 来创建一个最基本的解析器。\n在本教程中，你将会更深入地了解 ArgumentParser 构造函数的参数，特别是在定制你的参数解析器的部分。目前，你可以开始使用 argparse 创建 CLI 的下一步了。这一步就是通过解析器对象来添加参数和选项。\n添加参数和选项\n要为 argparse 的 CLI 添加参数和选项，你将使用 ArgumentParser 实例的 .add_argument() 方法。请注意，这个方法对参数和选项都是通用的。在 argparse 的术语中，参数被称为位置参数(positional arguments)，而选项被称为可选参数(optional arguments)。\n.add_argument() 方法的第一个参数决定了参数和选项之间的区别。这个参数被标识为名称（name）或标志（flag）。因此，如果你提供一个 name，那么你将定义一个参数(argument)。相反，如果你使用一个 flag，那么你将添加一个选项(option)。\n你已经在使用 argparse 时处理过命令行参数了。现在，考虑以下你自定义的 ls 命令的增强版本，它向 CLI 添加了一个 -l 选项：\n# ls.py v2\n\nimport argparse\nimport datetime\nfrom pathlib import Path\n\nparser = argparse.ArgumentParser()\n\nparser.add_argument("path")\n\nparser.add_argument("-l", "--long", action="store_true")\n\nargs = parser.parse_args()\n\ntarget_dir = Path(args.path)\n\nif not target_dir.exists():\n    print("The target directory doesn\'t exist")\n    raise SystemExit(1)\n\ndef build_output(entry, long=False):\n    if long:\n        size = entry.stat().st_size\n        date = datetime.datetime.fromtimestamp(\n            entry.stat().st_mtime).strftime(\n            "%b %d %H:%M:%S"\n        )\n        return f"{size:>6d} {date} {entry.name}"\n    return entry.name\n\nfor entry in target_dir.iterdir():\n    print(build_output(entry, long=args.long))\n在这个例子中，第 11 行代码创建了一个带有 -l 和 --long 标志的选项。参数(arguments)和选项(options)在语法上的区别在于，选项名称以短横线 - 开头表示简写标志，以双短横线 -- 开头表示完整标志。\n请注意，在这个特定例子中，与 -l 或 --long 选项一同设置了一个 action 参数为 "store_true"，这意味着这个选项将存储一个布尔值。如果你在命令行上提供了这个选项，那么它的值将为 True。如果你省略了这个选项，那么它的值将为 False。在 "设置 Option 背后的 Action" 部分内容中，你将了解更多关于 .add_argument() 中的 action 参数的信息。\n在第 21 行的 build_output() 函数中，当 long 为 True 时，它会返回一个详细的输出，否则返回一个简短的输出。详细的输出将包含目标目录中所有条目的大小、修改日期和名称。它使用了诸如 Path.stat() 这样的工具，以及带有自定义字符串格式的 datetime.datetime 对象。\n继续在 sample 上执行您的程序，以检查 -l 选项如何工作：\n$ python ls.py -l sample/\n  2609 Oct 28 14:07:04 lorem.md\n   428 Oct 28 14:07:04 realpython.md\n    83 Oct 28 14:07:04 hello.txt\n新增的 -l 选项允许你生成并显示关于目标目录内容的更详细输出。\n既然你已经知道了如何向 CLI 添加命令行参数和选项，接下来就是深入解析这些参数和选项的时候了。这将是你在接下来部分要探索的内容。\n解析命令行参数和选项\n解析命令行参数是基于 argparse 的任何 CLI 应用中的另一个重要步骤。一旦你解析了参数，你就可以根据它们的值来执行相应的操作。在你自定义的 ls 命令示例中，参数解析发生在包含 args = parser.parse_args() 语句的行上。\n这个语句调用了 .parse_args() 方法，并将其返回值赋给 args 变量。.parse_args() 的返回值是一个 Namespace 对象，其中包含了在命令行上提供的所有参数和选项以及它们对应的值。\n考虑以下简单的示例：\n>>> from argparse import ArgumentParser\n\n>>> parser = ArgumentParser()\n\n>>> parser.add_argument("site")\n_StoreAction(...)\n\n>>> parser.add_argument("-c", "--connect", action="store_true")\n_StoreTrueAction(...)\n\n>>> args = parser.parse_args(["Real Python", "-c"])\n>>> args\nNamespace(site=\'Real Python\', connect=True)\n\n>>> args.site\n\'Real Python\'\n>>> args.connect\nTrue\n通过在命令行参数解析器上调用 .parse_args() 方法得到的 Namespace 对象，你可以使用点表示法(dot notation)访问所有输入参数、选项以及它们对应的值。这样，你就可以检查输入参数和选项的列表，并根据用户在命令行上的选择来执行相应的操作。\n你将在应用程序的主代码中使用这个 Namespace 对象。这与你在自定义 ls 命令示例中的 for 循环下所做的类似。\n到目前为止，你已经了解了创建基于 argparse 的 CLI 的主要步骤。现在，你可以花些时间学习如何在 Python 中组织和构建 CLI 应用程序的基础知识了。\n设置 CLI 应用程序的布局和构建系统\n在继续你的 argparse 学习之旅之前，你应该暂停一下，思考如何组织你的代码和规划一个 CLI 项目。首先，你应该考虑以下几点：\n\n你可以创建模块和包来组织代码。\n你可以将 Python 应用的核心包命名为应用本身的名字。\n你会根据每个 Python 模块的具体内容或功能来命名它们。\n如果你希望某个包可以直接执行，你可以在该 Python 包中添加一个 __main__.py 模块。\n\n将这些想法铭记于心，并考虑到模型-视图-控制器（MVC）模式是一种有效组织应用程序结构的方法，你在规划 CLI 项目时可以采用以下目录结构：\nhello_cli/\n│\n├── hello_cli/\n│   ├── __init__.py\n│   ├── __main__.py\n│   ├── cli.py\n│   └── model.py\n│\n├── tests/\n│   ├── __init__.py\n│   ├── test_cli.py\n│   └── test_model.py\n│\n├── pyproject.toml\n├── README.md\n└── requirements.txt\n\nhello_cli/ 目录是项目的根目录。在那里，您将放置以下文件：\n\npyproject.toml 是一个 TOML 文件，用于指定项目的构建系统(build system)和其他配置(configurations)。\nREADME.md 文件提供了项目的描述以及安装和运行应用程序的说明。为你的项目添加一个描述性且详细的 README.md 文件是编程中的最佳实践，特别是如果你打算将项目作为开源解决方案发布的话。\nrequirements.txt 是一个常规文件，列出了项目的外部依赖项(external dependencies)。你将使用这个文件，结合 pip 的 -r 选项，来自动安装这些依赖项。\n\n接下来是 hello_cli/ 目录，它包含了应用的核心包，该包包含以下模块：\n\n__init__.py 文件使得 hello_cli/ 可以作为一个 Python 包被识别。\n__main__.py 文件提供了应用程序的入口点脚本(entry-point script)或可执行文件，这是启动程序的主要入口。\ncli.py 文件为应用提供了命令行界面。在此文件中的代码将扮演基于 MVC 架构中的视图-控制器角色。\nmodel.py 文件包含了支持应用主要功能的代码。这部分代码将在你的 MVC 布局中扮演模型角色。\n\n你还需要一个 tests/ 包，其中包含针对应用程序组件的单元测试文件。在这个具体的项目布局示例中，你有 test_cli.py 用于检查 CLI 功能的单元测试，以及 test_model.py 用于检查你的模型代码的单元测试。\npyproject.toml 文件允许你定义应用程序的构建系统以及许多其他常规配置。以下是一个如何为你的示例 hello_cli 项目填写此文件的简单示例：\n# pyproject.toml\n\n[build-system]\nrequires = ["setuptools>=64.0.0", "wheel"]\nbuild-backend = "setuptools.build_meta"\n\n[project]\nname = "hello_cli"\nversion = "0.0.1"\ndescription = "My awesome Hello CLI application"\nreadme = "README.md"\nauthors = [{ name = "Real Python", email = "info@realpython.com" }]\n\n[project.scripts]\nhello_cli = "hello_cli.__main__:main"\n[build-system] 表头将 setuptools 设置为应用程序的构建系统，并指定 Python 需要安装哪些依赖项来构建应用程序。[project] 表头为你的应用提供了通用元数据。这些元数据在你想要将应用发布到 Python 包索引（PyPI）时非常有用。最后， [project.scripts] 表头定义了你的应用程序的入口点。\n经过这次对 CLI 项目布局和构建的快速探索，你已经准备好继续学习 argparse 了，特别是如何自定义你的命令行参数解析器。\n自定义你的命令行参数解析器\n在前面的部分中，你已经学习了如何使用 Python 的 argparse 模块为你的程序或应用实现命令行接口的基础知识。同时，你也了解了如何按照 MVC 模式组织和规划 CLI 应用项目。\n在接下来的部分中，你将更深入地探索 argparse 的许多其他强大功能。特别是，你将学习如何在 ArgumentParser 构造函数中使用一些最有用的参数，这将使你能够自定义 CLI 应用的一般行为。\n调整程序的 Help 和 Usage 内容\n向 CLI 应用程序的用户提供使用说明和帮助是一种最佳实践，可以通过出色的用户体验 (UX) 让用户更加愉快。在本节中，你将了解如何利用 ArgumentParser 的一些参数来微调 CLI 应用程序向用户显示帮助和使用消息的方式。你将学习如何：\n\n设置程序名称\n定义程序的描述和结束消息\n对参数和选项进行分组显示帮助\n\n首先，你将开始设置你的程序名称，并指定该名称在帮助或使用说明消息中的显示方式。\n设置程序名称\n默认情况下，argparse 会使用 sys.argv 中的第一个值来设置程序的名称。这个第一项包含你刚刚执行的 Python 文件的名称。这个文件名在使用说明消息中看起来会有些奇怪。\n例如，继续使用 -h 选项运行自定义 ls 命令：\n$ python ls.py -h\nusage: ls.py [-h] [-l] path\n\npositional arguments:\n  path\n\noptions:\n  -h, --help  show this help message and exit\n  -l, --long\n命令输出中的高亮行显示 argparse 正在使用文件名 ls.py 作为程序的名称。这看起来有些奇怪，因为在使用说明消息中，应用名称很少包含文件扩展名。\n幸运的是，你可以使用 prog 参数来指定你的程序名称，就像下面的代码片段所示：\n# ls.py v3\n\nimport argparse\nimport datetime\nfrom pathlib import Path\n\nparser = argparse.ArgumentParser(prog="ls")\n\n# ...\n\nfor entry in target_dir.iterdir():\n    print(build_output(entry, long=args.long))\n使用 prog 参数，你可以指定将在使用说明消息中使用的程序名称。在这个例子中，你使用了字符串 "ls"。现在，继续运行你的应用：\n$ python ls.py -h\nusage: ls [-h] [-l] path\n\npositional arguments:\n  path\n\noptions:\n  -h, --help  show this help message and exit\n  -l, --long\n很好！这个输出的第一行中的使用说明消息显示程序名称为 ls，而不是 ls.py。\n除了设置程序名称外，argparse 还允许你定义应用的描述和结尾信息。在接下来的部分中，你将学习如何进行这两方面的操作。\n定义程序的描述和结语消息\n你还可以为你的应用定义一个通用的描述和一个结尾或结束语。为此，你将分别使用 description 和 epilog 参数。接下来，请更新 ls.py 文件，在 ArgumentParser 构造函数中添加以下内容：\n# ls.py v4\n\nimport argparse\nimport datetime\nfrom pathlib import Path\n\nparser = argparse.ArgumentParser(\n    prog="ls",\n    description="List the content of a directory",\n    epilog="Thanks for using %(prog)s! :)",\n)\n\n# ...\n\nfor entry in target_dir.iterdir():\n    print(build_output(entry, long=args.long))\n在这次更新中，description 参数允许你为应用提供一个通用的描述。这个描述将显示在帮助消息的开头。epilog 参数则允许你定义一些文本作为应用的结尾或结束语。请注意，你可以使用旧式的字符串格式化操作符(%)将 prog 参数插入到 epilog 字符串中。\n如果再次运行该应用程序，你将得到如下输出：\n$ python ls.py -h\nusage: ls [-h] [-l] path\n\nList the content of a directory\n\npositional arguments:\n  path\n\noptions:\n  -h, --help  show this help message and exit\n  -l, --long\n\nThanks for using ls! :)\n现在，输出会在使用消息之后显示描述消息，并在帮助文本末尾显示结语消息。\n显示参数和选项的分组帮助\n帮助分组(Help groups)是 argparse 的另一个有趣特性。它们允许你将相关的命令和参数进行分组，从而帮助你组织应用的帮助消息。要创建这些帮助分组，你将使用 ArgumentParser 的 .add_argument_group() 方法。\n作为一个例子，请考虑你自定义的 ls 命令的以下更新版本：\n# ls.py v5\n# ...\n\nparser = argparse.ArgumentParser(\n    prog="ls",\n    description="List the content of a directory",\n    epilog="Thanks for using %(prog)s! :)",\n)\n\ngeneral = parser.add_argument_group("general output")\ngeneral.add_argument("path")\n\ndetailed = parser.add_argument_group("detailed output")\ndetailed.add_argument("-l", "--long", action="store_true")\n\nargs = parser.parse_args()\n\n# ...\n\nfor entry in target_dir.iterdir():\n    print(build_output(entry, long=args.long))\n在这次更新中，你为显示一般输出的参数和选项创建了一个帮助分组，并为显示详细输出的参数和选项创建了另一个分组。\n如果你在命令行中使用 -h 选项运行应用程序，那么你将获得以下输出：\npython ls.py -h\nusage: ls [-h] [-l] path\n\nList the content of a directory\n\noptions:\n  -h, --help  show this help message and exit\n\ngeneral output:\n  path\n\ndetailed output:\n  -l, --long\n\nThanks for using ls! :)\n现在，你的应用的参数和选项在帮助消息中以描述性的标题进行了方便的分组。这个整洁的特性将帮助你为用户提供更多的上下文，并帮助他们更好地理解应用的工作原理。\n为参数和选项提供全局设置\n除了自定义使用说明和帮助消息外，ArgumentParser 还允许你对命令行界面（CLI）应用进行其他一些有趣的调整。这些调整包括：\n\n为参数和选项定义全局默认值\n从外部文件中加载参数和选项\n允许或禁止选项缩写\n\n有时，你可能需要为你的应用的参数和选项指定一个全局默认值。你可以通过在调用 ArgumentParser 构造函数时，将默认值传递给 argument_default 参数来实现这一点（注意：实际上 ArgumentParser 没有 argument_default 这个参数，但这里是为了说明可以全局设置默认值的概念。在实际应用中，你可能需要为每个参数单独设置默认值）。\n这个特性可能并不常用，因为参数和选项通常具有不同的数据类型或意义，很难找到一个满足所有需求的值。\n然而，argument_default(尽管 ArgumentParser 并没有直接提供这个参数，但这里是为了说明概念）的一个常见用例是当你想要避免将参数和选项添加到 Namespace 对象中。在这种情况下，你可以使用 SUPPRESS 常量作为默认值。这个默认值将确保只有命令行中提供的参数和选项才会被存储在 arguments 的 Namespace 中。\n作为一个例子，请继续修改你的自定义 ls 命令，如下面的代码片段所示：\n# ls.py v6\n\nimport argparse\nimport datetime\nfrom pathlib import Path\n\nparser = argparse.ArgumentParser(\n    prog="ls",\n    description="List the content of a directory",\n    epilog="Thanks for using %(prog)s! :)",\n    argument_default=argparse.SUPPRESS,\n)\n\n# ...\n\nfor entry in target_dir.iterdir():\n    try:\n        long = args.long\n    except AttributeError:\n        long = False\n    print(build_output(entry, long=long))\n通过将 SUPPRESS 传递给 ArgumentParser 构造函数，你可以防止未提供的参数被存储在 argparse.Namespace 对象中。这就是为什么在调用 build_output() 之前，你需要检查 -l 或 --long 选项是否实际被传递了。否则，你的代码会因为 args 中不存在 long 属性而引发 AttributeError 错误。\nArgumentParser 的另一个酷炫功能是允许你从外部文件中加载参数值。当你有一个具有冗长或复杂的命令行结构的应用，并希望自动化加载参数值的过程时，这个功能就非常有用。\n在这种情况下，你可以将参数值存储在一个外部文件中，并让你的程序从该文件中加载它们。为了尝试这个功能，请继续创建一个简单的命令行界面（CLI）应用，如下所示：\n# fromfile.py\n\nimport argparse\n\nparser = argparse.ArgumentParser(fromfile_prefix_chars="@")\n\nparser.add_argument("one")\nparser.add_argument("two")\nparser.add_argument("three")\n\nargs = parser.parse_args()\n\nprint(args)\n在这里，你向 ArgumentParser 的 fromfile_prefix_chars 参数传递 @ 符号。然后，你创建了三个必须在命令行中提供的必需参数。\n现在，假设你经常使用此应用程序，并且总是使用相同的一组参数值。为了简化和优化你的工作流程，你可以创建一个文件，其中包含所有必需参数的适当值，每个参数占一行，就像下面的 args.txt 文件一样：\nfirst\nsecond\nthird\n\n有了这个文件，您现在可以调用您的程序并指示它从 args.txt 文件加载值，如以下命令运行所示：\n$ python fromfile.py @args.txt\nNamespace(one=\'first\', two=\'second\', three=\'third\')\n在此命令的输出中，你可以看到 argparse 已经读取了 args.txt 的内容，并顺序地将值分配给了 fromfile.py 程序的每个参数。所有参数及其值都已成功存储在 Namespace 对象中。\n接受缩写选项名称的能力是 argparse 命令行界面（CLI）的另一个酷炫特性。这个特性是默认启用的，当你的程序具有长选项名称时非常有用。例如，考虑以下程序，它会在命令行下打印出你在 --argument-with-a-long-name 选项后指定的值：\n# abbreviate.py\n\nimport argparse\n\nparser = argparse.ArgumentParser()\n\nparser.add_argument("--argument-with-a-long-name")\n\nargs = parser.parse_args()\n\nprint(args.argument_with_a_long_name)\n这个程序会打印出你在 --argument-with-a-long-name 选项后传入的任何参数值。现在，请继续运行以下命令来检查 Python 的 argparse 模块如何处理这些缩写：\n$ python abbreviate.py --argument-with-a-long-name 42\n42\n\n$ python abbreviate.py --argument 42\n42\n\n$ python abbreviate.py --a 42\n42\n这些示例展示了如何缩写 --argument-with-a-long-name 选项的名称，而应用程序仍能正常工作。此功能是默认启用的。如果你希望禁用它并禁止缩写，那么可以在 ArgumentParser 中使用 allow_abbrev 参数：\n# abbreviate.py\n\nimport argparse\n\nparser = argparse.ArgumentParser(allow_abbrev=False)\n\nparser.add_argument("--argument-with-a-long-name")\n\nargs = parser.parse_args()\n\nprint(args.argument_with_a_long_name)\n将 allow_abbrev 设置为 False 会禁用命令行选项中的缩写。从这一点开始，你将需要为程序提供完整的选项名称才能正确工作。否则，你会收到一个错误：\n$ python abbreviate.py --argument-with-a-long-name 42\n42\n\n$ python abbreviate.py --argument 42\nusage: abbreviate.py [-h] [--argument-with-a-long-name ...]\nabbreviate.py: error: unrecognized arguments: --argument 42\n第二个示例中的错误消息告诉你 --argument 选项没有被识别为有效的选项。要使用该选项，你需要提供它的完整名称。\n微调你的命令行参数和选项\n到目前为止，你已经学习了如何定制 ArgumentParser 类的多个功能，以改善你的命令行界面（CLI）的用户体验。现在，你知道了如何调整你的应用程序的使用说明和帮助信息，以及如何微调命令行参数和选项的一些全局方面。\n在本节中，你将学习如何定制你的 CLI 的命令行参数和选项的其他几个功能。在这种情况下，你将使用 .add_argument() 方法及其一些最相关的参数，包括 action、type、nargs、default、help 等。\n设置 Option 背后的 Action\n当你向命令行界面添加一个选项或标志时，通常需要定义如何将选项的值存储在调用 .parse_args() 后得到的 Namespace 对象中。为此，你会使用 .add_argument() 的 action 参数。action 参数的默认值为 "store"，意味着提供的选项值将原样存储在 Namespace 中。\naction 参数可以接受几个可能的值。以下是这些可能值的列表及其含义：', 'bodyHTML': '<blockquote>\n<p dir="auto">原文：<a href="https://realpython.com/command-line-interfaces-python-argparse/" rel="nofollow">Build Command-Line Interfaces With Python\'s argparse</a></p>\n</blockquote>\n<p dir="auto">命令行应用在普通用户空间中可能并不常见，但它们存在于开发、数据科学、系统管理和许多其他操作中。每个命令行应用都需要一个用户友好的命令行界面 （CLI），以便你可以与应用本身进行交互。在 Python 中，您可以使用标准库中的 <code class="notranslate">argparse</code> 模块创建功能齐全的 CLI。</p>\n\n<p dir="auto">在本文中，你将了解如何：</p>\n<ul dir="auto">\n<li>命令行界面入门；</li>\n<li>在 Python 中组织和布局命令行应用项目；</li>\n<li>使用 Python <code class="notranslate">argparse</code> 创建命令行界面（command-line interfaces）；</li>\n<li>使用 <code class="notranslate">argparse</code> 一些强大的功能深度自定义您的 CLI；</li>\n</ul>\n<p dir="auto">若要充分利用本教程，应熟悉 Python 编程，包括面向对象编程、脚本开发和执行以及 Python 包和模块等概念。如果您熟悉与使用命令行或终端相关的一般概念和主题，这也将很有帮助。</p>\n<h2 dir="auto">了解命令行界面</h2>\n<p dir="auto">自从计算机发明以来，人类一直需要并找到与这些机器交互和共享信息的方法。信息交换在人、计算机软件和硬件组件之间流动。其中任意两个元素之间的共享边界通常称为接口(<a href="https://en.wikipedia.org/wiki/Interface_(computing)" rel="nofollow">interface</a>)。</p>\n<p dir="auto">在软件开发中，接口是给定软件的特殊部分，它允许计算机系统组件之间的交互。当涉及到人机交互和软件交互时，这个重要的组件被称为用户界面（<a href="https://en.wikipedia.org/wiki/User_interface" rel="nofollow">user interface</a>）。</p>\n<p dir="auto">您会在编程中找到不同类型的用户界面。图形用户界面 （GUI） 可能是当今最常见的。但是，您还可以找到为其用户提供命令行界面 （CLI） 的应用和程序。在本教程中，你将了解 CLI 以及如何在 Python 中创建它们。</p>\n<h2 dir="auto">命令行界面 （CLI）</h2>\n<p dir="auto">命令行界面允许您通过操作系统命令行、终端或控制台与应用程序或程序进行交互。</p>\n<p dir="auto">要了解命令行界面及其工作原理，请考虑此实际示例。假设您有一个名为 sample 包含三个示例文件的目录。如果您使用的是类 Unix 操作系统，例如 Linux 或 macOS，请继续在父目录中打开命令行窗口或终端，然后执行以下命令：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ ls sample/\nhello.txt     lorem.md      realpython.md"><pre class="notranslate">$ ls sample/\nhello.txt     lorem.md      realpython.md</pre></div>\n<p dir="auto">Unix 的 <code class="notranslate">ls</code> 命令列出目标目录中包含的文件和子目录，该目录默认为当前工作目录。上面的命令调用没有显示有关 的内容 sample 的太多信息。它只在屏幕上显示文件名。</p>\n<p dir="auto">假设你想要获取有关目录及其内容的更丰富信息，那么你不需要寻找其他程序，因为 ls 命令有一个功能齐全的命令行界面，并且提供了一组有用的选项，可以用来定制命令的行为。</p>\n<p dir="auto">例如，继续执行带有 <code class="notranslate">-l</code> 选项的 <code class="notranslate">ls</code> 命令：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ ls -l sample/\ntotal 24\n-rw-r--r--@ 1 user  staff    83 Aug 17 22:15 hello.txt\n-rw-r--r--@ 1 user  staff  2609 Aug 17 22:15 lorem.md\n-rw-r--r--@ 1 user  staff   428 Aug 17 22:15 realpython.md"><pre class="notranslate">$ ls -l sample/\ntotal 24\n-rw-r--r--@ 1 user  staff    83 Aug 17 22:15 hello.txt\n-rw-r--r--@ 1 user  staff  2609 Aug 17 22:15 lorem.md\n-rw-r--r--@ 1 user  staff   428 Aug 17 22:15 realpython.md</pre></div>\n<p dir="auto">现在，<code class="notranslate">ls</code> 命令的输出完全不同了。该命令显示了有关 sample 目录中文件的更多信息，包括权限、所有者、组、日期和大小。它还显示了这些文件在你计算机磁盘上使用的总空间。</p>\n<p dir="auto">这种更丰富的输出结果是由于使用了 <code class="notranslate">-l</code> 选项，这是 Unix <code class="notranslate">ls</code> 命令行界面的一部分，它启用了详细的输出格式。</p>\n<h2 dir="auto">命令、参数、选项、参数和子命令</h2>\n<p dir="auto">在本教程中，您将深入了解<strong>命令</strong>(commands)及其<strong>子命令</strong>(subcommands)，同时还会学习到<strong>命令行参数</strong>(command-line arguments)、<strong>选项</strong>(options)和<strong>参数</strong>(parameters)的相关知识。因此，建议您将这些术语纳入您的技术词汇库中。</p>\n<ul dir="auto">\n<li><strong>命令(Command)</strong>：在命令行或终端窗口中运行的程序或例程。通常，您可以通过其背后的程序(underlying program)或例程(routine)的名称来识别一个命令。</li>\n<li><strong>参数(Argument)</strong>：命令在执行其预期操作时所需或可选的信息片段。命令通常接受一个或多个参数，您可以在命令行中以空格分隔或逗号分隔的列表形式提供这些参数。</li>\n<li><strong>选项(Option)</strong>，也称为 <strong>flag</strong> 或 <strong>switch</strong>：一种可选的参数，用于修改命令的行为。选项通过特定的名称（如前一个示例中的 <code class="notranslate">-l</code>）传递给命令。</li>\n<li><strong>参数(Parameter)</strong>：一个选项用于执行其预期操作或动作时所使用的参数。</li>\n<li>子命令(Subcommand)**：一个预定义的名称，可以传递给应用程序来执行特定的操作。</li>\n</ul>\n<p dir="auto">参考上一节中的示例命令结构：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ ls -l sample/"><pre class="notranslate">$ ls -l sample/</pre></div>\n<p dir="auto">在这个例子中，您组合了命令行界面（CLI）的以下组件：</p>\n<ul dir="auto">\n<li><strong>ls</strong>：命令的名称或应用的名称；</li>\n<li><strong>-l</strong>：启用详细输出的选项(option)、开关(switch)或标志(flag)；</li>\n<li><strong>sample</strong>：为命令执行提供附加信息的参数(argument)；</li>\n</ul>\n<p dir="auto">现在，让我们来看下面的命令结构，它展示了 Python 包管理器 <code class="notranslate">pip</code> 的命令行界面（CLI）：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ pip install -r requirements.txt"><pre class="notranslate">$ pip install -r requirements.txt</pre></div>\n<p dir="auto">这是一个常见的 <code class="notranslate">pip</code> 命令结构，您可能之前已经见过。它允许您使用 <code class="notranslate">requirements.txt</code> 文件来给指定的 Python 项目安装依赖项。在这个例子中，您使用了以下命令行界面（CLI）组件：</p>\n<ul dir="auto">\n<li><strong>pip</strong>：命令的名称；</li>\n<li><strong>install</strong>：<code class="notranslate">pip</code> 的子命令(subcommand)名称；</li>\n<li><strong>-r</strong>：<code class="notranslate">install</code> 子命令的选项(option)；</li>\n<li><strong>requirements.txt</strong>：一个参数，特别是 <code class="notranslate">-r</code> 选项的参数。</li>\n</ul>\n<p dir="auto">现在您已经了解了命令行界面（CLI）是什么以及其主要部分或组件有哪些。接下来，是时候学习如何在 Python 中创建自己的 CLI 了。</p>\n<h2 dir="auto">Python 中的 CLI 入门</h2>\n<p dir="auto">Python 附带了一些工具，这些工具可帮助您为程序和应用程序编写命令行界面（CLI）。若您需要快速为小型程序构建一个简洁的 CLI，那么可以利用 <a href="https://docs.python.org/3/library/sys.html#module-sys" rel="nofollow"><code class="notranslate">sys</code></a> 模块中的 <a href="https://docs.python.org/3/library/sys.html#sys.argv" rel="nofollow"><code class="notranslate">argv</code></a> 属性。这个属性会自动存储您在命令行中传递给特定程序的参数。</p>\n<h3 dir="auto">使用 <code class="notranslate">sys.argv</code> 构建最小的 CLI</h3>\n<p dir="auto">以使用 <code class="notranslate">argv</code> 创建最小命令行界面（CLI）为例，假设您需要编写一个小程序，该程序类似于 <code class="notranslate">ls</code> 命令，能够列出给定目录下的所有文件。在这种情况下，您可以编写如下代码：</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# ls_argv.py\n\nimport sys\nfrom pathlib import Path\n\nif (args_count := len(sys.argv)) &gt; 2:\n    print(f&quot;One argument expected, got {args_count - 1}&quot;)\n    raise SystemExit(2)\nelif args_count &lt; 2:\n    print(&quot;You must specify the target directory&quot;)\n    raise SystemExit(2)\n\ntarget_dir = Path(sys.argv[1])\n\nif not target_dir.is_dir():\n    print(&quot;The target directory doesn\'t exist&quot;)\n    raise SystemExit(1)\n\nfor entry in target_dir.iterdir():\n    print(entry.name)"><pre class="notranslate"><span class="pl-c"># ls_argv.py</span>\n\n<span class="pl-k">import</span> <span class="pl-s1">sys</span>\n<span class="pl-k">from</span> <span class="pl-s1">pathlib</span> <span class="pl-k">import</span> <span class="pl-v">Path</span>\n\n<span class="pl-k">if</span> (<span class="pl-s1">args_count</span> <span class="pl-c1">:=</span> <span class="pl-en">len</span>(<span class="pl-s1">sys</span>.<span class="pl-c1">argv</span>)) <span class="pl-c1">&gt;</span> <span class="pl-c1">2</span>:\n    <span class="pl-en">print</span>(<span class="pl-s">f"One argument expected, got <span class="pl-s1"><span class="pl-kos">{</span><span class="pl-s1">args_count</span> <span class="pl-c1">-</span> <span class="pl-c1">1</span><span class="pl-kos">}</span></span>"</span>)\n    <span class="pl-k">raise</span> <span class="pl-en">SystemExit</span>(<span class="pl-c1">2</span>)\n<span class="pl-k">elif</span> <span class="pl-s1">args_count</span> <span class="pl-c1">&lt;</span> <span class="pl-c1">2</span>:\n    <span class="pl-en">print</span>(<span class="pl-s">"You must specify the target directory"</span>)\n    <span class="pl-k">raise</span> <span class="pl-en">SystemExit</span>(<span class="pl-c1">2</span>)\n\n<span class="pl-s1">target_dir</span> <span class="pl-c1">=</span> <span class="pl-en">Path</span>(<span class="pl-s1">sys</span>.<span class="pl-c1">argv</span>[<span class="pl-c1">1</span>])\n\n<span class="pl-k">if</span> <span class="pl-c1">not</span> <span class="pl-s1">target_dir</span>.<span class="pl-c1">is_dir</span>():\n    <span class="pl-en">print</span>(<span class="pl-s">"The target directory doesn\'t exist"</span>)\n    <span class="pl-k">raise</span> <span class="pl-en">SystemExit</span>(<span class="pl-c1">1</span>)\n\n<span class="pl-k">for</span> <span class="pl-s1">entry</span> <span class="pl-c1">in</span> <span class="pl-s1">target_dir</span>.<span class="pl-c1">iterdir</span>():\n    <span class="pl-en">print</span>(<span class="pl-s1">entry</span>.<span class="pl-c1">name</span>)</pre></div>\n<p dir="auto">该程序通过手动处理命令行提供的参数来实现了一个简单的命令行界面（CLI），这些参数会自动存储在 <code class="notranslate">sys.argv</code> 中。<code class="notranslate">sys.argv</code> 的第一个元素始终是程序名称，第二个元素则是目标目录。由于应用程序不应接受超过一个目标目录，因此 <code class="notranslate">args_count</code> 不得超过 2。</p>\n<p dir="auto">在检查 <code class="notranslate">sys.argv</code> 的内容后，您创建一个<code class="notranslate">pathlib.Path</code>对象来存储目标目录的路径。如果该目录不存在，您将通知用户并退出程序。接下来的<code class="notranslate">for</code>循环将列出目录内容，每行一个条目。</p>\n<p dir="auto">如果从命令行运行该脚本，您将得到以下结果：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ python ls_argv.py sample/\nhello.txt\nlorem.md\nrealpython.md\n\n$ python ls_argv.py\nYou must specify the target directory\n\n$ python ls_argv.py sample/ other_dir/\nOne argument expected, got 2\n\n$ python ls_argv.py non_existing/\nThe target directory doesn\'t exist"><pre class="notranslate">$ python ls_argv.py sample/\nhello.txt\nlorem.md\nrealpython.md\n\n$ python ls_argv.py\nYou must specify the target directory\n\n$ python ls_argv.py sample/ other_dir/\nOne argument expected, got 2\n\n$ python ls_argv.py non_existing/\nThe target directory doesn<span class="pl-s"><span class="pl-pds">\'</span>t exist</span></pre></div>\n<p dir="auto">您的程序接受一个目录作为参数，并列出其内容。如果您运行命令时没有提供参数，您将收到一个错误消息。如果您运行命令时指定了超过一个目标目录，您同样会收到一个错误消息。如果尝试运行命令并指定一个不存在的目录，程序将输出另一个错误消息。</p>\n<p dir="auto">虽然您的程序运行正常，但对于更复杂的 CLI 应用程序来说，使用<code class="notranslate">sys.argv</code>属性手动解析命令行参数并不是一个可扩展的解决方案。如果您的应用需要接受更多的参数和选项，那么解析<code class="notranslate">sys.argv</code>将变得复杂且容易出错。您需要一个更好的解决方案，这就是 Python 中的<code class="notranslate">argparse</code>模块所提供的。</p>\n<h3 dir="auto">使用 <code class="notranslate">argparse</code> 创建 CLI</h3>\n<p dir="auto">在 Python 中创建 CLI 应用程序的更便捷方法是使用标准库中的 <a href="https://docs.python.org/3/library/argparse.html?highlight=argparse#module-argparse" rel="nofollow"><code class="notranslate">argparse</code></a> 模块。该模块首次在 Python 3.2 中随 <a href="https://www.python.org/dev/peps/pep-0389/" rel="nofollow">PEP-389</a> 一同发布，是快速创建 Python CLI 应用程序的利器，无需安装如 Typer 或 Click 这样的第三方库。</p>\n<p dir="auto"><code class="notranslate">argparse</code> 模块是作为较旧的 <a href="https://docs.python.org/3/library/getopt.html" rel="nofollow"><code class="notranslate">getopt</code></a> 和 <a href="https://docs.python.org/3/library/optparse.html" rel="nofollow"><code class="notranslate">optparse</code></a> 模块的替代品而发布的，因为它们缺乏一些重要的功能。</p>\n<p dir="auto">Python 的 <code class="notranslate">argparse</code> 模块允许您：</p>\n<ul dir="auto">\n<li>解析命令行<strong>参数</strong>(arguments)和<strong>选项</strong>(options)；</li>\n<li>在一个单一选项中接受<strong>可变数量的参数</strong>(variable number of parameters)；</li>\n<li>在 CLI 中提供子命令(subcommands)。</li>\n</ul>\n<p dir="auto">这些特性使 <code class="notranslate">argparse</code> 成为了一个强大的 CLI 框架，您在创建 CLI 应用程序时可以放心地依赖它。要使用 Python 的 <code class="notranslate">argparse</code>，您需要遵循以下四个简单的步骤：</p>\n<ol dir="auto">\n<li>导入 <code class="notranslate">argparse</code>；</li>\n<li>通过实例化 <a href="https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser" rel="nofollow"><code class="notranslate">ArgumentParser</code></a> 创建<strong>参数解析器</strong>(argument parser)；</li>\n<li>使用 <a href="https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_argument" rel="nofollow"><code class="notranslate">.add_argument()</code></a> 方法向解析器添加<strong>参数</strong>(arguments)和<strong>选项</strong>(options)；</li>\n<li>在解析器上调用 <a href="https://docs.python.org/3/library/argparse.html?highlight=argparse#argparse.ArgumentParser.parse_args" rel="nofollow"><code class="notranslate">.parse_args()</code></a> 以获取参数 <a href="https://docs.python.org/3/library/argparse.html#namespace" rel="nofollow"><code class="notranslate">Namespace</code></a>。</li>\n</ol>\n<p dir="auto">例如，您可以使用 <code class="notranslate">argparse</code> 来改进您的 <code class="notranslate">ls_argv.py</code> 脚本。现在，您可以创建一个名为 <code class="notranslate">ls.py</code> 的脚本，并编写以下代码：</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# ls.py v1\n\nimport argparse\nfrom pathlib import Path\n\nparser = argparse.ArgumentParser()\n\nparser.add_argument(&quot;path&quot;)\n\nargs = parser.parse_args()\n\ntarget_dir = Path(args.path)\n\nif not target_dir.exists():\n    print(&quot;The target directory doesn\'t exist&quot;)\n    raise SystemExit(1)\n\nfor entry in target_dir.iterdir():\n    print(entry.name)"><pre class="notranslate"><span class="pl-c"># ls.py v1</span>\n\n<span class="pl-k">import</span> <span class="pl-s1">argparse</span>\n<span class="pl-k">from</span> <span class="pl-s1">pathlib</span> <span class="pl-k">import</span> <span class="pl-v">Path</span>\n\n<span class="pl-s1">parser</span> <span class="pl-c1">=</span> <span class="pl-s1">argparse</span>.<span class="pl-c1">ArgumentParser</span>()\n\n<span class="pl-s1">parser</span>.<span class="pl-c1">add_argument</span>(<span class="pl-s">"path"</span>)\n\n<span class="pl-s1">args</span> <span class="pl-c1">=</span> <span class="pl-s1">parser</span>.<span class="pl-c1">parse_args</span>()\n\n<span class="pl-s1">target_dir</span> <span class="pl-c1">=</span> <span class="pl-en">Path</span>(<span class="pl-s1">args</span>.<span class="pl-c1">path</span>)\n\n<span class="pl-k">if</span> <span class="pl-c1">not</span> <span class="pl-s1">target_dir</span>.<span class="pl-c1">exists</span>():\n    <span class="pl-en">print</span>(<span class="pl-s">"The target directory doesn\'t exist"</span>)\n    <span class="pl-k">raise</span> <span class="pl-en">SystemExit</span>(<span class="pl-c1">1</span>)\n\n<span class="pl-k">for</span> <span class="pl-s1">entry</span> <span class="pl-c1">in</span> <span class="pl-s1">target_dir</span>.<span class="pl-c1">iterdir</span>():\n    <span class="pl-en">print</span>(<span class="pl-s1">entry</span>.<span class="pl-c1">name</span>)</pre></div>\n<p dir="auto">随着 <code class="notranslate">argparse</code> 的引入，您的代码发生了显著的变化。与之前的版本相比，最明显的不同是，用于检查用户提供的参数的条件语句已经消失了。这是因为 <code class="notranslate">argparse</code> 会自动为您检查参数的存在性。</p>\n<p dir="auto">在这个新的实现中，您首先导入 <code class="notranslate">argparse</code> 并创建一个参数解析器。要创建解析器，您可以使用 <code class="notranslate">ArgumentParser</code> 类。接下来，您定义一个名为 <code class="notranslate">path</code> 的参数，用于获取用户的目标目录。</p>\n<p dir="auto">接下来，您需要调用 <code class="notranslate">.parse_args()</code> 方法来解析输入参数，并获取一个包含所有用户参数的 <code class="notranslate">Namespace</code> 对象。请注意，现在 <code class="notranslate">args</code> 变量保存了一个 <code class="notranslate">Namespace</code> 对象，该对象具有从命令行收集的每个参数所对应的属性。</p>\n<p dir="auto">在这个例子中，您只有一个参数，名为 <code class="notranslate">path</code>。<code class="notranslate">Namespace</code> 对象允许您使用点表示法通过 <code class="notranslate">args</code> 来访问 <code class="notranslate">path</code>。其余的代码与第一个实现相同。</p>\n<p dir="auto">现在继续从命令行运行这个新脚本：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ python ls.py sample/\nlorem.md\nrealpython.md\nhello.txt\n\n$ python ls.py\nusage: ls.py [-h] path\nls.py: error: the following arguments are required: path\n\n$ python ls.py sample/ other_dir/\nusage: ls.py [-h] path\nls.py: error: unrecognized arguments: other_dir/\n\n$ python ls.py non_existing/\nThe target directory doesn\'t exist"><pre class="notranslate">$ python ls.py sample/\nlorem.md\nrealpython.md\nhello.txt\n\n$ python ls.py\nusage: ls.py [-h] path\nls.py: error: the following arguments are required: path\n\n$ python ls.py sample/ other_dir/\nusage: ls.py [-h] path\nls.py: error: unrecognized arguments: other_dir/\n\n$ python ls.py non_existing/\nThe target directory doesn<span class="pl-s"><span class="pl-pds">\'</span>t exist</span></pre></div>\n<p dir="auto">第一个命令的输出与您的原始脚本 <code class="notranslate">ls_argv.py</code> 相同。而第二个命令的输出则与 <code class="notranslate">ls_argv.py</code> 中的输出大不相同。程序现在会显示一个使用说明消息，并发出错误提示，告诉您必须提供 <code class="notranslate">path</code> 参数。</p>\n<p dir="auto">在第三个命令中，您传递了两个目标目录，但应用程序并未为此做好准备。因此，它再次显示使用说明消息，并抛出一个错误，告知您潜在的问题。</p>\n<p dir="auto">最后，如果您运行脚本时传递了一个不存在的目录作为参数，那么您会收到一个错误，告知您目标目录不存在，因此程序无法执行其工作。</p>\n<p dir="auto">现在，您可以使用一个新的隐式特性。现在，您的程序接受一个可选的 <code class="notranslate">-h</code> 标志。不妨尝试一下：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ python ls.py -h\nusage: ls.py [-h] path\n\npositional arguments:\n  path\n\noptions:\n  -h, --help  show this help message and exit"><pre class="notranslate">$ python ls.py -h\nusage: ls.py [-h] path\n\npositional arguments:\n  path\n\noptions:\n  -h, --help  show this <span class="pl-c1">help</span> message and <span class="pl-c1">exit</span></pre></div>\n<p dir="auto">太棒了，现在您的程序会自动响应 <code class="notranslate">-h</code> 或 <code class="notranslate">--help</code> 标志，并为您显示带有使用说明的帮助消息。这真是一个很棒的特性，而且您只需在代码中引入 <code class="notranslate">argparse</code> 就能轻松获得！</p>\n<p dir="auto">经过这个快速介绍如何在 Python 中创建 CLI 应用后，您现在就可以深入研究 <code class="notranslate">argparse</code> 模块及其所有炫酷特性了。</p>\n<h2 dir="auto">使用 Python 的 argparse 创建 CLI</h2>\n<p dir="auto">您可以使用 <code class="notranslate">argparse</code> 模块为您的应用程序和项目编写用户友好的命令行界面。该模块允许您定义应用程序所需的参数和选项。然后，<code class="notranslate">argparse</code> 将负责为您解析 <code class="notranslate">sys.argv</code> 的参数和选项。</p>\n<p dir="auto"><code class="notranslate">argparse</code> 的另一个酷炫特性是它可以自动为您的 CLI 应用程序生成使用说明和帮助消息。该模块还会在参数无效时发出错误提示，并具备更多功能。</p>\n<p dir="auto">在深入研究 <code class="notranslate">argparse</code> 之前，您需要知道该模块的文档可识别两种不同类型的命令行参数：</p>\n<ul dir="auto">\n<li><strong>位置参数</strong>(Positional arguments)，您称为参数(arguments)；</li>\n<li><strong>可选参数</strong>(Optional arguments)，即选项(options)、标志(flags)或开关(switches)。</li>\n</ul>\n<p dir="auto">在 <code class="notranslate">ls.py</code> 的示例中，<code class="notranslate">path</code> 是一个<strong>位置参数</strong>(positional argument)。这样的参数之所以被称为位置参数，是因为它在命令构造中的相对位置定义了其作用。</p>\n<p dir="auto">与位置参数不同，<strong>可选参数</strong>(Optional arguments)并不是必需的。它们允许你修改命令的行为。以 Unix 命令 <code class="notranslate">ls</code> 为例，<code class="notranslate">-l</code> 标志就是一个可选参数，它使得命令以详细模式显示输出。</p>\n<p dir="auto">在明确了这些概念之后，你就可以着手使用 Python 和 <code class="notranslate">argparse</code> 库来构建自己的命令行界面（CLI）应用程序了。</p>\n<h3 dir="auto">创建命令行参数解析器</h3>\n<p dir="auto">命令行参数解析器是任何使用 <code class="notranslate">argparse</code> 的命令行界面（CLI）中最为关键的部分。你在命令行上提供的所有参数和选项都会经过这个解析器的处理，它会为你完成繁重的解析工作。</p>\n<p dir="auto">要使用 <code class="notranslate">argparse</code> 创建命令行参数解析器，您需要实例化 <a href="https://docs.python.org/3/library/argparse.html#argumentparser-objects" rel="nofollow"><code class="notranslate">ArgumentParser</code></a> 类：</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt;&gt; from argparse import ArgumentParser\n\n&gt;&gt;&gt; parser = ArgumentParser()\n&gt;&gt;&gt; parser\nArgumentParser(\n    prog=\'\',\n    usage=None,\n    description=None,\n    formatter_class=&lt;class \'argparse.HelpFormatter\'&gt;,\n    conflict_handler=\'error\',\n    add_help=True\n)"><pre class="notranslate"><span class="pl-c1">&gt;</span><span class="pl-c1">&gt;&gt;</span> <span class="pl-k">from</span> <span class="pl-s1">argparse</span> <span class="pl-k">import</span> <span class="pl-v">ArgumentParser</span>\n\n<span class="pl-c1">&gt;</span><span class="pl-c1">&gt;&gt;</span> <span class="pl-s1">parser</span> <span class="pl-c1">=</span> <span class="pl-en">ArgumentParser</span>()\n<span class="pl-c1">&gt;</span><span class="pl-c1">&gt;&gt;</span> <span class="pl-s1">parser</span>\n<span class="pl-en">ArgumentParser</span>(\n    <span class="pl-s1">prog</span><span class="pl-c1">=</span><span class="pl-s">\'\'</span>,\n    <span class="pl-s1">usage</span><span class="pl-c1">=</span><span class="pl-c1">None</span>,\n    <span class="pl-s1">description</span><span class="pl-c1">=</span><span class="pl-c1">None</span>,\n    <span class="pl-s1">formatter_class</span><span class="pl-c1">=</span><span class="pl-c1">&lt;</span><span class="pl-s1">class</span> <span class="pl-s">\'argparse.HelpFormatter\'</span><span class="pl-c1">&gt;</span>,\n    <span class="pl-s1">conflict_handler</span><span class="pl-c1">=</span><span class="pl-s">\'error\'</span>,\n    <span class="pl-s1">add_help</span><span class="pl-c1">=</span><span class="pl-c1">True</span>\n)</pre></div>\n<p dir="auto"><code class="notranslate">ArgumentParser</code> 的构造函数接受多种不同的参数，你可以利用这些参数来微调你的 CLI 的多个特性。由于所有这些参数都是可选的，因此你可以通过不传入任何参数直接实例化 <code class="notranslate">ArgumentParser</code> 来创建一个最基本的解析器。</p>\n<p dir="auto">在本教程中，你将会更深入地了解 <code class="notranslate">ArgumentParser</code> 构造函数的参数，特别是在定制你的参数解析器的部分。目前，你可以开始使用 <code class="notranslate">argparse</code> 创建 CLI 的下一步了。这一步就是通过解析器对象来添加参数和选项。</p>\n<h3 dir="auto">添加参数和选项</h3>\n<p dir="auto">要为 <code class="notranslate">argparse</code> 的 CLI 添加参数和选项，你将使用 <code class="notranslate">ArgumentParser</code> 实例的 <a href="https://docs.python.org/3/library/argparse.html#the-add-argument-method" rel="nofollow"><code class="notranslate">.add_argument()</code></a> 方法。请注意，这个方法对参数和选项都是通用的。在 <code class="notranslate">argparse</code> 的术语中，参数被称为<strong>位置参数</strong>(positional arguments)，而选项被称为<strong>可选参数</strong>(optional arguments)。</p>\n<p dir="auto"><code class="notranslate">.add_argument()</code> 方法的第一个参数决定了参数和选项之间的区别。这个参数被标识为<a href="https://docs.python.org/3/library/argparse.html?highlight=argparse#name-or-flags" rel="nofollow">名称（name）或标志（flag）</a>。因此，如果你提供一个 name，那么你将定义一个参数(argument)。相反，如果你使用一个 flag，那么你将添加一个选项(option)。</p>\n<p dir="auto">你已经在使用 <code class="notranslate">argparse</code> 时处理过命令行参数了。现在，考虑以下你自定义的 <code class="notranslate">ls</code> 命令的增强版本，它向 CLI 添加了一个 <code class="notranslate">-l</code> 选项：</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# ls.py v2\n\nimport argparse\nimport datetime\nfrom pathlib import Path\n\nparser = argparse.ArgumentParser()\n\nparser.add_argument(&quot;path&quot;)\n\nparser.add_argument(&quot;-l&quot;, &quot;--long&quot;, action=&quot;store_true&quot;)\n\nargs = parser.parse_args()\n\ntarget_dir = Path(args.path)\n\nif not target_dir.exists():\n    print(&quot;The target directory doesn\'t exist&quot;)\n    raise SystemExit(1)\n\ndef build_output(entry, long=False):\n    if long:\n        size = entry.stat().st_size\n        date = datetime.datetime.fromtimestamp(\n            entry.stat().st_mtime).strftime(\n            &quot;%b %d %H:%M:%S&quot;\n        )\n        return f&quot;{size:&gt;6d} {date} {entry.name}&quot;\n    return entry.name\n\nfor entry in target_dir.iterdir():\n    print(build_output(entry, long=args.long))"><pre class="notranslate"><span class="pl-c"># ls.py v2</span>\n\n<span class="pl-k">import</span> <span class="pl-s1">argparse</span>\n<span class="pl-k">import</span> <span class="pl-s1">datetime</span>\n<span class="pl-k">from</span> <span class="pl-s1">pathlib</span> <span class="pl-k">import</span> <span class="pl-v">Path</span>\n\n<span class="pl-s1">parser</span> <span class="pl-c1">=</span> <span class="pl-s1">argparse</span>.<span class="pl-c1">ArgumentParser</span>()\n\n<span class="pl-s1">parser</span>.<span class="pl-c1">add_argument</span>(<span class="pl-s">"path"</span>)\n\n<span class="pl-s1">parser</span>.<span class="pl-c1">add_argument</span>(<span class="pl-s">"-l"</span>, <span class="pl-s">"--long"</span>, <span class="pl-s1">action</span><span class="pl-c1">=</span><span class="pl-s">"store_true"</span>)\n\n<span class="pl-s1">args</span> <span class="pl-c1">=</span> <span class="pl-s1">parser</span>.<span class="pl-c1">parse_args</span>()\n\n<span class="pl-s1">target_dir</span> <span class="pl-c1">=</span> <span class="pl-en">Path</span>(<span class="pl-s1">args</span>.<span class="pl-c1">path</span>)\n\n<span class="pl-k">if</span> <span class="pl-c1">not</span> <span class="pl-s1">target_dir</span>.<span class="pl-c1">exists</span>():\n    <span class="pl-en">print</span>(<span class="pl-s">"The target directory doesn\'t exist"</span>)\n    <span class="pl-k">raise</span> <span class="pl-en">SystemExit</span>(<span class="pl-c1">1</span>)\n\n<span class="pl-k">def</span> <span class="pl-en">build_output</span>(<span class="pl-s1">entry</span>, <span class="pl-s1">long</span><span class="pl-c1">=</span><span class="pl-c1">False</span>):\n    <span class="pl-k">if</span> <span class="pl-s1">long</span>:\n        <span class="pl-s1">size</span> <span class="pl-c1">=</span> <span class="pl-s1">entry</span>.<span class="pl-c1">stat</span>().<span class="pl-c1">st_size</span>\n        <span class="pl-s1">date</span> <span class="pl-c1">=</span> <span class="pl-s1">datetime</span>.<span class="pl-c1">datetime</span>.<span class="pl-c1">fromtimestamp</span>(\n            <span class="pl-s1">entry</span>.<span class="pl-c1">stat</span>().<span class="pl-c1">st_mtime</span>).<span class="pl-c1">strftime</span>(\n            <span class="pl-s">"%b %d %H:%M:%S"</span>\n        )\n        <span class="pl-k">return</span> <span class="pl-s">f"<span class="pl-s1"><span class="pl-kos">{</span><span class="pl-s1">size</span>:&gt;6d<span class="pl-kos">}</span></span> <span class="pl-s1"><span class="pl-kos">{</span><span class="pl-s1">date</span><span class="pl-kos">}</span></span> <span class="pl-s1"><span class="pl-kos">{</span><span class="pl-s1">entry</span>.<span class="pl-c1">name</span><span class="pl-kos">}</span></span>"</span>\n    <span class="pl-k">return</span> <span class="pl-s1">entry</span>.<span class="pl-c1">name</span>\n\n<span class="pl-k">for</span> <span class="pl-s1">entry</span> <span class="pl-c1">in</span> <span class="pl-s1">target_dir</span>.<span class="pl-c1">iterdir</span>():\n    <span class="pl-en">print</span>(<span class="pl-en">build_output</span>(<span class="pl-s1">entry</span>, <span class="pl-s1">long</span><span class="pl-c1">=</span><span class="pl-s1">args</span>.<span class="pl-c1">long</span>))</pre></div>\n<p dir="auto">在这个例子中，第 11 行代码创建了一个带有 <code class="notranslate">-l</code> 和 <code class="notranslate">--long</code> 标志的选项。参数(arguments)和选项(options)在语法上的区别在于，选项名称以短横线 <code class="notranslate">-</code> 开头表示简写标志，以双短横线 <code class="notranslate">--</code> 开头表示完整标志。</p>\n<p dir="auto">请注意，在这个特定例子中，与 <code class="notranslate">-l</code> 或 <code class="notranslate">--long</code> 选项一同设置了一个 <code class="notranslate">action</code> 参数为 <code class="notranslate">"store_true"</code>，这意味着这个选项将存储一个布尔值。如果你在命令行上提供了这个选项，那么它的值将为 <code class="notranslate">True</code>。如果你省略了这个选项，那么它的值将为 <code class="notranslate">False</code>。在 "设置 Option 背后的 Action" 部分内容中，你将了解更多关于 <code class="notranslate">.add_argument()</code> 中的 <code class="notranslate">action</code> 参数的信息。</p>\n<p dir="auto">在第 21 行的 <code class="notranslate">build_output()</code> 函数中，当 <code class="notranslate">long</code> 为 <code class="notranslate">True</code> 时，它会返回一个详细的输出，否则返回一个简短的输出。详细的输出将包含目标目录中所有条目的大小、修改日期和名称。它使用了诸如 <code class="notranslate">Path.stat()</code> 这样的工具，以及带有自定义字符串格式的 <code class="notranslate">datetime.datetime</code> 对象。</p>\n<p dir="auto">继续在 <code class="notranslate">sample</code> 上执行您的程序，以检查 <code class="notranslate">-l</code> 选项如何工作：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ python ls.py -l sample/\n  2609 Oct 28 14:07:04 lorem.md\n   428 Oct 28 14:07:04 realpython.md\n    83 Oct 28 14:07:04 hello.txt"><pre class="notranslate">$ python ls.py -l sample/\n  2609 Oct 28 14:07:04 lorem.md\n   428 Oct 28 14:07:04 realpython.md\n    83 Oct 28 14:07:04 hello.txt</pre></div>\n<p dir="auto">新增的 <code class="notranslate">-l</code> 选项允许你生成并显示关于目标目录内容的更详细输出。</p>\n<p dir="auto">既然你已经知道了如何向 CLI 添加命令行参数和选项，接下来就是深入解析这些参数和选项的时候了。这将是你在接下来部分要探索的内容。</p>\n<h3 dir="auto">解析命令行参数和选项</h3>\n<p dir="auto">解析命令行参数是基于 <code class="notranslate">argparse</code> 的任何 CLI 应用中的另一个重要步骤。一旦你解析了参数，你就可以根据它们的值来执行相应的操作。在你自定义的 <code class="notranslate">ls</code> 命令示例中，参数解析发生在包含 <code class="notranslate">args = parser.parse_args()</code> 语句的行上。</p>\n<p dir="auto">这个语句调用了 <a href="https://docs.python.org/3/library/argparse.html#the-parse-args-method" rel="nofollow"><code class="notranslate">.parse_args()</code></a> 方法，并将其返回值赋给 <code class="notranslate">args</code> 变量。<code class="notranslate">.parse_args()</code> 的返回值是一个 <a href="https://docs.python.org/3/library/argparse.html#the-namespace-object" rel="nofollow"><code class="notranslate">Namespace</code></a> 对象，其中包含了在命令行上提供的所有参数和选项以及它们对应的值。</p>\n<p dir="auto">考虑以下简单的示例：</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt;&gt; from argparse import ArgumentParser\n\n&gt;&gt;&gt; parser = ArgumentParser()\n\n&gt;&gt;&gt; parser.add_argument(&quot;site&quot;)\n_StoreAction(...)\n\n&gt;&gt;&gt; parser.add_argument(&quot;-c&quot;, &quot;--connect&quot;, action=&quot;store_true&quot;)\n_StoreTrueAction(...)\n\n&gt;&gt;&gt; args = parser.parse_args([&quot;Real Python&quot;, &quot;-c&quot;])\n&gt;&gt;&gt; args\nNamespace(site=\'Real Python\', connect=True)\n\n&gt;&gt;&gt; args.site\n\'Real Python\'\n&gt;&gt;&gt; args.connect\nTrue"><pre class="notranslate"><span class="pl-c1">&gt;</span><span class="pl-c1">&gt;&gt;</span> <span class="pl-k">from</span> <span class="pl-s1">argparse</span> <span class="pl-k">import</span> <span class="pl-v">ArgumentParser</span>\n\n<span class="pl-c1">&gt;</span><span class="pl-c1">&gt;&gt;</span> <span class="pl-s1">parser</span> <span class="pl-c1">=</span> <span class="pl-en">ArgumentParser</span>()\n\n<span class="pl-c1">&gt;</span><span class="pl-c1">&gt;&gt;</span> <span class="pl-s1">parser</span>.<span class="pl-c1">add_argument</span>(<span class="pl-s">"site"</span>)\n<span class="pl-en">_StoreAction</span>(...)\n\n<span class="pl-c1">&gt;</span><span class="pl-c1">&gt;&gt;</span> <span class="pl-s1">parser</span>.<span class="pl-c1">add_argument</span>(<span class="pl-s">"-c"</span>, <span class="pl-s">"--connect"</span>, <span class="pl-s1">action</span><span class="pl-c1">=</span><span class="pl-s">"store_true"</span>)\n<span class="pl-en">_StoreTrueAction</span>(...)\n\n<span class="pl-c1">&gt;</span><span class="pl-c1">&gt;&gt;</span> <span class="pl-s1">args</span> <span class="pl-c1">=</span> <span class="pl-s1">parser</span>.<span class="pl-c1">parse_args</span>([<span class="pl-s">"Real Python"</span>, <span class="pl-s">"-c"</span>])\n<span class="pl-c1">&gt;</span><span class="pl-c1">&gt;&gt;</span> <span class="pl-s1">args</span>\n<span class="pl-en">Namespace</span>(<span class="pl-s1">site</span><span class="pl-c1">=</span><span class="pl-s">\'Real Python\'</span>, <span class="pl-s1">connect</span><span class="pl-c1">=</span><span class="pl-c1">True</span>)\n\n<span class="pl-c1">&gt;</span><span class="pl-c1">&gt;&gt;</span> <span class="pl-s1">args</span>.<span class="pl-c1">site</span>\n<span class="pl-s">\'Real Python\'</span>\n<span class="pl-c1">&gt;</span><span class="pl-c1">&gt;&gt;</span> <span class="pl-s1">args</span>.<span class="pl-c1">connect</span>\n<span class="pl-c1">True</span></pre></div>\n<p dir="auto">通过在命令行参数解析器上调用 <code class="notranslate">.parse_args()</code> 方法得到的 <code class="notranslate">Namespace</code> 对象，你可以使用<strong>点表示法</strong>(dot notation)访问所有输入参数、选项以及它们对应的值。这样，你就可以检查输入参数和选项的列表，并根据用户在命令行上的选择来执行相应的操作。</p>\n<p dir="auto">你将在应用程序的主代码中使用这个 <code class="notranslate">Namespace</code> 对象。这与你在自定义 <code class="notranslate">ls</code> 命令示例中的 <code class="notranslate">for</code> 循环下所做的类似。</p>\n<p dir="auto">到目前为止，你已经了解了创建基于 <code class="notranslate">argparse</code> 的 CLI 的主要步骤。现在，你可以花些时间学习如何在 Python 中组织和构建 CLI 应用程序的基础知识了。</p>\n<h3 dir="auto">设置 CLI 应用程序的布局和构建系统</h3>\n<p dir="auto">在继续你的 <code class="notranslate">argparse</code> 学习之旅之前，你应该暂停一下，思考如何组织你的代码和规划一个 CLI 项目。首先，你应该考虑以下几点：</p>\n<ul dir="auto">\n<li>你可以创建模块和包来组织代码。</li>\n<li>你可以将 Python 应用的核心包命名为应用本身的名字。</li>\n<li>你会根据每个 Python 模块的具体内容或功能来命名它们。</li>\n<li>如果你希望某个包可以直接执行，你可以在该 Python 包中添加一个 <code class="notranslate">__main__.py</code> 模块。</li>\n</ul>\n<p dir="auto">将这些想法铭记于心，并考虑到模型-视图-控制器（MVC）模式是一种有效组织应用程序结构的方法，你在规划 CLI 项目时可以采用以下目录结构：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="hello_cli/\n│\n├── hello_cli/\n│   ├── __init__.py\n│   ├── __main__.py\n│   ├── cli.py\n│   └── model.py\n│\n├── tests/\n│   ├── __init__.py\n│   ├── test_cli.py\n│   └── test_model.py\n│\n├── pyproject.toml\n├── README.md\n└── requirements.txt"><pre class="notranslate"><code class="notranslate">hello_cli/\n│\n├── hello_cli/\n│   ├── __init__.py\n│   ├── __main__.py\n│   ├── cli.py\n│   └── model.py\n│\n├── tests/\n│   ├── __init__.py\n│   ├── test_cli.py\n│   └── test_model.py\n│\n├── pyproject.toml\n├── README.md\n└── requirements.txt\n</code></pre></div>\n<p dir="auto"><code class="notranslate">hello_cli/</code> 目录是项目的根目录。在那里，您将放置以下文件：</p>\n<ul dir="auto">\n<li>pyproject.toml 是一个 TOML 文件，用于指定项目的构建系统(build system)和其他配置(configurations)。</li>\n<li>README.md 文件提供了项目的描述以及安装和运行应用程序的说明。为你的项目添加一个描述性且详细的 README.md 文件是编程中的最佳实践，特别是如果你打算将项目作为开源解决方案发布的话。</li>\n<li>requirements.txt 是一个常规文件，列出了项目的外部依赖项(external dependencies)。你将使用这个文件，结合 <code class="notranslate">pip</code> 的 <code class="notranslate">-r</code> 选项，来自动安装这些依赖项。</li>\n</ul>\n<p dir="auto">接下来是 <code class="notranslate">hello_cli/</code> 目录，它包含了应用的核心包，该包包含以下模块：</p>\n<ul dir="auto">\n<li><code class="notranslate">__init__.py</code> 文件使得 <code class="notranslate">hello_cli/</code> 可以作为一个 Python 包被识别。</li>\n<li><code class="notranslate">__main__.py</code> 文件提供了应用程序的<strong>入口点脚本</strong>(entry-point script)或可执行文件，这是启动程序的主要入口。</li>\n<li><code class="notranslate">cli.py</code> 文件为应用提供了命令行界面。在此文件中的代码将扮演基于 MVC 架构中的视图-控制器角色。</li>\n<li><code class="notranslate">model.py</code> 文件包含了支持应用主要功能的代码。这部分代码将在你的 MVC 布局中扮演模型角色。</li>\n</ul>\n<p dir="auto">你还需要一个 <code class="notranslate">tests/</code> 包，其中包含针对应用程序组件的单元测试文件。在这个具体的项目布局示例中，你有 <code class="notranslate">test_cli.py</code> 用于检查 CLI 功能的单元测试，以及 <code class="notranslate">test_model.py</code> 用于检查你的模型代码的单元测试。</p>\n<p dir="auto"><code class="notranslate">pyproject.toml</code> 文件允许你定义应用程序的构建系统以及许多其他常规配置。以下是一个如何为你的示例 hello_cli 项目填写此文件的简单示例：</p>\n<div class="highlight highlight-source-toml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# pyproject.toml\n\n[build-system]\nrequires = [&quot;setuptools&gt;=64.0.0&quot;, &quot;wheel&quot;]\nbuild-backend = &quot;setuptools.build_meta&quot;\n\n[project]\nname = &quot;hello_cli&quot;\nversion = &quot;0.0.1&quot;\ndescription = &quot;My awesome Hello CLI application&quot;\nreadme = &quot;README.md&quot;\nauthors = [{ name = &quot;Real Python&quot;, email = &quot;info@realpython.com&quot; }]\n\n[project.scripts]\nhello_cli = &quot;hello_cli.__main__:main&quot;"><pre class="notranslate"><span class="pl-c"><span class="pl-c">#</span> pyproject.toml</span>\n\n[<span class="pl-en">build-system</span>]\n<span class="pl-smi">requires</span> = [<span class="pl-s"><span class="pl-pds">"</span>setuptools&gt;=64.0.0<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>wheel<span class="pl-pds">"</span></span>]\n<span class="pl-smi">build-backend</span> = <span class="pl-s"><span class="pl-pds">"</span>setuptools.build_meta<span class="pl-pds">"</span></span>\n\n[<span class="pl-en">project</span>]\n<span class="pl-smi">name</span> = <span class="pl-s"><span class="pl-pds">"</span>hello_cli<span class="pl-pds">"</span></span>\n<span class="pl-smi">version</span> = <span class="pl-s"><span class="pl-pds">"</span>0.0.1<span class="pl-pds">"</span></span>\n<span class="pl-smi">description</span> = <span class="pl-s"><span class="pl-pds">"</span>My awesome Hello CLI application<span class="pl-pds">"</span></span>\n<span class="pl-smi">readme</span> = <span class="pl-s"><span class="pl-pds">"</span>README.md<span class="pl-pds">"</span></span>\n<span class="pl-smi">authors</span> = [{ <span class="pl-smi">name</span> = <span class="pl-s"><span class="pl-pds">"</span>Real Python<span class="pl-pds">"</span></span>, <span class="pl-smi">email</span> = <span class="pl-s"><span class="pl-pds">"</span>info@realpython.com<span class="pl-pds">"</span></span> }]\n\n[<span class="pl-en">project</span>.<span class="pl-en">scripts</span>]\n<span class="pl-smi">hello_cli</span> = <span class="pl-s"><span class="pl-pds">"</span>hello_cli.__main__:main<span class="pl-pds">"</span></span></pre></div>\n<p dir="auto"><code class="notranslate">[build-system]</code> 表头将 <code class="notranslate">setuptools</code> 设置为应用程序的构建系统，并指定 Python 需要安装哪些依赖项来构建应用程序。<code class="notranslate">[project]</code> 表头为你的应用提供了通用元数据。这些元数据在你想要将应用发布到 Python 包索引（PyPI）时非常有用。最后， <code class="notranslate">[project.scripts]</code> 表头定义了你的应用程序的入口点。</p>\n<p dir="auto">经过这次对 CLI 项目布局和构建的快速探索，你已经准备好继续学习 <code class="notranslate">argparse</code> 了，特别是如何自定义你的命令行参数解析器。</p>\n<h2 dir="auto">自定义你的命令行参数解析器</h2>\n<p dir="auto">在前面的部分中，你已经学习了如何使用 Python 的 <code class="notranslate">argparse</code> 模块为你的程序或应用实现命令行接口的基础知识。同时，你也了解了如何按照 MVC 模式组织和规划 CLI 应用项目。</p>\n<p dir="auto">在接下来的部分中，你将更深入地探索 <code class="notranslate">argparse</code> 的许多其他强大功能。特别是，你将学习如何在 <code class="notranslate">ArgumentParser</code> 构造函数中使用一些最有用的参数，这将使你能够自定义 CLI 应用的一般行为。</p>\n<h3 dir="auto">调整程序的 Help 和 Usage 内容</h3>\n<p dir="auto">向 CLI 应用程序的用户提供使用说明和帮助是一种最佳实践，可以通过出色的用户体验 (UX) 让用户更加愉快。在本节中，你将了解如何利用 <code class="notranslate">ArgumentParser</code> 的一些参数来微调 CLI 应用程序向用户显示帮助和使用消息的方式。你将学习如何：</p>\n<ul dir="auto">\n<li>设置程序名称</li>\n<li>定义程序的描述和结束消息</li>\n<li>对参数和选项进行分组显示帮助</li>\n</ul>\n<p dir="auto">首先，你将开始设置你的程序名称，并指定该名称在帮助或使用说明消息中的显示方式。</p>\n<h4 dir="auto">设置程序名称</h4>\n<p dir="auto">默认情况下，<code class="notranslate">argparse</code> 会使用 <code class="notranslate">sys.argv</code> 中的第一个值来设置程序的名称。这个第一项包含你刚刚执行的 Python 文件的名称。这个文件名在使用说明消息中看起来会有些奇怪。</p>\n<p dir="auto">例如，继续使用 <code class="notranslate">-h</code> 选项运行自定义 <code class="notranslate">ls</code> 命令：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ python ls.py -h\nusage: ls.py [-h] [-l] path\n\npositional arguments:\n  path\n\noptions:\n  -h, --help  show this help message and exit\n  -l, --long"><pre class="notranslate">$ python ls.py -h\nusage: ls.py [-h] [-l] path\n\npositional arguments:\n  path\n\noptions:\n  -h, --help  show this <span class="pl-c1">help</span> message and <span class="pl-c1">exit</span>\n  -l, --long</pre></div>\n<p dir="auto">命令输出中的高亮行显示 <code class="notranslate">argparse</code> 正在使用文件名 <code class="notranslate">ls.py</code> 作为程序的名称。这看起来有些奇怪，因为在使用说明消息中，应用名称很少包含文件扩展名。</p>\n<p dir="auto">幸运的是，你可以使用 <code class="notranslate">prog</code> 参数来指定你的程序名称，就像下面的代码片段所示：</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# ls.py v3\n\nimport argparse\nimport datetime\nfrom pathlib import Path\n\nparser = argparse.ArgumentParser(prog=&quot;ls&quot;)\n\n# ...\n\nfor entry in target_dir.iterdir():\n    print(build_output(entry, long=args.long))"><pre class="notranslate"><span class="pl-c"># ls.py v3</span>\n\n<span class="pl-k">import</span> <span class="pl-s1">argparse</span>\n<span class="pl-k">import</span> <span class="pl-s1">datetime</span>\n<span class="pl-k">from</span> <span class="pl-s1">pathlib</span> <span class="pl-k">import</span> <span class="pl-v">Path</span>\n\n<span class="pl-s1">parser</span> <span class="pl-c1">=</span> <span class="pl-s1">argparse</span>.<span class="pl-c1">ArgumentParser</span>(<span class="pl-s1">prog</span><span class="pl-c1">=</span><span class="pl-s">"ls"</span>)\n\n<span class="pl-c"># ...</span>\n\n<span class="pl-k">for</span> <span class="pl-s1">entry</span> <span class="pl-c1">in</span> <span class="pl-s1">target_dir</span>.<span class="pl-c1">iterdir</span>():\n    <span class="pl-en">print</span>(<span class="pl-en">build_output</span>(<span class="pl-s1">entry</span>, <span class="pl-s1">long</span><span class="pl-c1">=</span><span class="pl-s1">args</span>.<span class="pl-c1">long</span>))</pre></div>\n<p dir="auto">使用 <code class="notranslate">prog</code> 参数，你可以指定将在使用说明消息中使用的程序名称。在这个例子中，你使用了字符串 "ls"。现在，继续运行你的应用：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ python ls.py -h\nusage: ls [-h] [-l] path\n\npositional arguments:\n  path\n\noptions:\n  -h, --help  show this help message and exit\n  -l, --long"><pre class="notranslate">$ python ls.py -h\nusage: ls [-h] [-l] path\n\npositional arguments:\n  path\n\noptions:\n  -h, --help  show this <span class="pl-c1">help</span> message and <span class="pl-c1">exit</span>\n  -l, --long</pre></div>\n<p dir="auto">很好！这个输出的第一行中的使用说明消息显示程序名称为 <code class="notranslate">ls</code>，而不是 <code class="notranslate">ls.py</code>。</p>\n<p dir="auto">除了设置程序名称外，<code class="notranslate">argparse</code> 还允许你定义应用的描述和结尾信息。在接下来的部分中，你将学习如何进行这两方面的操作。</p>\n<h4 dir="auto">定义程序的描述和结语消息</h4>\n<p dir="auto">你还可以为你的应用定义一个通用的描述和一个结尾或结束语。为此，你将分别使用 <code class="notranslate">description</code> 和 <code class="notranslate">epilog</code> 参数。接下来，请更新 <code class="notranslate">ls.py</code> 文件，在 <code class="notranslate">ArgumentParser</code> 构造函数中添加以下内容：</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# ls.py v4\n\nimport argparse\nimport datetime\nfrom pathlib import Path\n\nparser = argparse.ArgumentParser(\n    prog=&quot;ls&quot;,\n    description=&quot;List the content of a directory&quot;,\n    epilog=&quot;Thanks for using %(prog)s! :)&quot;,\n)\n\n# ...\n\nfor entry in target_dir.iterdir():\n    print(build_output(entry, long=args.long))"><pre class="notranslate"><span class="pl-c"># ls.py v4</span>\n\n<span class="pl-k">import</span> <span class="pl-s1">argparse</span>\n<span class="pl-k">import</span> <span class="pl-s1">datetime</span>\n<span class="pl-k">from</span> <span class="pl-s1">pathlib</span> <span class="pl-k">import</span> <span class="pl-v">Path</span>\n\n<span class="pl-s1">parser</span> <span class="pl-c1">=</span> <span class="pl-s1">argparse</span>.<span class="pl-c1">ArgumentParser</span>(\n    <span class="pl-s1">prog</span><span class="pl-c1">=</span><span class="pl-s">"ls"</span>,\n    <span class="pl-s1">description</span><span class="pl-c1">=</span><span class="pl-s">"List the content of a directory"</span>,\n    <span class="pl-s1">epilog</span><span class="pl-c1">=</span><span class="pl-s">"Thanks for using %(prog)s! :)"</span>,\n)\n\n<span class="pl-c"># ...</span>\n\n<span class="pl-k">for</span> <span class="pl-s1">entry</span> <span class="pl-c1">in</span> <span class="pl-s1">target_dir</span>.<span class="pl-c1">iterdir</span>():\n    <span class="pl-en">print</span>(<span class="pl-en">build_output</span>(<span class="pl-s1">entry</span>, <span class="pl-s1">long</span><span class="pl-c1">=</span><span class="pl-s1">args</span>.<span class="pl-c1">long</span>))</pre></div>\n<p dir="auto">在这次更新中，<code class="notranslate">description</code> 参数允许你为应用提供一个通用的描述。这个描述将显示在帮助消息的开头。<code class="notranslate">epilog</code> 参数则允许你定义一些文本作为应用的结尾或结束语。请注意，你可以使用旧式的字符串格式化操作符(<code class="notranslate">%</code>)将 <code class="notranslate">prog</code> 参数插入到 <code class="notranslate">epilog</code> 字符串中。</p>\n<p dir="auto">如果再次运行该应用程序，你将得到如下输出：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ python ls.py -h\nusage: ls [-h] [-l] path\n\nList the content of a directory\n\npositional arguments:\n  path\n\noptions:\n  -h, --help  show this help message and exit\n  -l, --long\n\nThanks for using ls! :)"><pre class="notranslate">$ python ls.py -h\nusage: ls [-h] [-l] path\n\nList the content of a directory\n\npositional arguments:\n  path\n\noptions:\n  -h, --help  show this <span class="pl-c1">help</span> message and <span class="pl-c1">exit</span>\n  -l, --long\n\nThanks <span class="pl-k">for</span> using ls<span class="pl-k">!</span> :)</pre></div>\n<p dir="auto">现在，输出会在使用消息之后显示描述消息，并在帮助文本末尾显示结语消息。</p>\n<h4 dir="auto">显示参数和选项的分组帮助</h4>\n<p dir="auto"><strong>帮助分组</strong>(Help groups)是 <code class="notranslate">argparse</code> 的另一个有趣特性。它们允许你将相关的命令和参数进行分组，从而帮助你组织应用的帮助消息。要创建这些帮助分组，你将使用 <code class="notranslate">ArgumentParser</code> 的 <code class="notranslate">.add_argument_group()</code> 方法。</p>\n<p dir="auto">作为一个例子，请考虑你自定义的 <code class="notranslate">ls</code> 命令的以下更新版本：</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# ls.py v5\n# ...\n\nparser = argparse.ArgumentParser(\n    prog=&quot;ls&quot;,\n    description=&quot;List the content of a directory&quot;,\n    epilog=&quot;Thanks for using %(prog)s! :)&quot;,\n)\n\ngeneral = parser.add_argument_group(&quot;general output&quot;)\ngeneral.add_argument(&quot;path&quot;)\n\ndetailed = parser.add_argument_group(&quot;detailed output&quot;)\ndetailed.add_argument(&quot;-l&quot;, &quot;--long&quot;, action=&quot;store_true&quot;)\n\nargs = parser.parse_args()\n\n# ...\n\nfor entry in target_dir.iterdir():\n    print(build_output(entry, long=args.long))"><pre class="notranslate"><span class="pl-c"># ls.py v5</span>\n<span class="pl-c"># ...</span>\n\n<span class="pl-s1">parser</span> <span class="pl-c1">=</span> <span class="pl-s1">argparse</span>.<span class="pl-c1">ArgumentParser</span>(\n    <span class="pl-s1">prog</span><span class="pl-c1">=</span><span class="pl-s">"ls"</span>,\n    <span class="pl-s1">description</span><span class="pl-c1">=</span><span class="pl-s">"List the content of a directory"</span>,\n    <span class="pl-s1">epilog</span><span class="pl-c1">=</span><span class="pl-s">"Thanks for using %(prog)s! :)"</span>,\n)\n\n<span class="pl-s1">general</span> <span class="pl-c1">=</span> <span class="pl-s1">parser</span>.<span class="pl-c1">add_argument_group</span>(<span class="pl-s">"general output"</span>)\n<span class="pl-s1">general</span>.<span class="pl-c1">add_argument</span>(<span class="pl-s">"path"</span>)\n\n<span class="pl-s1">detailed</span> <span class="pl-c1">=</span> <span class="pl-s1">parser</span>.<span class="pl-c1">add_argument_group</span>(<span class="pl-s">"detailed output"</span>)\n<span class="pl-s1">detailed</span>.<span class="pl-c1">add_argument</span>(<span class="pl-s">"-l"</span>, <span class="pl-s">"--long"</span>, <span class="pl-s1">action</span><span class="pl-c1">=</span><span class="pl-s">"store_true"</span>)\n\n<span class="pl-s1">args</span> <span class="pl-c1">=</span> <span class="pl-s1">parser</span>.<span class="pl-c1">parse_args</span>()\n\n<span class="pl-c"># ...</span>\n\n<span class="pl-k">for</span> <span class="pl-s1">entry</span> <span class="pl-c1">in</span> <span class="pl-s1">target_dir</span>.<span class="pl-c1">iterdir</span>():\n    <span class="pl-en">print</span>(<span class="pl-en">build_output</span>(<span class="pl-s1">entry</span>, <span class="pl-s1">long</span><span class="pl-c1">=</span><span class="pl-s1">args</span>.<span class="pl-c1">long</span>))</pre></div>\n<p dir="auto">在这次更新中，你为显示一般输出的参数和选项创建了一个帮助分组，并为显示详细输出的参数和选项创建了另一个分组。</p>\n<p dir="auto">如果你在命令行中使用 <code class="notranslate">-h</code> 选项运行应用程序，那么你将获得以下输出：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="python ls.py -h\nusage: ls [-h] [-l] path\n\nList the content of a directory\n\noptions:\n  -h, --help  show this help message and exit\n\ngeneral output:\n  path\n\ndetailed output:\n  -l, --long\n\nThanks for using ls! :)"><pre class="notranslate">python ls.py -h\nusage: ls [-h] [-l] path\n\nList the content of a directory\n\noptions:\n  -h, --help  show this <span class="pl-c1">help</span> message and <span class="pl-c1">exit</span>\n\ngeneral output:\n  path\n\ndetailed output:\n  -l, --long\n\nThanks <span class="pl-k">for</span> using ls<span class="pl-k">!</span> :)</pre></div>\n<p dir="auto">现在，你的应用的参数和选项在帮助消息中以描述性的标题进行了方便的分组。这个整洁的特性将帮助你为用户提供更多的上下文，并帮助他们更好地理解应用的工作原理。</p>\n<h3 dir="auto">为参数和选项提供全局设置</h3>\n<p dir="auto">除了自定义使用说明和帮助消息外，<code class="notranslate">ArgumentParser</code> 还允许你对命令行界面（CLI）应用进行其他一些有趣的调整。这些调整包括：</p>\n<ul dir="auto">\n<li>为参数和选项定义全局默认值</li>\n<li>从外部文件中加载参数和选项</li>\n<li>允许或禁止选项缩写</li>\n</ul>\n<p dir="auto">有时，你可能需要为你的应用的参数和选项指定一个全局默认值。你可以通过在调用 <code class="notranslate">ArgumentParser</code> 构造函数时，将默认值传递给 <code class="notranslate">argument_default</code> 参数来实现这一点（注意：实际上 <code class="notranslate">ArgumentParser</code> 没有 <code class="notranslate">argument_default</code> 这个参数，但这里是为了说明可以全局设置默认值的概念。在实际应用中，你可能需要为每个参数单独设置默认值）。</p>\n<p dir="auto">这个特性可能并不常用，因为参数和选项通常具有不同的数据类型或意义，很难找到一个满足所有需求的值。</p>\n<p dir="auto">然而，<code class="notranslate">argument_default</code>(尽管 <code class="notranslate">ArgumentParser</code> 并没有直接提供这个参数，但这里是为了说明概念）的一个常见用例是当你想要避免将参数和选项添加到 <code class="notranslate">Namespace</code> 对象中。在这种情况下，你可以使用 <code class="notranslate">SUPPRESS</code> 常量作为默认值。这个默认值将确保只有命令行中提供的参数和选项才会被存储在 <code class="notranslate">arguments</code> 的 <code class="notranslate">Namespace</code> 中。</p>\n<p dir="auto">作为一个例子，请继续修改你的自定义 <code class="notranslate">ls</code> 命令，如下面的代码片段所示：</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# ls.py v6\n\nimport argparse\nimport datetime\nfrom pathlib import Path\n\nparser = argparse.ArgumentParser(\n    prog=&quot;ls&quot;,\n    description=&quot;List the content of a directory&quot;,\n    epilog=&quot;Thanks for using %(prog)s! :)&quot;,\n    argument_default=argparse.SUPPRESS,\n)\n\n# ...\n\nfor entry in target_dir.iterdir():\n    try:\n        long = args.long\n    except AttributeError:\n        long = False\n    print(build_output(entry, long=long))"><pre class="notranslate"><span class="pl-c"># ls.py v6</span>\n\n<span class="pl-k">import</span> <span class="pl-s1">argparse</span>\n<span class="pl-k">import</span> <span class="pl-s1">datetime</span>\n<span class="pl-k">from</span> <span class="pl-s1">pathlib</span> <span class="pl-k">import</span> <span class="pl-v">Path</span>\n\n<span class="pl-s1">parser</span> <span class="pl-c1">=</span> <span class="pl-s1">argparse</span>.<span class="pl-c1">ArgumentParser</span>(\n    <span class="pl-s1">prog</span><span class="pl-c1">=</span><span class="pl-s">"ls"</span>,\n    <span class="pl-s1">description</span><span class="pl-c1">=</span><span class="pl-s">"List the content of a directory"</span>,\n    <span class="pl-s1">epilog</span><span class="pl-c1">=</span><span class="pl-s">"Thanks for using %(prog)s! :)"</span>,\n    <span class="pl-s1">argument_default</span><span class="pl-c1">=</span><span class="pl-s1">argparse</span>.<span class="pl-c1">SUPPRESS</span>,\n)\n\n<span class="pl-c"># ...</span>\n\n<span class="pl-k">for</span> <span class="pl-s1">entry</span> <span class="pl-c1">in</span> <span class="pl-s1">target_dir</span>.<span class="pl-c1">iterdir</span>():\n    <span class="pl-k">try</span>:\n        <span class="pl-s1">long</span> <span class="pl-c1">=</span> <span class="pl-s1">args</span>.<span class="pl-c1">long</span>\n    <span class="pl-k">except</span> <span class="pl-v">AttributeError</span>:\n        <span class="pl-s1">long</span> <span class="pl-c1">=</span> <span class="pl-c1">False</span>\n    <span class="pl-en">print</span>(<span class="pl-en">build_output</span>(<span class="pl-s1">entry</span>, <span class="pl-s1">long</span><span class="pl-c1">=</span><span class="pl-s1">long</span>))</pre></div>\n<p dir="auto">通过将 <code class="notranslate">SUPPRESS</code> 传递给 <code class="notranslate">ArgumentParser</code> 构造函数，你可以防止未提供的参数被存储在 <code class="notranslate">argparse.Namespace</code> 对象中。这就是为什么在调用 <code class="notranslate">build_output()</code> 之前，你需要检查 <code class="notranslate">-l</code> 或 <code class="notranslate">--long</code> 选项是否实际被传递了。否则，你的代码会因为 <code class="notranslate">args</code> 中不存在 <code class="notranslate">long</code> 属性而引发 <code class="notranslate">AttributeError</code> 错误。</p>\n<p dir="auto"><code class="notranslate">ArgumentParser</code> 的另一个酷炫功能是允许你从外部文件中加载参数值。当你有一个具有冗长或复杂的命令行结构的应用，并希望自动化加载参数值的过程时，这个功能就非常有用。</p>\n<p dir="auto">在这种情况下，你可以将参数值存储在一个外部文件中，并让你的程序从该文件中加载它们。为了尝试这个功能，请继续创建一个简单的命令行界面（CLI）应用，如下所示：</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# fromfile.py\n\nimport argparse\n\nparser = argparse.ArgumentParser(fromfile_prefix_chars=&quot;@&quot;)\n\nparser.add_argument(&quot;one&quot;)\nparser.add_argument(&quot;two&quot;)\nparser.add_argument(&quot;three&quot;)\n\nargs = parser.parse_args()\n\nprint(args)"><pre class="notranslate"><span class="pl-c"># fromfile.py</span>\n\n<span class="pl-k">import</span> <span class="pl-s1">argparse</span>\n\n<span class="pl-s1">parser</span> <span class="pl-c1">=</span> <span class="pl-s1">argparse</span>.<span class="pl-c1">ArgumentParser</span>(<span class="pl-s1">fromfile_prefix_chars</span><span class="pl-c1">=</span><span class="pl-s">"@"</span>)\n\n<span class="pl-s1">parser</span>.<span class="pl-c1">add_argument</span>(<span class="pl-s">"one"</span>)\n<span class="pl-s1">parser</span>.<span class="pl-c1">add_argument</span>(<span class="pl-s">"two"</span>)\n<span class="pl-s1">parser</span>.<span class="pl-c1">add_argument</span>(<span class="pl-s">"three"</span>)\n\n<span class="pl-s1">args</span> <span class="pl-c1">=</span> <span class="pl-s1">parser</span>.<span class="pl-c1">parse_args</span>()\n\n<span class="pl-en">print</span>(<span class="pl-s1">args</span>)</pre></div>\n<p dir="auto">在这里，你向 <code class="notranslate">ArgumentParser</code> 的 <code class="notranslate">fromfile_prefix_chars</code> 参数传递 <code class="notranslate">@</code> 符号。然后，你创建了三个必须在命令行中提供的必需参数。</p>\n<p dir="auto">现在，假设你经常使用此应用程序，并且总是使用相同的一组参数值。为了简化和优化你的工作流程，你可以创建一个文件，其中包含所有必需参数的适当值，每个参数占一行，就像下面的 <code class="notranslate">args.txt</code> 文件一样：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="first\nsecond\nthird"><pre class="notranslate"><code class="notranslate">first\nsecond\nthird\n</code></pre></div>\n<p dir="auto">有了这个文件，您现在可以调用您的程序并指示它从 <code class="notranslate">args.txt</code> 文件加载值，如以下命令运行所示：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ python fromfile.py @args.txt\nNamespace(one=\'first\', two=\'second\', three=\'third\')"><pre class="notranslate">$ python fromfile.py @args.txt\nNamespace(one=<span class="pl-s"><span class="pl-pds">\'</span>first<span class="pl-pds">\'</span></span>, two=<span class="pl-s"><span class="pl-pds">\'</span>second<span class="pl-pds">\'</span></span>, three=<span class="pl-s"><span class="pl-pds">\'</span>third<span class="pl-pds">\'</span></span>)</pre></div>\n<p dir="auto">在此命令的输出中，你可以看到 <code class="notranslate">argparse</code> 已经读取了 <code class="notranslate">args.txt</code> 的内容，并顺序地将值分配给了 <code class="notranslate">fromfile.py</code> 程序的每个参数。所有参数及其值都已成功存储在 <code class="notranslate">Namespace</code> 对象中。</p>\n<p dir="auto">接受缩写选项名称的能力是 <code class="notranslate">argparse</code> 命令行界面（CLI）的另一个酷炫特性。这个特性是默认启用的，当你的程序具有长选项名称时非常有用。例如，考虑以下程序，它会在命令行下打印出你在 <code class="notranslate">--argument-with-a-long-name</code> 选项后指定的值：</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# abbreviate.py\n\nimport argparse\n\nparser = argparse.ArgumentParser()\n\nparser.add_argument(&quot;--argument-with-a-long-name&quot;)\n\nargs = parser.parse_args()\n\nprint(args.argument_with_a_long_name)"><pre class="notranslate"><span class="pl-c"># abbreviate.py</span>\n\n<span class="pl-k">import</span> <span class="pl-s1">argparse</span>\n\n<span class="pl-s1">parser</span> <span class="pl-c1">=</span> <span class="pl-s1">argparse</span>.<span class="pl-c1">ArgumentParser</span>()\n\n<span class="pl-s1">parser</span>.<span class="pl-c1">add_argument</span>(<span class="pl-s">"--argument-with-a-long-name"</span>)\n\n<span class="pl-s1">args</span> <span class="pl-c1">=</span> <span class="pl-s1">parser</span>.<span class="pl-c1">parse_args</span>()\n\n<span class="pl-en">print</span>(<span class="pl-s1">args</span>.<span class="pl-c1">argument_with_a_long_name</span>)</pre></div>\n<p dir="auto">这个程序会打印出你在 <code class="notranslate">--argument-with-a-long-name</code> 选项后传入的任何参数值。现在，请继续运行以下命令来检查 Python 的 <code class="notranslate">argparse</code> 模块如何处理这些缩写：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ python abbreviate.py --argument-with-a-long-name 42\n42\n\n$ python abbreviate.py --argument 42\n42\n\n$ python abbreviate.py --a 42\n42"><pre class="notranslate">$ python abbreviate.py --argument-with-a-long-name 42\n42\n\n$ python abbreviate.py --argument 42\n42\n\n$ python abbreviate.py --a 42\n42</pre></div>\n<p dir="auto">这些示例展示了如何缩写 <code class="notranslate">--argument-with-a-long-name</code> 选项的名称，而应用程序仍能正常工作。此功能是默认启用的。如果你希望禁用它并禁止缩写，那么可以在 <code class="notranslate">ArgumentParser</code> 中使用 <code class="notranslate">allow_abbrev</code> 参数：</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# abbreviate.py\n\nimport argparse\n\nparser = argparse.ArgumentParser(allow_abbrev=False)\n\nparser.add_argument(&quot;--argument-with-a-long-name&quot;)\n\nargs = parser.parse_args()\n\nprint(args.argument_with_a_long_name)"><pre class="notranslate"><span class="pl-c"># abbreviate.py</span>\n\n<span class="pl-k">import</span> <span class="pl-s1">argparse</span>\n\n<span class="pl-s1">parser</span> <span class="pl-c1">=</span> <span class="pl-s1">argparse</span>.<span class="pl-c1">ArgumentParser</span>(<span class="pl-s1">allow_abbrev</span><span class="pl-c1">=</span><span class="pl-c1">False</span>)\n\n<span class="pl-s1">parser</span>.<span class="pl-c1">add_argument</span>(<span class="pl-s">"--argument-with-a-long-name"</span>)\n\n<span class="pl-s1">args</span> <span class="pl-c1">=</span> <span class="pl-s1">parser</span>.<span class="pl-c1">parse_args</span>()\n\n<span class="pl-en">print</span>(<span class="pl-s1">args</span>.<span class="pl-c1">argument_with_a_long_name</span>)</pre></div>\n<p dir="auto">将 <code class="notranslate">allow_abbrev</code> 设置为 <code class="notranslate">False</code> 会禁用命令行选项中的缩写。从这一点开始，你将需要为程序提供完整的选项名称才能正确工作。否则，你会收到一个错误：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ python abbreviate.py --argument-with-a-long-name 42\n42\n\n$ python abbreviate.py --argument 42\nusage: abbreviate.py [-h] [--argument-with-a-long-name ...]\nabbreviate.py: error: unrecognized arguments: --argument 42"><pre class="notranslate">$ python abbreviate.py --argument-with-a-long-name 42\n42\n\n$ python abbreviate.py --argument 42\nusage: abbreviate.py [-h] [--argument-with-a-long-name ...]\nabbreviate.py: error: unrecognized arguments: --argument 42</pre></div>\n<p dir="auto">第二个示例中的错误消息告诉你 <code class="notranslate">--argument</code> 选项没有被识别为有效的选项。要使用该选项，你需要提供它的完整名称。</p>\n<h2 dir="auto">微调你的命令行参数和选项</h2>\n<p dir="auto">到目前为止，你已经学习了如何定制 <code class="notranslate">ArgumentParser</code> 类的多个功能，以改善你的命令行界面（CLI）的用户体验。现在，你知道了如何调整你的应用程序的使用说明和帮助信息，以及如何微调命令行参数和选项的一些全局方面。</p>\n<p dir="auto">在本节中，你将学习如何定制你的 CLI 的命令行参数和选项的其他几个功能。在这种情况下，你将使用 <code class="notranslate">.add_argument()</code> 方法及其一些最相关的参数，包括 <code class="notranslate">action</code>、<code class="notranslate">type</code>、<code class="notranslate">nargs</code>、<code class="notranslate">default</code>、<code class="notranslate">help</code> 等。</p>\n<h3 dir="auto">设置 Option 背后的 Action</h3>\n<p dir="auto">当你向命令行界面添加一个选项或标志时，通常需要定义如何将选项的值存储在调用 <code class="notranslate">.parse_args()</code> 后得到的 <code class="notranslate">Namespace</code> 对象中。为此，你会使用 <code class="notranslate">.add_argument()</code> 的 <code class="notranslate">action</code> 参数。<code class="notranslate">action</code> 参数的默认值为 "store"，意味着提供的选项值将原样存储在 <code class="notranslate">Namespace</code> 中。</p>\n<p dir="auto"><code class="notranslate">action</code> 参数可以接受几个可能的值。以下是这些可能值的列表及其含义：</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.2-编程'}, 'labels': {'nodes': [{'name': '1.2.3-Python'}]}, 'comments': {'nodes': []}}, {'title': 'Chrome/Edge 地址栏正常显示完整的 URL', 'number': 74, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/74', 'createdAt': '2024-05-29T01:22:53Z', 'lastEditedAt': '2024-06-03T05:23:53Z', 'updatedAt': '2024-06-03T05:23:53Z', 'body': '对于在 Chrome/Edge 使用 IP 或者其他 URL 访问网页，地址栏想复制 IP/URL 非要给我自动加上 `http://`(或者 `https://`) 前缀。\r\n\r\n<!-- more -->\r\n\r\n## Chrome\r\n\r\nGoogle Chrome 对于这个问题的解决方法很简单：在 URL 地址栏点击 "鼠标右键" -> 选择 "总是显示完整网址"。\r\n\r\n![chrome-show-url](https://kg.weiyan.cc/2024/06/chrome-show-url.png)\r\n\r\n## Edge\r\n\r\n1. 右键点击 Microsoft Edge 的桌面快捷方式，选择属性。\r\n   ![edge-1](https://kg.weiyan.cc/2024/05/edge-1.png)\r\n\r\n2. 在启动目标结尾追加空格以及下面这段代码并保存。\r\n   ```\r\n   --disable-features=msHideSteadyStateUrlPath\r\n   ```\r\n   ![edge-disable-features](https://kg.weiyan.cc/2024/05/edge-disable-features.png)\r\n\r\n3. 重启浏览器后地址栏就可以显示完整 URL 了。', 'bodyText': '对于在 Chrome/Edge 使用 IP 或者其他 URL 访问网页，地址栏想复制 IP/URL 非要给我自动加上 http://(或者 https://) 前缀。\n\nChrome\nGoogle Chrome 对于这个问题的解决方法很简单：在 URL 地址栏点击 "鼠标右键" -> 选择 "总是显示完整网址"。\n\nEdge\n\n\n右键点击 Microsoft Edge 的桌面快捷方式，选择属性。\n\n\n\n在启动目标结尾追加空格以及下面这段代码并保存。\n--disable-features=msHideSteadyStateUrlPath\n\n\n\n\n重启浏览器后地址栏就可以显示完整 URL 了。', 'bodyHTML': '<p dir="auto">对于在 Chrome/Edge 使用 IP 或者其他 URL 访问网页，地址栏想复制 IP/URL 非要给我自动加上 <code class="notranslate">http://</code>(或者 <code class="notranslate">https://</code>) 前缀。</p>\n\n<h2 dir="auto">Chrome</h2>\n<p dir="auto">Google Chrome 对于这个问题的解决方法很简单：在 URL 地址栏点击 "鼠标右键" -&gt; 选择 "总是显示完整网址"。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/9df9c954d7b501cfb07911ebebf9f9cb89aea3621674e4ca8bfe01ca2af2071d/68747470733a2f2f6b672e77656979616e2e63632f323032342f30362f6368726f6d652d73686f772d75726c2e706e67"><img src="https://camo.githubusercontent.com/9df9c954d7b501cfb07911ebebf9f9cb89aea3621674e4ca8bfe01ca2af2071d/68747470733a2f2f6b672e77656979616e2e63632f323032342f30362f6368726f6d652d73686f772d75726c2e706e67" alt="chrome-show-url" data-canonical-src="https://kg.weiyan.cc/2024/06/chrome-show-url.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">Edge</h2>\n<ol dir="auto">\n<li>\n<p dir="auto">右键点击 Microsoft Edge 的桌面快捷方式，选择属性。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/9aa02c1405c6f9d9b97dca9c6d99cbfd978653d2684ecb044e24ce2def20551f/68747470733a2f2f6b672e77656979616e2e63632f323032342f30352f656467652d312e706e67"><img src="https://camo.githubusercontent.com/9aa02c1405c6f9d9b97dca9c6d99cbfd978653d2684ecb044e24ce2def20551f/68747470733a2f2f6b672e77656979616e2e63632f323032342f30352f656467652d312e706e67" alt="edge-1" data-canonical-src="https://kg.weiyan.cc/2024/05/edge-1.png" style="max-width: 100%;"></a></p>\n</li>\n<li>\n<p dir="auto">在启动目标结尾追加空格以及下面这段代码并保存。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="--disable-features=msHideSteadyStateUrlPath"><pre class="notranslate"><code class="notranslate">--disable-features=msHideSteadyStateUrlPath\n</code></pre></div>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/7fdb05e3a00e12b3a5243f6d3710822f72dfe0517f90d04f1d90589c13ba8ad4/68747470733a2f2f6b672e77656979616e2e63632f323032342f30352f656467652d64697361626c652d66656174757265732e706e67"><img src="https://camo.githubusercontent.com/7fdb05e3a00e12b3a5243f6d3710822f72dfe0517f90d04f1d90589c13ba8ad4/68747470733a2f2f6b672e77656979616e2e63632f323032342f30352f656467652d64697361626c652d66656174757265732e706e67" alt="edge-disable-features" data-canonical-src="https://kg.weiyan.cc/2024/05/edge-disable-features.png" style="max-width: 100%;"></a></p>\n</li>\n<li>\n<p dir="auto">重启浏览器后地址栏就可以显示完整 URL 了。</p>\n</li>\n</ol>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '适合我的 RSS 阅读器', 'number': 73, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/73', 'createdAt': '2024-05-21T05:51:39Z', 'lastEditedAt': '2024-05-21T06:16:08Z', 'updatedAt': '2024-05-21T06:18:31Z', 'body': '好多年前，写过一篇文章《[使用RSS打造你的科研资讯头条](https://zhuanlan.zhihu.com/p/42088810)》，但是由于没有趁手的 RSS 阅读器以至于让 RSS 信息聚合的这个念头荒废了好多年。直到最近用上了 [QiReader](https://github.com/oxyry/qireader) - 优雅的在线 RSS 阅读器，我的 RSS 信息聚合好像又找到了延续下去的动力。 \r\n\r\n<!-- more -->\r\n\r\n不得不说，它很好的满足了我 Web 端+移动端同步的使用需求，而且国内国外通用。\r\n\r\n![qireader-twitter](https://kg.weiyan.cc/2024/05/qireader-twitter.png)\r\n\r\n在价格层面，一年 Pro 会员 ￥38，二年 ￥68，五年 ￥128，也不算贵 —— 于是，果断入手了。\r\n\r\n![qireader-plans](https://kg.weiyan.cc/2024/05/qireader-plans.webp)', 'bodyText': '好多年前，写过一篇文章《使用RSS打造你的科研资讯头条》，但是由于没有趁手的 RSS 阅读器以至于让 RSS 信息聚合的这个念头荒废了好多年。直到最近用上了 QiReader - 优雅的在线 RSS 阅读器，我的 RSS 信息聚合好像又找到了延续下去的动力。\n\n不得不说，它很好的满足了我 Web 端+移动端同步的使用需求，而且国内国外通用。\n\n在价格层面，一年 Pro 会员 ￥38，二年 ￥68，五年 ￥128，也不算贵 —— 于是，果断入手了。', 'bodyHTML': '<p dir="auto">好多年前，写过一篇文章《<a href="https://zhuanlan.zhihu.com/p/42088810" rel="nofollow">使用RSS打造你的科研资讯头条</a>》，但是由于没有趁手的 RSS 阅读器以至于让 RSS 信息聚合的这个念头荒废了好多年。直到最近用上了 <a href="https://github.com/oxyry/qireader">QiReader</a> - 优雅的在线 RSS 阅读器，我的 RSS 信息聚合好像又找到了延续下去的动力。</p>\n\n<p dir="auto">不得不说，它很好的满足了我 Web 端+移动端同步的使用需求，而且国内国外通用。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/e1d9f3a4b3401e6ca8ef0031693a050a86d4016ab56387cbd6f17c555978b20e/68747470733a2f2f6b672e77656979616e2e63632f323032342f30352f71697265616465722d747769747465722e706e67"><img src="https://camo.githubusercontent.com/e1d9f3a4b3401e6ca8ef0031693a050a86d4016ab56387cbd6f17c555978b20e/68747470733a2f2f6b672e77656979616e2e63632f323032342f30352f71697265616465722d747769747465722e706e67" alt="qireader-twitter" data-canonical-src="https://kg.weiyan.cc/2024/05/qireader-twitter.png" style="max-width: 100%;"></a></p>\n<p dir="auto">在价格层面，一年 Pro 会员 ￥38，二年 ￥68，五年 ￥128，也不算贵 —— 于是，果断入手了。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/4751163ec093d0bb104622a9a374a61e95aa5bb604371034da8aab0bca8f2f9f/68747470733a2f2f6b672e77656979616e2e63632f323032342f30352f71697265616465722d706c616e732e77656270"><img src="https://camo.githubusercontent.com/4751163ec093d0bb104622a9a374a61e95aa5bb604371034da8aab0bca8f2f9f/68747470733a2f2f6b672e77656979616e2e63632f323032342f30352f71697265616465722d706c616e732e77656270" alt="qireader-plans" data-canonical-src="https://kg.weiyan.cc/2024/05/qireader-plans.webp" style="max-width: 100%;"></a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': 'Twitter', 'number': 72, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/72', 'createdAt': '2024-05-16T01:58:18Z', 'lastEditedAt': '2024-05-28T03:22:30Z', 'updatedAt': '2024-05-28T03:22:30Z', 'body': '相比微博，Twitter 更有意思一些，除了可以获取到很多技术大咖的日常和动态，还能发现不少有意思的人和事。加上推特世界性的，开放性的一些特点，所以可以看到的自然是什么都有也比国内精彩。\r\n\r\n<!-- more -->\r\n\r\n能够翻出来的都是有点认知的人，虽然不一定全对，但也有一定道理。\r\n\r\n微博用的比较少，感觉更加偏向娱乐和一些时事热点。', 'bodyText': '相比微博，Twitter 更有意思一些，除了可以获取到很多技术大咖的日常和动态，还能发现不少有意思的人和事。加上推特世界性的，开放性的一些特点，所以可以看到的自然是什么都有也比国内精彩。\n\n能够翻出来的都是有点认知的人，虽然不一定全对，但也有一定道理。\n微博用的比较少，感觉更加偏向娱乐和一些时事热点。', 'bodyHTML': '<p dir="auto">相比微博，Twitter 更有意思一些，除了可以获取到很多技术大咖的日常和动态，还能发现不少有意思的人和事。加上推特世界性的，开放性的一些特点，所以可以看到的自然是什么都有也比国内精彩。</p>\n\n<p dir="auto">能够翻出来的都是有点认知的人，虽然不一定全对，但也有一定道理。</p>\n<p dir="auto">微博用的比较少，感觉更加偏向娱乐和一些时事热点。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': 'mamba 的两个分支 miniforge 和 mambaforge', 'number': 71, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/71', 'createdAt': '2024-04-28T02:44:00Z', 'lastEditedAt': '2025-03-05T02:30:26Z', 'updatedAt': '2025-03-05T02:30:26Z', 'body': "在安装 mamba 的时候在 [release](https://github.com/conda-forge/miniforge/releases) 页面和[官方的安装页面](https://mamba.readthedocs.io/en/latest/installation/mamba-installation.html) 总是看到关于 miniforge 和 mambaforge 的选择问题，傻傻搞不明白。\r\n\r\n<!-- more -->\r\n\r\n## Miniforge 和 Mambaforge\r\n\r\n参考：<https://github.com/conda-forge/miniforge?tab=readme-ov-file#faq>\r\n\r\n> **What's the difference between Mambaforge and Miniforge?**    \r\n> After the release of Miniforge 23.3.1 in August 2023, Miniforge and Mambaforge are essentially identical. The only difference is the name of the installer and subsequently the default installation path.\r\n> \r\n> 2023 年 8 月发布 Miniforge 23.3.1 后，Miniforge 和 Mambaforge 基本相同。唯一的区别是安装程序的名称以及随后的默认安装路径(一个默认是 miniforge3，一个默认是 mambaforge3)。\r\n> \r\n> Before that release, Miniforge only shipped conda, while Mambaforge added mamba on top. Since Miniconda started shipping conda-libmamba-solver in July 2023, Miniforge followed suit and started shipping it too in August. At that point, since conda-libmamba-solver depends on libmambapy, the only difference between Miniforge and Mambaforge was the presence of the mamba Python package. To minimize surprises, we decided to add mamba to Miniforge too.    \r\n> \r\n> 在之前的版本中，Miniforge 仅提供 conda，而 Mambaforge 在此基础上增加了 mamba。自 2023 年 7 月 Miniconda 开始提供 conda-libmamba-solver 以来，Miniforge 也紧随其后，于 8 月开始提供此功能。那时，由于 conda-libmamba-solver 依赖于libmambapy，Miniforge 和 Mambaforge 之间的唯一区别就是是否包含 mamba Python 包。为了尽量减少意外情况，我们决定也在 Miniforge 中添加 mamba。\r\n> \r\n> **Should I choose one or another going forward at the risk of one of them gettting deprecated?**     \r\n> Given its wide usage, there are no plans to deprecate Mambaforge. If at some point we decide to deprecate Mambaforge, it will be appropriately announced and communicated with sufficient time in advance.\r\n> \r\n> 鉴于 Mambaforge 的广泛使用，目前没有计划将其弃用。如果未来我们决定弃用 Mambaforge，我们会提前充分公告并通知相关用户。\r\n> \r\n> That said, if you had to start using one today, we recommend to stick to Miniforge.\r\n> \r\n> 不过，如果你今天需要开始使用其中一个，我们建议你坚持使用 Miniforge。\r\n\r\n## Miniforge 和 Miniconda\r\n\r\n参考：[What’s the difference between Anaconda, conda, Miniconda, mamba, Mambaforge, micromamba?](https://bioconda.github.io/faqs.html#what-s-the-difference-between-anaconda-conda-miniconda-mamba-mambaforge-micromamba) - bioconda#Faqs\r\n\r\nMiniforge 是社区 (conda-forge) 驱动的简约 conda 安装程序。Miniforge 与 Miniconda 类似，但预配置了 `conda-forge` 通道，并且所有包都来自 conda-forge 而不是 `defaults` 通道。现在它还包含了 mamba 和 libmamba。\r\n\r\nMiniconda 是公司 (Anaconda) 驱动的简约 conda 安装程序。随后的软件包安装来自 anaconda 频道（默认或其他）。\r\n\r\n## 一句话\r\n\r\n总的一句话来说，Mambaforge 类似于 Miniforge，但将 mamba 安装到基础环境中。虽然没有严格弃用，但从 **2023 年 9 月**起不鼓励使用它（请参阅 miniforge 自述 [README](https://github.com/conda-forge/miniforge) 文件）。\r\n\r\n## 版本选择\r\n\r\nMiniforge3 的 [Release 24.5.0-0](https://github.com/conda-forge/miniforge/releases/tag/24.5.0-0) 要求 **Linux-x86_64: glibc >= 2.17**，也就是对于 CentOS/RHEL 6.x (glibc = 2.12) 的旧服务器将无法正常安装使用。\r\n\r\n```bash\r\n$ lsb_release -a\r\nLSB Version:    :core-4.1-amd64:core-4.1-noarch\r\nDistributor ID: CentOS\r\nDescription:    CentOS Linux release 7.7.1908 (Core)\r\nRelease:        7.7.1908\r\nCodename:       Core\r\n\r\n$ ldd --version\r\nldd (GNU libc) 2.17\r\nCopyright (C) 2012 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\nWritten by Roland McGrath and Ulrich Drepper.\r\n```\r\n\r\n![miniforge3-24.5.0-0](https://kg.weiyan.tech/2025/03/miniforge3-24.5.0-0.webp)\r\n", 'bodyText': "在安装 mamba 的时候在 release 页面和官方的安装页面 总是看到关于 miniforge 和 mambaforge 的选择问题，傻傻搞不明白。\n\nMiniforge 和 Mambaforge\n参考：https://github.com/conda-forge/miniforge?tab=readme-ov-file#faq\n\nWhat's the difference between Mambaforge and Miniforge?\nAfter the release of Miniforge 23.3.1 in August 2023, Miniforge and Mambaforge are essentially identical. The only difference is the name of the installer and subsequently the default installation path.\n2023 年 8 月发布 Miniforge 23.3.1 后，Miniforge 和 Mambaforge 基本相同。唯一的区别是安装程序的名称以及随后的默认安装路径(一个默认是 miniforge3，一个默认是 mambaforge3)。\nBefore that release, Miniforge only shipped conda, while Mambaforge added mamba on top. Since Miniconda started shipping conda-libmamba-solver in July 2023, Miniforge followed suit and started shipping it too in August. At that point, since conda-libmamba-solver depends on libmambapy, the only difference between Miniforge and Mambaforge was the presence of the mamba Python package. To minimize surprises, we decided to add mamba to Miniforge too.\n在之前的版本中，Miniforge 仅提供 conda，而 Mambaforge 在此基础上增加了 mamba。自 2023 年 7 月 Miniconda 开始提供 conda-libmamba-solver 以来，Miniforge 也紧随其后，于 8 月开始提供此功能。那时，由于 conda-libmamba-solver 依赖于libmambapy，Miniforge 和 Mambaforge 之间的唯一区别就是是否包含 mamba Python 包。为了尽量减少意外情况，我们决定也在 Miniforge 中添加 mamba。\nShould I choose one or another going forward at the risk of one of them gettting deprecated?\nGiven its wide usage, there are no plans to deprecate Mambaforge. If at some point we decide to deprecate Mambaforge, it will be appropriately announced and communicated with sufficient time in advance.\n鉴于 Mambaforge 的广泛使用，目前没有计划将其弃用。如果未来我们决定弃用 Mambaforge，我们会提前充分公告并通知相关用户。\nThat said, if you had to start using one today, we recommend to stick to Miniforge.\n不过，如果你今天需要开始使用其中一个，我们建议你坚持使用 Miniforge。\n\nMiniforge 和 Miniconda\n参考：What’s the difference between Anaconda, conda, Miniconda, mamba, Mambaforge, micromamba? - bioconda#Faqs\nMiniforge 是社区 (conda-forge) 驱动的简约 conda 安装程序。Miniforge 与 Miniconda 类似，但预配置了 conda-forge 通道，并且所有包都来自 conda-forge 而不是 defaults 通道。现在它还包含了 mamba 和 libmamba。\nMiniconda 是公司 (Anaconda) 驱动的简约 conda 安装程序。随后的软件包安装来自 anaconda 频道（默认或其他）。\n一句话\n总的一句话来说，Mambaforge 类似于 Miniforge，但将 mamba 安装到基础环境中。虽然没有严格弃用，但从 2023 年 9 月起不鼓励使用它（请参阅 miniforge 自述 README 文件）。\n版本选择\nMiniforge3 的 Release 24.5.0-0 要求 Linux-x86_64: glibc >= 2.17，也就是对于 CentOS/RHEL 6.x (glibc = 2.12) 的旧服务器将无法正常安装使用。\n$ lsb_release -a\nLSB Version:    :core-4.1-amd64:core-4.1-noarch\nDistributor ID: CentOS\nDescription:    CentOS Linux release 7.7.1908 (Core)\nRelease:        7.7.1908\nCodename:       Core\n\n$ ldd --version\nldd (GNU libc) 2.17\nCopyright (C) 2012 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\nWritten by Roland McGrath and Ulrich Drepper.", 'bodyHTML': '<p dir="auto">在安装 mamba 的时候在 <a href="https://github.com/conda-forge/miniforge/releases">release</a> 页面和<a href="https://mamba.readthedocs.io/en/latest/installation/mamba-installation.html" rel="nofollow">官方的安装页面</a> 总是看到关于 miniforge 和 mambaforge 的选择问题，傻傻搞不明白。</p>\n\n<h2 dir="auto">Miniforge 和 Mambaforge</h2>\n<p dir="auto">参考：<a href="https://github.com/conda-forge/miniforge?tab=readme-ov-file#faq">https://github.com/conda-forge/miniforge?tab=readme-ov-file#faq</a></p>\n<blockquote>\n<p dir="auto"><strong>What\'s the difference between Mambaforge and Miniforge?</strong><br>\nAfter the release of Miniforge 23.3.1 in August 2023, Miniforge and Mambaforge are essentially identical. The only difference is the name of the installer and subsequently the default installation path.</p>\n<p dir="auto">2023 年 8 月发布 Miniforge 23.3.1 后，Miniforge 和 Mambaforge 基本相同。唯一的区别是安装程序的名称以及随后的默认安装路径(一个默认是 miniforge3，一个默认是 mambaforge3)。</p>\n<p dir="auto">Before that release, Miniforge only shipped conda, while Mambaforge added mamba on top. Since Miniconda started shipping conda-libmamba-solver in July 2023, Miniforge followed suit and started shipping it too in August. At that point, since conda-libmamba-solver depends on libmambapy, the only difference between Miniforge and Mambaforge was the presence of the mamba Python package. To minimize surprises, we decided to add mamba to Miniforge too.</p>\n<p dir="auto">在之前的版本中，Miniforge 仅提供 conda，而 Mambaforge 在此基础上增加了 mamba。自 2023 年 7 月 Miniconda 开始提供 conda-libmamba-solver 以来，Miniforge 也紧随其后，于 8 月开始提供此功能。那时，由于 conda-libmamba-solver 依赖于libmambapy，Miniforge 和 Mambaforge 之间的唯一区别就是是否包含 mamba Python 包。为了尽量减少意外情况，我们决定也在 Miniforge 中添加 mamba。</p>\n<p dir="auto"><strong>Should I choose one or another going forward at the risk of one of them gettting deprecated?</strong><br>\nGiven its wide usage, there are no plans to deprecate Mambaforge. If at some point we decide to deprecate Mambaforge, it will be appropriately announced and communicated with sufficient time in advance.</p>\n<p dir="auto">鉴于 Mambaforge 的广泛使用，目前没有计划将其弃用。如果未来我们决定弃用 Mambaforge，我们会提前充分公告并通知相关用户。</p>\n<p dir="auto">That said, if you had to start using one today, we recommend to stick to Miniforge.</p>\n<p dir="auto">不过，如果你今天需要开始使用其中一个，我们建议你坚持使用 Miniforge。</p>\n</blockquote>\n<h2 dir="auto">Miniforge 和 Miniconda</h2>\n<p dir="auto">参考：<a href="https://bioconda.github.io/faqs.html#what-s-the-difference-between-anaconda-conda-miniconda-mamba-mambaforge-micromamba" rel="nofollow">What’s the difference between Anaconda, conda, Miniconda, mamba, Mambaforge, micromamba?</a> - bioconda#Faqs</p>\n<p dir="auto">Miniforge 是社区 (conda-forge) 驱动的简约 conda 安装程序。Miniforge 与 Miniconda 类似，但预配置了 <code class="notranslate">conda-forge</code> 通道，并且所有包都来自 conda-forge 而不是 <code class="notranslate">defaults</code> 通道。现在它还包含了 mamba 和 libmamba。</p>\n<p dir="auto">Miniconda 是公司 (Anaconda) 驱动的简约 conda 安装程序。随后的软件包安装来自 anaconda 频道（默认或其他）。</p>\n<h2 dir="auto">一句话</h2>\n<p dir="auto">总的一句话来说，Mambaforge 类似于 Miniforge，但将 mamba 安装到基础环境中。虽然没有严格弃用，但从 <strong>2023 年 9 月</strong>起不鼓励使用它（请参阅 miniforge 自述 <a href="https://github.com/conda-forge/miniforge">README</a> 文件）。</p>\n<h2 dir="auto">版本选择</h2>\n<p dir="auto">Miniforge3 的 <a href="https://github.com/conda-forge/miniforge/releases/tag/24.5.0-0">Release 24.5.0-0</a> 要求 <strong>Linux-x86_64: glibc &gt;= 2.17</strong>，也就是对于 CentOS/RHEL 6.x (glibc = 2.12) 的旧服务器将无法正常安装使用。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ lsb_release -a\nLSB Version:    :core-4.1-amd64:core-4.1-noarch\nDistributor ID: CentOS\nDescription:    CentOS Linux release 7.7.1908 (Core)\nRelease:        7.7.1908\nCodename:       Core\n\n$ ldd --version\nldd (GNU libc) 2.17\nCopyright (C) 2012 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\nWritten by Roland McGrath and Ulrich Drepper."><pre class="notranslate">$ lsb_release -a\nLSB Version:    :core-4.1-amd64:core-4.1-noarch\nDistributor ID: CentOS\nDescription:    CentOS Linux release 7.7.1908 (Core)\nRelease:        7.7.1908\nCodename:       Core\n\n$ ldd --version\nldd (GNU libc) 2.17\nCopyright (C) 2012 Free Software Foundation, Inc.\nThis is free software<span class="pl-k">;</span> see the <span class="pl-c1">source</span> <span class="pl-k">for</span> copying conditions.  There is NO\nwarranty<span class="pl-k">;</span> not even <span class="pl-k">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\nWritten by Roland McGrath and Ulrich Drepper.</pre></div>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/d979b4a5fb1eb19ef5fc22335a9ce892268672044bdca7526904b9fd9aba3d50/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30332f6d696e69666f726765332d32342e352e302d302e77656270"><img src="https://camo.githubusercontent.com/d979b4a5fb1eb19ef5fc22335a9ce892268672044bdca7526904b9fd9aba3d50/68747470733a2f2f6b672e77656979616e2e746563682f323032352f30332f6d696e69666f726765332d32342e352e302d302e77656270" alt="miniforge3-24.5.0-0" data-canonical-src="https://kg.weiyan.tech/2025/03/miniforge3-24.5.0-0.webp" style="max-width: 100%;"></a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.3-折腾'}, 'labels': {'nodes': [{'name': '1.3.22-虚拟环境'}]}, 'comments': {'nodes': []}}, {'title': '寻找 GitHub 的替代品', 'number': 70, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/70', 'createdAt': '2024-04-24T02:15:48Z', 'lastEditedAt': '2024-09-05T02:18:00Z', 'updatedAt': '2024-09-05T02:18:00Z', 'body': '与其说是在寻找 GitHub 的替代品，倒不如说在寻找 GitHub 的备用站点 —— 以防万一 GitHub 哪天登不上去了，也不至于把托管在上面的东西都丢了，尤其对于我这种几乎把所有可公开文档都记录在 [GitHub Discussions](https://github.com/shenweiyan/Knowledge-Garden/discussions) 上的人，毕竟把所有的鸡蛋放在一个篮子里终究是很危险的。\r\n\r\n<!-- more -->\r\n\r\n## 代码\r\n\r\n如果纯粹是代码托管，这样的备用平台多的是。\r\n\r\n除去国内的那几家，国外优秀的托管平台更多一些。如 [Framagit](https://framagit.org/) 和 [Codeberg](https://codeberg.org/)。[Framagit](https://framagit.org/) 是一个基于 GitLab 的法国托管平台，而 [Codeberg](https://codeberg.org/) 则是一个站点（总部）在德国，由非盈利组织采用自由软件（Gitea）搭建的代码托管平台，两相比较，个人感觉 [Codeberg](https://codeberg.org/) 比 [Framagit](https://framagit.org/) 体验更友好，最起码文档和各种导航操作更加清晰明了。\r\n\r\n最最重要的一点是，这两个托管平台目前国内都可以直接连接。\r\n\r\n## Issues 和 Discussions\r\n\r\n如果说 Issues 和 Discussions 的备用站点，这个就不好说了。国内的 [GitCode](https://gitcode.com/) 和 [AtomGit](https://atomgit.com/) 虽然都有类似的功能，但是**都不能搜索内容**，虽然他们说全文搜索已经[在路上了](https://atomgit.com/atomgit_operate/feedback/issues/496)，但是背后的 CSDN 运营和 UI 风格真是让人有点担忧重蹈 CSDN 的尿性体验。\r\n\r\n尤其是最近（2024年6月）这一段时间 GitCode 被曝[批量搬运 Github 项目](https://www.ithome.com/0/778/049.htm)的事件，让本来对 CSDN 厌恶至极的我瞬间好感全无，开始对 GitCode 也时刻保持警戒心态。\r\n\r\n## Pages\r\n\r\nGitee Pages 在五一[悄悄关停了](https://gitee.com/oschina/git-osc/issues/I9L5FJ) 也终于让人对国内代码托管平台开启 Pages 服务不再抱有期待。虽然最近发现 [AtomGit](https://atomgit.com/) 也提供了 [AtomGit Pages](https://atomgit.com/apps/pages)，而且也的确能正常的用起来了，但谁能确保未来会不会也跟 Gitee Pages 一个下场！\r\n\r\n![atomgit-pages-for-atomgit](https://kg.weiyan.cc/2024/07/atomgit-pages-for-atomgit.jpg)\r\n\r\n## 想法\r\n\r\n由于国内监管的一些问题，国内的开源社区大多都让人一言难尽，曾经的极狐也因为收费的问题把个人用户的最后一根稻草给压垮了，总的来说，国内目前为止就还没有一家能跟得上 GitHub/GitLab 的开源平台，不管从开源本身还是功能体验，现在没有，未来也不一定能有。\r\n\r\n用了一段时间 AtomGit，页面 UI 真是无法忍受，一堆的 BUG 毫无修复（[issues#442](https://atomgit.com/atomgit_operate/feedback/issues/442)、[issues#668](https://atomgit.com/atomgit_operate/feedback/issues/668)），用户体验全无。还是先在 GitCode，继续苟着吧！', 'bodyText': '与其说是在寻找 GitHub 的替代品，倒不如说在寻找 GitHub 的备用站点 —— 以防万一 GitHub 哪天登不上去了，也不至于把托管在上面的东西都丢了，尤其对于我这种几乎把所有可公开文档都记录在 GitHub Discussions 上的人，毕竟把所有的鸡蛋放在一个篮子里终究是很危险的。\n\n代码\n如果纯粹是代码托管，这样的备用平台多的是。\n除去国内的那几家，国外优秀的托管平台更多一些。如 Framagit 和 Codeberg。Framagit 是一个基于 GitLab 的法国托管平台，而 Codeberg 则是一个站点（总部）在德国，由非盈利组织采用自由软件（Gitea）搭建的代码托管平台，两相比较，个人感觉 Codeberg 比 Framagit 体验更友好，最起码文档和各种导航操作更加清晰明了。\n最最重要的一点是，这两个托管平台目前国内都可以直接连接。\nIssues 和 Discussions\n如果说 Issues 和 Discussions 的备用站点，这个就不好说了。国内的 GitCode 和 AtomGit 虽然都有类似的功能，但是都不能搜索内容，虽然他们说全文搜索已经在路上了，但是背后的 CSDN 运营和 UI 风格真是让人有点担忧重蹈 CSDN 的尿性体验。\n尤其是最近（2024年6月）这一段时间 GitCode 被曝批量搬运 Github 项目的事件，让本来对 CSDN 厌恶至极的我瞬间好感全无，开始对 GitCode 也时刻保持警戒心态。\nPages\nGitee Pages 在五一悄悄关停了 也终于让人对国内代码托管平台开启 Pages 服务不再抱有期待。虽然最近发现 AtomGit 也提供了 AtomGit Pages，而且也的确能正常的用起来了，但谁能确保未来会不会也跟 Gitee Pages 一个下场！\n\n想法\n由于国内监管的一些问题，国内的开源社区大多都让人一言难尽，曾经的极狐也因为收费的问题把个人用户的最后一根稻草给压垮了，总的来说，国内目前为止就还没有一家能跟得上 GitHub/GitLab 的开源平台，不管从开源本身还是功能体验，现在没有，未来也不一定能有。\n用了一段时间 AtomGit，页面 UI 真是无法忍受，一堆的 BUG 毫无修复（issues#442、issues#668），用户体验全无。还是先在 GitCode，继续苟着吧！', 'bodyHTML': '<p dir="auto">与其说是在寻找 GitHub 的替代品，倒不如说在寻找 GitHub 的备用站点 —— 以防万一 GitHub 哪天登不上去了，也不至于把托管在上面的东西都丢了，尤其对于我这种几乎把所有可公开文档都记录在 <a href="https://github.com/shenweiyan/Knowledge-Garden/discussions">GitHub Discussions</a> 上的人，毕竟把所有的鸡蛋放在一个篮子里终究是很危险的。</p>\n\n<h2 dir="auto">代码</h2>\n<p dir="auto">如果纯粹是代码托管，这样的备用平台多的是。</p>\n<p dir="auto">除去国内的那几家，国外优秀的托管平台更多一些。如 <a href="https://framagit.org/" rel="nofollow">Framagit</a> 和 <a href="https://codeberg.org/" rel="nofollow">Codeberg</a>。<a href="https://framagit.org/" rel="nofollow">Framagit</a> 是一个基于 GitLab 的法国托管平台，而 <a href="https://codeberg.org/" rel="nofollow">Codeberg</a> 则是一个站点（总部）在德国，由非盈利组织采用自由软件（Gitea）搭建的代码托管平台，两相比较，个人感觉 <a href="https://codeberg.org/" rel="nofollow">Codeberg</a> 比 <a href="https://framagit.org/" rel="nofollow">Framagit</a> 体验更友好，最起码文档和各种导航操作更加清晰明了。</p>\n<p dir="auto">最最重要的一点是，这两个托管平台目前国内都可以直接连接。</p>\n<h2 dir="auto">Issues 和 Discussions</h2>\n<p dir="auto">如果说 Issues 和 Discussions 的备用站点，这个就不好说了。国内的 <a href="https://gitcode.com/" rel="nofollow">GitCode</a> 和 <a href="https://atomgit.com/" rel="nofollow">AtomGit</a> 虽然都有类似的功能，但是<strong>都不能搜索内容</strong>，虽然他们说全文搜索已经<a href="https://atomgit.com/atomgit_operate/feedback/issues/496" rel="nofollow">在路上了</a>，但是背后的 CSDN 运营和 UI 风格真是让人有点担忧重蹈 CSDN 的尿性体验。</p>\n<p dir="auto">尤其是最近（2024年6月）这一段时间 GitCode 被曝<a href="https://www.ithome.com/0/778/049.htm" rel="nofollow">批量搬运 Github 项目</a>的事件，让本来对 CSDN 厌恶至极的我瞬间好感全无，开始对 GitCode 也时刻保持警戒心态。</p>\n<h2 dir="auto">Pages</h2>\n<p dir="auto">Gitee Pages 在五一<a href="https://gitee.com/oschina/git-osc/issues/I9L5FJ" rel="nofollow">悄悄关停了</a> 也终于让人对国内代码托管平台开启 Pages 服务不再抱有期待。虽然最近发现 <a href="https://atomgit.com/" rel="nofollow">AtomGit</a> 也提供了 <a href="https://atomgit.com/apps/pages" rel="nofollow">AtomGit Pages</a>，而且也的确能正常的用起来了，但谁能确保未来会不会也跟 Gitee Pages 一个下场！</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/3aa976732a588ecaa43dc0380142d430ae8b490d6a6e1d936c80cb47c2430cdb/68747470733a2f2f6b672e77656979616e2e63632f323032342f30372f61746f6d6769742d70616765732d666f722d61746f6d6769742e6a7067"><img src="https://camo.githubusercontent.com/3aa976732a588ecaa43dc0380142d430ae8b490d6a6e1d936c80cb47c2430cdb/68747470733a2f2f6b672e77656979616e2e63632f323032342f30372f61746f6d6769742d70616765732d666f722d61746f6d6769742e6a7067" alt="atomgit-pages-for-atomgit" data-canonical-src="https://kg.weiyan.cc/2024/07/atomgit-pages-for-atomgit.jpg" style="max-width: 100%;"></a></p>\n<h2 dir="auto">想法</h2>\n<p dir="auto">由于国内监管的一些问题，国内的开源社区大多都让人一言难尽，曾经的极狐也因为收费的问题把个人用户的最后一根稻草给压垮了，总的来说，国内目前为止就还没有一家能跟得上 GitHub/GitLab 的开源平台，不管从开源本身还是功能体验，现在没有，未来也不一定能有。</p>\n<p dir="auto">用了一段时间 AtomGit，页面 UI 真是无法忍受，一堆的 BUG 毫无修复（<a href="https://atomgit.com/atomgit_operate/feedback/issues/442" rel="nofollow">issues#442</a>、<a href="https://atomgit.com/atomgit_operate/feedback/issues/668" rel="nofollow">issues#668</a>），用户体验全无。还是先在 GitCode，继续苟着吧！</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': [{'name': '公众号'}]}, 'comments': {'nodes': []}}, {'title': '我的独立站点 Knowledge-Garden', 'number': 69, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/69', 'createdAt': '2024-04-22T07:37:31Z', 'lastEditedAt': '2024-04-22T07:38:53Z', 'updatedAt': '2024-04-22T07:38:53Z', 'body': '使用 GitHub Discussions 写作文章大半年以来，越来越得心应手，最近起用了新的一个仓库，用于 [Knowledge-Garden](https://github.com/shenweiyan/Knowledge-Garden/discussions) 静态资源的保存和使用。\r\n\r\n<!-- more -->\r\n\r\n## 文章\r\n\r\n所有的文章都是以 markdown 的格式进行保存，实际上就一堆 text 文本，占用不了多少的空间。\r\n\r\n## 静态资源\r\n\r\n文章的静态资源，主要是图片，才是一个最耗流量和存储空间的东西。\r\n\r\n前一段时间经历了[腾讯云 cos 对象存储被盗刷](https://github.com/shenweiyan/Knowledge-Garden/discussions/63) 的事件后，对于对象存储的使用也就越来越谨慎，今天终于狠下决心来把 [Knowledge-Garden](https://github.com/shenweiyan/Knowledge-Garden/discussions) 这个仓库的所有包括图片在内的静态资源开始保存到另外一个 GitHub 仓库 [PicKG](https://github.com/shenweiyan/PicKG)，同时借助 Cloudflare Pages 来为图片提供访问链接。\r\n\r\n也尝试了一下 Cloudflare 的 [R2](https://www.cloudflare.com/zh-cn/developer-platform/r2/) 这个号称零出口费用的对象存储，免费额度很有吸引力，但目前 Cloudflare R2 还没能找到一个比较顺手的图片管理工具，例如阿里云的 [oss-browser](https://github.com/aliyun/oss-browser)、腾讯云的 [cos-browser](https://cosbrowser.cloud.tencent.com/)。虽然尝试了一些折中的方案，如 [Picx4R2](https://github.com/shenweiyan/Picx4R2)，但还是不太满意。\r\n\r\n所以目前的解决方法就是 GitHub + [PicX](https://github.com/shenweiyan/Knowledge-Garden/discussions/68) + Cloudflare Pages 进行组合，GitHub 单个仓库 5G 的存储空间应该应该也足够使用了，如果实在不够了再来考虑其他方案。', 'bodyText': '使用 GitHub Discussions 写作文章大半年以来，越来越得心应手，最近起用了新的一个仓库，用于 Knowledge-Garden 静态资源的保存和使用。\n\n文章\n所有的文章都是以 markdown 的格式进行保存，实际上就一堆 text 文本，占用不了多少的空间。\n静态资源\n文章的静态资源，主要是图片，才是一个最耗流量和存储空间的东西。\n前一段时间经历了腾讯云 cos 对象存储被盗刷 的事件后，对于对象存储的使用也就越来越谨慎，今天终于狠下决心来把 Knowledge-Garden 这个仓库的所有包括图片在内的静态资源开始保存到另外一个 GitHub 仓库 PicKG，同时借助 Cloudflare Pages 来为图片提供访问链接。\n也尝试了一下 Cloudflare 的 R2 这个号称零出口费用的对象存储，免费额度很有吸引力，但目前 Cloudflare R2 还没能找到一个比较顺手的图片管理工具，例如阿里云的 oss-browser、腾讯云的 cos-browser。虽然尝试了一些折中的方案，如 Picx4R2，但还是不太满意。\n所以目前的解决方法就是 GitHub + PicX + Cloudflare Pages 进行组合，GitHub 单个仓库 5G 的存储空间应该应该也足够使用了，如果实在不够了再来考虑其他方案。', 'bodyHTML': '<p dir="auto">使用 GitHub Discussions 写作文章大半年以来，越来越得心应手，最近起用了新的一个仓库，用于 <a href="https://github.com/shenweiyan/Knowledge-Garden/discussions">Knowledge-Garden</a> 静态资源的保存和使用。</p>\n\n<h2 dir="auto">文章</h2>\n<p dir="auto">所有的文章都是以 markdown 的格式进行保存，实际上就一堆 text 文本，占用不了多少的空间。</p>\n<h2 dir="auto">静态资源</h2>\n<p dir="auto">文章的静态资源，主要是图片，才是一个最耗流量和存储空间的东西。</p>\n<p dir="auto">前一段时间经历了<a href="https://github.com/shenweiyan/Knowledge-Garden/discussions/63" data-hovercard-type="discussion" data-hovercard-url="/shenweiyan/Digital-Garden/discussions/63/hovercard">腾讯云 cos 对象存储被盗刷</a> 的事件后，对于对象存储的使用也就越来越谨慎，今天终于狠下决心来把 <a href="https://github.com/shenweiyan/Knowledge-Garden/discussions">Knowledge-Garden</a> 这个仓库的所有包括图片在内的静态资源开始保存到另外一个 GitHub 仓库 <a href="https://github.com/shenweiyan/PicKG">PicKG</a>，同时借助 Cloudflare Pages 来为图片提供访问链接。</p>\n<p dir="auto">也尝试了一下 Cloudflare 的 <a href="https://www.cloudflare.com/zh-cn/developer-platform/r2/" rel="nofollow">R2</a> 这个号称零出口费用的对象存储，免费额度很有吸引力，但目前 Cloudflare R2 还没能找到一个比较顺手的图片管理工具，例如阿里云的 <a href="https://github.com/aliyun/oss-browser">oss-browser</a>、腾讯云的 <a href="https://cosbrowser.cloud.tencent.com/" rel="nofollow">cos-browser</a>。虽然尝试了一些折中的方案，如 <a href="https://github.com/shenweiyan/Picx4R2">Picx4R2</a>，但还是不太满意。</p>\n<p dir="auto">所以目前的解决方法就是 GitHub + <a href="https://github.com/shenweiyan/Knowledge-Garden/discussions/68" data-hovercard-type="discussion" data-hovercard-url="/shenweiyan/Digital-Garden/discussions/68/hovercard">PicX</a> + Cloudflare Pages 进行组合，GitHub 单个仓库 5G 的存储空间应该应该也足够使用了，如果实在不够了再来考虑其他方案。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '部署 PicX 图床到 Vercel', 'number': 68, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/68', 'createdAt': '2024-04-22T03:29:53Z', 'lastEditedAt': '2024-05-28T01:50:54Z', 'updatedAt': '2024-05-28T01:50:54Z', 'body': '由于 [PicX](https://github.com/XPoet/picx) 自 v3.0 起，不再支持自由选择仓库和分支，统一使用内置的仓库和分支。所以出于自定义的仓库和分支使用需求，这里主要对 [PicX v2.0](https://github.com/XPoet/picx/tree/v2) 进行 Vercel 自定义部署。\r\n\r\n<!-- more -->\r\n\r\n项目地址：https://github.com/XPoet/picx/tree/v2\r\n\r\n利用 PicX 图床，直接把图片托管到 GitHub 上去。至于安装，参考[子舒 Blog](https://zburu.com/)的《[安装一个基于 Github 的静态图床程序](https://zburu.com/blog/172.html/)》这两篇文章。可以把程序和图床直接托管在 GitHub 上，也可以把程序搭建在自己的服务器上，但是图片还是只能托管到 GitHub 上。PicX 图床不像简单图床和兰空图床，图片生成的链接可以是自己的域名链接，而因为图片是托管到 GitHub 上，所以 PicX 生成的图片外链接只能是 staticaly 和 cloudfalre 的 CDN 的外链。所以个人感觉也就没有必要再把程序上传到自己的服务器上了，直接使用 GitHub 不是更好嘛。\r\n\r\n## 操作步骤\r\n\r\n主要的操作步骤如下： \r\n\r\n- 1 个 GitHub 账号；\r\n- 1 个 Vercel 账号，可能需要科学上网环境；\r\n- Fork PicX v2 源码 (https://github.com/XPoet/picx/tree/v2) 到个人 GitHub 仓库；\r\n- 在 Vercel 新建项目，绑定个人 GitHub 仓库的 PicX v2 源码；Framework Preset 选择 "Vue.js"；\r\n- 部署完成后为域名添加一条 CNAME 到 `cname-china.vercel-dns.com`。\r\n\r\n基于以上的步骤，个人成功部署的一个 PicX 站点，以供参考和使用：\r\n\r\n- https://github.com/shenweiyan/PicX\r\n- 链接1：<https://v2picx.vercel.app/>\r\n- 链接2：<https://picx.weiyan.cc/>\r\n\r\n![picx-weiyan-cc](https://kg.weiyan.cc/2024/05/picx-weiyan-cc.webp)', 'bodyText': '由于 PicX 自 v3.0 起，不再支持自由选择仓库和分支，统一使用内置的仓库和分支。所以出于自定义的仓库和分支使用需求，这里主要对 PicX v2.0 进行 Vercel 自定义部署。\n\n项目地址：https://github.com/XPoet/picx/tree/v2\n利用 PicX 图床，直接把图片托管到 GitHub 上去。至于安装，参考子舒 Blog的《安装一个基于 Github 的静态图床程序》这两篇文章。可以把程序和图床直接托管在 GitHub 上，也可以把程序搭建在自己的服务器上，但是图片还是只能托管到 GitHub 上。PicX 图床不像简单图床和兰空图床，图片生成的链接可以是自己的域名链接，而因为图片是托管到 GitHub 上，所以 PicX 生成的图片外链接只能是 staticaly 和 cloudfalre 的 CDN 的外链。所以个人感觉也就没有必要再把程序上传到自己的服务器上了，直接使用 GitHub 不是更好嘛。\n操作步骤\n主要的操作步骤如下：\n\n1 个 GitHub 账号；\n1 个 Vercel 账号，可能需要科学上网环境；\nFork PicX v2 源码 (https://github.com/XPoet/picx/tree/v2) 到个人 GitHub 仓库；\n在 Vercel 新建项目，绑定个人 GitHub 仓库的 PicX v2 源码；Framework Preset 选择 "Vue.js"；\n部署完成后为域名添加一条 CNAME 到 cname-china.vercel-dns.com。\n\n基于以上的步骤，个人成功部署的一个 PicX 站点，以供参考和使用：\n\nhttps://github.com/shenweiyan/PicX\n链接1：https://v2picx.vercel.app/\n链接2：https://picx.weiyan.cc/', 'bodyHTML': '<p dir="auto">由于 <a href="https://github.com/XPoet/picx">PicX</a> 自 v3.0 起，不再支持自由选择仓库和分支，统一使用内置的仓库和分支。所以出于自定义的仓库和分支使用需求，这里主要对 <a href="https://github.com/XPoet/picx/tree/v2">PicX v2.0</a> 进行 Vercel 自定义部署。</p>\n\n<p dir="auto">项目地址：<a href="https://github.com/XPoet/picx/tree/v2">https://github.com/XPoet/picx/tree/v2</a></p>\n<p dir="auto">利用 PicX 图床，直接把图片托管到 GitHub 上去。至于安装，参考<a href="https://zburu.com/" rel="nofollow">子舒 Blog</a>的《<a href="https://zburu.com/blog/172.html/" rel="nofollow">安装一个基于 Github 的静态图床程序</a>》这两篇文章。可以把程序和图床直接托管在 GitHub 上，也可以把程序搭建在自己的服务器上，但是图片还是只能托管到 GitHub 上。PicX 图床不像简单图床和兰空图床，图片生成的链接可以是自己的域名链接，而因为图片是托管到 GitHub 上，所以 PicX 生成的图片外链接只能是 staticaly 和 cloudfalre 的 CDN 的外链。所以个人感觉也就没有必要再把程序上传到自己的服务器上了，直接使用 GitHub 不是更好嘛。</p>\n<h2 dir="auto">操作步骤</h2>\n<p dir="auto">主要的操作步骤如下：</p>\n<ul dir="auto">\n<li>1 个 GitHub 账号；</li>\n<li>1 个 Vercel 账号，可能需要科学上网环境；</li>\n<li>Fork PicX v2 源码 (<a href="https://github.com/XPoet/picx/tree/v2">https://github.com/XPoet/picx/tree/v2</a>) 到个人 GitHub 仓库；</li>\n<li>在 Vercel 新建项目，绑定个人 GitHub 仓库的 PicX v2 源码；Framework Preset 选择 "Vue.js"；</li>\n<li>部署完成后为域名添加一条 CNAME 到 <code class="notranslate">cname-china.vercel-dns.com</code>。</li>\n</ul>\n<p dir="auto">基于以上的步骤，个人成功部署的一个 PicX 站点，以供参考和使用：</p>\n<ul dir="auto">\n<li><a href="https://github.com/shenweiyan/PicX">https://github.com/shenweiyan/PicX</a></li>\n<li>链接1：<a href="https://v2picx.vercel.app/" rel="nofollow">https://v2picx.vercel.app/</a></li>\n<li>链接2：<a href="https://picx.weiyan.cc/" rel="nofollow">https://picx.weiyan.cc/</a></li>\n</ul>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/511d82ec3c302042cc8cf5847059424cab2f5ef40cd8e3fca55a862080b62eb9/68747470733a2f2f6b672e77656979616e2e63632f323032342f30352f706963782d77656979616e2d63632e77656270"><img src="https://camo.githubusercontent.com/511d82ec3c302042cc8cf5847059424cab2f5ef40cd8e3fca55a862080b62eb9/68747470733a2f2f6b672e77656979616e2e63632f323032342f30352f706963782d77656979616e2d63632e77656270" alt="picx-weiyan-cc" data-canonical-src="https://kg.weiyan.cc/2024/05/picx-weiyan-cc.webp" style="max-width: 100%;"></a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '国内静态部署与托管平台', 'number': 67, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/67', 'createdAt': '2024-04-15T07:19:16Z', 'lastEditedAt': None, 'updatedAt': '2024-04-15T07:22:22Z', 'body': '[Gitee Pages](https://gitee.com/help/articles/4136/) 由于审查原因，基本上已经是名存实亡的状态了；之前勉强可以使用的  [Webbify](https://webify.cloudbase.net/) 现如今也变成了每月至少 15 块的购买时长模式。\r\n\r\n<!-- more -->\r\n\r\n之前在《[越来越难用的国内代码托管平台](https://github.com/shenweiyan/Knowledge-Garden/discussions/56)》吐槽过一波国内所谓开源平台的状况，今天又发现除了代码平台外，原来静态部署的平台也走上了这一条路。\r\n\r\n[Gitee Pages](https://gitee.com/help/articles/4136/) 就不说了，懂得都懂。\r\n\r\n说一说腾讯云的 [Webbify](https://webify.cloudbase.net/)。今天 (2024年4月15) 上去想要部署一个新的站点，居然发现以前的 **"按量付费"** 计费模式已经消失，取而代之的是一个每月至少 15 块的购买时长模式。作为一个 2021 年就不再更新的产品，这样的收费模式真是让人瞬间欲望大减。\r\n![webify-price-15-pre-month.webp](https://static.weiyan.tech/2024/04/webify-price-15-pre-month.webp)\r\n\r\n回过头来看一看国外的 [Netlify](https://app.netlify.com/)、[Vercel](https://vercel.com/)、[Cloudflare Pages](https://www.cloudflare-cn.com/developer-platform/pages/)，甚至是 GitHub Pages，再看一下国内的这些平台，真是一言难尽，除了先培养用户再收割，好像也没剩下什么了。\r\n', 'bodyText': 'Gitee Pages 由于审查原因，基本上已经是名存实亡的状态了；之前勉强可以使用的  Webbify 现如今也变成了每月至少 15 块的购买时长模式。\n\n之前在《越来越难用的国内代码托管平台》吐槽过一波国内所谓开源平台的状况，今天又发现除了代码平台外，原来静态部署的平台也走上了这一条路。\nGitee Pages 就不说了，懂得都懂。\n说一说腾讯云的 Webbify。今天 (2024年4月15) 上去想要部署一个新的站点，居然发现以前的 "按量付费" 计费模式已经消失，取而代之的是一个每月至少 15 块的购买时长模式。作为一个 2021 年就不再更新的产品，这样的收费模式真是让人瞬间欲望大减。\n\n回过头来看一看国外的 Netlify、Vercel、Cloudflare Pages，甚至是 GitHub Pages，再看一下国内的这些平台，真是一言难尽，除了先培养用户再收割，好像也没剩下什么了。', 'bodyHTML': '<p dir="auto"><a href="https://gitee.com/help/articles/4136/" rel="nofollow">Gitee Pages</a> 由于审查原因，基本上已经是名存实亡的状态了；之前勉强可以使用的  <a href="https://webify.cloudbase.net/" rel="nofollow">Webbify</a> 现如今也变成了每月至少 15 块的购买时长模式。</p>\n\n<p dir="auto">之前在《<a href="https://github.com/shenweiyan/Knowledge-Garden/discussions/56" data-hovercard-type="discussion" data-hovercard-url="/shenweiyan/Digital-Garden/discussions/56/hovercard">越来越难用的国内代码托管平台</a>》吐槽过一波国内所谓开源平台的状况，今天又发现除了代码平台外，原来静态部署的平台也走上了这一条路。</p>\n<p dir="auto"><a href="https://gitee.com/help/articles/4136/" rel="nofollow">Gitee Pages</a> 就不说了，懂得都懂。</p>\n<p dir="auto">说一说腾讯云的 <a href="https://webify.cloudbase.net/" rel="nofollow">Webbify</a>。今天 (2024年4月15) 上去想要部署一个新的站点，居然发现以前的 <strong>"按量付费"</strong> 计费模式已经消失，取而代之的是一个每月至少 15 块的购买时长模式。作为一个 2021 年就不再更新的产品，这样的收费模式真是让人瞬间欲望大减。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/81d0842f27158998c3257f369445db58383227a8c0c247f14f393b6b05a00556/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30342f7765626966792d70726963652d31352d7072652d6d6f6e74682e77656270"><img src="https://camo.githubusercontent.com/81d0842f27158998c3257f369445db58383227a8c0c247f14f393b6b05a00556/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30342f7765626966792d70726963652d31352d7072652d6d6f6e74682e77656270" alt="webify-price-15-pre-month.webp" data-canonical-src="https://static.weiyan.tech/2024/04/webify-price-15-pre-month.webp" style="max-width: 100%;"></a></p>\n<p dir="auto">回过头来看一看国外的 <a href="https://app.netlify.com/" rel="nofollow">Netlify</a>、<a href="https://vercel.com/" rel="nofollow">Vercel</a>、<a href="https://www.cloudflare-cn.com/developer-platform/pages/" rel="nofollow">Cloudflare Pages</a>，甚至是 GitHub Pages，再看一下国内的这些平台，真是一言难尽，除了先培养用户再收割，好像也没剩下什么了。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '阿里云域名备案与使用', 'number': 66, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/66', 'createdAt': '2024-04-11T07:09:00Z', 'lastEditedAt': '2024-11-28T05:21:31Z', 'updatedAt': '2024-11-28T05:21:31Z', 'body': '在阿里云注册且完成备案的域名，在使用与解析中遇到的一些问题。\r\n\r\n<!-- more -->\r\n\r\n## 备案接入信息与实际接入信息不符\r\n\r\n在阿里云注册且完成备案的域名，前两天收到了信息：如您的网站备案还要继续使用，请您务必于2024-04-18 09:05:39之前设置解析指向阿里云内地服务器且恢复该网站在阿里云内地节点服务器的正常访问。\r\n\r\n> 如您的网站备案还要继续使用，请您务必于2024-04-18 09:05:39之前设置解析指向阿里云内地服务器且恢复该网站在阿里云内地节点服务器的正常访问。若在规定时间内未完成整改，可能会导致备案信息被取消接入或被注销，影响您网站的正常访问；若您的备案域名解析IP地址已指向阿里云备案的内地节点（不含香港）服务器，且保持正常访问，请忽略此邮件。\r\n\r\n![beian-weiyan-cc.webp](https://static.weiyan.tech/2024/04/beian-weiyan-cc.webp)\r\n\r\n目前，参考知乎《[阿里云服务器备案域名会掉吗](https://zhuanlan.zhihu.com/p/516077564)》的方法 —— 先把目前 `weiyan.cc` 下的一到两个子域名增加一个 A 记录绑定到阿里云的 ECS 公网 IP，主域名继续按目前的要求通过 CNAME 绑定 [weiyan.netlify.app](https://weiyan.netlify.app)。\r\n\r\n再看看后续是否有影响。\r\n\r\n- 2024年11月28日，半年过去了，这个方法好像的确可以。\r\n\r\n\r\n## 已备案域名未使用阿里云中国内地节点服务器\r\n\r\n这是 2024-11-19 收到的阿里云消息，发现个人博客类网站现在用起真的是门槛越来越高。\r\n\r\n> 如您的网站备案还要继续保留阿里云的备案信息，请您务必于**2024-11-25 14:12:51之前设置恢复使用阿里云服务器**。若在规定时间内未完成整改，可能会导致备案信息被取消接入或被注销，影响您网站的备案状态。\r\n\r\n![beian-aliyun-server](https://kg.weiyan.cc/2024/11/beian-aliyun-server.png)\r\n\r\n参考了一些人的[方法](https://blog.csdn.net/qq_36759224/article/details/104210934)：将你的域名添加一个二级域名，解析到某些阿里云国内节点服务器上就行了。例如我博客域名为 `www.abcde.com`，就可以添加一个或者两个 A 记录，记录值为阿里云国内节点服务器的 IP。然后隔一段时间访问一下 `1.abcde.com` 或者 `2.abcde.com` ，确保有一点儿访问量就行了。\r\n\r\n```bash\r\n# 用最简单的方式在服务器开启一个 HTML \r\nnohup python3 -m http.server --cgi 80 &\r\n```\r\n\r\n也有人说，必须是 `www` 和根域名，其他不行，先试试二级域名吧！\r\n\r\n目前尚不清楚这样的做法是否能确保备案不失效，如果备案失效，很可能导致域名被墙的，根据网络上一些人的说法，默认不影响站点访问，但是个别城市的运营商会屏蔽（和你没关系，是他们一刀切了国外 IP 的解析）。\r\n', 'bodyText': '在阿里云注册且完成备案的域名，在使用与解析中遇到的一些问题。\n\n备案接入信息与实际接入信息不符\n在阿里云注册且完成备案的域名，前两天收到了信息：如您的网站备案还要继续使用，请您务必于2024-04-18 09:05:39之前设置解析指向阿里云内地服务器且恢复该网站在阿里云内地节点服务器的正常访问。\n\n如您的网站备案还要继续使用，请您务必于2024-04-18 09:05:39之前设置解析指向阿里云内地服务器且恢复该网站在阿里云内地节点服务器的正常访问。若在规定时间内未完成整改，可能会导致备案信息被取消接入或被注销，影响您网站的正常访问；若您的备案域名解析IP地址已指向阿里云备案的内地节点（不含香港）服务器，且保持正常访问，请忽略此邮件。\n\n\n目前，参考知乎《阿里云服务器备案域名会掉吗》的方法 —— 先把目前 weiyan.cc 下的一到两个子域名增加一个 A 记录绑定到阿里云的 ECS 公网 IP，主域名继续按目前的要求通过 CNAME 绑定 weiyan.netlify.app。\n再看看后续是否有影响。\n\n2024年11月28日，半年过去了，这个方法好像的确可以。\n\n已备案域名未使用阿里云中国内地节点服务器\n这是 2024-11-19 收到的阿里云消息，发现个人博客类网站现在用起真的是门槛越来越高。\n\n如您的网站备案还要继续保留阿里云的备案信息，请您务必于2024-11-25 14:12:51之前设置恢复使用阿里云服务器。若在规定时间内未完成整改，可能会导致备案信息被取消接入或被注销，影响您网站的备案状态。\n\n\n参考了一些人的方法：将你的域名添加一个二级域名，解析到某些阿里云国内节点服务器上就行了。例如我博客域名为 www.abcde.com，就可以添加一个或者两个 A 记录，记录值为阿里云国内节点服务器的 IP。然后隔一段时间访问一下 1.abcde.com 或者 2.abcde.com ，确保有一点儿访问量就行了。\n# 用最简单的方式在服务器开启一个 HTML \nnohup python3 -m http.server --cgi 80 &\n也有人说，必须是 www 和根域名，其他不行，先试试二级域名吧！\n目前尚不清楚这样的做法是否能确保备案不失效，如果备案失效，很可能导致域名被墙的，根据网络上一些人的说法，默认不影响站点访问，但是个别城市的运营商会屏蔽（和你没关系，是他们一刀切了国外 IP 的解析）。', 'bodyHTML': '<p dir="auto">在阿里云注册且完成备案的域名，在使用与解析中遇到的一些问题。</p>\n\n<h2 dir="auto">备案接入信息与实际接入信息不符</h2>\n<p dir="auto">在阿里云注册且完成备案的域名，前两天收到了信息：如您的网站备案还要继续使用，请您务必于2024-04-18 09:05:39之前设置解析指向阿里云内地服务器且恢复该网站在阿里云内地节点服务器的正常访问。</p>\n<blockquote>\n<p dir="auto">如您的网站备案还要继续使用，请您务必于2024-04-18 09:05:39之前设置解析指向阿里云内地服务器且恢复该网站在阿里云内地节点服务器的正常访问。若在规定时间内未完成整改，可能会导致备案信息被取消接入或被注销，影响您网站的正常访问；若您的备案域名解析IP地址已指向阿里云备案的内地节点（不含香港）服务器，且保持正常访问，请忽略此邮件。</p>\n</blockquote>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/a4ddd8f80935679ded7822d71e46a3de6efbe2ba25f3eeb0d8612db9aae5d259/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30342f626569616e2d77656979616e2d63632e77656270"><img src="https://camo.githubusercontent.com/a4ddd8f80935679ded7822d71e46a3de6efbe2ba25f3eeb0d8612db9aae5d259/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30342f626569616e2d77656979616e2d63632e77656270" alt="beian-weiyan-cc.webp" data-canonical-src="https://static.weiyan.tech/2024/04/beian-weiyan-cc.webp" style="max-width: 100%;"></a></p>\n<p dir="auto">目前，参考知乎《<a href="https://zhuanlan.zhihu.com/p/516077564" rel="nofollow">阿里云服务器备案域名会掉吗</a>》的方法 —— 先把目前 <code class="notranslate">weiyan.cc</code> 下的一到两个子域名增加一个 A 记录绑定到阿里云的 ECS 公网 IP，主域名继续按目前的要求通过 CNAME 绑定 <a href="https://weiyan.netlify.app" rel="nofollow">weiyan.netlify.app</a>。</p>\n<p dir="auto">再看看后续是否有影响。</p>\n<ul dir="auto">\n<li>2024年11月28日，半年过去了，这个方法好像的确可以。</li>\n</ul>\n<h2 dir="auto">已备案域名未使用阿里云中国内地节点服务器</h2>\n<p dir="auto">这是 2024-11-19 收到的阿里云消息，发现个人博客类网站现在用起真的是门槛越来越高。</p>\n<blockquote>\n<p dir="auto">如您的网站备案还要继续保留阿里云的备案信息，请您务必于<strong>2024-11-25 14:12:51之前设置恢复使用阿里云服务器</strong>。若在规定时间内未完成整改，可能会导致备案信息被取消接入或被注销，影响您网站的备案状态。</p>\n</blockquote>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/12531f4872d89d9d1a4fb9cab1d073268d8145637e8912d24589b7b39d211181/68747470733a2f2f6b672e77656979616e2e63632f323032342f31312f626569616e2d616c6979756e2d7365727665722e706e67"><img src="https://camo.githubusercontent.com/12531f4872d89d9d1a4fb9cab1d073268d8145637e8912d24589b7b39d211181/68747470733a2f2f6b672e77656979616e2e63632f323032342f31312f626569616e2d616c6979756e2d7365727665722e706e67" alt="beian-aliyun-server" data-canonical-src="https://kg.weiyan.cc/2024/11/beian-aliyun-server.png" style="max-width: 100%;"></a></p>\n<p dir="auto">参考了一些人的<a href="https://blog.csdn.net/qq_36759224/article/details/104210934" rel="nofollow">方法</a>：将你的域名添加一个二级域名，解析到某些阿里云国内节点服务器上就行了。例如我博客域名为 <code class="notranslate">www.abcde.com</code>，就可以添加一个或者两个 A 记录，记录值为阿里云国内节点服务器的 IP。然后隔一段时间访问一下 <code class="notranslate">1.abcde.com</code> 或者 <code class="notranslate">2.abcde.com</code> ，确保有一点儿访问量就行了。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# 用最简单的方式在服务器开启一个 HTML \nnohup python3 -m http.server --cgi 80 &amp;"><pre class="notranslate"><span class="pl-c"><span class="pl-c">#</span> 用最简单的方式在服务器开启一个 HTML </span>\nnohup python3 -m http.server --cgi 80 <span class="pl-k">&amp;</span></pre></div>\n<p dir="auto">也有人说，必须是 <code class="notranslate">www</code> 和根域名，其他不行，先试试二级域名吧！</p>\n<p dir="auto">目前尚不清楚这样的做法是否能确保备案不失效，如果备案失效，很可能导致域名被墙的，根据网络上一些人的说法，默认不影响站点访问，但是个别城市的运营商会屏蔽（和你没关系，是他们一刀切了国外 IP 的解析）。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': 'RSS 订阅插件 mkdocs-rss-plugin 的一些问题', 'number': 65, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/65', 'createdAt': '2024-04-11T02:37:00Z', 'lastEditedAt': None, 'updatedAt': '2025-01-20T03:19:12Z', 'body': '聊一下 Mkdocs Material 的默认插件 [mkdocs-rss-plugin](https://github.com/Guts/mkdocs-rss-plugin) 在使用上的一些问题。\r\n\r\n<!-- more -->\r\n\r\n对于 blog 插件，默认的 RSS 里边提供的地址有一部分会默认为目录链接(例如 `category` 和 `archive`)，而非文章地址。\r\n\r\n![rss-item.webp](https://static.weiyan.tech/2024/04/rss-item.webp)\r\n\r\n针对这一种情况，需要使用 RSS 配置的 [`match_path`](https://guts.github.io/mkdocs-rss-plugin/configuration/#match_path-filter-pages-to-include-in-feed)，即可解决：\r\n\r\n```\r\nplugins:\r\n  - rss:\r\n      match_path: "(blog/posts|flinks|galaxy|message|note|readme|tech|yuque)/.*"\r\n      date_from_meta:\r\n        as_creation: date\r\n      categories:\r\n        - categories\r\n        - tags\r\n```\r\n', 'bodyText': '聊一下 Mkdocs Material 的默认插件 mkdocs-rss-plugin 在使用上的一些问题。\n\n对于 blog 插件，默认的 RSS 里边提供的地址有一部分会默认为目录链接(例如 category 和 archive)，而非文章地址。\n\n针对这一种情况，需要使用 RSS 配置的 match_path，即可解决：\nplugins:\n  - rss:\n      match_path: "(blog/posts|flinks|galaxy|message|note|readme|tech|yuque)/.*"\n      date_from_meta:\n        as_creation: date\n      categories:\n        - categories\n        - tags', 'bodyHTML': '<p dir="auto">聊一下 Mkdocs Material 的默认插件 <a href="https://github.com/Guts/mkdocs-rss-plugin">mkdocs-rss-plugin</a> 在使用上的一些问题。</p>\n\n<p dir="auto">对于 blog 插件，默认的 RSS 里边提供的地址有一部分会默认为目录链接(例如 <code class="notranslate">category</code> 和 <code class="notranslate">archive</code>)，而非文章地址。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/c8af2420b6725f2074ef0480a6cd4e9704b17b95359544552f60b341725aa8c3/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30342f7273732d6974656d2e77656270"><img src="https://camo.githubusercontent.com/c8af2420b6725f2074ef0480a6cd4e9704b17b95359544552f60b341725aa8c3/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30342f7273732d6974656d2e77656270" alt="rss-item.webp" data-canonical-src="https://static.weiyan.tech/2024/04/rss-item.webp" style="max-width: 100%;"></a></p>\n<p dir="auto">针对这一种情况，需要使用 RSS 配置的 <a href="https://guts.github.io/mkdocs-rss-plugin/configuration/#match_path-filter-pages-to-include-in-feed" rel="nofollow"><code class="notranslate">match_path</code></a>，即可解决：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="plugins:\n  - rss:\n      match_path: &quot;(blog/posts|flinks|galaxy|message|note|readme|tech|yuque)/.*&quot;\n      date_from_meta:\n        as_creation: date\n      categories:\n        - categories\n        - tags"><pre class="notranslate"><code class="notranslate">plugins:\n  - rss:\n      match_path: "(blog/posts|flinks|galaxy|message|note|readme|tech|yuque)/.*"\n      date_from_meta:\n        as_creation: date\n      categories:\n        - categories\n        - tags\n</code></pre></div>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': [{'name': 'mkdocs'}]}, 'comments': {'nodes': [{'body': '终于修复了，之前一直有问题。', 'author': {'login': 'Jaaayden'}}, {'body': '您好，我的 RSS 按照您的 yml 文件配置了一下，发现 rss 展示效果很差而且缺少很多文章，尝试了很多次。可以劳烦看看我的仓库配置吗\r\n\r\n[我的yml文件](https://github.com/Wcowin/Wcowin.github.io/blob/main/mkdocs.yml)\r\n\r\nhttps://wcowin.work/feed_rss_created.xml\r\n<img width="1200" alt="image" src="https://github.com/user-attachments/assets/b6f54fb1-9e15-4b44-97bc-a5982a1d1d1d" />\r\n', 'author': {'login': 'Wcowin'}}]}}, {'title': '无趣的人', 'number': 64, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/64', 'createdAt': '2024-04-07T07:29:06Z', 'lastEditedAt': None, 'updatedAt': '2024-04-07T07:29:07Z', 'body': '有趣的灵魂万里挑一，好看的皮囊千篇一律。\r\n\r\n<!-- more -->\r\n\r\n活得通透的人 ，没有特别想维持的关系 ，也没有特别想要的东西 ，走近的人不抗拒 ，离开的人不强留 ，就连吃亏也懒得计较。\r\n\r\n从统计上来看，成年后还能重塑自我的人太罕见了。年纪越大就越相信命运，其中最大的一个原因就是理解人的改变之难。意图改变不如早早学会接纳。', 'bodyText': '有趣的灵魂万里挑一，好看的皮囊千篇一律。\n\n活得通透的人 ，没有特别想维持的关系 ，也没有特别想要的东西 ，走近的人不抗拒 ，离开的人不强留 ，就连吃亏也懒得计较。\n从统计上来看，成年后还能重塑自我的人太罕见了。年纪越大就越相信命运，其中最大的一个原因就是理解人的改变之难。意图改变不如早早学会接纳。', 'bodyHTML': '<p dir="auto">有趣的灵魂万里挑一，好看的皮囊千篇一律。</p>\n\n<p dir="auto">活得通透的人 ，没有特别想维持的关系 ，也没有特别想要的东西 ，走近的人不抗拒 ，离开的人不强留 ，就连吃亏也懒得计较。</p>\n<p dir="auto">从统计上来看，成年后还能重塑自我的人太罕见了。年纪越大就越相信命运，其中最大的一个原因就是理解人的改变之难。意图改变不如早早学会接纳。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '腾讯云 cos 也被盗刷了', 'number': 63, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/63', 'createdAt': '2024-03-29T07:07:37Z', 'lastEditedAt': '2024-04-03T01:31:55Z', 'updatedAt': '2024-04-03T01:31:56Z', 'body': '我的 [WebStack-Hugo](https://bioit.top/) 个人导航站点最开始用的是腾讯云的 cos 对象存储作为所有图片的存储和访问，在 2024 年 3 月底的时候收到腾讯云的通知说 200 万次的标准存储请求已经用掉了 180 多万次。\r\n\r\n<!-- more -->\r\n\r\n![cos-warning.webp](https://static.weiyan.tech/2024/03/cos-warning.webp)\r\n\r\n收到信息吓了一跳，心想我这一个小破网站不至于这么多的请求吧，肯定被攻击盗刷了。加上之前在网络上看到的阿里云/腾讯云对象存储被刷爆的新闻还历历在目，于是赶紧的上去腾讯云一看发现一天的读写请求居然达到了 25 万多次！\r\n\r\n![cos-y-requests](https://static.weiyan.tech/2024/03/cos-y-requests.webp)\r\n\r\n虽然之前一直设置了防盗链，但是一直允许着 **"空 referer"**，这无疑是一个巨大的漏洞，参考 《[COS被流量盗刷了](https://zhuanlan.zhihu.com/p/660308000)》 的经历，第一时间就把这个 **"空 referer"** 设置为了 **"拒绝"**，并开启了日志。\r\n\r\n果不其然，一段时间过后从生成的日志文件，发现了这样的一个网址：<https://123.wqydl.cn/>。\r\n![123-wqydl-get](https://static.weiyan.tech/2024/03/123-wqydl-get.webp)\r\n\r\n这个网站一直在请求获取个人 cos 内的 `/webstack/logos/default.webp` 这个图片！为了安全起见，又赶紧第一时间把这个网站加入了黑名单，并且把对应的 cos 权限设置成了 **"私有读写"**。\r\n\r\n但是从源源不断产生的日志可以看到这个恶心的网站还一直不依不饶在每隔几分钟就执行一堆读取请求！\r\n![get-requests-by-time.webp](https://static.weiyan.tech/2024/03/get-requests-by-time.webp)\r\n\r\n但幸运的是这些请求现在都 **"AccessDenied"** 了，但对它的一些后续可能的动作也很是好奇，在持续观察中。\r\n![cos-access-denied.webp](https://static.weiyan.tech/2024/03/cos-access-denied.webp)\r\n\r\n![cos-log.png](https://static.weiyan.tech/2024/03/cos-log.png)\r\n\r\n![cos-safe.png](https://static.weiyan.tech/2024/03/cos-safe.png)\r\n\r\n终于，第二天的晚上终于在他们的官网联系上了对应的客服，他们把相应的网站停掉后一切又回归正常。     \r\n![cos-package-free.webp](https://static.weiyan.tech/2024/04/cos-package-free.webp)\r\n\r\n最后，以此为鉴，希望大家在提供公共资源的时候擦亮眼睛，避免踩坑。', 'bodyText': '我的 WebStack-Hugo 个人导航站点最开始用的是腾讯云的 cos 对象存储作为所有图片的存储和访问，在 2024 年 3 月底的时候收到腾讯云的通知说 200 万次的标准存储请求已经用掉了 180 多万次。\n\n\n收到信息吓了一跳，心想我这一个小破网站不至于这么多的请求吧，肯定被攻击盗刷了。加上之前在网络上看到的阿里云/腾讯云对象存储被刷爆的新闻还历历在目，于是赶紧的上去腾讯云一看发现一天的读写请求居然达到了 25 万多次！\n\n虽然之前一直设置了防盗链，但是一直允许着 "空 referer"，这无疑是一个巨大的漏洞，参考 《COS被流量盗刷了》 的经历，第一时间就把这个 "空 referer" 设置为了 "拒绝"，并开启了日志。\n果不其然，一段时间过后从生成的日志文件，发现了这样的一个网址：https://123.wqydl.cn/。\n\n这个网站一直在请求获取个人 cos 内的 /webstack/logos/default.webp 这个图片！为了安全起见，又赶紧第一时间把这个网站加入了黑名单，并且把对应的 cos 权限设置成了 "私有读写"。\n但是从源源不断产生的日志可以看到这个恶心的网站还一直不依不饶在每隔几分钟就执行一堆读取请求！\n\n但幸运的是这些请求现在都 "AccessDenied" 了，但对它的一些后续可能的动作也很是好奇，在持续观察中。\n\n\n\n终于，第二天的晚上终于在他们的官网联系上了对应的客服，他们把相应的网站停掉后一切又回归正常。\n\n最后，以此为鉴，希望大家在提供公共资源的时候擦亮眼睛，避免踩坑。', 'bodyHTML': '<p dir="auto">我的 <a href="https://bioit.top/" rel="nofollow">WebStack-Hugo</a> 个人导航站点最开始用的是腾讯云的 cos 对象存储作为所有图片的存储和访问，在 2024 年 3 月底的时候收到腾讯云的通知说 200 万次的标准存储请求已经用掉了 180 多万次。</p>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/e13b01723b696be22b5082f545f78443a58e6ea31b6b15c2b25f54f1c7d1ceb5/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30332f636f732d7761726e696e672e77656270"><img src="https://camo.githubusercontent.com/e13b01723b696be22b5082f545f78443a58e6ea31b6b15c2b25f54f1c7d1ceb5/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30332f636f732d7761726e696e672e77656270" alt="cos-warning.webp" data-canonical-src="https://static.weiyan.tech/2024/03/cos-warning.webp" style="max-width: 100%;"></a></p>\n<p dir="auto">收到信息吓了一跳，心想我这一个小破网站不至于这么多的请求吧，肯定被攻击盗刷了。加上之前在网络上看到的阿里云/腾讯云对象存储被刷爆的新闻还历历在目，于是赶紧的上去腾讯云一看发现一天的读写请求居然达到了 25 万多次！</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/4d47b60a9032b46424a3e1ff6cf327402da171f4f7b6a32c6ff7e220d0f7f208/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30332f636f732d792d72657175657374732e77656270"><img src="https://camo.githubusercontent.com/4d47b60a9032b46424a3e1ff6cf327402da171f4f7b6a32c6ff7e220d0f7f208/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30332f636f732d792d72657175657374732e77656270" alt="cos-y-requests" data-canonical-src="https://static.weiyan.tech/2024/03/cos-y-requests.webp" style="max-width: 100%;"></a></p>\n<p dir="auto">虽然之前一直设置了防盗链，但是一直允许着 <strong>"空 referer"</strong>，这无疑是一个巨大的漏洞，参考 《<a href="https://zhuanlan.zhihu.com/p/660308000" rel="nofollow">COS被流量盗刷了</a>》 的经历，第一时间就把这个 <strong>"空 referer"</strong> 设置为了 <strong>"拒绝"</strong>，并开启了日志。</p>\n<p dir="auto">果不其然，一段时间过后从生成的日志文件，发现了这样的一个网址：<a href="https://123.wqydl.cn/" rel="nofollow">https://123.wqydl.cn/</a>。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/66ca16acf4de55a18c922784444ef104e2e1bc70412fd5db4bc969ef50cbea67/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30332f3132332d777179646c2d6765742e77656270"><img src="https://camo.githubusercontent.com/66ca16acf4de55a18c922784444ef104e2e1bc70412fd5db4bc969ef50cbea67/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30332f3132332d777179646c2d6765742e77656270" alt="123-wqydl-get" data-canonical-src="https://static.weiyan.tech/2024/03/123-wqydl-get.webp" style="max-width: 100%;"></a></p>\n<p dir="auto">这个网站一直在请求获取个人 cos 内的 <code class="notranslate">/webstack/logos/default.webp</code> 这个图片！为了安全起见，又赶紧第一时间把这个网站加入了黑名单，并且把对应的 cos 权限设置成了 <strong>"私有读写"</strong>。</p>\n<p dir="auto">但是从源源不断产生的日志可以看到这个恶心的网站还一直不依不饶在每隔几分钟就执行一堆读取请求！<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/2b10f65327f66ca2fce91047f9127b0bdde0839595ff9ddc1dd10a47c8f66761/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30332f6765742d72657175657374732d62792d74696d652e77656270"><img src="https://camo.githubusercontent.com/2b10f65327f66ca2fce91047f9127b0bdde0839595ff9ddc1dd10a47c8f66761/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30332f6765742d72657175657374732d62792d74696d652e77656270" alt="get-requests-by-time.webp" data-canonical-src="https://static.weiyan.tech/2024/03/get-requests-by-time.webp" style="max-width: 100%;"></a></p>\n<p dir="auto">但幸运的是这些请求现在都 <strong>"AccessDenied"</strong> 了，但对它的一些后续可能的动作也很是好奇，在持续观察中。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/c7730d9bd048666f1334b0c5b1d179509a42c19ee840befa4f260776f1077ae5/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30332f636f732d6163636573732d64656e6965642e77656270"><img src="https://camo.githubusercontent.com/c7730d9bd048666f1334b0c5b1d179509a42c19ee840befa4f260776f1077ae5/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30332f636f732d6163636573732d64656e6965642e77656270" alt="cos-access-denied.webp" data-canonical-src="https://static.weiyan.tech/2024/03/cos-access-denied.webp" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/bd26c3021f734a00b12bfca9477fd2e9c9d5d206913503aabbdeb568f1d625ce/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30332f636f732d6c6f672e706e67"><img src="https://camo.githubusercontent.com/bd26c3021f734a00b12bfca9477fd2e9c9d5d206913503aabbdeb568f1d625ce/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30332f636f732d6c6f672e706e67" alt="cos-log.png" data-canonical-src="https://static.weiyan.tech/2024/03/cos-log.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/373ccdcff91a9f37c6de3c8adf5caee4379d272ede55620da14f1b474451d8f7/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30332f636f732d736166652e706e67"><img src="https://camo.githubusercontent.com/373ccdcff91a9f37c6de3c8adf5caee4379d272ede55620da14f1b474451d8f7/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30332f636f732d736166652e706e67" alt="cos-safe.png" data-canonical-src="https://static.weiyan.tech/2024/03/cos-safe.png" style="max-width: 100%;"></a></p>\n<p dir="auto">终于，第二天的晚上终于在他们的官网联系上了对应的客服，他们把相应的网站停掉后一切又回归正常。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/de2e87b24b0267f58a7ef56953677876f4d6099b0f01a885d57a206ce24e7a29/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30342f636f732d7061636b6167652d667265652e77656270"><img src="https://camo.githubusercontent.com/de2e87b24b0267f58a7ef56953677876f4d6099b0f01a885d57a206ce24e7a29/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30342f636f732d7061636b6167652d667265652e77656270" alt="cos-package-free.webp" data-canonical-src="https://static.weiyan.tech/2024/04/cos-package-free.webp" style="max-width: 100%;"></a></p>\n<p dir="auto">最后，以此为鉴，希望大家在提供公共资源的时候擦亮眼睛，避免踩坑。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '图床管理与使用', 'number': 62, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/62', 'createdAt': '2024-03-27T07:48:45Z', 'lastEditedAt': '2024-03-28T05:02:32Z', 'updatedAt': '2024-03-28T05:02:32Z', 'body': '随着博客和其他一些站点多了起来，日积月累的访问越来越觉得腾讯云 cos 和阿里云 oss 是远远不够的，于是开始想着寻找可以一劳永逸的图床管理和使用替代者。\r\n\r\n<!-- more -->\r\n\r\nGitHub 的图床虽然不错，但如果文件越来越多，终究不是一个很好的解决方案。\r\n\r\nCloudflare R2 目前看来是个不错的选项，但是图片的上传、删除和日常管理目前还没有找到一个比较顺手的工具。目前在用的一个 [Picx4R2](https://github.com/shenweiyan/Picx4R2/) 还有一些不太满意的地方，即上传的图片无法保留原始的文件名！—— 不过幸运的是借助百度文心一言终于把保留原始文件名的这个问题给解决了。', 'bodyText': '随着博客和其他一些站点多了起来，日积月累的访问越来越觉得腾讯云 cos 和阿里云 oss 是远远不够的，于是开始想着寻找可以一劳永逸的图床管理和使用替代者。\n\nGitHub 的图床虽然不错，但如果文件越来越多，终究不是一个很好的解决方案。\nCloudflare R2 目前看来是个不错的选项，但是图片的上传、删除和日常管理目前还没有找到一个比较顺手的工具。目前在用的一个 Picx4R2 还有一些不太满意的地方，即上传的图片无法保留原始的文件名！—— 不过幸运的是借助百度文心一言终于把保留原始文件名的这个问题给解决了。', 'bodyHTML': '<p dir="auto">随着博客和其他一些站点多了起来，日积月累的访问越来越觉得腾讯云 cos 和阿里云 oss 是远远不够的，于是开始想着寻找可以一劳永逸的图床管理和使用替代者。</p>\n\n<p dir="auto">GitHub 的图床虽然不错，但如果文件越来越多，终究不是一个很好的解决方案。</p>\n<p dir="auto">Cloudflare R2 目前看来是个不错的选项，但是图片的上传、删除和日常管理目前还没有找到一个比较顺手的工具。目前在用的一个 <a href="https://github.com/shenweiyan/Picx4R2/">Picx4R2</a> 还有一些不太满意的地方，即上传的图片无法保留原始的文件名！—— 不过幸运的是借助百度文心一言终于把保留原始文件名的这个问题给解决了。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': 'Python 里面没 if 也能用 else', 'number': 61, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/61', 'createdAt': '2024-03-21T01:47:26Z', 'lastEditedAt': '2024-03-22T01:21:34Z', 'updatedAt': '2024-03-22T01:21:34Z', 'body': '> 这是来自于 [Yang Zhou](https://twitter.com/YangZhou1993) 发表在 [Medium](https://medium.com/techtofreedom/beyond-if-else-leveraging-pythons-versatile-else-statements-9ac260dac102) 的一篇文章 《[Beyond If-Else: Leveraging Python’s Versatile “Else” Statements](https://medium.com/techtofreedom/beyond-if-else-leveraging-pythons-versatile-else-statements-9ac260dac102)》，作者觉得挺有意思的，拿过来简单翻译了一下在这里分享给大家。\r\n\r\n<!-- more -->\r\n\r\n当我们说到 "else"，必须先有 "if"。\r\n\r\n这对于许多编程语言来说都是正确的，但对于 Python 来说却不然。\r\n\r\nPython 的 else 语句比我们想象的更通用。\r\n\r\n从循环后的 "else" 到 try- except 块后的 "else"，本文将探讨 else 语句鲜为人知的功能。\r\n\r\n我们不一定需要在生产中使用这些技巧，尤其是当我们的同事还不知道它们时，但仅仅意识到它们的存在就可以让我们再次感受到 Python 的灵活性和多功能性。\r\n\r\n## 1. While-Else 结构\r\n\r\n在 Python 中， `while` 循环可以与 `else` 块配对。当且仅当循环正常完成时，`else` 块才会执行，这意味着它不会通过 `break` 语句终止。\r\n\r\n换句话说，如果 `while` 循环被 `break` 终止，则 `else` 块将不会被执行。\r\n```python\r\nleaders = ["Elon", "Tim", "Warren"]\r\ni = 0\r\nwhile i < len(leaders):\r\n    if leaders[i] == "Yang":\r\n        print("Yang is a leader!")\r\n        break\r\n    i += 1\r\nelse:\r\n    print("Not found Yang!")\r\n\r\n# Not found Yang!\r\n```\r\n\r\n如上面的示例所示， `while` 循环迭代 `leaders` 列表，搜索领导者 "Yang"。不幸的是，"Yang" 并不是该名单中真正的领导者。所以 `break` 语句没有被执行。因此，`else` 语句下的代码就被执行了。\r\n\r\n`else` 语句的这种意外用法使我们无需添加额外的标志变量来标记循环是否被破坏。这样我们的 Python 程序就可以精简一些了。\r\n\r\n## 2. 带有 For 循环的 Else 语句\r\n\r\nFor 循环和 `while` 循环是编程的孪生兄弟。如果我们可以在 while 循环中利用 else 语句的多功能性，那么毫无疑问它可以用于 for 循环。\r\n\r\n这个想法是完全相同的：      \r\n\r\n> The "else" block only executes when there is no break in the for loop.     \r\n> "else" 块仅在 for 循环中没有中断时执行。     \r\n\r\n让我们用 for 循环重写前面的示例：\r\n```python\r\nleaders = ["Elon", "Tim", "Warren"]\r\n\r\nfor i in leaders:\r\n    if i == "Yang":\r\n        print("Yang is a leader!")\r\n        break\r\nelse:\r\n    print("Not found Yang!")\r\n\r\n# Not found Yang!\r\n```\r\n\r\n代码更简洁了，不是吗？你能用其他编程语言做到这一点吗？\r\n\r\n## 3. 使用 Else 语句进行异常处理\r\n\r\n异常处理是编写健壮且无错误的代码的一项重要技术。\r\n\r\n在 Python 中，整个异常处理代码块的结构应该如下：\r\n```python\r\ntry:\r\n    # Code that might raise an exception\r\nexcept SomeException:\r\n    # Code that runs if the try block raised \'SomeException\'\r\nelse:\r\n    # Code that runs if the try block did NOT raise any exceptions\r\nfinally:\r\n    # Code that always runs no matter what, often for cleanup\r\n```\r\n\r\n除了 `try` 块之外，所有其他部分都是可选的。\r\n\r\n当 `try` 块未引发异常时， `else` 块就会执行。这是放置仅当 `try` 块成功且无异常时才运行的代码的好地方。这对于阐明代码的意图并防止 `except` 块意外捕获非常有用。\r\n\r\n例如，以下程序实现了一个非常简单的除法函数：\r\n```python\r\ndef divide(x, y):\r\n    try:\r\n        result = x / y\r\n    except ZeroDivisionError:\r\n        print("Error: Division by zero.")\r\n    else:\r\n        print(f"Result is {result}")\r\n    finally:\r\n        print("Executing finally clause.")\r\n```\r\n\r\n如果没有遇到 `ZeroDivisionError`，结果如下：\r\n\r\n```python\r\ndivide(2077, 1)\r\n# Result is 2077.0\r\n# Executing finally clause.\r\n```\r\n\r\n当然，如果满足定义的异常，则会打印相关的 `Error` 消息：\r\n```python\r\ndivide(2077, 0)\r\n# Error: Division by zero.\r\n# Executing finally clause.\r\n```\r\n\r\n## 要点总结\r\n\r\n在 Python 中，else 语句不一定位于 if 语句之后。\r\n\r\n它还有三个额外但鲜为人知的用途：     \r\n\r\n- while-else 循环     \r\n- for-else 循环     \r\n- 使用 else 块进行异常处理     \r\n\r\n但是，我不建议您在生产中频繁应用它们，因为使用鲜为人知的功能可能会降低可读性并使您的同事感到困惑。但理解并随意应用它们会给你的同事留下深刻的印象，并巩固你作为 "Python 大师" 的地位。 😎', 'bodyText': '这是来自于 Yang Zhou 发表在 Medium 的一篇文章 《Beyond If-Else: Leveraging Python’s Versatile “Else” Statements》，作者觉得挺有意思的，拿过来简单翻译了一下在这里分享给大家。\n\n\n当我们说到 "else"，必须先有 "if"。\n这对于许多编程语言来说都是正确的，但对于 Python 来说却不然。\nPython 的 else 语句比我们想象的更通用。\n从循环后的 "else" 到 try- except 块后的 "else"，本文将探讨 else 语句鲜为人知的功能。\n我们不一定需要在生产中使用这些技巧，尤其是当我们的同事还不知道它们时，但仅仅意识到它们的存在就可以让我们再次感受到 Python 的灵活性和多功能性。\n1. While-Else 结构\n在 Python 中， while 循环可以与 else 块配对。当且仅当循环正常完成时，else 块才会执行，这意味着它不会通过 break 语句终止。\n换句话说，如果 while 循环被 break 终止，则 else 块将不会被执行。\nleaders = ["Elon", "Tim", "Warren"]\ni = 0\nwhile i < len(leaders):\n    if leaders[i] == "Yang":\n        print("Yang is a leader!")\n        break\n    i += 1\nelse:\n    print("Not found Yang!")\n\n# Not found Yang!\n如上面的示例所示， while 循环迭代 leaders 列表，搜索领导者 "Yang"。不幸的是，"Yang" 并不是该名单中真正的领导者。所以 break 语句没有被执行。因此，else 语句下的代码就被执行了。\nelse 语句的这种意外用法使我们无需添加额外的标志变量来标记循环是否被破坏。这样我们的 Python 程序就可以精简一些了。\n2. 带有 For 循环的 Else 语句\nFor 循环和 while 循环是编程的孪生兄弟。如果我们可以在 while 循环中利用 else 语句的多功能性，那么毫无疑问它可以用于 for 循环。\n这个想法是完全相同的：\n\nThe "else" block only executes when there is no break in the for loop.\n"else" 块仅在 for 循环中没有中断时执行。\n\n让我们用 for 循环重写前面的示例：\nleaders = ["Elon", "Tim", "Warren"]\n\nfor i in leaders:\n    if i == "Yang":\n        print("Yang is a leader!")\n        break\nelse:\n    print("Not found Yang!")\n\n# Not found Yang!\n代码更简洁了，不是吗？你能用其他编程语言做到这一点吗？\n3. 使用 Else 语句进行异常处理\n异常处理是编写健壮且无错误的代码的一项重要技术。\n在 Python 中，整个异常处理代码块的结构应该如下：\ntry:\n    # Code that might raise an exception\nexcept SomeException:\n    # Code that runs if the try block raised \'SomeException\'\nelse:\n    # Code that runs if the try block did NOT raise any exceptions\nfinally:\n    # Code that always runs no matter what, often for cleanup\n除了 try 块之外，所有其他部分都是可选的。\n当 try 块未引发异常时， else 块就会执行。这是放置仅当 try 块成功且无异常时才运行的代码的好地方。这对于阐明代码的意图并防止 except 块意外捕获非常有用。\n例如，以下程序实现了一个非常简单的除法函数：\ndef divide(x, y):\n    try:\n        result = x / y\n    except ZeroDivisionError:\n        print("Error: Division by zero.")\n    else:\n        print(f"Result is {result}")\n    finally:\n        print("Executing finally clause.")\n如果没有遇到 ZeroDivisionError，结果如下：\ndivide(2077, 1)\n# Result is 2077.0\n# Executing finally clause.\n当然，如果满足定义的异常，则会打印相关的 Error 消息：\ndivide(2077, 0)\n# Error: Division by zero.\n# Executing finally clause.\n要点总结\n在 Python 中，else 语句不一定位于 if 语句之后。\n它还有三个额外但鲜为人知的用途：\n\nwhile-else 循环\nfor-else 循环\n使用 else 块进行异常处理\n\n但是，我不建议您在生产中频繁应用它们，因为使用鲜为人知的功能可能会降低可读性并使您的同事感到困惑。但理解并随意应用它们会给你的同事留下深刻的印象，并巩固你作为 "Python 大师" 的地位。 😎', 'bodyHTML': '<blockquote>\n<p dir="auto">这是来自于 <a href="https://twitter.com/YangZhou1993" rel="nofollow">Yang Zhou</a> 发表在 <a href="https://medium.com/techtofreedom/beyond-if-else-leveraging-pythons-versatile-else-statements-9ac260dac102" rel="nofollow">Medium</a> 的一篇文章 《<a href="https://medium.com/techtofreedom/beyond-if-else-leveraging-pythons-versatile-else-statements-9ac260dac102" rel="nofollow">Beyond If-Else: Leveraging Python’s Versatile “Else” Statements</a>》，作者觉得挺有意思的，拿过来简单翻译了一下在这里分享给大家。</p>\n</blockquote>\n\n<p dir="auto">当我们说到 "else"，必须先有 "if"。</p>\n<p dir="auto">这对于许多编程语言来说都是正确的，但对于 Python 来说却不然。</p>\n<p dir="auto">Python 的 else 语句比我们想象的更通用。</p>\n<p dir="auto">从循环后的 "else" 到 try- except 块后的 "else"，本文将探讨 else 语句鲜为人知的功能。</p>\n<p dir="auto">我们不一定需要在生产中使用这些技巧，尤其是当我们的同事还不知道它们时，但仅仅意识到它们的存在就可以让我们再次感受到 Python 的灵活性和多功能性。</p>\n<h2 dir="auto">1. While-Else 结构</h2>\n<p dir="auto">在 Python 中， <code class="notranslate">while</code> 循环可以与 <code class="notranslate">else</code> 块配对。当且仅当循环正常完成时，<code class="notranslate">else</code> 块才会执行，这意味着它不会通过 <code class="notranslate">break</code> 语句终止。</p>\n<p dir="auto">换句话说，如果 <code class="notranslate">while</code> 循环被 <code class="notranslate">break</code> 终止，则 <code class="notranslate">else</code> 块将不会被执行。</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="leaders = [&quot;Elon&quot;, &quot;Tim&quot;, &quot;Warren&quot;]\ni = 0\nwhile i &lt; len(leaders):\n    if leaders[i] == &quot;Yang&quot;:\n        print(&quot;Yang is a leader!&quot;)\n        break\n    i += 1\nelse:\n    print(&quot;Not found Yang!&quot;)\n\n# Not found Yang!"><pre class="notranslate"><span class="pl-s1">leaders</span> <span class="pl-c1">=</span> [<span class="pl-s">"Elon"</span>, <span class="pl-s">"Tim"</span>, <span class="pl-s">"Warren"</span>]\n<span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span>\n<span class="pl-k">while</span> <span class="pl-s1">i</span> <span class="pl-c1">&lt;</span> <span class="pl-en">len</span>(<span class="pl-s1">leaders</span>):\n    <span class="pl-k">if</span> <span class="pl-s1">leaders</span>[<span class="pl-s1">i</span>] <span class="pl-c1">==</span> <span class="pl-s">"Yang"</span>:\n        <span class="pl-en">print</span>(<span class="pl-s">"Yang is a leader!"</span>)\n        <span class="pl-k">break</span>\n    <span class="pl-s1">i</span> <span class="pl-c1">+=</span> <span class="pl-c1">1</span>\n<span class="pl-k">else</span>:\n    <span class="pl-en">print</span>(<span class="pl-s">"Not found Yang!"</span>)\n\n<span class="pl-c"># Not found Yang!</span></pre></div>\n<p dir="auto">如上面的示例所示， <code class="notranslate">while</code> 循环迭代 <code class="notranslate">leaders</code> 列表，搜索领导者 "Yang"。不幸的是，"Yang" 并不是该名单中真正的领导者。所以 <code class="notranslate">break</code> 语句没有被执行。因此，<code class="notranslate">else</code> 语句下的代码就被执行了。</p>\n<p dir="auto"><code class="notranslate">else</code> 语句的这种意外用法使我们无需添加额外的标志变量来标记循环是否被破坏。这样我们的 Python 程序就可以精简一些了。</p>\n<h2 dir="auto">2. 带有 For 循环的 Else 语句</h2>\n<p dir="auto">For 循环和 <code class="notranslate">while</code> 循环是编程的孪生兄弟。如果我们可以在 while 循环中利用 else 语句的多功能性，那么毫无疑问它可以用于 for 循环。</p>\n<p dir="auto">这个想法是完全相同的：</p>\n<blockquote>\n<p dir="auto">The "else" block only executes when there is no break in the for loop.<br>\n"else" 块仅在 for 循环中没有中断时执行。</p>\n</blockquote>\n<p dir="auto">让我们用 for 循环重写前面的示例：</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="leaders = [&quot;Elon&quot;, &quot;Tim&quot;, &quot;Warren&quot;]\n\nfor i in leaders:\n    if i == &quot;Yang&quot;:\n        print(&quot;Yang is a leader!&quot;)\n        break\nelse:\n    print(&quot;Not found Yang!&quot;)\n\n# Not found Yang!"><pre class="notranslate"><span class="pl-s1">leaders</span> <span class="pl-c1">=</span> [<span class="pl-s">"Elon"</span>, <span class="pl-s">"Tim"</span>, <span class="pl-s">"Warren"</span>]\n\n<span class="pl-k">for</span> <span class="pl-s1">i</span> <span class="pl-c1">in</span> <span class="pl-s1">leaders</span>:\n    <span class="pl-k">if</span> <span class="pl-s1">i</span> <span class="pl-c1">==</span> <span class="pl-s">"Yang"</span>:\n        <span class="pl-en">print</span>(<span class="pl-s">"Yang is a leader!"</span>)\n        <span class="pl-k">break</span>\n<span class="pl-k">else</span>:\n    <span class="pl-en">print</span>(<span class="pl-s">"Not found Yang!"</span>)\n\n<span class="pl-c"># Not found Yang!</span></pre></div>\n<p dir="auto">代码更简洁了，不是吗？你能用其他编程语言做到这一点吗？</p>\n<h2 dir="auto">3. 使用 Else 语句进行异常处理</h2>\n<p dir="auto">异常处理是编写健壮且无错误的代码的一项重要技术。</p>\n<p dir="auto">在 Python 中，整个异常处理代码块的结构应该如下：</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="try:\n    # Code that might raise an exception\nexcept SomeException:\n    # Code that runs if the try block raised \'SomeException\'\nelse:\n    # Code that runs if the try block did NOT raise any exceptions\nfinally:\n    # Code that always runs no matter what, often for cleanup"><pre class="notranslate"><span class="pl-k">try</span>:\n    <span class="pl-c"># Code that might raise an exception</span>\n<span class="pl-k">except</span> <span class="pl-v">SomeException</span>:\n    <span class="pl-c"># Code that runs if the try block raised \'SomeException\'</span>\n<span class="pl-k">else</span>:\n    <span class="pl-c"># Code that runs if the try block did NOT raise any exceptions</span>\n<span class="pl-k">finally</span>:\n    <span class="pl-c"># Code that always runs no matter what, often for cleanup</span></pre></div>\n<p dir="auto">除了 <code class="notranslate">try</code> 块之外，所有其他部分都是可选的。</p>\n<p dir="auto">当 <code class="notranslate">try</code> 块未引发异常时， <code class="notranslate">else</code> 块就会执行。这是放置仅当 <code class="notranslate">try</code> 块成功且无异常时才运行的代码的好地方。这对于阐明代码的意图并防止 <code class="notranslate">except</code> 块意外捕获非常有用。</p>\n<p dir="auto">例如，以下程序实现了一个非常简单的除法函数：</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="def divide(x, y):\n    try:\n        result = x / y\n    except ZeroDivisionError:\n        print(&quot;Error: Division by zero.&quot;)\n    else:\n        print(f&quot;Result is {result}&quot;)\n    finally:\n        print(&quot;Executing finally clause.&quot;)"><pre class="notranslate"><span class="pl-k">def</span> <span class="pl-en">divide</span>(<span class="pl-s1">x</span>, <span class="pl-s1">y</span>):\n    <span class="pl-k">try</span>:\n        <span class="pl-s1">result</span> <span class="pl-c1">=</span> <span class="pl-s1">x</span> <span class="pl-c1">/</span> <span class="pl-s1">y</span>\n    <span class="pl-k">except</span> <span class="pl-v">ZeroDivisionError</span>:\n        <span class="pl-en">print</span>(<span class="pl-s">"Error: Division by zero."</span>)\n    <span class="pl-k">else</span>:\n        <span class="pl-en">print</span>(<span class="pl-s">f"Result is <span class="pl-s1"><span class="pl-kos">{</span><span class="pl-s1">result</span><span class="pl-kos">}</span></span>"</span>)\n    <span class="pl-k">finally</span>:\n        <span class="pl-en">print</span>(<span class="pl-s">"Executing finally clause."</span>)</pre></div>\n<p dir="auto">如果没有遇到 <code class="notranslate">ZeroDivisionError</code>，结果如下：</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="divide(2077, 1)\n# Result is 2077.0\n# Executing finally clause."><pre class="notranslate"><span class="pl-en">divide</span>(<span class="pl-c1">2077</span>, <span class="pl-c1">1</span>)\n<span class="pl-c"># Result is 2077.0</span>\n<span class="pl-c"># Executing finally clause.</span></pre></div>\n<p dir="auto">当然，如果满足定义的异常，则会打印相关的 <code class="notranslate">Error</code> 消息：</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="divide(2077, 0)\n# Error: Division by zero.\n# Executing finally clause."><pre class="notranslate"><span class="pl-en">divide</span>(<span class="pl-c1">2077</span>, <span class="pl-c1">0</span>)\n<span class="pl-c"># Error: Division by zero.</span>\n<span class="pl-c"># Executing finally clause.</span></pre></div>\n<h2 dir="auto">要点总结</h2>\n<p dir="auto">在 Python 中，else 语句不一定位于 if 语句之后。</p>\n<p dir="auto">它还有三个额外但鲜为人知的用途：</p>\n<ul dir="auto">\n<li>while-else 循环</li>\n<li>for-else 循环</li>\n<li>使用 else 块进行异常处理</li>\n</ul>\n<p dir="auto">但是，我不建议您在生产中频繁应用它们，因为使用鲜为人知的功能可能会降低可读性并使您的同事感到困惑。但理解并随意应用它们会给你的同事留下深刻的印象，并巩固你作为 "Python 大师" 的地位。 😎</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.2-编程'}, 'labels': {'nodes': [{'name': '翻译'}, {'name': '1.2.3-Python'}]}, 'comments': {'nodes': []}}, {'title': '【1.3.17-服务器配置使用】RockyLinux 9 基础配置与使用', 'number': 60, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/60', 'createdAt': '2024-03-08T02:24:12Z', 'lastEditedAt': '2024-10-31T02:14:48Z', 'updatedAt': '2025-04-02T05:22:35Z', 'body': '今天终于在阿里云入手了一台 2核(vCPU)+ 2GiB + 3Mbps 的 ECS，安装了最新的 Rocky Linux release 9.3 (Blue Onyx)，记录一下开箱后的一些基础配置。\r\n\r\n<!-- more -->\r\n\r\n![aliyun-99-plan](https://shub.weiyan.tech/kgarden/2024/03/aliyun-99-plan.png)\r\n\r\n## Hostname\r\n```\r\n[root@r0sasd1bQi ~]# hostnamectl   # 查看一下当前主机名的情况\r\n[root@r0sasd1bQi ~]# hostnamectl set-hostname shen-server --static\r\n[root@r0sasd1bQi ~]# hostnamectl status\r\n[root@r0sasd1bQi ~]# reboot now    # 重启服务器\r\n```\r\n\r\n## 创建新用户\r\n\r\n使用 `adduser` 命令将新用户添加到系统中：\r\n```bash\r\nadduser shenweiyan    # 创建新用户\r\npasswd shenweiyan     # 修改密码\r\n```\r\n\r\n## 用户添加超级权限\r\n\r\n把 `shenweiyan` 用户添加超级权限（`/etc/sudoers`）：\r\n```\r\nshenweiyan      ALL=(ALL)       NOPASSWD: ALL\r\n```\r\n\r\n## 自定义快捷方式\r\n\r\n在 `~/.bashrc` 最后新增一下用户自定义的快捷方式。\r\n\r\n```\r\n# User Specific Alias\r\nalias disp=\'display\'\r\nalias rm=\'rm -i\'\r\nalias la=\'ls -al\'\r\nalias ll=\'ls -lh\'\r\nalias le=\'less -S\'\r\n\r\n# Custom History setting\r\n# HISTFILESIZE 定义了在 .bash_history 中保存命令的记录总数\r\nHISTFILESIZE=3000000\r\n# HISTSIZE 定义了 history 命令输出的记录数\r\nHISTSIZE=3000\r\n# 定义 History 输出格式\r\nexport HISTTIMEFORMAT=\'%F %T \'\r\n# 使用 HISTCONTROL 从命令历史中剔除连续重复的条目\r\nHISTCONTROL=ignoredups\r\n# 将 bash 内存中历史命令追加到 .bash_history 历史命令文件中， 默认只有退出 shell 是才会保存\r\nPROMPT_COMMAND="history -a"\r\n\r\n# Login Style\r\nPS1=\'\\033[35;1m\\u@\\h \\[\\e[m\\]\\t \\[\\033[36;1m\\]$(pwd) \\n$ \\[\\e[m\\]\'\r\nclear;\r\n```\r\n\r\n## epel-release\r\n\r\n> 企业版 Linux 附加软件包（Extra Packages for Enterprise Linux，以下简称 EPEL）是一个 Fedora 特别兴趣小组，用以创建、维护以及管理针对企业版 Linux 的一个高质量附加软件包集，面向的对象包括但不限于 [红帽企业版 Linux (RHEL)](https://fedoraproject.org/wiki/Red_Hat_Enterprise_Linux/zh-cn)、 CentOS、Scientific Linux (SL)、Oracle Linux (OL) 。\r\n> \r\n> 参考：[EPEL/zh-cn - Fedora Project Wiki](https://fedoraproject.org/wiki/EPEL/zh-cn)\r\n\r\n```bash\r\n# 下面两个命令都可以安装\r\nsudo dnf install epel-release\r\nsudo dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm\r\n```\r\n\r\n## Htop 和 Btop\r\n\r\n[Htop](https://htop.dev/) 是一个基于 C 编写的跨平台的交互式流程查看器，`htop` 是 `top` 的一个增强替代品，提供了更加友好的用户界面和更多的功能，相比系统自带的 `top` 更加直观好用。 \r\n\r\n```bash\r\nsudo dnf install htop\r\n```\r\n\r\n`btop` 也是一个改进版的 Linux top 命令，这个命令不仅列出了各种系统使用情况，包括内存、磁盘、网络和进程，而且还允许与鼠标互动。即使是在服务器安装上，你也可以在 `btop` 上指指点点，以树形方式查看进程，隐藏或显示某些显示，并访问选项菜单，在那里你可以调整显示的外观和感觉。\r\n```bash\r\nsudo dnf install btop\r\n```\r\n\r\n## Docker 安装与使用\r\n\r\n主要参考《[How To Install and Use Docker on Rocky Linux 9](https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-rocky-linux-9)》，具体步骤如下：     \r\n\r\n- add the official Docker repository\r\n  ```bash\r\n  sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r\n  ```\r\n\r\n- install Docker\r\n  ```bash\r\n  sudo dnf install docker-ce docker-ce-cli containerd.io\r\n  ```\r\n\r\n- start the Docker daemon\r\n  ```bash\r\n  sudo systemctl start docker\r\n  ```\r\n\r\n- Verify that it’s running\r\n  ```bash\r\n  sudo systemctl status docker\r\n  ```\r\n  ```\r\n  Output\r\n  ● docker.service - Docker Application Container Engine\r\n     Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)\r\n     Active: active (running) since Sun 2016-05-01 06:53:52 CDT; 1 weeks 3 days ago\r\n       Docs: https://docs.docker.com\r\n   Main PID: 749 (docker)\r\n  ```\r\n\r\n- make sure it starts at every server reboot\r\n  ```bash\r\n  sudo systemctl enable docker\r\n  ```\r\n\r\n- 配置非 root 用户使用 Docker\r\n  ```bash\r\n  sudo usermod -aG docker username\r\n  newgrp docker                     #更新docker用户组\r\n  ```', 'bodyText': '今天终于在阿里云入手了一台 2核(vCPU)+ 2GiB + 3Mbps 的 ECS，安装了最新的 Rocky Linux release 9.3 (Blue Onyx)，记录一下开箱后的一些基础配置。\n\n\nHostname\n[root@r0sasd1bQi ~]# hostnamectl   # 查看一下当前主机名的情况\n[root@r0sasd1bQi ~]# hostnamectl set-hostname shen-server --static\n[root@r0sasd1bQi ~]# hostnamectl status\n[root@r0sasd1bQi ~]# reboot now    # 重启服务器\n\n创建新用户\n使用 adduser 命令将新用户添加到系统中：\nadduser shenweiyan    # 创建新用户\npasswd shenweiyan     # 修改密码\n用户添加超级权限\n把 shenweiyan 用户添加超级权限（/etc/sudoers）：\nshenweiyan      ALL=(ALL)       NOPASSWD: ALL\n\n自定义快捷方式\n在 ~/.bashrc 最后新增一下用户自定义的快捷方式。\n# User Specific Alias\nalias disp=\'display\'\nalias rm=\'rm -i\'\nalias la=\'ls -al\'\nalias ll=\'ls -lh\'\nalias le=\'less -S\'\n\n# Custom History setting\n# HISTFILESIZE 定义了在 .bash_history 中保存命令的记录总数\nHISTFILESIZE=3000000\n# HISTSIZE 定义了 history 命令输出的记录数\nHISTSIZE=3000\n# 定义 History 输出格式\nexport HISTTIMEFORMAT=\'%F %T \'\n# 使用 HISTCONTROL 从命令历史中剔除连续重复的条目\nHISTCONTROL=ignoredups\n# 将 bash 内存中历史命令追加到 .bash_history 历史命令文件中， 默认只有退出 shell 是才会保存\nPROMPT_COMMAND="history -a"\n\n# Login Style\nPS1=\'\\033[35;1m\\u@\\h \\[\\e[m\\]\\t \\[\\033[36;1m\\]$(pwd) \\n$ \\[\\e[m\\]\'\nclear;\n\nepel-release\n\n企业版 Linux 附加软件包（Extra Packages for Enterprise Linux，以下简称 EPEL）是一个 Fedora 特别兴趣小组，用以创建、维护以及管理针对企业版 Linux 的一个高质量附加软件包集，面向的对象包括但不限于 红帽企业版 Linux (RHEL)、 CentOS、Scientific Linux (SL)、Oracle Linux (OL) 。\n参考：EPEL/zh-cn - Fedora Project Wiki\n\n# 下面两个命令都可以安装\nsudo dnf install epel-release\nsudo dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm\nHtop 和 Btop\nHtop 是一个基于 C 编写的跨平台的交互式流程查看器，htop 是 top 的一个增强替代品，提供了更加友好的用户界面和更多的功能，相比系统自带的 top 更加直观好用。\nsudo dnf install htop\nbtop 也是一个改进版的 Linux top 命令，这个命令不仅列出了各种系统使用情况，包括内存、磁盘、网络和进程，而且还允许与鼠标互动。即使是在服务器安装上，你也可以在 btop 上指指点点，以树形方式查看进程，隐藏或显示某些显示，并访问选项菜单，在那里你可以调整显示的外观和感觉。\nsudo dnf install btop\nDocker 安装与使用\n主要参考《How To Install and Use Docker on Rocky Linux 9》，具体步骤如下：\n\n\nadd the official Docker repository\nsudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n\ninstall Docker\nsudo dnf install docker-ce docker-ce-cli containerd.io\n\n\nstart the Docker daemon\nsudo systemctl start docker\n\n\nVerify that it’s running\nsudo systemctl status docker\nOutput\n● docker.service - Docker Application Container Engine\n   Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)\n   Active: active (running) since Sun 2016-05-01 06:53:52 CDT; 1 weeks 3 days ago\n     Docs: https://docs.docker.com\n Main PID: 749 (docker)\n\n\n\nmake sure it starts at every server reboot\nsudo systemctl enable docker\n\n\n配置非 root 用户使用 Docker\nsudo usermod -aG docker username\nnewgrp docker                     #更新docker用户组', 'bodyHTML': '<p dir="auto">今天终于在阿里云入手了一台 2核(vCPU)+ 2GiB + 3Mbps 的 ECS，安装了最新的 Rocky Linux release 9.3 (Blue Onyx)，记录一下开箱后的一些基础配置。</p>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/9931854c2c73f70c7bffbad7205aff1c966b259efeedc1bbda0f23410749697b/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30332f616c6979756e2d39392d706c616e2e706e67"><img src="https://camo.githubusercontent.com/9931854c2c73f70c7bffbad7205aff1c966b259efeedc1bbda0f23410749697b/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30332f616c6979756e2d39392d706c616e2e706e67" alt="aliyun-99-plan" data-canonical-src="https://shub.weiyan.tech/kgarden/2024/03/aliyun-99-plan.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">Hostname</h2>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="[root@r0sasd1bQi ~]# hostnamectl   # 查看一下当前主机名的情况\n[root@r0sasd1bQi ~]# hostnamectl set-hostname shen-server --static\n[root@r0sasd1bQi ~]# hostnamectl status\n[root@r0sasd1bQi ~]# reboot now    # 重启服务器"><pre class="notranslate"><code class="notranslate">[root@r0sasd1bQi ~]# hostnamectl   # 查看一下当前主机名的情况\n[root@r0sasd1bQi ~]# hostnamectl set-hostname shen-server --static\n[root@r0sasd1bQi ~]# hostnamectl status\n[root@r0sasd1bQi ~]# reboot now    # 重启服务器\n</code></pre></div>\n<h2 dir="auto">创建新用户</h2>\n<p dir="auto">使用 <code class="notranslate">adduser</code> 命令将新用户添加到系统中：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="adduser shenweiyan    # 创建新用户\npasswd shenweiyan     # 修改密码"><pre class="notranslate">adduser shenweiyan    <span class="pl-c"><span class="pl-c">#</span> 创建新用户</span>\npasswd shenweiyan     <span class="pl-c"><span class="pl-c">#</span> 修改密码</span></pre></div>\n<h2 dir="auto">用户添加超级权限</h2>\n<p dir="auto">把 <code class="notranslate">shenweiyan</code> 用户添加超级权限（<code class="notranslate">/etc/sudoers</code>）：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="shenweiyan      ALL=(ALL)       NOPASSWD: ALL"><pre class="notranslate"><code class="notranslate">shenweiyan      ALL=(ALL)       NOPASSWD: ALL\n</code></pre></div>\n<h2 dir="auto">自定义快捷方式</h2>\n<p dir="auto">在 <code class="notranslate">~/.bashrc</code> 最后新增一下用户自定义的快捷方式。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# User Specific Alias\nalias disp=\'display\'\nalias rm=\'rm -i\'\nalias la=\'ls -al\'\nalias ll=\'ls -lh\'\nalias le=\'less -S\'\n\n# Custom History setting\n# HISTFILESIZE 定义了在 .bash_history 中保存命令的记录总数\nHISTFILESIZE=3000000\n# HISTSIZE 定义了 history 命令输出的记录数\nHISTSIZE=3000\n# 定义 History 输出格式\nexport HISTTIMEFORMAT=\'%F %T \'\n# 使用 HISTCONTROL 从命令历史中剔除连续重复的条目\nHISTCONTROL=ignoredups\n# 将 bash 内存中历史命令追加到 .bash_history 历史命令文件中， 默认只有退出 shell 是才会保存\nPROMPT_COMMAND=&quot;history -a&quot;\n\n# Login Style\nPS1=\'\\033[35;1m\\u@\\h \\[\\e[m\\]\\t \\[\\033[36;1m\\]$(pwd) \\n$ \\[\\e[m\\]\'\nclear;"><pre class="notranslate"><code class="notranslate"># User Specific Alias\nalias disp=\'display\'\nalias rm=\'rm -i\'\nalias la=\'ls -al\'\nalias ll=\'ls -lh\'\nalias le=\'less -S\'\n\n# Custom History setting\n# HISTFILESIZE 定义了在 .bash_history 中保存命令的记录总数\nHISTFILESIZE=3000000\n# HISTSIZE 定义了 history 命令输出的记录数\nHISTSIZE=3000\n# 定义 History 输出格式\nexport HISTTIMEFORMAT=\'%F %T \'\n# 使用 HISTCONTROL 从命令历史中剔除连续重复的条目\nHISTCONTROL=ignoredups\n# 将 bash 内存中历史命令追加到 .bash_history 历史命令文件中， 默认只有退出 shell 是才会保存\nPROMPT_COMMAND="history -a"\n\n# Login Style\nPS1=\'\\033[35;1m\\u@\\h \\[\\e[m\\]\\t \\[\\033[36;1m\\]$(pwd) \\n$ \\[\\e[m\\]\'\nclear;\n</code></pre></div>\n<h2 dir="auto">epel-release</h2>\n<blockquote>\n<p dir="auto">企业版 Linux 附加软件包（Extra Packages for Enterprise Linux，以下简称 EPEL）是一个 Fedora 特别兴趣小组，用以创建、维护以及管理针对企业版 Linux 的一个高质量附加软件包集，面向的对象包括但不限于 <a href="https://fedoraproject.org/wiki/Red_Hat_Enterprise_Linux/zh-cn" rel="nofollow">红帽企业版 Linux (RHEL)</a>、 CentOS、Scientific Linux (SL)、Oracle Linux (OL) 。</p>\n<p dir="auto">参考：<a href="https://fedoraproject.org/wiki/EPEL/zh-cn" rel="nofollow">EPEL/zh-cn - Fedora Project Wiki</a></p>\n</blockquote>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# 下面两个命令都可以安装\nsudo dnf install epel-release\nsudo dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm"><pre class="notranslate"><span class="pl-c"><span class="pl-c">#</span> 下面两个命令都可以安装</span>\nsudo dnf install epel-release\nsudo dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm</pre></div>\n<h2 dir="auto">Htop 和 Btop</h2>\n<p dir="auto"><a href="https://htop.dev/" rel="nofollow">Htop</a> 是一个基于 C 编写的跨平台的交互式流程查看器，<code class="notranslate">htop</code> 是 <code class="notranslate">top</code> 的一个增强替代品，提供了更加友好的用户界面和更多的功能，相比系统自带的 <code class="notranslate">top</code> 更加直观好用。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sudo dnf install htop"><pre class="notranslate">sudo dnf install htop</pre></div>\n<p dir="auto"><code class="notranslate">btop</code> 也是一个改进版的 Linux top 命令，这个命令不仅列出了各种系统使用情况，包括内存、磁盘、网络和进程，而且还允许与鼠标互动。即使是在服务器安装上，你也可以在 <code class="notranslate">btop</code> 上指指点点，以树形方式查看进程，隐藏或显示某些显示，并访问选项菜单，在那里你可以调整显示的外观和感觉。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sudo dnf install btop"><pre class="notranslate">sudo dnf install btop</pre></div>\n<h2 dir="auto">Docker 安装与使用</h2>\n<p dir="auto">主要参考《<a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-rocky-linux-9" rel="nofollow">How To Install and Use Docker on Rocky Linux 9</a>》，具体步骤如下：</p>\n<ul dir="auto">\n<li>\n<p dir="auto">add the official Docker repository</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo"><pre class="notranslate">sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</pre></div>\n</li>\n<li>\n<p dir="auto">install Docker</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sudo dnf install docker-ce docker-ce-cli containerd.io"><pre class="notranslate">sudo dnf install docker-ce docker-ce-cli containerd.io</pre></div>\n</li>\n<li>\n<p dir="auto">start the Docker daemon</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sudo systemctl start docker"><pre class="notranslate">sudo systemctl start docker</pre></div>\n</li>\n<li>\n<p dir="auto">Verify that it’s running</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sudo systemctl status docker"><pre class="notranslate">sudo systemctl status docker</pre></div>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Output\n● docker.service - Docker Application Container Engine\n   Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)\n   Active: active (running) since Sun 2016-05-01 06:53:52 CDT; 1 weeks 3 days ago\n     Docs: https://docs.docker.com\n Main PID: 749 (docker)"><pre class="notranslate"><code class="notranslate">Output\n● docker.service - Docker Application Container Engine\n   Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)\n   Active: active (running) since Sun 2016-05-01 06:53:52 CDT; 1 weeks 3 days ago\n     Docs: https://docs.docker.com\n Main PID: 749 (docker)\n</code></pre></div>\n</li>\n<li>\n<p dir="auto">make sure it starts at every server reboot</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sudo systemctl enable docker"><pre class="notranslate">sudo systemctl <span class="pl-c1">enable</span> docker</pre></div>\n</li>\n<li>\n<p dir="auto">配置非 root 用户使用 Docker</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sudo usermod -aG docker username\nnewgrp docker                     #更新docker用户组"><pre class="notranslate">sudo usermod -aG docker username\nnewgrp docker                     <span class="pl-c"><span class="pl-c">#</span>更新docker用户组</span></pre></div>\n</li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.3-折腾'}, 'labels': {'nodes': [{'name': '1.3.17-服务器配置使用'}]}, 'comments': {'nodes': []}}, {'title': '我的随笔和博客', 'number': 59, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/59', 'createdAt': '2024-03-04T01:27:09Z', 'lastEditedAt': None, 'updatedAt': '2024-03-04T01:27:10Z', 'body': '我的站点中把[随笔](https://weiyan.cc/note/)和[博客](https://weiyan.cc/blog/)分成了两个平行的导航，其实内容是一样的，只是原文托管的平台不一样而已。\r\n\r\n<!-- more -->\r\n\r\n[随笔](https://weiyan.cc/note/) 的内容最开始是在语雀的[随笔与乱弹](https://www.yuque.com/shenweiyan/notebook)写的，导出来后加到现在的站点中，独立成了现在看到的[随笔](https://weiyan.cc/note/)。[博客](https://weiyan.cc/blog/) 则是从 2023 年起写在 [Knowledge-Garden](https://github.com/shenweiyan/Knowledge-Garden) 的 [discussions](https://github.com/shenweiyan/Knowledge-Garden/discussions/) 上的一些非技术相关杂文。', 'bodyText': '我的站点中把随笔和博客分成了两个平行的导航，其实内容是一样的，只是原文托管的平台不一样而已。\n\n随笔 的内容最开始是在语雀的随笔与乱弹写的，导出来后加到现在的站点中，独立成了现在看到的随笔。博客 则是从 2023 年起写在 Knowledge-Garden 的 discussions 上的一些非技术相关杂文。', 'bodyHTML': '<p dir="auto">我的站点中把<a href="https://weiyan.cc/note/" rel="nofollow">随笔</a>和<a href="https://weiyan.cc/blog/" rel="nofollow">博客</a>分成了两个平行的导航，其实内容是一样的，只是原文托管的平台不一样而已。</p>\n\n<p dir="auto"><a href="https://weiyan.cc/note/" rel="nofollow">随笔</a> 的内容最开始是在语雀的<a href="https://www.yuque.com/shenweiyan/notebook" rel="nofollow">随笔与乱弹</a>写的，导出来后加到现在的站点中，独立成了现在看到的<a href="https://weiyan.cc/note/" rel="nofollow">随笔</a>。<a href="https://weiyan.cc/blog/" rel="nofollow">博客</a> 则是从 2023 年起写在 <a href="https://github.com/shenweiyan/Knowledge-Garden">Knowledge-Garden</a> 的 <a href="https://github.com/shenweiyan/Knowledge-Garden/discussions/">discussions</a> 上的一些非技术相关杂文。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '如今迈步从头越', 'number': 58, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/58', 'createdAt': '2024-02-20T03:57:52Z', 'lastEditedAt': '2024-08-06T07:13:06Z', 'updatedAt': '2024-08-06T07:13:06Z', 'body': "2024 年应该是不太平凡的一年，农历新年后经历了很多的事情，生活也好工作也好，都不太平静。\r\n\r\n<!-- more -->\r\n\r\n尤其对于工作而言，有一些更加深入的体会，明白很多人和事都并非表面那么简单。职场多年一路走来，曾经的迷茫不解，焦虑，纠结，吐槽，走到最后不由得越来越小心翼翼、如履薄冰。时间实际上是人的积极存在，它不仅是人的生命的尺度，而且是人的发展的空间。总的来说，更加要学会保护好自己，做事情多留点心，多一些思考。      \r\n<img src='https://kg.weiyan.cc/2024/08/forest-road.jpg' width=600 alt='美丽的林间公路风景'>\r\n\r\n人家说，能力也大，责任越大。对于个人职业和工作，更多的是权限越大，责任越大，任何的权限并非是越大越好。", 'bodyText': '2024 年应该是不太平凡的一年，农历新年后经历了很多的事情，生活也好工作也好，都不太平静。\n\n尤其对于工作而言，有一些更加深入的体会，明白很多人和事都并非表面那么简单。职场多年一路走来，曾经的迷茫不解，焦虑，纠结，吐槽，走到最后不由得越来越小心翼翼、如履薄冰。时间实际上是人的积极存在，它不仅是人的生命的尺度，而且是人的发展的空间。总的来说，更加要学会保护好自己，做事情多留点心，多一些思考。\n\n人家说，能力也大，责任越大。对于个人职业和工作，更多的是权限越大，责任越大，任何的权限并非是越大越好。', 'bodyHTML': '<p dir="auto">2024 年应该是不太平凡的一年，农历新年后经历了很多的事情，生活也好工作也好，都不太平静。</p>\n\n<p dir="auto">尤其对于工作而言，有一些更加深入的体会，明白很多人和事都并非表面那么简单。职场多年一路走来，曾经的迷茫不解，焦虑，纠结，吐槽，走到最后不由得越来越小心翼翼、如履薄冰。时间实际上是人的积极存在，它不仅是人的生命的尺度，而且是人的发展的空间。总的来说，更加要学会保护好自己，做事情多留点心，多一些思考。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/2876ae6133511ab0e4bec672b9dcdef87569053bb3b6c71814d78fde9ecfe393/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f666f726573742d726f61642e6a7067"><img src="https://camo.githubusercontent.com/2876ae6133511ab0e4bec672b9dcdef87569053bb3b6c71814d78fde9ecfe393/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f666f726573742d726f61642e6a7067" width="600" alt="美丽的林间公路风景" data-canonical-src="https://kg.weiyan.cc/2024/08/forest-road.jpg" style="max-width: 100%;"></a></p>\n<p dir="auto">人家说，能力也大，责任越大。对于个人职业和工作，更多的是权限越大，责任越大，任何的权限并非是越大越好。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '使用 Planemo 进行 Galaxy 工具开发', 'number': 57, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/57', 'createdAt': '2024-02-04T08:26:38Z', 'lastEditedAt': None, 'updatedAt': '2024-04-24T06:29:34Z', 'body': '> 说明：本文章原文发布于 《[使用 Planemo 进行 Galaxy 工具开发 - 语雀](https://www.yuque.com/shenweiyan/biox/planemo-for-galaxy)》，部分内容已更新。\r\n\r\n文章开始前，我们先了解一下 Planemo 到底是个什么东西。\r\n\r\n> Command-line utilities to assist in developing [Galaxy](http://galaxyproject.org/) and [Common Workflow Language](https://www.commonwl.org/) artifacts - including tools, workflows, and training materials.\r\n\r\n说白了，Planemo 就是用于 Galaxy 平台工具和 WDL 通用工作流语言相关产品辅助开发的一个命令行工具，这个程序集可以用于工具、流程，以及培训教材的开发。\r\n\r\n<!-- more -->\r\n\r\n## 安装 Planemo \r\n\r\n无论是 pip 还是 conda 都可以安装 Planemo：\r\n```bash\r\n$ pip install planemo\r\n$ pip install -U git+git://github.com/galaxyproject/planemo.git\r\n```\r\n```bash\r\n$ conda config --add channels bioconda\r\n$ conda config --add channels conda-forge\r\n$ conda install planemo\r\n```\r\n\r\n接下来，进入今天的正题，我们来详细介绍一下怎么使用 Planemo 进行 Galaxy 工具开发。\r\n\r\n## 基础用法\r\n\r\n本指南将演示如何使用 Heng Li 的 `Seqtk` 软件包构建命令工具，该软件包用于处理 FASTA 和 FASTQ 文件中的序列数据。\r\n\r\n首先，我们需要先安装 `Seqtk` 。在这里，我们使用 `conda` 来安装 `Seqtk` (你也可以使用其他的方法安装)。\r\n```bash\r\n$ conda install --force --yes -c conda-forge -c bioconda seqtk=1.2\r\n    ... seqtk installation ...\r\n$ seqtk seq\r\n        Usage:   seqtk seq [options] <in.fq>|<in.fa>\r\n        Options: -q INT    mask bases with quality lower than INT [0]\r\n                 -X INT    mask bases with quality higher than INT [255]\r\n                 -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\r\n                 -l INT    number of residues per line; 0 for 2^32-1 [0]\r\n                 -Q INT    quality shift: ASCII-INT gives base quality [33]\r\n                 -s INT    random seed (effective with -f) [11]\r\n                 -f FLOAT  sample FLOAT fraction of sequences [1]\r\n                 -M FILE   mask regions in BED or name list FILE [null]\r\n                 -L INT    drop sequences with length shorter than INT [0]\r\n                 -c        mask complement region (effective with -M)\r\n                 -r        reverse complement\r\n                 -A        force FASTA output (discard quality)\r\n                 -C        drop comments at the header lines\r\n                 -N        drop sequences containing ambiguous bases\r\n                 -1        output the 2n-1 reads only\r\n                 -2        output the 2n reads only\r\n                 -V        shift quality by \'(-Q) - 33\'\r\n```\r\n接下来，我们将下载一个 FASTQ 示例文件，并测试一个简单的 Seqtk 命令 `seq` ，该命令将 FASTQ 文件转换为 FASTA。\r\n```bash\r\n$ wget https://raw.githubusercontent.com/galaxyproject/galaxy-test-data/master/2.fastq\r\n$ seqtk seq -A 2.fastq > 2.fasta\r\n$ cat 2.fasta\r\n>EAS54_6_R1_2_1_413_324\r\nCCCTTCTTGTCTTCAGCGTTTCTCC\r\n>EAS54_6_R1_2_1_540_792\r\nTTGGCAGGCCAAGGCCGATGGATCA\r\n>EAS54_6_R1_2_1_443_348\r\nGTTGCTTCTGGCGTGGGTGGGGGGG\r\n```\r\n有关功能齐全的 Seqtk 包封装，可以在 GitHub 上查看 [Helena Rasche\'s wrappers](https://github.com/galaxyproject/tools-iuc/tree/master/tools/seqtk)。\r\n\r\nGalaxy 工具文件只是 XML 文件，因此此时可以打开文本编辑器并开始编写工具。Planemo 有一个命令 `tool_init` 可以快速生成一些样板 XML，因此首先开始。\r\n```bash\r\n$ planemo tool_init --id \'seqtk_seq\' --name \'Convert to FASTA (seqtk)\'\r\n```\r\n`tool_init` 命令可以采用各种复杂的参数，但如上面展示的 `--id` 和 `--name` 是其中两个最基本的参数。每个 Galaxy 工具都需要一个 ID（这是 Galaxy 自身用来标识该工具的简短标识符）和一个名称（此名称会显示给 Galaxy 用户，并且应该是该工具的简短描述）。工具名称可以包含空格，但其 ID 不能包含空格。\r\n\r\n上面的命令将生成一个 seqtk_seq.xml 文件，这个文件看起来像这样：\r\n```xml\r\n<tool id="seqtk_seq" name="Convert to FASTA (seqtk)" version="0.1.0" python_template_version="3.5">\r\n    <requirements>\r\n    </requirements>\r\n    <command detect_errors="exit_code"><![CDATA[\r\n        TODO: Fill in command template.\r\n    ]]></command>\r\n    <inputs>\r\n    </inputs>\r\n    <outputs>\r\n    </outputs>\r\n    <help><![CDATA[\r\n        TODO: Fill in help.\r\n    ]]></help>\r\n</tool>\r\n```\r\n这个生成的模板 XML 文件具有了 Galaxy 工具所需的公共部分内容，但你仍然需要打开编辑器并填写命令模板、输入参数描述、工具输出信息、帮助部分信息等。\r\n\r\n`tool_init` 命令也可以做得更好。 们可以使用在 `seqtk seq -a 2.fastq> 2.fasta` 上面尝试过的测试命令作为示例，通过指定输入和输出来生成命令块，如下所示。\r\n```bash\r\n$ planemo tool_init --force \\\r\n                    --id \'seqtk_seq\' \\\r\n                    --name \'Convert to FASTA (seqtk)\' \\\r\n                    --requirement seqtk@1.2 \\\r\n                    --example_command \'seqtk seq -a 2.fastq > 2.fasta\' \\\r\n                    --example_input 2.fastq \\\r\n                    --example_output 2.fasta\r\n```\r\n这将生成以下 XML 文件- 该文件具有正确的输入和输出定义以及实际的命令模板。\r\n```xml\r\n<tool id="seqtk_seq" name="Convert to FASTA (seqtk)" version="0.1.0" python_template_version="3.5">\r\n    <requirements>\r\n        <requirement type="package" version="1.2">seqtk</requirement>\r\n    </requirements>\r\n    <command detect_errors="exit_code"><![CDATA[\r\n        seqtk seq -a \'$input1\' > \'$output1\'\r\n    ]]></command>\r\n    <inputs>\r\n        <param type="data" name="input1" format="fastq" />\r\n    </inputs>\r\n    <outputs>\r\n        <data name="output1" format="fasta" />\r\n    </outputs>\r\n    <help><![CDATA[\r\n        TODO: Fill in help.\r\n    ]]></help>\r\n</tool>(\r\n```\r\n如本节开头所示，命令 `seqtk seq` 会为 `seq` 命令生成帮助消息。 `tool_init` 可以获取该帮助消息，并使用 `help_from_command` 选项将其正确粘贴在生成的工具 XML 文件中。\r\n\r\n通常，命令帮助消息并不完全适用于工具，因为它们会提到参数名称和由工具抽象出来的类似细节，但它们可能是一个很好的起点。\r\n\r\n以下 Planemo 的 `tool_init` 的调用已增强为使用 `--help_from_command`。\r\n```bash\r\n$ planemo tool_init --force \\\r\n                    --id \'seqtk_seq\' \\\r\n                    --name \'Convert to FASTA (seqtk)\' \\\r\n                    --requirement seqtk@1.2 \\\r\n                    --example_command \'seqtk seq -a 2.fastq > 2.fasta\' \\\r\n                    --example_input 2.fastq \\\r\n                    --example_output 2.fasta \\\r\n                    --test_case \\\r\n                    --cite_url \'https://github.com/lh3/seqtk\' \\\r\n                    --help_from_command \'seqtk seq\'\r\n```\r\n\r\n除了演示 `--help_from_command` 之外，这还演示了使用 `--test_case` 从我们的示例生成测试用例并为基础工具添加引用。生成的工具 XML 文件为：\r\n```xml\r\n<tool id="seqtk_seq" name="Convert to FASTA (seqtk)" version="0.1.0" python_template_version="3.5">\r\n    <requirements>\r\n        <requirement type="package" version="1.2">seqtk</requirement>\r\n    </requirements>\r\n    <command detect_errors="exit_code"><![CDATA[\r\n        seqtk seq -a \'$input1\' > \'$output1\'\r\n    ]]></command>\r\n    <inputs>\r\n        <param type="data" name="input1" format="fastq" />\r\n    </inputs>\r\n    <outputs>\r\n        <data name="output1" format="fasta" />\r\n    </outputs>\r\n    <tests>\r\n        <test>\r\n            <param name="input1" value="2.fastq"/>\r\n            <output name="output1" file="2.fasta"/>\r\n        </test>\r\n    </tests>\r\n    <help><![CDATA[\r\n\r\nUsage:   seqtk seq [options] <in.fq>|<in.fa>\r\n\r\nOptions: -q INT    mask bases with quality lower than INT [0]\r\n         -X INT    mask bases with quality higher than INT [255]\r\n         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\r\n         -l INT    number of residues per line; 0 for 2^32-1 [0]\r\n         -Q INT    quality shift: ASCII-INT gives base quality [33]\r\n         -s INT    random seed (effective with -f) [11]\r\n         -f FLOAT  sample FLOAT fraction of sequences [1]\r\n         -M FILE   mask regions in BED or name list FILE [null]\r\n         -L INT    drop sequences with length shorter than INT [0]\r\n         -c        mask complement region (effective with -M)\r\n         -r        reverse complement\r\n         -A        force FASTA output (discard quality)\r\n         -C        drop comments at the header lines\r\n         -N        drop sequences containing ambiguous bases\r\n         -1        output the 2n-1 reads only\r\n         -2        output the 2n reads only\r\n         -V        shift quality by \'(-Q) - 33\'\r\n         -U        convert all bases to uppercases\r\n         -S        strip of white spaces in sequences\r\n\r\n\r\n    ]]></help>\r\n    <citations>\r\n        <citation type="bibtex">\r\n@misc{githubseqtk,\r\n  author = {LastTODO, FirstTODO},\r\n  year = {TODO},\r\n  title = {seqtk},\r\n  publisher = {GitHub},\r\n  journal = {GitHub repository},\r\n  url = {https://github.com/lh3/seqtk},\r\n}</citation>\r\n    </citations>\r\n</tool>\r\n```\r\n\r\n至此，我们有了一个功能相当齐全的 Galaxy 工具，它带有测试和帮助。这是一个非常简单的示例——通常，您需要在工具中投入更多工作才能实现这一点， `tool_init` 实际上只是为了让您入门而设计的。\r\n\r\n现在让我们检查并测试我们开发的工具。Planemo的 `lint`（或仅 `l` ）命令将检查工具的 XML 有效性，检查是否有明显的错误以及是否符合 IUC 的最佳做法。\r\n```bash\r\n$ planemo l\r\nLinting tool /opt/galaxy/tools/seqtk_seq.xml\r\nApplying linter tests... CHECK\r\n.. CHECK: 1 test(s) found.\r\nApplying linter output... CHECK\r\n.. INFO: 1 outputs found.\r\nApplying linter inputs... CHECK\r\n.. INFO: Found 1 input parameters.\r\nApplying linter help... CHECK\r\n.. CHECK: Tool contains help section.\r\n.. CHECK: Help contains valid reStructuredText.\r\nApplying linter general... CHECK\r\n.. CHECK: Tool defines a version [0.1.0].\r\n.. CHECK: Tool defines a name [Convert to FASTA (seqtk)].\r\n.. CHECK: Tool defines an id [seqtk_seq].\r\n.. CHECK: Tool targets 16.01 Galaxy profile.\r\nApplying linter command... CHECK\r\n.. INFO: Tool contains a command.\r\nApplying linter citations... CHECK\r\n.. CHECK: Found 1 likely valid citations.\r\nApplying linter tool_xsd... CHECK\r\n.. INFO: File validates against XML schema.\r\n```\r\n默认情况下， `lint` 会在您当前的工作目录中找到所有工具，但是我们可以使用 `planemo lint seqtk_seq.xml` 指定一个特定的工具。\r\n\r\n接下来，我们可以使用 `test`（或仅执行 `t` ）命令运行工具的功能测试。这将打印很多输出（因为它启动了 Galaxy 实例），但最终应该显示我们通过的一项测试。\r\n\r\n> 如果你的服务器已经安装了 Galaxy 实例，你可以编辑 ~/.planemo.yml 文件，指定 Galaxy 实例路径。\r\n\r\n```yaml\r\n## Specify a default galaxy_root for the `test` and `serve` commands here.\r\ngalaxy_root: /home/user/galaxy\r\n```\r\n> 完整的 `~/.planemo.yml` 示例，参考：[https://planemo.readthedocs.io/en/latest/configuration.html](https://planemo.readthedocs.io/en/latest/configuration.html)\r\n\r\n```bash\r\n$ planemo t\r\n...\r\nAll 1 test(s) executed passed.\r\nseqtk_seq[0]: passed\r\n```\r\n除了在控制台中将测试结果显示为红色（失败）或绿色（通过）外，Planemo 还默认为测试结果创建 HTML 报告。 还有更多测试报告选项可用，例如 `--test_output_xunit`，在某些持续集成环境中很有用。有关更多选项，请参见 `planemo test --help` ，以及 `test_reports` 命令。\r\n\r\n现在，我们可以使用 `serve`（或仅使用 `s` ）命令打开 Galaxy。\r\n```bash\r\n$ planemo s\r\n...\r\nserving on http://127.0.0.1:9090\r\n```\r\n\r\n在网络浏览器中打开 [http://127.0.0.1:9090](http://127.0.0.1:9090) 以查看您的新工具。\r\n\r\n服务和测试可以通过各种命令行参数传递，例如 `--galaxy_root`，以指定要使用的 Galaxy 实例（默认情况下，planemo 将仅为 planemo 下载和管理实例）。\r\n\r\n## 简单参数\r\n\r\n我们为 `seqtk seq` 命令构建了一个工具包的封装，但是该工具实际上具有我们可能希望向 Galaxy 用户公开的其他选项。\r\n\r\n让我们从 `help` 命令中获取一些参数，并构建 Galaxy 的 `param` 块以粘贴到该工具的 `input` 块中。\r\n```bash\r\n-V        shift quality by \'(-Q) - 33\'\r\n```\r\n\r\n在上一节中，我们看到了输入文件在 `param` 块中是一个 `data` 的类型，除此之外我们还可以使用许多不同种类的参数。如标志参数（例如以上 `-V` 参数），通常在 Galaxy 工具的 XML 文件中由 `boolean` 来表示。\r\n```xml\r\n<param name="shift_quality" type="boolean" label="Shift quality"\r\n       truevalue="-V" falsevalue=""\r\n       help="shift quality by \'(-Q) - 33\' (-V)" />\r\n```\r\n然后，我们可以将 `$shift_quality` 粘贴在 `command` 块中，如果用户选择了此选项，它将扩展为 `-V` （因为我们已将其定义为 `truevalue` ）。如果用户未选择此选项，则 `$shift_quality` 将仅扩展为空字符串，而不会影响生成的命令行。\r\n\r\n现在考虑以下的 `seqtk seq` 参数：\r\n```bash\r\n-q INT    mask bases with quality lower than INT [0]\r\n-X INT    mask bases with quality higher than INT [255]\r\n```\r\n\r\n这些可以转换为 Galaxy 参数，如下所示：\r\n```xml\r\n<param name="quality_min" type="integer" label="Mask bases with quality lower than"\r\n       value="0" min="0" max="255" help="(-q)" />\r\n<param name="quality_max" type="integer" label="Mask bases with quality higher than"\r\n       value="255" min="0" max="255" help="(-X)" />\r\n```\r\n\r\n这些可以作为 `-q $quality_min -X $quality_max` 添加到命令标签中。\r\n\r\n此时，该工具将如下所示：\r\n```xml\r\n<tool id="seqtk_seq" name="Convert to FASTA (seqtk)" version="0.1.0" python_template_version="3.5">\r\n    <requirements>\r\n        <requirement type="package" version="1.2">seqtk</requirement>\r\n    </requirements>\r\n    <command detect_errors="exit_code"><![CDATA[\r\n        seqtk seq\r\n              $shift_quality\r\n              -q $quality_min\r\n              -X $quality_max\r\n              -a \'$input1\' > \'$output1\'\r\n    ]]></command>\r\n    <inputs>\r\n        <param type="data" name="input1" format="fastq" />\r\n        <param name="shift_quality" type="boolean" label="Shift quality" \r\n               truevalue="-V" falsevalue=""\r\n               help="shift quality by \'(-Q) - 33\' (-V)" />\r\n        <param name="quality_min" type="integer" label="Mask bases with quality lower than" \r\n               value="0" min="0" max="255" help="(-q)" />\r\n        <param name="quality_max" type="integer" label="Mask bases with quality higher than" \r\n               value="255" min="0" max="255" help="(-X)" />\r\n    </inputs>\r\n    <outputs>\r\n        <data name="output1" format="fasta" />\r\n    </outputs>\r\n    <tests>\r\n        <test>\r\n            <param name="input1" value="2.fastq"/>\r\n            <output name="output1" file="2.fasta"/>\r\n        </test>\r\n    </tests>\r\n    <help><![CDATA[\r\n        \r\nUsage:   seqtk seq [options] <in.fq>|<in.fa>\r\n\r\nOptions: -q INT    mask bases with quality lower than INT [0]\r\n         -X INT    mask bases with quality higher than INT [255]\r\n         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\r\n         -l INT    number of residues per line; 0 for 2^32-1 [0]\r\n         -Q INT    quality shift: ASCII-INT gives base quality [33]\r\n         -s INT    random seed (effective with -f) [11]\r\n         -f FLOAT  sample FLOAT fraction of sequences [1]\r\n         -M FILE   mask regions in BED or name list FILE [null]\r\n         -L INT    drop sequences with length shorter than INT [0]\r\n         -c        mask complement region (effective with -M)\r\n         -r        reverse complement\r\n         -A        force FASTA output (discard quality)\r\n         -C        drop comments at the header lines\r\n         -N        drop sequences containing ambiguous bases\r\n         -1        output the 2n-1 reads only\r\n         -2        output the 2n reads only\r\n         -V        shift quality by \'(-Q) - 33\'\r\n         -U        convert all bases to uppercases\r\n\r\n\r\n    ]]></help>\r\n    <citations>\r\n        <citation type="bibtex">\r\n@misc{githubseqtk,\r\n  author = {LastTODO, FirstTODO},\r\n  year = {TODO},\r\n  title = {seqtk},\r\n  publisher = {GitHub},\r\n  journal = {GitHub repository},\r\n  url = {https://github.com/lh3/seqtk},\r\n}</citation>\r\n    </citations>\r\n</tool>\r\n```\r\n\r\n## 条件参数\r\n\r\n以前的参数很简单，因为它们总是出现，现在考虑一下下面的参数。\r\n```bash\r\n-M FILE   mask regions in BED or name list FILE [null]\r\n```\r\n\r\n我们可以通过添加属性 `optional ="true"` 将该数据类型参数标记为可选。\r\n```xml\r\n<param name="mask_regions" type="data" label="Mask regions in BED"\r\n       format="bed" help="(-M)" optional="true" />\r\n```\r\n\r\n然后，不仅可以直接在命令块中使用 `$mask_regions`，还可以将其包装在 `if` 语句中（因为工具 XML 文件支持 [Cheetah](https://cheetahtemplate.org/users_guide/index.html)）。\r\n```xml\r\n#if $mask_regions\r\n-M \'$mask_regions\'\r\n#end if\r\n```\r\n\r\n\r\n接着，我们考虑这一组参数：\r\n```bash\r\n-s INT    random seed (effective with -f) [11]\r\n-f FLOAT  sample FLOAT fraction of sequences [1]\r\n```\r\n\r\n在这种情况下，只有在设置了样本参数的情况下，才能看到或使用 `-s` 随机种子参数。我们可以使用 `conditional` 条件块来表达这一点。\r\n```xml\r\n<conditional name="sample">\r\n    <param name="sample_selector" type="boolean" label="Sample fraction of sequences" />\r\n    <when value="true">\r\n        <param name="fraction" label="Fraction" type="float" value="1.0"\r\n               help="(-f)" />\r\n        <param name="seed" label="Random seed" type="integer" value="11"\r\n               help="(-s)" />\r\n    </when>\r\n    <when value="false">\r\n    </when>\r\n</conditional>\r\n```\r\n\r\n在命令块中，我们可以再次使用 `if` 语句包括这些参数。\r\n```xml\r\n#if $sample.sample_selector\r\n-f $sample.fraction -s $sample.seed\r\n#end if\r\n```\r\n\r\n注意，我们必须使用 `sample.` 的前缀来引用这个参数，因为它们是在 `sample` 的条件块内定义的。\r\n\r\n现在该工具的最新版本如下：\r\n```xml\r\n<tool id="seqtk_seq" name="Convert to FASTA (seqtk)" version="0.1.0" python_template_version="3.5">\r\n    <requirements>\r\n        <requirement type="package" version="1.2">seqtk</requirement>\r\n    </requirements>\r\n    <command detect_errors="exit_code"><![CDATA[\r\n        seqtk seq\r\n              $shift_quality\r\n              -q $quality_min\r\n              -X $quality_max\r\n              #if $mask_regions\r\n                  -M \'$mask_regions\'\r\n              #end if\r\n              #if $sample.sample\r\n                  -f $sample.fraction\r\n                  -s $sample.seed\r\n              #end if\r\n              -a \'$input1\' > \'$output1\'\r\n    ]]></command>\r\n    <inputs>\r\n        <param type="data" name="input1" format="fastq" />\r\n        <param name="shift_quality" type="boolean" label="Shift quality" \r\n               truevalue="-V" falsevalue=""\r\n               help="shift quality by \'(-Q) - 33\' (-V)" />\r\n        <param name="quality_min" type="integer" label="Mask bases with quality lower than" \r\n               value="0" min="0" max="255" help="(-q)" />\r\n        <param name="quality_max" type="integer" label="Mask bases with quality higher than" \r\n               value="255" min="0" max="255" help="(-X)" />\r\n        <param name="mask_regions" type="data" label="Mask regions in BED" \r\n               format="bed" help="(-M)" optional="true" />\r\n        <conditional name="sample">\r\n            <param name="sample" type="boolean" label="Sample fraction of sequences" />\r\n            <when value="true">\r\n                <param name="fraction" label="Fraction" type="float" value="1.0"\r\n                       help="(-f)" />\r\n                <param name="seed" label="Random seed" type="integer" value="11"\r\n                       help="(-s)" />\r\n            </when>\r\n            <when value="false">\r\n            </when>\r\n        </conditional>\r\n    </inputs>\r\n    <outputs>\r\n        <data name="output1" format="fasta" />\r\n    </outputs>\r\n    <tests>\r\n        <test>\r\n            <param name="input1" value="2.fastq"/>\r\n            <output name="output1" file="2.fasta"/>\r\n        </test>\r\n    </tests>\r\n    <help><![CDATA[\r\n        \r\nUsage:   seqtk seq [options] <in.fq>|<in.fa>\r\n\r\nOptions: -q INT    mask bases with quality lower than INT [0]\r\n         -X INT    mask bases with quality higher than INT [255]\r\n         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\r\n         -l INT    number of residues per line; 0 for 2^32-1 [0]\r\n         -Q INT    quality shift: ASCII-INT gives base quality [33]\r\n         -s INT    random seed (effective with -f) [11]\r\n         -f FLOAT  sample FLOAT fraction of sequences [1]\r\n         -M FILE   mask regions in BED or name list FILE [null]\r\n         -L INT    drop sequences with length shorter than INT [0]\r\n         -c        mask complement region (effective with -M)\r\n         -r        reverse complement\r\n         -A        force FASTA output (discard quality)\r\n         -C        drop comments at the header lines\r\n         -N        drop sequences containing ambiguous bases\r\n         -1        output the 2n-1 reads only\r\n         -2        output the 2n reads only\r\n         -V        shift quality by \'(-Q) - 33\'\r\n         -U        convert all bases to uppercases\r\n\r\n\r\n    ]]></help>\r\n    <citations>\r\n        <citation type="bibtex">\r\n@misc{githubseqtk,\r\n  author = {LastTODO, FirstTODO},\r\n  year = {TODO},\r\n  title = {seqtk},\r\n  publisher = {GitHub},\r\n  journal = {GitHub repository},\r\n  url = {https://github.com/lh3/seqtk},\r\n}</citation>\r\n    </citations>\r\n</tool>\r\n```\r\n对于这样的工具，这些工具有很多选项，但在大多数情况下使用默认值是首选——一个常见的习惯用法是使用条件将参数分为简单部分和高级部分。\r\n\r\n使用惯用法，更新此工具后的 XML 如下所示：\r\n```xml\r\n<tool id="seqtk_seq" name="Convert to FASTA (seqtk)" version="0.1.0" python_template_version="3.5">\r\n    <requirements>\r\n        <requirement type="package" version="1.2">seqtk</requirement>\r\n    </requirements>\r\n    <command detect_errors="exit_code"><![CDATA[\r\n        seqtk seq\r\n              #if $settings.advanced == "advanced"\r\n                  $settings.shift_quality\r\n                  -q $settings.quality_min\r\n                  -X $settings.quality_max\r\n                  #if $settings.mask_regions\r\n                      -M \'$settings.mask_regions\'\r\n                  #end if\r\n                  #if $settings.sample.sample\r\n                      -f $settings.sample.fraction\r\n                      -s $settings.sample.seed\r\n                  #end if\r\n              #end if\r\n              -a \'$input1\' > \'$output1\'\r\n    ]]></command>\r\n    <inputs>\r\n        <param type="data" name="input1" format="fastq" />\r\n        <conditional name="settings">\r\n            <param name="advanced" type="select" label="Specify advanced parameters">\r\n                <option value="simple" selected="true">No, use program defaults.</option>\r\n                <option value="advanced">Yes, see full parameter list.</option>\r\n            </param>\r\n            <when value="simple">\r\n            </when>\r\n            <when value="advanced">\r\n                <param name="shift_quality" type="boolean" label="Shift quality" \r\n                       truevalue="-V" falsevalue=""\r\n                       help="shift quality by \'(-Q) - 33\' (-V)" />\r\n                <param name="quality_min" type="integer" label="Mask bases with quality lower than" \r\n                       value="0" min="0" max="255" help="(-q)" />\r\n                <param name="quality_max" type="integer" label="Mask bases with quality higher than" \r\n                       value="255" min="0" max="255" help="(-X)" />\r\n                <param name="mask_regions" type="data" label="Mask regions in BED" \r\n                       format="bed" help="(-M)" optional="true" />\r\n                <conditional name="sample">\r\n                    <param name="sample" type="boolean" label="Sample fraction of sequences" />\r\n                    <when value="true">\r\n                        <param name="fraction" label="Fraction" type="float" value="1.0"\r\n                               help="(-f)" />\r\n                        <param name="seed" label="Random seed" type="integer" value="11"\r\n                               help="(-s)" />\r\n                    </when>\r\n                    <when value="false">\r\n                    </when>\r\n                </conditional>\r\n            </when>\r\n        </conditional>\r\n    </inputs>\r\n    <outputs>\r\n        <data name="output1" format="fasta" />\r\n    </outputs>\r\n    <tests>\r\n        <test>\r\n            <param name="input1" value="2.fastq"/>\r\n            <output name="output1" file="2.fasta"/>\r\n        </test>\r\n    </tests>\r\n    <help><![CDATA[\r\n        \r\nUsage:   seqtk seq [options] <in.fq>|<in.fa>\r\n\r\nOptions: -q INT    mask bases with quality lower than INT [0]\r\n         -X INT    mask bases with quality higher than INT [255]\r\n         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\r\n         -l INT    number of residues per line; 0 for 2^32-1 [0]\r\n         -Q INT    quality shift: ASCII-INT gives base quality [33]\r\n         -s INT    random seed (effective with -f) [11]\r\n         -f FLOAT  sample FLOAT fraction of sequences [1]\r\n         -M FILE   mask regions in BED or name list FILE [null]\r\n         -L INT    drop sequences with length shorter than INT [0]\r\n         -c        mask complement region (effective with -M)\r\n         -r        reverse complement\r\n         -A        force FASTA output (discard quality)\r\n         -C        drop comments at the header lines\r\n         -N        drop sequences containing ambiguous bases\r\n         -1        output the 2n-1 reads only\r\n         -2        output the 2n reads only\r\n         -V        shift quality by \'(-Q) - 33\'\r\n         -U        convert all bases to uppercases\r\n\r\n\r\n    ]]></help>\r\n    <citations>\r\n        <citation type="bibtex">\r\n@misc{githubseqtk,\r\n  author = {LastTODO, FirstTODO},\r\n  year = {TODO},\r\n  title = {seqtk},\r\n  publisher = {GitHub},\r\n  journal = {GitHub repository},\r\n  url = {https://github.com/lh3/seqtk},\r\n}</citation>\r\n    </citations>\r\n</tool>\r\n```\r\n\r\n## 脚本封装\r\n\r\nTool Shed 上已经提供了许多常见的生物信息学应用程序，因此一项常见的开发任务是将各种复杂程度的脚本集成到 Galaxy 中。\r\n\r\n考虑以下小型 Perl 脚本。\r\n```perl\r\n#!/usr/bin/perl -w\r\n\r\n# usage : perl toolExample.pl <FASTA file> <output file>\r\n\r\nopen (IN, "<$ARGV[0]");\r\nopen (OUT, ">$ARGV[1]");\r\nwhile (<IN>) {\r\n    chop;\r\n    if (m/^>/) {\r\n        s/^>//;\r\n        if ($. > 1) {\r\n            print OUT sprintf("%.3f", $gc/$length) . "\\n";\r\n        }\r\n        $gc = 0;\r\n        $length = 0;\r\n    } else {\r\n        ++$gc while m/[gc]/ig;\r\n        $length += length $_;\r\n    }\r\n}\r\nprint OUT sprintf("%.3f", $gc/$length) . "\\n";\r\nclose( IN );\r\nclose( OUT );\r\n```\r\n\r\n可以按照以下步骤为此脚本构建 Galaxy 工具，并将脚本与工具 XML 文件本身放在同一目录中。这里的特殊值 `$__ tool_directory__` 是指工具（即 xml 文件）所在的目录。\r\n```xml\r\n<tool id="gc_content" name="Compute GC content">\r\n  <description>for each sequence in a file</description>\r\n  <command>perl \'$__tool_directory__/gc_content.pl\' \'$input\' output.tsv</command>\r\n  <inputs>\r\n    <param name="input" type="data" format="fasta" label="Source file"/>\r\n  </inputs>\r\n  <outputs>\r\n    <data name="output" format="tabular" from_work_dir="output.tsv" />\r\n  </outputs>\r\n  <help>\r\nThis tool computes GC content from a FASTA file.\r\n  </help>\r\n</tool>\r\n```\r\n\r\n## Macros 宏集\r\n\r\n如果您希望为单个相对简单的应用程序或脚本编写工具，则应跳过本节。如果您希望维护一系列相关工具——经验表明，您将意识到有很多重复的 XML 可以很好地做到这一点。Galaxy工具 XML 宏可以帮助减少这种重复。\r\n\r\n通过使用 `--macros` 标志，Planemo 的 `tool_init` 命令可用于生成适合工具套件的宏文件。我们看一下以前的 `tool_init` 命令的变体（唯一的区别是现在我们添加了 `--macros` 标志）。\r\n```bash\r\n$ planemo tool_init --force \\\r\n                    --macros \\\r\n                    --id \'seqtk_seq\' \\\r\n                    --name \'Convert to FASTA (seqtk)\' \\\r\n                    --requirement seqtk@1.2 \\\r\n                    --example_command \'seqtk seq -A 2.fastq > 2.fasta\' \\\r\n                    --example_input 2.fastq \\\r\n                    --example_output 2.fasta \\\r\n                    --test_case \\\r\n                    --help_from_command \'seqtk seq\'\r\n```\r\n这将在当前目录中产生两个文件（ `seqtk_seq.xml` 和 `macros.xml`），而不是一个。\r\n```xml\r\n<tool id="seqtk_seq" name="Convert to FASTA (seqtk)" version="0.1.0" python_template_version="3.5">\r\n    <macros>\r\n        <import>macros.xml</import>\r\n    </macros>\r\n    <expand macro="requirements" />\r\n    <command detect_errors="exit_code"><![CDATA[\r\n        seqtk seq -A \'$input1\' > \'$output1\'\r\n    ]]></command>\r\n    <inputs>\r\n        <param type="data" name="input1" format="fastq" />\r\n    </inputs>\r\n    <outputs>\r\n        <data name="output1" format="fasta" />\r\n    </outputs>\r\n    <tests>\r\n        <test>\r\n            <param name="input1" value="2.fastq"/>\r\n            <output name="output1" file="2.fasta"/>\r\n        </test>\r\n    </tests>\r\n    <help><![CDATA[\r\n\r\nUsage:   seqtk seq [options] <in.fq>|<in.fa>\r\n\r\nOptions: -q INT    mask bases with quality lower than INT [0]\r\n         -X INT    mask bases with quality higher than INT [255]\r\n         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\r\n         -l INT    number of residues per line; 0 for 2^32-1 [0]\r\n         -Q INT    quality shift: ASCII-INT gives base quality [33]\r\n         -s INT    random seed (effective with -f) [11]\r\n         -f FLOAT  sample FLOAT fraction of sequences [1]\r\n         -M FILE   mask regions in BED or name list FILE [null]\r\n         -L INT    drop sequences with length shorter than INT [0]\r\n         -c        mask complement region (effective with -M)\r\n         -r        reverse complement\r\n         -A        force FASTA output (discard quality)\r\n         -C        drop comments at the header lines\r\n         -N        drop sequences containing ambiguous bases\r\n         -1        output the 2n-1 reads only\r\n         -2        output the 2n reads only\r\n         -V        shift quality by \'(-Q) - 33\'\r\n         -U        convert all bases to uppercases\r\n         -S        strip of white spaces in sequences\r\n\r\n\r\n    ]]></help>\r\n    <expand macro="citations" />\r\n</tool>\r\n```\r\n```xml\r\n<macros>\r\n    <xml name="requirements">\r\n        <requirements>\r\n        <requirement type="package" version="1.2">seqtk</requirement>\r\n            <yield/>\r\n        </requirements>\r\n    </xml>\r\n    <xml name="citations">\r\n        <citations>\r\n            <yield />\r\n        </citations>\r\n    </xml>\r\n</macros>\r\n```\r\n\r\n如您在上面的代码中所看到的，宏是可重用的 XML 块，它们使避免重复和保持 XML 简洁变得更加容易。\r\n\r\n\r\n## 参考资料\r\n\r\n- [Macros syntax](https://wiki.galaxyproject.org/Admin/Tools/ToolConfigSyntax#Reusing_Repeated_Configuration_Elements) on the Galaxy Wiki.\r\n- [GATK tools](https://github.com/galaxyproject/tools-iuc/tree/master/tools/gatk2) (example tools making extensive use of macros)\r\n- [gemini tools](https://github.com/galaxyproject/tools-iuc/tree/master/tools/gemini) (example tools making extensive use of macros)\r\n- [bedtools tools](https://github.com/galaxyproject/tools-iuc/tree/master/tools/bedtools) (example tools making extensive use of macros)\r\n- Macros implementation details - [Pull Request #129](https://bitbucket.org/galaxy/galaxy-central/pull-request/129/implement-macro-engine-to-reduce-tool/diff) and [Pull Request #140](https://bitbucket.org/galaxy/galaxy-central/pull-request/140/improvements-to-tool-xml-macroing-system/diff)\r\n- [Galaxy’s Tool XML Syntax](https://docs.galaxyproject.org/en/latest/dev/schema.html)\r\n- [Big List of Tool Development Resources](https://galaxyproject.org/develop/resources-tools/)\r\n- [Cheetah templating](https://cheetahtemplate.org/users_guide/index.html)', 'bodyText': '说明：本文章原文发布于 《使用 Planemo 进行 Galaxy 工具开发 - 语雀》，部分内容已更新。\n\n文章开始前，我们先了解一下 Planemo 到底是个什么东西。\n\nCommand-line utilities to assist in developing Galaxy and Common Workflow Language artifacts - including tools, workflows, and training materials.\n\n说白了，Planemo 就是用于 Galaxy 平台工具和 WDL 通用工作流语言相关产品辅助开发的一个命令行工具，这个程序集可以用于工具、流程，以及培训教材的开发。\n\n安装 Planemo\n无论是 pip 还是 conda 都可以安装 Planemo：\n$ pip install planemo\n$ pip install -U git+git://github.com/galaxyproject/planemo.git\n$ conda config --add channels bioconda\n$ conda config --add channels conda-forge\n$ conda install planemo\n接下来，进入今天的正题，我们来详细介绍一下怎么使用 Planemo 进行 Galaxy 工具开发。\n基础用法\n本指南将演示如何使用 Heng Li 的 Seqtk 软件包构建命令工具，该软件包用于处理 FASTA 和 FASTQ 文件中的序列数据。\n首先，我们需要先安装 Seqtk 。在这里，我们使用 conda 来安装 Seqtk (你也可以使用其他的方法安装)。\n$ conda install --force --yes -c conda-forge -c bioconda seqtk=1.2\n    ... seqtk installation ...\n$ seqtk seq\n        Usage:   seqtk seq [options] <in.fq>|<in.fa>\n        Options: -q INT    mask bases with quality lower than INT [0]\n                 -X INT    mask bases with quality higher than INT [255]\n                 -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\n                 -l INT    number of residues per line; 0 for 2^32-1 [0]\n                 -Q INT    quality shift: ASCII-INT gives base quality [33]\n                 -s INT    random seed (effective with -f) [11]\n                 -f FLOAT  sample FLOAT fraction of sequences [1]\n                 -M FILE   mask regions in BED or name list FILE [null]\n                 -L INT    drop sequences with length shorter than INT [0]\n                 -c        mask complement region (effective with -M)\n                 -r        reverse complement\n                 -A        force FASTA output (discard quality)\n                 -C        drop comments at the header lines\n                 -N        drop sequences containing ambiguous bases\n                 -1        output the 2n-1 reads only\n                 -2        output the 2n reads only\n                 -V        shift quality by \'(-Q) - 33\'\n接下来，我们将下载一个 FASTQ 示例文件，并测试一个简单的 Seqtk 命令 seq ，该命令将 FASTQ 文件转换为 FASTA。\n$ wget https://raw.githubusercontent.com/galaxyproject/galaxy-test-data/master/2.fastq\n$ seqtk seq -A 2.fastq > 2.fasta\n$ cat 2.fasta\n>EAS54_6_R1_2_1_413_324\nCCCTTCTTGTCTTCAGCGTTTCTCC\n>EAS54_6_R1_2_1_540_792\nTTGGCAGGCCAAGGCCGATGGATCA\n>EAS54_6_R1_2_1_443_348\nGTTGCTTCTGGCGTGGGTGGGGGGG\n有关功能齐全的 Seqtk 包封装，可以在 GitHub 上查看 Helena Rasche\'s wrappers。\nGalaxy 工具文件只是 XML 文件，因此此时可以打开文本编辑器并开始编写工具。Planemo 有一个命令 tool_init 可以快速生成一些样板 XML，因此首先开始。\n$ planemo tool_init --id \'seqtk_seq\' --name \'Convert to FASTA (seqtk)\'\ntool_init 命令可以采用各种复杂的参数，但如上面展示的 --id 和 --name 是其中两个最基本的参数。每个 Galaxy 工具都需要一个 ID（这是 Galaxy 自身用来标识该工具的简短标识符）和一个名称（此名称会显示给 Galaxy 用户，并且应该是该工具的简短描述）。工具名称可以包含空格，但其 ID 不能包含空格。\n上面的命令将生成一个 seqtk_seq.xml 文件，这个文件看起来像这样：\n<tool id="seqtk_seq" name="Convert to FASTA (seqtk)" version="0.1.0" python_template_version="3.5">\n    <requirements>\n    </requirements>\n    <command detect_errors="exit_code"><![CDATA[\n        TODO: Fill in command template.\n    ]]></command>\n    <inputs>\n    </inputs>\n    <outputs>\n    </outputs>\n    <help><![CDATA[\n        TODO: Fill in help.\n    ]]></help>\n</tool>\n这个生成的模板 XML 文件具有了 Galaxy 工具所需的公共部分内容，但你仍然需要打开编辑器并填写命令模板、输入参数描述、工具输出信息、帮助部分信息等。\ntool_init 命令也可以做得更好。 们可以使用在 seqtk seq -a 2.fastq> 2.fasta 上面尝试过的测试命令作为示例，通过指定输入和输出来生成命令块，如下所示。\n$ planemo tool_init --force \\\n                    --id \'seqtk_seq\' \\\n                    --name \'Convert to FASTA (seqtk)\' \\\n                    --requirement seqtk@1.2 \\\n                    --example_command \'seqtk seq -a 2.fastq > 2.fasta\' \\\n                    --example_input 2.fastq \\\n                    --example_output 2.fasta\n这将生成以下 XML 文件- 该文件具有正确的输入和输出定义以及实际的命令模板。\n<tool id="seqtk_seq" name="Convert to FASTA (seqtk)" version="0.1.0" python_template_version="3.5">\n    <requirements>\n        <requirement type="package" version="1.2">seqtk</requirement>\n    </requirements>\n    <command detect_errors="exit_code"><![CDATA[\n        seqtk seq -a \'$input1\' > \'$output1\'\n    ]]></command>\n    <inputs>\n        <param type="data" name="input1" format="fastq" />\n    </inputs>\n    <outputs>\n        <data name="output1" format="fasta" />\n    </outputs>\n    <help><![CDATA[\n        TODO: Fill in help.\n    ]]></help>\n</tool>(\n如本节开头所示，命令 seqtk seq 会为 seq 命令生成帮助消息。 tool_init 可以获取该帮助消息，并使用 help_from_command 选项将其正确粘贴在生成的工具 XML 文件中。\n通常，命令帮助消息并不完全适用于工具，因为它们会提到参数名称和由工具抽象出来的类似细节，但它们可能是一个很好的起点。\n以下 Planemo 的 tool_init 的调用已增强为使用 --help_from_command。\n$ planemo tool_init --force \\\n                    --id \'seqtk_seq\' \\\n                    --name \'Convert to FASTA (seqtk)\' \\\n                    --requirement seqtk@1.2 \\\n                    --example_command \'seqtk seq -a 2.fastq > 2.fasta\' \\\n                    --example_input 2.fastq \\\n                    --example_output 2.fasta \\\n                    --test_case \\\n                    --cite_url \'https://github.com/lh3/seqtk\' \\\n                    --help_from_command \'seqtk seq\'\n除了演示 --help_from_command 之外，这还演示了使用 --test_case 从我们的示例生成测试用例并为基础工具添加引用。生成的工具 XML 文件为：\n<tool id="seqtk_seq" name="Convert to FASTA (seqtk)" version="0.1.0" python_template_version="3.5">\n    <requirements>\n        <requirement type="package" version="1.2">seqtk</requirement>\n    </requirements>\n    <command detect_errors="exit_code"><![CDATA[\n        seqtk seq -a \'$input1\' > \'$output1\'\n    ]]></command>\n    <inputs>\n        <param type="data" name="input1" format="fastq" />\n    </inputs>\n    <outputs>\n        <data name="output1" format="fasta" />\n    </outputs>\n    <tests>\n        <test>\n            <param name="input1" value="2.fastq"/>\n            <output name="output1" file="2.fasta"/>\n        </test>\n    </tests>\n    <help><![CDATA[\n\nUsage:   seqtk seq [options] <in.fq>|<in.fa>\n\nOptions: -q INT    mask bases with quality lower than INT [0]\n         -X INT    mask bases with quality higher than INT [255]\n         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\n         -l INT    number of residues per line; 0 for 2^32-1 [0]\n         -Q INT    quality shift: ASCII-INT gives base quality [33]\n         -s INT    random seed (effective with -f) [11]\n         -f FLOAT  sample FLOAT fraction of sequences [1]\n         -M FILE   mask regions in BED or name list FILE [null]\n         -L INT    drop sequences with length shorter than INT [0]\n         -c        mask complement region (effective with -M)\n         -r        reverse complement\n         -A        force FASTA output (discard quality)\n         -C        drop comments at the header lines\n         -N        drop sequences containing ambiguous bases\n         -1        output the 2n-1 reads only\n         -2        output the 2n reads only\n         -V        shift quality by \'(-Q) - 33\'\n         -U        convert all bases to uppercases\n         -S        strip of white spaces in sequences\n\n\n    ]]></help>\n    <citations>\n        <citation type="bibtex">\n@misc{githubseqtk,\n  author = {LastTODO, FirstTODO},\n  year = {TODO},\n  title = {seqtk},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/lh3/seqtk},\n}</citation>\n    </citations>\n</tool>\n至此，我们有了一个功能相当齐全的 Galaxy 工具，它带有测试和帮助。这是一个非常简单的示例——通常，您需要在工具中投入更多工作才能实现这一点， tool_init 实际上只是为了让您入门而设计的。\n现在让我们检查并测试我们开发的工具。Planemo的 lint（或仅 l ）命令将检查工具的 XML 有效性，检查是否有明显的错误以及是否符合 IUC 的最佳做法。\n$ planemo l\nLinting tool /opt/galaxy/tools/seqtk_seq.xml\nApplying linter tests... CHECK\n.. CHECK: 1 test(s) found.\nApplying linter output... CHECK\n.. INFO: 1 outputs found.\nApplying linter inputs... CHECK\n.. INFO: Found 1 input parameters.\nApplying linter help... CHECK\n.. CHECK: Tool contains help section.\n.. CHECK: Help contains valid reStructuredText.\nApplying linter general... CHECK\n.. CHECK: Tool defines a version [0.1.0].\n.. CHECK: Tool defines a name [Convert to FASTA (seqtk)].\n.. CHECK: Tool defines an id [seqtk_seq].\n.. CHECK: Tool targets 16.01 Galaxy profile.\nApplying linter command... CHECK\n.. INFO: Tool contains a command.\nApplying linter citations... CHECK\n.. CHECK: Found 1 likely valid citations.\nApplying linter tool_xsd... CHECK\n.. INFO: File validates against XML schema.\n默认情况下， lint 会在您当前的工作目录中找到所有工具，但是我们可以使用 planemo lint seqtk_seq.xml 指定一个特定的工具。\n接下来，我们可以使用 test（或仅执行 t ）命令运行工具的功能测试。这将打印很多输出（因为它启动了 Galaxy 实例），但最终应该显示我们通过的一项测试。\n\n如果你的服务器已经安装了 Galaxy 实例，你可以编辑 ~/.planemo.yml 文件，指定 Galaxy 实例路径。\n\n## Specify a default galaxy_root for the `test` and `serve` commands here.\ngalaxy_root: /home/user/galaxy\n\n完整的 ~/.planemo.yml 示例，参考：https://planemo.readthedocs.io/en/latest/configuration.html\n\n$ planemo t\n...\nAll 1 test(s) executed passed.\nseqtk_seq[0]: passed\n除了在控制台中将测试结果显示为红色（失败）或绿色（通过）外，Planemo 还默认为测试结果创建 HTML 报告。 还有更多测试报告选项可用，例如 --test_output_xunit，在某些持续集成环境中很有用。有关更多选项，请参见 planemo test --help ，以及 test_reports 命令。\n现在，我们可以使用 serve（或仅使用 s ）命令打开 Galaxy。\n$ planemo s\n...\nserving on http://127.0.0.1:9090\n在网络浏览器中打开 http://127.0.0.1:9090 以查看您的新工具。\n服务和测试可以通过各种命令行参数传递，例如 --galaxy_root，以指定要使用的 Galaxy 实例（默认情况下，planemo 将仅为 planemo 下载和管理实例）。\n简单参数\n我们为 seqtk seq 命令构建了一个工具包的封装，但是该工具实际上具有我们可能希望向 Galaxy 用户公开的其他选项。\n让我们从 help 命令中获取一些参数，并构建 Galaxy 的 param 块以粘贴到该工具的 input 块中。\n-V        shift quality by \'(-Q) - 33\'\n在上一节中，我们看到了输入文件在 param 块中是一个 data 的类型，除此之外我们还可以使用许多不同种类的参数。如标志参数（例如以上 -V 参数），通常在 Galaxy 工具的 XML 文件中由 boolean 来表示。\n<param name="shift_quality" type="boolean" label="Shift quality"\n       truevalue="-V" falsevalue=""\n       help="shift quality by \'(-Q) - 33\' (-V)" />\n然后，我们可以将 $shift_quality 粘贴在 command 块中，如果用户选择了此选项，它将扩展为 -V （因为我们已将其定义为 truevalue ）。如果用户未选择此选项，则 $shift_quality 将仅扩展为空字符串，而不会影响生成的命令行。\n现在考虑以下的 seqtk seq 参数：\n-q INT    mask bases with quality lower than INT [0]\n-X INT    mask bases with quality higher than INT [255]\n这些可以转换为 Galaxy 参数，如下所示：\n<param name="quality_min" type="integer" label="Mask bases with quality lower than"\n       value="0" min="0" max="255" help="(-q)" />\n<param name="quality_max" type="integer" label="Mask bases with quality higher than"\n       value="255" min="0" max="255" help="(-X)" />\n这些可以作为 -q $quality_min -X $quality_max 添加到命令标签中。\n此时，该工具将如下所示：\n<tool id="seqtk_seq" name="Convert to FASTA (seqtk)" version="0.1.0" python_template_version="3.5">\n    <requirements>\n        <requirement type="package" version="1.2">seqtk</requirement>\n    </requirements>\n    <command detect_errors="exit_code"><![CDATA[\n        seqtk seq\n              $shift_quality\n              -q $quality_min\n              -X $quality_max\n              -a \'$input1\' > \'$output1\'\n    ]]></command>\n    <inputs>\n        <param type="data" name="input1" format="fastq" />\n        <param name="shift_quality" type="boolean" label="Shift quality" \n               truevalue="-V" falsevalue=""\n               help="shift quality by \'(-Q) - 33\' (-V)" />\n        <param name="quality_min" type="integer" label="Mask bases with quality lower than" \n               value="0" min="0" max="255" help="(-q)" />\n        <param name="quality_max" type="integer" label="Mask bases with quality higher than" \n               value="255" min="0" max="255" help="(-X)" />\n    </inputs>\n    <outputs>\n        <data name="output1" format="fasta" />\n    </outputs>\n    <tests>\n        <test>\n            <param name="input1" value="2.fastq"/>\n            <output name="output1" file="2.fasta"/>\n        </test>\n    </tests>\n    <help><![CDATA[\n        \nUsage:   seqtk seq [options] <in.fq>|<in.fa>\n\nOptions: -q INT    mask bases with quality lower than INT [0]\n         -X INT    mask bases with quality higher than INT [255]\n         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\n         -l INT    number of residues per line; 0 for 2^32-1 [0]\n         -Q INT    quality shift: ASCII-INT gives base quality [33]\n         -s INT    random seed (effective with -f) [11]\n         -f FLOAT  sample FLOAT fraction of sequences [1]\n         -M FILE   mask regions in BED or name list FILE [null]\n         -L INT    drop sequences with length shorter than INT [0]\n         -c        mask complement region (effective with -M)\n         -r        reverse complement\n         -A        force FASTA output (discard quality)\n         -C        drop comments at the header lines\n         -N        drop sequences containing ambiguous bases\n         -1        output the 2n-1 reads only\n         -2        output the 2n reads only\n         -V        shift quality by \'(-Q) - 33\'\n         -U        convert all bases to uppercases\n\n\n    ]]></help>\n    <citations>\n        <citation type="bibtex">\n@misc{githubseqtk,\n  author = {LastTODO, FirstTODO},\n  year = {TODO},\n  title = {seqtk},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/lh3/seqtk},\n}</citation>\n    </citations>\n</tool>\n条件参数\n以前的参数很简单，因为它们总是出现，现在考虑一下下面的参数。\n-M FILE   mask regions in BED or name list FILE [null]\n我们可以通过添加属性 optional ="true" 将该数据类型参数标记为可选。\n<param name="mask_regions" type="data" label="Mask regions in BED"\n       format="bed" help="(-M)" optional="true" />\n然后，不仅可以直接在命令块中使用 $mask_regions，还可以将其包装在 if 语句中（因为工具 XML 文件支持 Cheetah）。\n#if $mask_regions\n-M \'$mask_regions\'\n#end if\n接着，我们考虑这一组参数：\n-s INT    random seed (effective with -f) [11]\n-f FLOAT  sample FLOAT fraction of sequences [1]\n在这种情况下，只有在设置了样本参数的情况下，才能看到或使用 -s 随机种子参数。我们可以使用 conditional 条件块来表达这一点。\n<conditional name="sample">\n    <param name="sample_selector" type="boolean" label="Sample fraction of sequences" />\n    <when value="true">\n        <param name="fraction" label="Fraction" type="float" value="1.0"\n               help="(-f)" />\n        <param name="seed" label="Random seed" type="integer" value="11"\n               help="(-s)" />\n    </when>\n    <when value="false">\n    </when>\n</conditional>\n在命令块中，我们可以再次使用 if 语句包括这些参数。\n#if $sample.sample_selector\n-f $sample.fraction -s $sample.seed\n#end if\n注意，我们必须使用 sample. 的前缀来引用这个参数，因为它们是在 sample 的条件块内定义的。\n现在该工具的最新版本如下：\n<tool id="seqtk_seq" name="Convert to FASTA (seqtk)" version="0.1.0" python_template_version="3.5">\n    <requirements>\n        <requirement type="package" version="1.2">seqtk</requirement>\n    </requirements>\n    <command detect_errors="exit_code"><![CDATA[\n        seqtk seq\n              $shift_quality\n              -q $quality_min\n              -X $quality_max\n              #if $mask_regions\n                  -M \'$mask_regions\'\n              #end if\n              #if $sample.sample\n                  -f $sample.fraction\n                  -s $sample.seed\n              #end if\n              -a \'$input1\' > \'$output1\'\n    ]]></command>\n    <inputs>\n        <param type="data" name="input1" format="fastq" />\n        <param name="shift_quality" type="boolean" label="Shift quality" \n               truevalue="-V" falsevalue=""\n               help="shift quality by \'(-Q) - 33\' (-V)" />\n        <param name="quality_min" type="integer" label="Mask bases with quality lower than" \n               value="0" min="0" max="255" help="(-q)" />\n        <param name="quality_max" type="integer" label="Mask bases with quality higher than" \n               value="255" min="0" max="255" help="(-X)" />\n        <param name="mask_regions" type="data" label="Mask regions in BED" \n               format="bed" help="(-M)" optional="true" />\n        <conditional name="sample">\n            <param name="sample" type="boolean" label="Sample fraction of sequences" />\n            <when value="true">\n                <param name="fraction" label="Fraction" type="float" value="1.0"\n                       help="(-f)" />\n                <param name="seed" label="Random seed" type="integer" value="11"\n                       help="(-s)" />\n            </when>\n            <when value="false">\n            </when>\n        </conditional>\n    </inputs>\n    <outputs>\n        <data name="output1" format="fasta" />\n    </outputs>\n    <tests>\n        <test>\n            <param name="input1" value="2.fastq"/>\n            <output name="output1" file="2.fasta"/>\n        </test>\n    </tests>\n    <help><![CDATA[\n        \nUsage:   seqtk seq [options] <in.fq>|<in.fa>\n\nOptions: -q INT    mask bases with quality lower than INT [0]\n         -X INT    mask bases with quality higher than INT [255]\n         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\n         -l INT    number of residues per line; 0 for 2^32-1 [0]\n         -Q INT    quality shift: ASCII-INT gives base quality [33]\n         -s INT    random seed (effective with -f) [11]\n         -f FLOAT  sample FLOAT fraction of sequences [1]\n         -M FILE   mask regions in BED or name list FILE [null]\n         -L INT    drop sequences with length shorter than INT [0]\n         -c        mask complement region (effective with -M)\n         -r        reverse complement\n         -A        force FASTA output (discard quality)\n         -C        drop comments at the header lines\n         -N        drop sequences containing ambiguous bases\n         -1        output the 2n-1 reads only\n         -2        output the 2n reads only\n         -V        shift quality by \'(-Q) - 33\'\n         -U        convert all bases to uppercases\n\n\n    ]]></help>\n    <citations>\n        <citation type="bibtex">\n@misc{githubseqtk,\n  author = {LastTODO, FirstTODO},\n  year = {TODO},\n  title = {seqtk},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/lh3/seqtk},\n}</citation>\n    </citations>\n</tool>\n对于这样的工具，这些工具有很多选项，但在大多数情况下使用默认值是首选——一个常见的习惯用法是使用条件将参数分为简单部分和高级部分。\n使用惯用法，更新此工具后的 XML 如下所示：\n<tool id="seqtk_seq" name="Convert to FASTA (seqtk)" version="0.1.0" python_template_version="3.5">\n    <requirements>\n        <requirement type="package" version="1.2">seqtk</requirement>\n    </requirements>\n    <command detect_errors="exit_code"><![CDATA[\n        seqtk seq\n              #if $settings.advanced == "advanced"\n                  $settings.shift_quality\n                  -q $settings.quality_min\n                  -X $settings.quality_max\n                  #if $settings.mask_regions\n                      -M \'$settings.mask_regions\'\n                  #end if\n                  #if $settings.sample.sample\n                      -f $settings.sample.fraction\n                      -s $settings.sample.seed\n                  #end if\n              #end if\n              -a \'$input1\' > \'$output1\'\n    ]]></command>\n    <inputs>\n        <param type="data" name="input1" format="fastq" />\n        <conditional name="settings">\n            <param name="advanced" type="select" label="Specify advanced parameters">\n                <option value="simple" selected="true">No, use program defaults.</option>\n                <option value="advanced">Yes, see full parameter list.</option>\n            </param>\n            <when value="simple">\n            </when>\n            <when value="advanced">\n                <param name="shift_quality" type="boolean" label="Shift quality" \n                       truevalue="-V" falsevalue=""\n                       help="shift quality by \'(-Q) - 33\' (-V)" />\n                <param name="quality_min" type="integer" label="Mask bases with quality lower than" \n                       value="0" min="0" max="255" help="(-q)" />\n                <param name="quality_max" type="integer" label="Mask bases with quality higher than" \n                       value="255" min="0" max="255" help="(-X)" />\n                <param name="mask_regions" type="data" label="Mask regions in BED" \n                       format="bed" help="(-M)" optional="true" />\n                <conditional name="sample">\n                    <param name="sample" type="boolean" label="Sample fraction of sequences" />\n                    <when value="true">\n                        <param name="fraction" label="Fraction" type="float" value="1.0"\n                               help="(-f)" />\n                        <param name="seed" label="Random seed" type="integer" value="11"\n                               help="(-s)" />\n                    </when>\n                    <when value="false">\n                    </when>\n                </conditional>\n            </when>\n        </conditional>\n    </inputs>\n    <outputs>\n        <data name="output1" format="fasta" />\n    </outputs>\n    <tests>\n        <test>\n            <param name="input1" value="2.fastq"/>\n            <output name="output1" file="2.fasta"/>\n        </test>\n    </tests>\n    <help><![CDATA[\n        \nUsage:   seqtk seq [options] <in.fq>|<in.fa>\n\nOptions: -q INT    mask bases with quality lower than INT [0]\n         -X INT    mask bases with quality higher than INT [255]\n         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\n         -l INT    number of residues per line; 0 for 2^32-1 [0]\n         -Q INT    quality shift: ASCII-INT gives base quality [33]\n         -s INT    random seed (effective with -f) [11]\n         -f FLOAT  sample FLOAT fraction of sequences [1]\n         -M FILE   mask regions in BED or name list FILE [null]\n         -L INT    drop sequences with length shorter than INT [0]\n         -c        mask complement region (effective with -M)\n         -r        reverse complement\n         -A        force FASTA output (discard quality)\n         -C        drop comments at the header lines\n         -N        drop sequences containing ambiguous bases\n         -1        output the 2n-1 reads only\n         -2        output the 2n reads only\n         -V        shift quality by \'(-Q) - 33\'\n         -U        convert all bases to uppercases\n\n\n    ]]></help>\n    <citations>\n        <citation type="bibtex">\n@misc{githubseqtk,\n  author = {LastTODO, FirstTODO},\n  year = {TODO},\n  title = {seqtk},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/lh3/seqtk},\n}</citation>\n    </citations>\n</tool>\n脚本封装\nTool Shed 上已经提供了许多常见的生物信息学应用程序，因此一项常见的开发任务是将各种复杂程度的脚本集成到 Galaxy 中。\n考虑以下小型 Perl 脚本。\n#!/usr/bin/perl -w\n\n# usage : perl toolExample.pl <FASTA file> <output file>\n\nopen (IN, "<$ARGV[0]");\nopen (OUT, ">$ARGV[1]");\nwhile (<IN>) {\n    chop;\n    if (m/^>/) {\n        s/^>//;\n        if ($. > 1) {\n            print OUT sprintf("%.3f", $gc/$length) . "\\n";\n        }\n        $gc = 0;\n        $length = 0;\n    } else {\n        ++$gc while m/[gc]/ig;\n        $length += length $_;\n    }\n}\nprint OUT sprintf("%.3f", $gc/$length) . "\\n";\nclose( IN );\nclose( OUT );\n可以按照以下步骤为此脚本构建 Galaxy 工具，并将脚本与工具 XML 文件本身放在同一目录中。这里的特殊值 $__ tool_directory__ 是指工具（即 xml 文件）所在的目录。\n<tool id="gc_content" name="Compute GC content">\n  <description>for each sequence in a file</description>\n  <command>perl \'$__tool_directory__/gc_content.pl\' \'$input\' output.tsv</command>\n  <inputs>\n    <param name="input" type="data" format="fasta" label="Source file"/>\n  </inputs>\n  <outputs>\n    <data name="output" format="tabular" from_work_dir="output.tsv" />\n  </outputs>\n  <help>\nThis tool computes GC content from a FASTA file.\n  </help>\n</tool>\nMacros 宏集\n如果您希望为单个相对简单的应用程序或脚本编写工具，则应跳过本节。如果您希望维护一系列相关工具——经验表明，您将意识到有很多重复的 XML 可以很好地做到这一点。Galaxy工具 XML 宏可以帮助减少这种重复。\n通过使用 --macros 标志，Planemo 的 tool_init 命令可用于生成适合工具套件的宏文件。我们看一下以前的 tool_init 命令的变体（唯一的区别是现在我们添加了 --macros 标志）。\n$ planemo tool_init --force \\\n                    --macros \\\n                    --id \'seqtk_seq\' \\\n                    --name \'Convert to FASTA (seqtk)\' \\\n                    --requirement seqtk@1.2 \\\n                    --example_command \'seqtk seq -A 2.fastq > 2.fasta\' \\\n                    --example_input 2.fastq \\\n                    --example_output 2.fasta \\\n                    --test_case \\\n                    --help_from_command \'seqtk seq\'\n这将在当前目录中产生两个文件（ seqtk_seq.xml 和 macros.xml），而不是一个。\n<tool id="seqtk_seq" name="Convert to FASTA (seqtk)" version="0.1.0" python_template_version="3.5">\n    <macros>\n        <import>macros.xml</import>\n    </macros>\n    <expand macro="requirements" />\n    <command detect_errors="exit_code"><![CDATA[\n        seqtk seq -A \'$input1\' > \'$output1\'\n    ]]></command>\n    <inputs>\n        <param type="data" name="input1" format="fastq" />\n    </inputs>\n    <outputs>\n        <data name="output1" format="fasta" />\n    </outputs>\n    <tests>\n        <test>\n            <param name="input1" value="2.fastq"/>\n            <output name="output1" file="2.fasta"/>\n        </test>\n    </tests>\n    <help><![CDATA[\n\nUsage:   seqtk seq [options] <in.fq>|<in.fa>\n\nOptions: -q INT    mask bases with quality lower than INT [0]\n         -X INT    mask bases with quality higher than INT [255]\n         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\n         -l INT    number of residues per line; 0 for 2^32-1 [0]\n         -Q INT    quality shift: ASCII-INT gives base quality [33]\n         -s INT    random seed (effective with -f) [11]\n         -f FLOAT  sample FLOAT fraction of sequences [1]\n         -M FILE   mask regions in BED or name list FILE [null]\n         -L INT    drop sequences with length shorter than INT [0]\n         -c        mask complement region (effective with -M)\n         -r        reverse complement\n         -A        force FASTA output (discard quality)\n         -C        drop comments at the header lines\n         -N        drop sequences containing ambiguous bases\n         -1        output the 2n-1 reads only\n         -2        output the 2n reads only\n         -V        shift quality by \'(-Q) - 33\'\n         -U        convert all bases to uppercases\n         -S        strip of white spaces in sequences\n\n\n    ]]></help>\n    <expand macro="citations" />\n</tool>\n<macros>\n    <xml name="requirements">\n        <requirements>\n        <requirement type="package" version="1.2">seqtk</requirement>\n            <yield/>\n        </requirements>\n    </xml>\n    <xml name="citations">\n        <citations>\n            <yield />\n        </citations>\n    </xml>\n</macros>\n如您在上面的代码中所看到的，宏是可重用的 XML 块，它们使避免重复和保持 XML 简洁变得更加容易。\n参考资料\n\nMacros syntax on the Galaxy Wiki.\nGATK tools (example tools making extensive use of macros)\ngemini tools (example tools making extensive use of macros)\nbedtools tools (example tools making extensive use of macros)\nMacros implementation details - Pull Request #129 and Pull Request #140\nGalaxy’s Tool XML Syntax\nBig List of Tool Development Resources\nCheetah templating', 'bodyHTML': '<blockquote>\n<p dir="auto">说明：本文章原文发布于 《<a href="https://www.yuque.com/shenweiyan/biox/planemo-for-galaxy" rel="nofollow">使用 Planemo 进行 Galaxy 工具开发 - 语雀</a>》，部分内容已更新。</p>\n</blockquote>\n<p dir="auto">文章开始前，我们先了解一下 Planemo 到底是个什么东西。</p>\n<blockquote>\n<p dir="auto">Command-line utilities to assist in developing <a href="http://galaxyproject.org/" rel="nofollow">Galaxy</a> and <a href="https://www.commonwl.org/" rel="nofollow">Common Workflow Language</a> artifacts - including tools, workflows, and training materials.</p>\n</blockquote>\n<p dir="auto">说白了，Planemo 就是用于 Galaxy 平台工具和 WDL 通用工作流语言相关产品辅助开发的一个命令行工具，这个程序集可以用于工具、流程，以及培训教材的开发。</p>\n\n<h2 dir="auto">安装 Planemo</h2>\n<p dir="auto">无论是 pip 还是 conda 都可以安装 Planemo：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ pip install planemo\n$ pip install -U git+git://github.com/galaxyproject/planemo.git"><pre class="notranslate">$ pip install planemo\n$ pip install -U git+git://github.com/galaxyproject/planemo.git</pre></div>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ conda config --add channels bioconda\n$ conda config --add channels conda-forge\n$ conda install planemo"><pre class="notranslate">$ conda config --add channels bioconda\n$ conda config --add channels conda-forge\n$ conda install planemo</pre></div>\n<p dir="auto">接下来，进入今天的正题，我们来详细介绍一下怎么使用 Planemo 进行 Galaxy 工具开发。</p>\n<h2 dir="auto">基础用法</h2>\n<p dir="auto">本指南将演示如何使用 Heng Li 的 <code class="notranslate">Seqtk</code> 软件包构建命令工具，该软件包用于处理 FASTA 和 FASTQ 文件中的序列数据。</p>\n<p dir="auto">首先，我们需要先安装 <code class="notranslate">Seqtk</code> 。在这里，我们使用 <code class="notranslate">conda</code> 来安装 <code class="notranslate">Seqtk</code> (你也可以使用其他的方法安装)。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ conda install --force --yes -c conda-forge -c bioconda seqtk=1.2\n    ... seqtk installation ...\n$ seqtk seq\n        Usage:   seqtk seq [options] &lt;in.fq&gt;|&lt;in.fa&gt;\n        Options: -q INT    mask bases with quality lower than INT [0]\n                 -X INT    mask bases with quality higher than INT [255]\n                 -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\n                 -l INT    number of residues per line; 0 for 2^32-1 [0]\n                 -Q INT    quality shift: ASCII-INT gives base quality [33]\n                 -s INT    random seed (effective with -f) [11]\n                 -f FLOAT  sample FLOAT fraction of sequences [1]\n                 -M FILE   mask regions in BED or name list FILE [null]\n                 -L INT    drop sequences with length shorter than INT [0]\n                 -c        mask complement region (effective with -M)\n                 -r        reverse complement\n                 -A        force FASTA output (discard quality)\n                 -C        drop comments at the header lines\n                 -N        drop sequences containing ambiguous bases\n                 -1        output the 2n-1 reads only\n                 -2        output the 2n reads only\n                 -V        shift quality by \'(-Q) - 33\'"><pre class="notranslate">$ conda install --force --yes -c conda-forge -c bioconda seqtk=1.2\n    ... seqtk installation ...\n$ seqtk seq\n        Usage:   seqtk seq [options] <span class="pl-k">&lt;</span>in.fq<span class="pl-k">&gt;</span><span class="pl-k">|</span><span class="pl-k">&lt;</span>in.fa<span class="pl-k">&gt;</span>\n        Options: -q INT    mask bases with quality lower than INT [0]\n                 -X INT    mask bases with quality higher than INT [255]\n                 -n CHAR   masked bases converted to CHAR<span class="pl-k">;</span> 0 <span class="pl-k">for</span> lowercase [0]\n                 -l INT    number of residues per line<span class="pl-k">;</span> 0 <span class="pl-k">for</span> 2^32-1 [0]\n                 -Q INT    quality shift: ASCII-INT gives base quality [33]\n                 -s INT    random seed (effective with -f) [11]\n                 -f FLOAT  sample FLOAT fraction of sequences [1]\n                 -M FILE   mask regions <span class="pl-k">in</span> BED or name list FILE [null]\n                 -L INT    drop sequences with length shorter than INT [0]\n                 -c        mask complement region (effective with -M)\n                 -r        reverse complement\n                 -A        force FASTA output (discard quality)\n                 -C        drop comments at the header lines\n                 -N        drop sequences containing ambiguous bases\n                 -1        output the 2n-1 reads only\n                 -2        output the 2n reads only\n                 -V        <span class="pl-c1">shift</span> quality by <span class="pl-s"><span class="pl-pds">\'</span>(-Q) - 33<span class="pl-pds">\'</span></span></pre></div>\n<p dir="auto">接下来，我们将下载一个 FASTQ 示例文件，并测试一个简单的 Seqtk 命令 <code class="notranslate">seq</code> ，该命令将 FASTQ 文件转换为 FASTA。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ wget https://raw.githubusercontent.com/galaxyproject/galaxy-test-data/master/2.fastq\n$ seqtk seq -A 2.fastq &gt; 2.fasta\n$ cat 2.fasta\n&gt;EAS54_6_R1_2_1_413_324\nCCCTTCTTGTCTTCAGCGTTTCTCC\n&gt;EAS54_6_R1_2_1_540_792\nTTGGCAGGCCAAGGCCGATGGATCA\n&gt;EAS54_6_R1_2_1_443_348\nGTTGCTTCTGGCGTGGGTGGGGGGG"><pre class="notranslate">$ wget https://raw.githubusercontent.com/galaxyproject/galaxy-test-data/master/2.fastq\n$ seqtk seq -A 2.fastq <span class="pl-k">&gt;</span> 2.fasta\n$ cat 2.fasta\n<span class="pl-k">&gt;</span>EAS54_6_R1_2_1_413_324\nCCCTTCTTGTCTTCAGCGTTTCTCC\n<span class="pl-k">&gt;</span>EAS54_6_R1_2_1_540_792\nTTGGCAGGCCAAGGCCGATGGATCA\n<span class="pl-k">&gt;</span>EAS54_6_R1_2_1_443_348\nGTTGCTTCTGGCGTGGGTGGGGGGG</pre></div>\n<p dir="auto">有关功能齐全的 Seqtk 包封装，可以在 GitHub 上查看 <a href="https://github.com/galaxyproject/tools-iuc/tree/master/tools/seqtk">Helena Rasche\'s wrappers</a>。</p>\n<p dir="auto">Galaxy 工具文件只是 XML 文件，因此此时可以打开文本编辑器并开始编写工具。Planemo 有一个命令 <code class="notranslate">tool_init</code> 可以快速生成一些样板 XML，因此首先开始。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ planemo tool_init --id \'seqtk_seq\' --name \'Convert to FASTA (seqtk)\'"><pre class="notranslate">$ planemo tool_init --id <span class="pl-s"><span class="pl-pds">\'</span>seqtk_seq<span class="pl-pds">\'</span></span> --name <span class="pl-s"><span class="pl-pds">\'</span>Convert to FASTA (seqtk)<span class="pl-pds">\'</span></span></pre></div>\n<p dir="auto"><code class="notranslate">tool_init</code> 命令可以采用各种复杂的参数，但如上面展示的 <code class="notranslate">--id</code> 和 <code class="notranslate">--name</code> 是其中两个最基本的参数。每个 Galaxy 工具都需要一个 ID（这是 Galaxy 自身用来标识该工具的简短标识符）和一个名称（此名称会显示给 Galaxy 用户，并且应该是该工具的简短描述）。工具名称可以包含空格，但其 ID 不能包含空格。</p>\n<p dir="auto">上面的命令将生成一个 seqtk_seq.xml 文件，这个文件看起来像这样：</p>\n<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;tool id=&quot;seqtk_seq&quot; name=&quot;Convert to FASTA (seqtk)&quot; version=&quot;0.1.0&quot; python_template_version=&quot;3.5&quot;&gt;\n    &lt;requirements&gt;\n    &lt;/requirements&gt;\n    &lt;command detect_errors=&quot;exit_code&quot;&gt;&lt;![CDATA[\n        TODO: Fill in command template.\n    ]]&gt;&lt;/command&gt;\n    &lt;inputs&gt;\n    &lt;/inputs&gt;\n    &lt;outputs&gt;\n    &lt;/outputs&gt;\n    &lt;help&gt;&lt;![CDATA[\n        TODO: Fill in help.\n    ]]&gt;&lt;/help&gt;\n&lt;/tool&gt;"><pre class="notranslate">&lt;<span class="pl-ent">tool</span> <span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">"</span>seqtk_seq<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>Convert to FASTA (seqtk)<span class="pl-pds">"</span></span> <span class="pl-e">version</span>=<span class="pl-s"><span class="pl-pds">"</span>0.1.0<span class="pl-pds">"</span></span> <span class="pl-e">python_template_version</span>=<span class="pl-s"><span class="pl-pds">"</span>3.5<span class="pl-pds">"</span></span>&gt;\n    &lt;<span class="pl-ent">requirements</span>&gt;\n    &lt;/<span class="pl-ent">requirements</span>&gt;\n    &lt;<span class="pl-ent">command</span> <span class="pl-e">detect_errors</span>=<span class="pl-s"><span class="pl-pds">"</span>exit_code<span class="pl-pds">"</span></span>&gt;<span class="pl-s"><span class="pl-pds">&lt;![CDATA[</span></span>\n<span class="pl-s">        TODO: Fill in command template.</span>\n<span class="pl-s">    <span class="pl-pds">]]&gt;</span></span>&lt;/<span class="pl-ent">command</span>&gt;\n    &lt;<span class="pl-ent">inputs</span>&gt;\n    &lt;/<span class="pl-ent">inputs</span>&gt;\n    &lt;<span class="pl-ent">outputs</span>&gt;\n    &lt;/<span class="pl-ent">outputs</span>&gt;\n    &lt;<span class="pl-ent">help</span>&gt;<span class="pl-s"><span class="pl-pds">&lt;![CDATA[</span></span>\n<span class="pl-s">        TODO: Fill in help.</span>\n<span class="pl-s">    <span class="pl-pds">]]&gt;</span></span>&lt;/<span class="pl-ent">help</span>&gt;\n&lt;/<span class="pl-ent">tool</span>&gt;</pre></div>\n<p dir="auto">这个生成的模板 XML 文件具有了 Galaxy 工具所需的公共部分内容，但你仍然需要打开编辑器并填写命令模板、输入参数描述、工具输出信息、帮助部分信息等。</p>\n<p dir="auto"><code class="notranslate">tool_init</code> 命令也可以做得更好。 们可以使用在 <code class="notranslate">seqtk seq -a 2.fastq&gt; 2.fasta</code> 上面尝试过的测试命令作为示例，通过指定输入和输出来生成命令块，如下所示。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ planemo tool_init --force \\\n                    --id \'seqtk_seq\' \\\n                    --name \'Convert to FASTA (seqtk)\' \\\n                    --requirement seqtk@1.2 \\\n                    --example_command \'seqtk seq -a 2.fastq &gt; 2.fasta\' \\\n                    --example_input 2.fastq \\\n                    --example_output 2.fasta"><pre class="notranslate">$ planemo tool_init --force \\\n                    --id <span class="pl-s"><span class="pl-pds">\'</span>seqtk_seq<span class="pl-pds">\'</span></span> \\\n                    --name <span class="pl-s"><span class="pl-pds">\'</span>Convert to FASTA (seqtk)<span class="pl-pds">\'</span></span> \\\n                    --requirement seqtk@1.2 \\\n                    --example_command <span class="pl-s"><span class="pl-pds">\'</span>seqtk seq -a 2.fastq &gt; 2.fasta<span class="pl-pds">\'</span></span> \\\n                    --example_input 2.fastq \\\n                    --example_output 2.fasta</pre></div>\n<p dir="auto">这将生成以下 XML 文件- 该文件具有正确的输入和输出定义以及实际的命令模板。</p>\n<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;tool id=&quot;seqtk_seq&quot; name=&quot;Convert to FASTA (seqtk)&quot; version=&quot;0.1.0&quot; python_template_version=&quot;3.5&quot;&gt;\n    &lt;requirements&gt;\n        &lt;requirement type=&quot;package&quot; version=&quot;1.2&quot;&gt;seqtk&lt;/requirement&gt;\n    &lt;/requirements&gt;\n    &lt;command detect_errors=&quot;exit_code&quot;&gt;&lt;![CDATA[\n        seqtk seq -a \'$input1\' &gt; \'$output1\'\n    ]]&gt;&lt;/command&gt;\n    &lt;inputs&gt;\n        &lt;param type=&quot;data&quot; name=&quot;input1&quot; format=&quot;fastq&quot; /&gt;\n    &lt;/inputs&gt;\n    &lt;outputs&gt;\n        &lt;data name=&quot;output1&quot; format=&quot;fasta&quot; /&gt;\n    &lt;/outputs&gt;\n    &lt;help&gt;&lt;![CDATA[\n        TODO: Fill in help.\n    ]]&gt;&lt;/help&gt;\n&lt;/tool&gt;("><pre class="notranslate">&lt;<span class="pl-ent">tool</span> <span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">"</span>seqtk_seq<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>Convert to FASTA (seqtk)<span class="pl-pds">"</span></span> <span class="pl-e">version</span>=<span class="pl-s"><span class="pl-pds">"</span>0.1.0<span class="pl-pds">"</span></span> <span class="pl-e">python_template_version</span>=<span class="pl-s"><span class="pl-pds">"</span>3.5<span class="pl-pds">"</span></span>&gt;\n    &lt;<span class="pl-ent">requirements</span>&gt;\n        &lt;<span class="pl-ent">requirement</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>package<span class="pl-pds">"</span></span> <span class="pl-e">version</span>=<span class="pl-s"><span class="pl-pds">"</span>1.2<span class="pl-pds">"</span></span>&gt;seqtk&lt;/<span class="pl-ent">requirement</span>&gt;\n    &lt;/<span class="pl-ent">requirements</span>&gt;\n    &lt;<span class="pl-ent">command</span> <span class="pl-e">detect_errors</span>=<span class="pl-s"><span class="pl-pds">"</span>exit_code<span class="pl-pds">"</span></span>&gt;<span class="pl-s"><span class="pl-pds">&lt;![CDATA[</span></span>\n<span class="pl-s">        seqtk seq -a \'$input1\' &gt; \'$output1\'</span>\n<span class="pl-s">    <span class="pl-pds">]]&gt;</span></span>&lt;/<span class="pl-ent">command</span>&gt;\n    &lt;<span class="pl-ent">inputs</span>&gt;\n        &lt;<span class="pl-ent">param</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>input1<span class="pl-pds">"</span></span> <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>fastq<span class="pl-pds">"</span></span> /&gt;\n    &lt;/<span class="pl-ent">inputs</span>&gt;\n    &lt;<span class="pl-ent">outputs</span>&gt;\n        &lt;<span class="pl-ent">data</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>output1<span class="pl-pds">"</span></span> <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>fasta<span class="pl-pds">"</span></span> /&gt;\n    &lt;/<span class="pl-ent">outputs</span>&gt;\n    &lt;<span class="pl-ent">help</span>&gt;<span class="pl-s"><span class="pl-pds">&lt;![CDATA[</span></span>\n<span class="pl-s">        TODO: Fill in help.</span>\n<span class="pl-s">    <span class="pl-pds">]]&gt;</span></span>&lt;/<span class="pl-ent">help</span>&gt;\n&lt;/<span class="pl-ent">tool</span>&gt;(</pre></div>\n<p dir="auto">如本节开头所示，命令 <code class="notranslate">seqtk seq</code> 会为 <code class="notranslate">seq</code> 命令生成帮助消息。 <code class="notranslate">tool_init</code> 可以获取该帮助消息，并使用 <code class="notranslate">help_from_command</code> 选项将其正确粘贴在生成的工具 XML 文件中。</p>\n<p dir="auto">通常，命令帮助消息并不完全适用于工具，因为它们会提到参数名称和由工具抽象出来的类似细节，但它们可能是一个很好的起点。</p>\n<p dir="auto">以下 Planemo 的 <code class="notranslate">tool_init</code> 的调用已增强为使用 <code class="notranslate">--help_from_command</code>。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ planemo tool_init --force \\\n                    --id \'seqtk_seq\' \\\n                    --name \'Convert to FASTA (seqtk)\' \\\n                    --requirement seqtk@1.2 \\\n                    --example_command \'seqtk seq -a 2.fastq &gt; 2.fasta\' \\\n                    --example_input 2.fastq \\\n                    --example_output 2.fasta \\\n                    --test_case \\\n                    --cite_url \'https://github.com/lh3/seqtk\' \\\n                    --help_from_command \'seqtk seq\'"><pre class="notranslate">$ planemo tool_init --force \\\n                    --id <span class="pl-s"><span class="pl-pds">\'</span>seqtk_seq<span class="pl-pds">\'</span></span> \\\n                    --name <span class="pl-s"><span class="pl-pds">\'</span>Convert to FASTA (seqtk)<span class="pl-pds">\'</span></span> \\\n                    --requirement seqtk@1.2 \\\n                    --example_command <span class="pl-s"><span class="pl-pds">\'</span>seqtk seq -a 2.fastq &gt; 2.fasta<span class="pl-pds">\'</span></span> \\\n                    --example_input 2.fastq \\\n                    --example_output 2.fasta \\\n                    --test_case \\\n                    --cite_url <span class="pl-s"><span class="pl-pds">\'</span>https://github.com/lh3/seqtk<span class="pl-pds">\'</span></span> \\\n                    --help_from_command <span class="pl-s"><span class="pl-pds">\'</span>seqtk seq<span class="pl-pds">\'</span></span></pre></div>\n<p dir="auto">除了演示 <code class="notranslate">--help_from_command</code> 之外，这还演示了使用 <code class="notranslate">--test_case</code> 从我们的示例生成测试用例并为基础工具添加引用。生成的工具 XML 文件为：</p>\n<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;tool id=&quot;seqtk_seq&quot; name=&quot;Convert to FASTA (seqtk)&quot; version=&quot;0.1.0&quot; python_template_version=&quot;3.5&quot;&gt;\n    &lt;requirements&gt;\n        &lt;requirement type=&quot;package&quot; version=&quot;1.2&quot;&gt;seqtk&lt;/requirement&gt;\n    &lt;/requirements&gt;\n    &lt;command detect_errors=&quot;exit_code&quot;&gt;&lt;![CDATA[\n        seqtk seq -a \'$input1\' &gt; \'$output1\'\n    ]]&gt;&lt;/command&gt;\n    &lt;inputs&gt;\n        &lt;param type=&quot;data&quot; name=&quot;input1&quot; format=&quot;fastq&quot; /&gt;\n    &lt;/inputs&gt;\n    &lt;outputs&gt;\n        &lt;data name=&quot;output1&quot; format=&quot;fasta&quot; /&gt;\n    &lt;/outputs&gt;\n    &lt;tests&gt;\n        &lt;test&gt;\n            &lt;param name=&quot;input1&quot; value=&quot;2.fastq&quot;/&gt;\n            &lt;output name=&quot;output1&quot; file=&quot;2.fasta&quot;/&gt;\n        &lt;/test&gt;\n    &lt;/tests&gt;\n    &lt;help&gt;&lt;![CDATA[\n\nUsage:   seqtk seq [options] &lt;in.fq&gt;|&lt;in.fa&gt;\n\nOptions: -q INT    mask bases with quality lower than INT [0]\n         -X INT    mask bases with quality higher than INT [255]\n         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\n         -l INT    number of residues per line; 0 for 2^32-1 [0]\n         -Q INT    quality shift: ASCII-INT gives base quality [33]\n         -s INT    random seed (effective with -f) [11]\n         -f FLOAT  sample FLOAT fraction of sequences [1]\n         -M FILE   mask regions in BED or name list FILE [null]\n         -L INT    drop sequences with length shorter than INT [0]\n         -c        mask complement region (effective with -M)\n         -r        reverse complement\n         -A        force FASTA output (discard quality)\n         -C        drop comments at the header lines\n         -N        drop sequences containing ambiguous bases\n         -1        output the 2n-1 reads only\n         -2        output the 2n reads only\n         -V        shift quality by \'(-Q) - 33\'\n         -U        convert all bases to uppercases\n         -S        strip of white spaces in sequences\n\n\n    ]]&gt;&lt;/help&gt;\n    &lt;citations&gt;\n        &lt;citation type=&quot;bibtex&quot;&gt;\n@misc{githubseqtk,\n  author = {LastTODO, FirstTODO},\n  year = {TODO},\n  title = {seqtk},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/lh3/seqtk},\n}&lt;/citation&gt;\n    &lt;/citations&gt;\n&lt;/tool&gt;"><pre class="notranslate">&lt;<span class="pl-ent">tool</span> <span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">"</span>seqtk_seq<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>Convert to FASTA (seqtk)<span class="pl-pds">"</span></span> <span class="pl-e">version</span>=<span class="pl-s"><span class="pl-pds">"</span>0.1.0<span class="pl-pds">"</span></span> <span class="pl-e">python_template_version</span>=<span class="pl-s"><span class="pl-pds">"</span>3.5<span class="pl-pds">"</span></span>&gt;\n    &lt;<span class="pl-ent">requirements</span>&gt;\n        &lt;<span class="pl-ent">requirement</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>package<span class="pl-pds">"</span></span> <span class="pl-e">version</span>=<span class="pl-s"><span class="pl-pds">"</span>1.2<span class="pl-pds">"</span></span>&gt;seqtk&lt;/<span class="pl-ent">requirement</span>&gt;\n    &lt;/<span class="pl-ent">requirements</span>&gt;\n    &lt;<span class="pl-ent">command</span> <span class="pl-e">detect_errors</span>=<span class="pl-s"><span class="pl-pds">"</span>exit_code<span class="pl-pds">"</span></span>&gt;<span class="pl-s"><span class="pl-pds">&lt;![CDATA[</span></span>\n<span class="pl-s">        seqtk seq -a \'$input1\' &gt; \'$output1\'</span>\n<span class="pl-s">    <span class="pl-pds">]]&gt;</span></span>&lt;/<span class="pl-ent">command</span>&gt;\n    &lt;<span class="pl-ent">inputs</span>&gt;\n        &lt;<span class="pl-ent">param</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>input1<span class="pl-pds">"</span></span> <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>fastq<span class="pl-pds">"</span></span> /&gt;\n    &lt;/<span class="pl-ent">inputs</span>&gt;\n    &lt;<span class="pl-ent">outputs</span>&gt;\n        &lt;<span class="pl-ent">data</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>output1<span class="pl-pds">"</span></span> <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>fasta<span class="pl-pds">"</span></span> /&gt;\n    &lt;/<span class="pl-ent">outputs</span>&gt;\n    &lt;<span class="pl-ent">tests</span>&gt;\n        &lt;<span class="pl-ent">test</span>&gt;\n            &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>input1<span class="pl-pds">"</span></span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>2.fastq<span class="pl-pds">"</span></span>/&gt;\n            &lt;<span class="pl-ent">output</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>output1<span class="pl-pds">"</span></span> <span class="pl-e">file</span>=<span class="pl-s"><span class="pl-pds">"</span>2.fasta<span class="pl-pds">"</span></span>/&gt;\n        &lt;/<span class="pl-ent">test</span>&gt;\n    &lt;/<span class="pl-ent">tests</span>&gt;\n    &lt;<span class="pl-ent">help</span>&gt;<span class="pl-s"><span class="pl-pds">&lt;![CDATA[</span></span>\n<span class="pl-s"></span>\n<span class="pl-s">Usage:   seqtk seq [options] &lt;in.fq&gt;|&lt;in.fa&gt;</span>\n<span class="pl-s"></span>\n<span class="pl-s">Options: -q INT    mask bases with quality lower than INT [0]</span>\n<span class="pl-s">         -X INT    mask bases with quality higher than INT [255]</span>\n<span class="pl-s">         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]</span>\n<span class="pl-s">         -l INT    number of residues per line; 0 for 2^32-1 [0]</span>\n<span class="pl-s">         -Q INT    quality shift: ASCII-INT gives base quality [33]</span>\n<span class="pl-s">         -s INT    random seed (effective with -f) [11]</span>\n<span class="pl-s">         -f FLOAT  sample FLOAT fraction of sequences [1]</span>\n<span class="pl-s">         -M FILE   mask regions in BED or name list FILE [null]</span>\n<span class="pl-s">         -L INT    drop sequences with length shorter than INT [0]</span>\n<span class="pl-s">         -c        mask complement region (effective with -M)</span>\n<span class="pl-s">         -r        reverse complement</span>\n<span class="pl-s">         -A        force FASTA output (discard quality)</span>\n<span class="pl-s">         -C        drop comments at the header lines</span>\n<span class="pl-s">         -N        drop sequences containing ambiguous bases</span>\n<span class="pl-s">         -1        output the 2n-1 reads only</span>\n<span class="pl-s">         -2        output the 2n reads only</span>\n<span class="pl-s">         -V        shift quality by \'(-Q) - 33\'</span>\n<span class="pl-s">         -U        convert all bases to uppercases</span>\n<span class="pl-s">         -S        strip of white spaces in sequences</span>\n<span class="pl-s"></span>\n<span class="pl-s"></span>\n<span class="pl-s">    <span class="pl-pds">]]&gt;</span></span>&lt;/<span class="pl-ent">help</span>&gt;\n    &lt;<span class="pl-ent">citations</span>&gt;\n        &lt;<span class="pl-ent">citation</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>bibtex<span class="pl-pds">"</span></span>&gt;\n@misc{githubseqtk,\n  author = {LastTODO, FirstTODO},\n  year = {TODO},\n  title = {seqtk},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/lh3/seqtk},\n}&lt;/<span class="pl-ent">citation</span>&gt;\n    &lt;/<span class="pl-ent">citations</span>&gt;\n&lt;/<span class="pl-ent">tool</span>&gt;</pre></div>\n<p dir="auto">至此，我们有了一个功能相当齐全的 Galaxy 工具，它带有测试和帮助。这是一个非常简单的示例——通常，您需要在工具中投入更多工作才能实现这一点， <code class="notranslate">tool_init</code> 实际上只是为了让您入门而设计的。</p>\n<p dir="auto">现在让我们检查并测试我们开发的工具。Planemo的 <code class="notranslate">lint</code>（或仅 <code class="notranslate">l</code> ）命令将检查工具的 XML 有效性，检查是否有明显的错误以及是否符合 IUC 的最佳做法。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ planemo l\nLinting tool /opt/galaxy/tools/seqtk_seq.xml\nApplying linter tests... CHECK\n.. CHECK: 1 test(s) found.\nApplying linter output... CHECK\n.. INFO: 1 outputs found.\nApplying linter inputs... CHECK\n.. INFO: Found 1 input parameters.\nApplying linter help... CHECK\n.. CHECK: Tool contains help section.\n.. CHECK: Help contains valid reStructuredText.\nApplying linter general... CHECK\n.. CHECK: Tool defines a version [0.1.0].\n.. CHECK: Tool defines a name [Convert to FASTA (seqtk)].\n.. CHECK: Tool defines an id [seqtk_seq].\n.. CHECK: Tool targets 16.01 Galaxy profile.\nApplying linter command... CHECK\n.. INFO: Tool contains a command.\nApplying linter citations... CHECK\n.. CHECK: Found 1 likely valid citations.\nApplying linter tool_xsd... CHECK\n.. INFO: File validates against XML schema."><pre class="notranslate">$ planemo l\nLinting tool /opt/galaxy/tools/seqtk_seq.xml\nApplying linter tests... CHECK\n.. CHECK: 1 test(s) found.\nApplying linter output... CHECK\n.. INFO: 1 outputs found.\nApplying linter inputs... CHECK\n.. INFO: Found 1 input parameters.\nApplying linter help... CHECK\n.. CHECK: Tool contains <span class="pl-c1">help</span> section.\n.. CHECK: Help contains valid reStructuredText.\nApplying linter general... CHECK\n.. CHECK: Tool defines a version [0.1.0].\n.. CHECK: Tool defines a name [Convert to FASTA (seqtk)].\n.. CHECK: Tool defines an id [seqtk_seq].\n.. CHECK: Tool targets 16.01 Galaxy profile.\nApplying linter command... CHECK\n.. INFO: Tool contains a command.\nApplying linter citations... CHECK\n.. CHECK: Found 1 likely valid citations.\nApplying linter tool_xsd... CHECK\n.. INFO: File validates against XML schema.</pre></div>\n<p dir="auto">默认情况下， <code class="notranslate">lint</code> 会在您当前的工作目录中找到所有工具，但是我们可以使用 <code class="notranslate">planemo lint seqtk_seq.xml</code> 指定一个特定的工具。</p>\n<p dir="auto">接下来，我们可以使用 <code class="notranslate">test</code>（或仅执行 <code class="notranslate">t</code> ）命令运行工具的功能测试。这将打印很多输出（因为它启动了 Galaxy 实例），但最终应该显示我们通过的一项测试。</p>\n<blockquote>\n<p dir="auto">如果你的服务器已经安装了 Galaxy 实例，你可以编辑 ~/.planemo.yml 文件，指定 Galaxy 实例路径。</p>\n</blockquote>\n<div class="highlight highlight-source-yaml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="## Specify a default galaxy_root for the `test` and `serve` commands here.\ngalaxy_root: /home/user/galaxy"><pre class="notranslate"><span class="pl-c"><span class="pl-c">#</span># Specify a default galaxy_root for the `test` and `serve` commands here.</span>\n<span class="pl-ent">galaxy_root</span>: <span class="pl-s">/home/user/galaxy</span></pre></div>\n<blockquote>\n<p dir="auto">完整的 <code class="notranslate">~/.planemo.yml</code> 示例，参考：<a href="https://planemo.readthedocs.io/en/latest/configuration.html" rel="nofollow">https://planemo.readthedocs.io/en/latest/configuration.html</a></p>\n</blockquote>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ planemo t\n...\nAll 1 test(s) executed passed.\nseqtk_seq[0]: passed"><pre class="notranslate">$ planemo t\n...\nAll 1 test(s) executed passed.\nseqtk_seq[0]: passed</pre></div>\n<p dir="auto">除了在控制台中将测试结果显示为红色（失败）或绿色（通过）外，Planemo 还默认为测试结果创建 HTML 报告。 还有更多测试报告选项可用，例如 <code class="notranslate">--test_output_xunit</code>，在某些持续集成环境中很有用。有关更多选项，请参见 <code class="notranslate">planemo test --help</code> ，以及 <code class="notranslate">test_reports</code> 命令。</p>\n<p dir="auto">现在，我们可以使用 <code class="notranslate">serve</code>（或仅使用 <code class="notranslate">s</code> ）命令打开 Galaxy。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ planemo s\n...\nserving on http://127.0.0.1:9090"><pre class="notranslate">$ planemo s\n...\nserving on http://127.0.0.1:9090</pre></div>\n<p dir="auto">在网络浏览器中打开 <a href="http://127.0.0.1:9090" rel="nofollow">http://127.0.0.1:9090</a> 以查看您的新工具。</p>\n<p dir="auto">服务和测试可以通过各种命令行参数传递，例如 <code class="notranslate">--galaxy_root</code>，以指定要使用的 Galaxy 实例（默认情况下，planemo 将仅为 planemo 下载和管理实例）。</p>\n<h2 dir="auto">简单参数</h2>\n<p dir="auto">我们为 <code class="notranslate">seqtk seq</code> 命令构建了一个工具包的封装，但是该工具实际上具有我们可能希望向 Galaxy 用户公开的其他选项。</p>\n<p dir="auto">让我们从 <code class="notranslate">help</code> 命令中获取一些参数，并构建 Galaxy 的 <code class="notranslate">param</code> 块以粘贴到该工具的 <code class="notranslate">input</code> 块中。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="-V        shift quality by \'(-Q) - 33\'"><pre class="notranslate">-V        <span class="pl-c1">shift</span> quality by <span class="pl-s"><span class="pl-pds">\'</span>(-Q) - 33<span class="pl-pds">\'</span></span></pre></div>\n<p dir="auto">在上一节中，我们看到了输入文件在 <code class="notranslate">param</code> 块中是一个 <code class="notranslate">data</code> 的类型，除此之外我们还可以使用许多不同种类的参数。如标志参数（例如以上 <code class="notranslate">-V</code> 参数），通常在 Galaxy 工具的 XML 文件中由 <code class="notranslate">boolean</code> 来表示。</p>\n<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;param name=&quot;shift_quality&quot; type=&quot;boolean&quot; label=&quot;Shift quality&quot;\n       truevalue=&quot;-V&quot; falsevalue=&quot;&quot;\n       help=&quot;shift quality by \'(-Q) - 33\' (-V)&quot; /&gt;"><pre class="notranslate">&lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>shift_quality<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>boolean<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Shift quality<span class="pl-pds">"</span></span>\n       <span class="pl-e">truevalue</span>=<span class="pl-s"><span class="pl-pds">"</span>-V<span class="pl-pds">"</span></span> <span class="pl-e">falsevalue</span>=<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>\n       <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>shift quality by \'(-Q) - 33\' (-V)<span class="pl-pds">"</span></span> /&gt;</pre></div>\n<p dir="auto">然后，我们可以将 <code class="notranslate">$shift_quality</code> 粘贴在 <code class="notranslate">command</code> 块中，如果用户选择了此选项，它将扩展为 <code class="notranslate">-V</code> （因为我们已将其定义为 <code class="notranslate">truevalue</code> ）。如果用户未选择此选项，则 <code class="notranslate">$shift_quality</code> 将仅扩展为空字符串，而不会影响生成的命令行。</p>\n<p dir="auto">现在考虑以下的 <code class="notranslate">seqtk seq</code> 参数：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="-q INT    mask bases with quality lower than INT [0]\n-X INT    mask bases with quality higher than INT [255]"><pre class="notranslate">-q INT    mask bases with quality lower than INT [0]\n-X INT    mask bases with quality higher than INT [255]</pre></div>\n<p dir="auto">这些可以转换为 Galaxy 参数，如下所示：</p>\n<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;param name=&quot;quality_min&quot; type=&quot;integer&quot; label=&quot;Mask bases with quality lower than&quot;\n       value=&quot;0&quot; min=&quot;0&quot; max=&quot;255&quot; help=&quot;(-q)&quot; /&gt;\n&lt;param name=&quot;quality_max&quot; type=&quot;integer&quot; label=&quot;Mask bases with quality higher than&quot;\n       value=&quot;255&quot; min=&quot;0&quot; max=&quot;255&quot; help=&quot;(-X)&quot; /&gt;"><pre class="notranslate">&lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>quality_min<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>integer<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Mask bases with quality lower than<span class="pl-pds">"</span></span>\n       <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span> <span class="pl-e">min</span>=<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span> <span class="pl-e">max</span>=<span class="pl-s"><span class="pl-pds">"</span>255<span class="pl-pds">"</span></span> <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-q)<span class="pl-pds">"</span></span> /&gt;\n&lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>quality_max<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>integer<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Mask bases with quality higher than<span class="pl-pds">"</span></span>\n       <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>255<span class="pl-pds">"</span></span> <span class="pl-e">min</span>=<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span> <span class="pl-e">max</span>=<span class="pl-s"><span class="pl-pds">"</span>255<span class="pl-pds">"</span></span> <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-X)<span class="pl-pds">"</span></span> /&gt;</pre></div>\n<p dir="auto">这些可以作为 <code class="notranslate">-q $quality_min -X $quality_max</code> 添加到命令标签中。</p>\n<p dir="auto">此时，该工具将如下所示：</p>\n<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;tool id=&quot;seqtk_seq&quot; name=&quot;Convert to FASTA (seqtk)&quot; version=&quot;0.1.0&quot; python_template_version=&quot;3.5&quot;&gt;\n    &lt;requirements&gt;\n        &lt;requirement type=&quot;package&quot; version=&quot;1.2&quot;&gt;seqtk&lt;/requirement&gt;\n    &lt;/requirements&gt;\n    &lt;command detect_errors=&quot;exit_code&quot;&gt;&lt;![CDATA[\n        seqtk seq\n              $shift_quality\n              -q $quality_min\n              -X $quality_max\n              -a \'$input1\' &gt; \'$output1\'\n    ]]&gt;&lt;/command&gt;\n    &lt;inputs&gt;\n        &lt;param type=&quot;data&quot; name=&quot;input1&quot; format=&quot;fastq&quot; /&gt;\n        &lt;param name=&quot;shift_quality&quot; type=&quot;boolean&quot; label=&quot;Shift quality&quot; \n               truevalue=&quot;-V&quot; falsevalue=&quot;&quot;\n               help=&quot;shift quality by \'(-Q) - 33\' (-V)&quot; /&gt;\n        &lt;param name=&quot;quality_min&quot; type=&quot;integer&quot; label=&quot;Mask bases with quality lower than&quot; \n               value=&quot;0&quot; min=&quot;0&quot; max=&quot;255&quot; help=&quot;(-q)&quot; /&gt;\n        &lt;param name=&quot;quality_max&quot; type=&quot;integer&quot; label=&quot;Mask bases with quality higher than&quot; \n               value=&quot;255&quot; min=&quot;0&quot; max=&quot;255&quot; help=&quot;(-X)&quot; /&gt;\n    &lt;/inputs&gt;\n    &lt;outputs&gt;\n        &lt;data name=&quot;output1&quot; format=&quot;fasta&quot; /&gt;\n    &lt;/outputs&gt;\n    &lt;tests&gt;\n        &lt;test&gt;\n            &lt;param name=&quot;input1&quot; value=&quot;2.fastq&quot;/&gt;\n            &lt;output name=&quot;output1&quot; file=&quot;2.fasta&quot;/&gt;\n        &lt;/test&gt;\n    &lt;/tests&gt;\n    &lt;help&gt;&lt;![CDATA[\n        \nUsage:   seqtk seq [options] &lt;in.fq&gt;|&lt;in.fa&gt;\n\nOptions: -q INT    mask bases with quality lower than INT [0]\n         -X INT    mask bases with quality higher than INT [255]\n         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\n         -l INT    number of residues per line; 0 for 2^32-1 [0]\n         -Q INT    quality shift: ASCII-INT gives base quality [33]\n         -s INT    random seed (effective with -f) [11]\n         -f FLOAT  sample FLOAT fraction of sequences [1]\n         -M FILE   mask regions in BED or name list FILE [null]\n         -L INT    drop sequences with length shorter than INT [0]\n         -c        mask complement region (effective with -M)\n         -r        reverse complement\n         -A        force FASTA output (discard quality)\n         -C        drop comments at the header lines\n         -N        drop sequences containing ambiguous bases\n         -1        output the 2n-1 reads only\n         -2        output the 2n reads only\n         -V        shift quality by \'(-Q) - 33\'\n         -U        convert all bases to uppercases\n\n\n    ]]&gt;&lt;/help&gt;\n    &lt;citations&gt;\n        &lt;citation type=&quot;bibtex&quot;&gt;\n@misc{githubseqtk,\n  author = {LastTODO, FirstTODO},\n  year = {TODO},\n  title = {seqtk},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/lh3/seqtk},\n}&lt;/citation&gt;\n    &lt;/citations&gt;\n&lt;/tool&gt;"><pre class="notranslate">&lt;<span class="pl-ent">tool</span> <span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">"</span>seqtk_seq<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>Convert to FASTA (seqtk)<span class="pl-pds">"</span></span> <span class="pl-e">version</span>=<span class="pl-s"><span class="pl-pds">"</span>0.1.0<span class="pl-pds">"</span></span> <span class="pl-e">python_template_version</span>=<span class="pl-s"><span class="pl-pds">"</span>3.5<span class="pl-pds">"</span></span>&gt;\n    &lt;<span class="pl-ent">requirements</span>&gt;\n        &lt;<span class="pl-ent">requirement</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>package<span class="pl-pds">"</span></span> <span class="pl-e">version</span>=<span class="pl-s"><span class="pl-pds">"</span>1.2<span class="pl-pds">"</span></span>&gt;seqtk&lt;/<span class="pl-ent">requirement</span>&gt;\n    &lt;/<span class="pl-ent">requirements</span>&gt;\n    &lt;<span class="pl-ent">command</span> <span class="pl-e">detect_errors</span>=<span class="pl-s"><span class="pl-pds">"</span>exit_code<span class="pl-pds">"</span></span>&gt;<span class="pl-s"><span class="pl-pds">&lt;![CDATA[</span></span>\n<span class="pl-s">        seqtk seq</span>\n<span class="pl-s">              $shift_quality</span>\n<span class="pl-s">              -q $quality_min</span>\n<span class="pl-s">              -X $quality_max</span>\n<span class="pl-s">              -a \'$input1\' &gt; \'$output1\'</span>\n<span class="pl-s">    <span class="pl-pds">]]&gt;</span></span>&lt;/<span class="pl-ent">command</span>&gt;\n    &lt;<span class="pl-ent">inputs</span>&gt;\n        &lt;<span class="pl-ent">param</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>input1<span class="pl-pds">"</span></span> <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>fastq<span class="pl-pds">"</span></span> /&gt;\n        &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>shift_quality<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>boolean<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Shift quality<span class="pl-pds">"</span></span> \n               <span class="pl-e">truevalue</span>=<span class="pl-s"><span class="pl-pds">"</span>-V<span class="pl-pds">"</span></span> <span class="pl-e">falsevalue</span>=<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>\n               <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>shift quality by \'(-Q) - 33\' (-V)<span class="pl-pds">"</span></span> /&gt;\n        &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>quality_min<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>integer<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Mask bases with quality lower than<span class="pl-pds">"</span></span> \n               <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span> <span class="pl-e">min</span>=<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span> <span class="pl-e">max</span>=<span class="pl-s"><span class="pl-pds">"</span>255<span class="pl-pds">"</span></span> <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-q)<span class="pl-pds">"</span></span> /&gt;\n        &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>quality_max<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>integer<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Mask bases with quality higher than<span class="pl-pds">"</span></span> \n               <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>255<span class="pl-pds">"</span></span> <span class="pl-e">min</span>=<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span> <span class="pl-e">max</span>=<span class="pl-s"><span class="pl-pds">"</span>255<span class="pl-pds">"</span></span> <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-X)<span class="pl-pds">"</span></span> /&gt;\n    &lt;/<span class="pl-ent">inputs</span>&gt;\n    &lt;<span class="pl-ent">outputs</span>&gt;\n        &lt;<span class="pl-ent">data</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>output1<span class="pl-pds">"</span></span> <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>fasta<span class="pl-pds">"</span></span> /&gt;\n    &lt;/<span class="pl-ent">outputs</span>&gt;\n    &lt;<span class="pl-ent">tests</span>&gt;\n        &lt;<span class="pl-ent">test</span>&gt;\n            &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>input1<span class="pl-pds">"</span></span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>2.fastq<span class="pl-pds">"</span></span>/&gt;\n            &lt;<span class="pl-ent">output</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>output1<span class="pl-pds">"</span></span> <span class="pl-e">file</span>=<span class="pl-s"><span class="pl-pds">"</span>2.fasta<span class="pl-pds">"</span></span>/&gt;\n        &lt;/<span class="pl-ent">test</span>&gt;\n    &lt;/<span class="pl-ent">tests</span>&gt;\n    &lt;<span class="pl-ent">help</span>&gt;<span class="pl-s"><span class="pl-pds">&lt;![CDATA[</span></span>\n<span class="pl-s">        </span>\n<span class="pl-s">Usage:   seqtk seq [options] &lt;in.fq&gt;|&lt;in.fa&gt;</span>\n<span class="pl-s"></span>\n<span class="pl-s">Options: -q INT    mask bases with quality lower than INT [0]</span>\n<span class="pl-s">         -X INT    mask bases with quality higher than INT [255]</span>\n<span class="pl-s">         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]</span>\n<span class="pl-s">         -l INT    number of residues per line; 0 for 2^32-1 [0]</span>\n<span class="pl-s">         -Q INT    quality shift: ASCII-INT gives base quality [33]</span>\n<span class="pl-s">         -s INT    random seed (effective with -f) [11]</span>\n<span class="pl-s">         -f FLOAT  sample FLOAT fraction of sequences [1]</span>\n<span class="pl-s">         -M FILE   mask regions in BED or name list FILE [null]</span>\n<span class="pl-s">         -L INT    drop sequences with length shorter than INT [0]</span>\n<span class="pl-s">         -c        mask complement region (effective with -M)</span>\n<span class="pl-s">         -r        reverse complement</span>\n<span class="pl-s">         -A        force FASTA output (discard quality)</span>\n<span class="pl-s">         -C        drop comments at the header lines</span>\n<span class="pl-s">         -N        drop sequences containing ambiguous bases</span>\n<span class="pl-s">         -1        output the 2n-1 reads only</span>\n<span class="pl-s">         -2        output the 2n reads only</span>\n<span class="pl-s">         -V        shift quality by \'(-Q) - 33\'</span>\n<span class="pl-s">         -U        convert all bases to uppercases</span>\n<span class="pl-s"></span>\n<span class="pl-s"></span>\n<span class="pl-s">    <span class="pl-pds">]]&gt;</span></span>&lt;/<span class="pl-ent">help</span>&gt;\n    &lt;<span class="pl-ent">citations</span>&gt;\n        &lt;<span class="pl-ent">citation</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>bibtex<span class="pl-pds">"</span></span>&gt;\n@misc{githubseqtk,\n  author = {LastTODO, FirstTODO},\n  year = {TODO},\n  title = {seqtk},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/lh3/seqtk},\n}&lt;/<span class="pl-ent">citation</span>&gt;\n    &lt;/<span class="pl-ent">citations</span>&gt;\n&lt;/<span class="pl-ent">tool</span>&gt;</pre></div>\n<h2 dir="auto">条件参数</h2>\n<p dir="auto">以前的参数很简单，因为它们总是出现，现在考虑一下下面的参数。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="-M FILE   mask regions in BED or name list FILE [null]"><pre class="notranslate">-M FILE   mask regions <span class="pl-k">in</span> BED or name list FILE [null]</pre></div>\n<p dir="auto">我们可以通过添加属性 <code class="notranslate">optional ="true"</code> 将该数据类型参数标记为可选。</p>\n<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;param name=&quot;mask_regions&quot; type=&quot;data&quot; label=&quot;Mask regions in BED&quot;\n       format=&quot;bed&quot; help=&quot;(-M)&quot; optional=&quot;true&quot; /&gt;"><pre class="notranslate">&lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>mask_regions<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Mask regions in BED<span class="pl-pds">"</span></span>\n       <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>bed<span class="pl-pds">"</span></span> <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-M)<span class="pl-pds">"</span></span> <span class="pl-e">optional</span>=<span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span> /&gt;</pre></div>\n<p dir="auto">然后，不仅可以直接在命令块中使用 <code class="notranslate">$mask_regions</code>，还可以将其包装在 <code class="notranslate">if</code> 语句中（因为工具 XML 文件支持 <a href="https://cheetahtemplate.org/users_guide/index.html" rel="nofollow">Cheetah</a>）。</p>\n<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="#if $mask_regions\n-M \'$mask_regions\'\n#end if"><pre class="notranslate">#if $mask_regions\n-M \'$mask_regions\'\n#end if</pre></div>\n<p dir="auto">接着，我们考虑这一组参数：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="-s INT    random seed (effective with -f) [11]\n-f FLOAT  sample FLOAT fraction of sequences [1]"><pre class="notranslate">-s INT    random seed (effective with -f) [11]\n-f FLOAT  sample FLOAT fraction of sequences [1]</pre></div>\n<p dir="auto">在这种情况下，只有在设置了样本参数的情况下，才能看到或使用 <code class="notranslate">-s</code> 随机种子参数。我们可以使用 <code class="notranslate">conditional</code> 条件块来表达这一点。</p>\n<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;conditional name=&quot;sample&quot;&gt;\n    &lt;param name=&quot;sample_selector&quot; type=&quot;boolean&quot; label=&quot;Sample fraction of sequences&quot; /&gt;\n    &lt;when value=&quot;true&quot;&gt;\n        &lt;param name=&quot;fraction&quot; label=&quot;Fraction&quot; type=&quot;float&quot; value=&quot;1.0&quot;\n               help=&quot;(-f)&quot; /&gt;\n        &lt;param name=&quot;seed&quot; label=&quot;Random seed&quot; type=&quot;integer&quot; value=&quot;11&quot;\n               help=&quot;(-s)&quot; /&gt;\n    &lt;/when&gt;\n    &lt;when value=&quot;false&quot;&gt;\n    &lt;/when&gt;\n&lt;/conditional&gt;"><pre class="notranslate">&lt;<span class="pl-ent">conditional</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>sample<span class="pl-pds">"</span></span>&gt;\n    &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>sample_selector<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>boolean<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Sample fraction of sequences<span class="pl-pds">"</span></span> /&gt;\n    &lt;<span class="pl-ent">when</span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span>&gt;\n        &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>fraction<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Fraction<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>float<span class="pl-pds">"</span></span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>1.0<span class="pl-pds">"</span></span>\n               <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-f)<span class="pl-pds">"</span></span> /&gt;\n        &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>seed<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Random seed<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>integer<span class="pl-pds">"</span></span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>11<span class="pl-pds">"</span></span>\n               <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-s)<span class="pl-pds">"</span></span> /&gt;\n    &lt;/<span class="pl-ent">when</span>&gt;\n    &lt;<span class="pl-ent">when</span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>false<span class="pl-pds">"</span></span>&gt;\n    &lt;/<span class="pl-ent">when</span>&gt;\n&lt;/<span class="pl-ent">conditional</span>&gt;</pre></div>\n<p dir="auto">在命令块中，我们可以再次使用 <code class="notranslate">if</code> 语句包括这些参数。</p>\n<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="#if $sample.sample_selector\n-f $sample.fraction -s $sample.seed\n#end if"><pre class="notranslate">#if $sample.sample_selector\n-f $sample.fraction -s $sample.seed\n#end if</pre></div>\n<p dir="auto">注意，我们必须使用 <code class="notranslate">sample.</code> 的前缀来引用这个参数，因为它们是在 <code class="notranslate">sample</code> 的条件块内定义的。</p>\n<p dir="auto">现在该工具的最新版本如下：</p>\n<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;tool id=&quot;seqtk_seq&quot; name=&quot;Convert to FASTA (seqtk)&quot; version=&quot;0.1.0&quot; python_template_version=&quot;3.5&quot;&gt;\n    &lt;requirements&gt;\n        &lt;requirement type=&quot;package&quot; version=&quot;1.2&quot;&gt;seqtk&lt;/requirement&gt;\n    &lt;/requirements&gt;\n    &lt;command detect_errors=&quot;exit_code&quot;&gt;&lt;![CDATA[\n        seqtk seq\n              $shift_quality\n              -q $quality_min\n              -X $quality_max\n              #if $mask_regions\n                  -M \'$mask_regions\'\n              #end if\n              #if $sample.sample\n                  -f $sample.fraction\n                  -s $sample.seed\n              #end if\n              -a \'$input1\' &gt; \'$output1\'\n    ]]&gt;&lt;/command&gt;\n    &lt;inputs&gt;\n        &lt;param type=&quot;data&quot; name=&quot;input1&quot; format=&quot;fastq&quot; /&gt;\n        &lt;param name=&quot;shift_quality&quot; type=&quot;boolean&quot; label=&quot;Shift quality&quot; \n               truevalue=&quot;-V&quot; falsevalue=&quot;&quot;\n               help=&quot;shift quality by \'(-Q) - 33\' (-V)&quot; /&gt;\n        &lt;param name=&quot;quality_min&quot; type=&quot;integer&quot; label=&quot;Mask bases with quality lower than&quot; \n               value=&quot;0&quot; min=&quot;0&quot; max=&quot;255&quot; help=&quot;(-q)&quot; /&gt;\n        &lt;param name=&quot;quality_max&quot; type=&quot;integer&quot; label=&quot;Mask bases with quality higher than&quot; \n               value=&quot;255&quot; min=&quot;0&quot; max=&quot;255&quot; help=&quot;(-X)&quot; /&gt;\n        &lt;param name=&quot;mask_regions&quot; type=&quot;data&quot; label=&quot;Mask regions in BED&quot; \n               format=&quot;bed&quot; help=&quot;(-M)&quot; optional=&quot;true&quot; /&gt;\n        &lt;conditional name=&quot;sample&quot;&gt;\n            &lt;param name=&quot;sample&quot; type=&quot;boolean&quot; label=&quot;Sample fraction of sequences&quot; /&gt;\n            &lt;when value=&quot;true&quot;&gt;\n                &lt;param name=&quot;fraction&quot; label=&quot;Fraction&quot; type=&quot;float&quot; value=&quot;1.0&quot;\n                       help=&quot;(-f)&quot; /&gt;\n                &lt;param name=&quot;seed&quot; label=&quot;Random seed&quot; type=&quot;integer&quot; value=&quot;11&quot;\n                       help=&quot;(-s)&quot; /&gt;\n            &lt;/when&gt;\n            &lt;when value=&quot;false&quot;&gt;\n            &lt;/when&gt;\n        &lt;/conditional&gt;\n    &lt;/inputs&gt;\n    &lt;outputs&gt;\n        &lt;data name=&quot;output1&quot; format=&quot;fasta&quot; /&gt;\n    &lt;/outputs&gt;\n    &lt;tests&gt;\n        &lt;test&gt;\n            &lt;param name=&quot;input1&quot; value=&quot;2.fastq&quot;/&gt;\n            &lt;output name=&quot;output1&quot; file=&quot;2.fasta&quot;/&gt;\n        &lt;/test&gt;\n    &lt;/tests&gt;\n    &lt;help&gt;&lt;![CDATA[\n        \nUsage:   seqtk seq [options] &lt;in.fq&gt;|&lt;in.fa&gt;\n\nOptions: -q INT    mask bases with quality lower than INT [0]\n         -X INT    mask bases with quality higher than INT [255]\n         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\n         -l INT    number of residues per line; 0 for 2^32-1 [0]\n         -Q INT    quality shift: ASCII-INT gives base quality [33]\n         -s INT    random seed (effective with -f) [11]\n         -f FLOAT  sample FLOAT fraction of sequences [1]\n         -M FILE   mask regions in BED or name list FILE [null]\n         -L INT    drop sequences with length shorter than INT [0]\n         -c        mask complement region (effective with -M)\n         -r        reverse complement\n         -A        force FASTA output (discard quality)\n         -C        drop comments at the header lines\n         -N        drop sequences containing ambiguous bases\n         -1        output the 2n-1 reads only\n         -2        output the 2n reads only\n         -V        shift quality by \'(-Q) - 33\'\n         -U        convert all bases to uppercases\n\n\n    ]]&gt;&lt;/help&gt;\n    &lt;citations&gt;\n        &lt;citation type=&quot;bibtex&quot;&gt;\n@misc{githubseqtk,\n  author = {LastTODO, FirstTODO},\n  year = {TODO},\n  title = {seqtk},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/lh3/seqtk},\n}&lt;/citation&gt;\n    &lt;/citations&gt;\n&lt;/tool&gt;"><pre class="notranslate">&lt;<span class="pl-ent">tool</span> <span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">"</span>seqtk_seq<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>Convert to FASTA (seqtk)<span class="pl-pds">"</span></span> <span class="pl-e">version</span>=<span class="pl-s"><span class="pl-pds">"</span>0.1.0<span class="pl-pds">"</span></span> <span class="pl-e">python_template_version</span>=<span class="pl-s"><span class="pl-pds">"</span>3.5<span class="pl-pds">"</span></span>&gt;\n    &lt;<span class="pl-ent">requirements</span>&gt;\n        &lt;<span class="pl-ent">requirement</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>package<span class="pl-pds">"</span></span> <span class="pl-e">version</span>=<span class="pl-s"><span class="pl-pds">"</span>1.2<span class="pl-pds">"</span></span>&gt;seqtk&lt;/<span class="pl-ent">requirement</span>&gt;\n    &lt;/<span class="pl-ent">requirements</span>&gt;\n    &lt;<span class="pl-ent">command</span> <span class="pl-e">detect_errors</span>=<span class="pl-s"><span class="pl-pds">"</span>exit_code<span class="pl-pds">"</span></span>&gt;<span class="pl-s"><span class="pl-pds">&lt;![CDATA[</span></span>\n<span class="pl-s">        seqtk seq</span>\n<span class="pl-s">              $shift_quality</span>\n<span class="pl-s">              -q $quality_min</span>\n<span class="pl-s">              -X $quality_max</span>\n<span class="pl-s">              #if $mask_regions</span>\n<span class="pl-s">                  -M \'$mask_regions\'</span>\n<span class="pl-s">              #end if</span>\n<span class="pl-s">              #if $sample.sample</span>\n<span class="pl-s">                  -f $sample.fraction</span>\n<span class="pl-s">                  -s $sample.seed</span>\n<span class="pl-s">              #end if</span>\n<span class="pl-s">              -a \'$input1\' &gt; \'$output1\'</span>\n<span class="pl-s">    <span class="pl-pds">]]&gt;</span></span>&lt;/<span class="pl-ent">command</span>&gt;\n    &lt;<span class="pl-ent">inputs</span>&gt;\n        &lt;<span class="pl-ent">param</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>input1<span class="pl-pds">"</span></span> <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>fastq<span class="pl-pds">"</span></span> /&gt;\n        &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>shift_quality<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>boolean<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Shift quality<span class="pl-pds">"</span></span> \n               <span class="pl-e">truevalue</span>=<span class="pl-s"><span class="pl-pds">"</span>-V<span class="pl-pds">"</span></span> <span class="pl-e">falsevalue</span>=<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>\n               <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>shift quality by \'(-Q) - 33\' (-V)<span class="pl-pds">"</span></span> /&gt;\n        &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>quality_min<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>integer<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Mask bases with quality lower than<span class="pl-pds">"</span></span> \n               <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span> <span class="pl-e">min</span>=<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span> <span class="pl-e">max</span>=<span class="pl-s"><span class="pl-pds">"</span>255<span class="pl-pds">"</span></span> <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-q)<span class="pl-pds">"</span></span> /&gt;\n        &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>quality_max<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>integer<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Mask bases with quality higher than<span class="pl-pds">"</span></span> \n               <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>255<span class="pl-pds">"</span></span> <span class="pl-e">min</span>=<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span> <span class="pl-e">max</span>=<span class="pl-s"><span class="pl-pds">"</span>255<span class="pl-pds">"</span></span> <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-X)<span class="pl-pds">"</span></span> /&gt;\n        &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>mask_regions<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Mask regions in BED<span class="pl-pds">"</span></span> \n               <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>bed<span class="pl-pds">"</span></span> <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-M)<span class="pl-pds">"</span></span> <span class="pl-e">optional</span>=<span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span> /&gt;\n        &lt;<span class="pl-ent">conditional</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>sample<span class="pl-pds">"</span></span>&gt;\n            &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>sample<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>boolean<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Sample fraction of sequences<span class="pl-pds">"</span></span> /&gt;\n            &lt;<span class="pl-ent">when</span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span>&gt;\n                &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>fraction<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Fraction<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>float<span class="pl-pds">"</span></span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>1.0<span class="pl-pds">"</span></span>\n                       <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-f)<span class="pl-pds">"</span></span> /&gt;\n                &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>seed<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Random seed<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>integer<span class="pl-pds">"</span></span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>11<span class="pl-pds">"</span></span>\n                       <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-s)<span class="pl-pds">"</span></span> /&gt;\n            &lt;/<span class="pl-ent">when</span>&gt;\n            &lt;<span class="pl-ent">when</span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>false<span class="pl-pds">"</span></span>&gt;\n            &lt;/<span class="pl-ent">when</span>&gt;\n        &lt;/<span class="pl-ent">conditional</span>&gt;\n    &lt;/<span class="pl-ent">inputs</span>&gt;\n    &lt;<span class="pl-ent">outputs</span>&gt;\n        &lt;<span class="pl-ent">data</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>output1<span class="pl-pds">"</span></span> <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>fasta<span class="pl-pds">"</span></span> /&gt;\n    &lt;/<span class="pl-ent">outputs</span>&gt;\n    &lt;<span class="pl-ent">tests</span>&gt;\n        &lt;<span class="pl-ent">test</span>&gt;\n            &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>input1<span class="pl-pds">"</span></span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>2.fastq<span class="pl-pds">"</span></span>/&gt;\n            &lt;<span class="pl-ent">output</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>output1<span class="pl-pds">"</span></span> <span class="pl-e">file</span>=<span class="pl-s"><span class="pl-pds">"</span>2.fasta<span class="pl-pds">"</span></span>/&gt;\n        &lt;/<span class="pl-ent">test</span>&gt;\n    &lt;/<span class="pl-ent">tests</span>&gt;\n    &lt;<span class="pl-ent">help</span>&gt;<span class="pl-s"><span class="pl-pds">&lt;![CDATA[</span></span>\n<span class="pl-s">        </span>\n<span class="pl-s">Usage:   seqtk seq [options] &lt;in.fq&gt;|&lt;in.fa&gt;</span>\n<span class="pl-s"></span>\n<span class="pl-s">Options: -q INT    mask bases with quality lower than INT [0]</span>\n<span class="pl-s">         -X INT    mask bases with quality higher than INT [255]</span>\n<span class="pl-s">         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]</span>\n<span class="pl-s">         -l INT    number of residues per line; 0 for 2^32-1 [0]</span>\n<span class="pl-s">         -Q INT    quality shift: ASCII-INT gives base quality [33]</span>\n<span class="pl-s">         -s INT    random seed (effective with -f) [11]</span>\n<span class="pl-s">         -f FLOAT  sample FLOAT fraction of sequences [1]</span>\n<span class="pl-s">         -M FILE   mask regions in BED or name list FILE [null]</span>\n<span class="pl-s">         -L INT    drop sequences with length shorter than INT [0]</span>\n<span class="pl-s">         -c        mask complement region (effective with -M)</span>\n<span class="pl-s">         -r        reverse complement</span>\n<span class="pl-s">         -A        force FASTA output (discard quality)</span>\n<span class="pl-s">         -C        drop comments at the header lines</span>\n<span class="pl-s">         -N        drop sequences containing ambiguous bases</span>\n<span class="pl-s">         -1        output the 2n-1 reads only</span>\n<span class="pl-s">         -2        output the 2n reads only</span>\n<span class="pl-s">         -V        shift quality by \'(-Q) - 33\'</span>\n<span class="pl-s">         -U        convert all bases to uppercases</span>\n<span class="pl-s"></span>\n<span class="pl-s"></span>\n<span class="pl-s">    <span class="pl-pds">]]&gt;</span></span>&lt;/<span class="pl-ent">help</span>&gt;\n    &lt;<span class="pl-ent">citations</span>&gt;\n        &lt;<span class="pl-ent">citation</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>bibtex<span class="pl-pds">"</span></span>&gt;\n@misc{githubseqtk,\n  author = {LastTODO, FirstTODO},\n  year = {TODO},\n  title = {seqtk},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/lh3/seqtk},\n}&lt;/<span class="pl-ent">citation</span>&gt;\n    &lt;/<span class="pl-ent">citations</span>&gt;\n&lt;/<span class="pl-ent">tool</span>&gt;</pre></div>\n<p dir="auto">对于这样的工具，这些工具有很多选项，但在大多数情况下使用默认值是首选——一个常见的习惯用法是使用条件将参数分为简单部分和高级部分。</p>\n<p dir="auto">使用惯用法，更新此工具后的 XML 如下所示：</p>\n<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;tool id=&quot;seqtk_seq&quot; name=&quot;Convert to FASTA (seqtk)&quot; version=&quot;0.1.0&quot; python_template_version=&quot;3.5&quot;&gt;\n    &lt;requirements&gt;\n        &lt;requirement type=&quot;package&quot; version=&quot;1.2&quot;&gt;seqtk&lt;/requirement&gt;\n    &lt;/requirements&gt;\n    &lt;command detect_errors=&quot;exit_code&quot;&gt;&lt;![CDATA[\n        seqtk seq\n              #if $settings.advanced == &quot;advanced&quot;\n                  $settings.shift_quality\n                  -q $settings.quality_min\n                  -X $settings.quality_max\n                  #if $settings.mask_regions\n                      -M \'$settings.mask_regions\'\n                  #end if\n                  #if $settings.sample.sample\n                      -f $settings.sample.fraction\n                      -s $settings.sample.seed\n                  #end if\n              #end if\n              -a \'$input1\' &gt; \'$output1\'\n    ]]&gt;&lt;/command&gt;\n    &lt;inputs&gt;\n        &lt;param type=&quot;data&quot; name=&quot;input1&quot; format=&quot;fastq&quot; /&gt;\n        &lt;conditional name=&quot;settings&quot;&gt;\n            &lt;param name=&quot;advanced&quot; type=&quot;select&quot; label=&quot;Specify advanced parameters&quot;&gt;\n                &lt;option value=&quot;simple&quot; selected=&quot;true&quot;&gt;No, use program defaults.&lt;/option&gt;\n                &lt;option value=&quot;advanced&quot;&gt;Yes, see full parameter list.&lt;/option&gt;\n            &lt;/param&gt;\n            &lt;when value=&quot;simple&quot;&gt;\n            &lt;/when&gt;\n            &lt;when value=&quot;advanced&quot;&gt;\n                &lt;param name=&quot;shift_quality&quot; type=&quot;boolean&quot; label=&quot;Shift quality&quot; \n                       truevalue=&quot;-V&quot; falsevalue=&quot;&quot;\n                       help=&quot;shift quality by \'(-Q) - 33\' (-V)&quot; /&gt;\n                &lt;param name=&quot;quality_min&quot; type=&quot;integer&quot; label=&quot;Mask bases with quality lower than&quot; \n                       value=&quot;0&quot; min=&quot;0&quot; max=&quot;255&quot; help=&quot;(-q)&quot; /&gt;\n                &lt;param name=&quot;quality_max&quot; type=&quot;integer&quot; label=&quot;Mask bases with quality higher than&quot; \n                       value=&quot;255&quot; min=&quot;0&quot; max=&quot;255&quot; help=&quot;(-X)&quot; /&gt;\n                &lt;param name=&quot;mask_regions&quot; type=&quot;data&quot; label=&quot;Mask regions in BED&quot; \n                       format=&quot;bed&quot; help=&quot;(-M)&quot; optional=&quot;true&quot; /&gt;\n                &lt;conditional name=&quot;sample&quot;&gt;\n                    &lt;param name=&quot;sample&quot; type=&quot;boolean&quot; label=&quot;Sample fraction of sequences&quot; /&gt;\n                    &lt;when value=&quot;true&quot;&gt;\n                        &lt;param name=&quot;fraction&quot; label=&quot;Fraction&quot; type=&quot;float&quot; value=&quot;1.0&quot;\n                               help=&quot;(-f)&quot; /&gt;\n                        &lt;param name=&quot;seed&quot; label=&quot;Random seed&quot; type=&quot;integer&quot; value=&quot;11&quot;\n                               help=&quot;(-s)&quot; /&gt;\n                    &lt;/when&gt;\n                    &lt;when value=&quot;false&quot;&gt;\n                    &lt;/when&gt;\n                &lt;/conditional&gt;\n            &lt;/when&gt;\n        &lt;/conditional&gt;\n    &lt;/inputs&gt;\n    &lt;outputs&gt;\n        &lt;data name=&quot;output1&quot; format=&quot;fasta&quot; /&gt;\n    &lt;/outputs&gt;\n    &lt;tests&gt;\n        &lt;test&gt;\n            &lt;param name=&quot;input1&quot; value=&quot;2.fastq&quot;/&gt;\n            &lt;output name=&quot;output1&quot; file=&quot;2.fasta&quot;/&gt;\n        &lt;/test&gt;\n    &lt;/tests&gt;\n    &lt;help&gt;&lt;![CDATA[\n        \nUsage:   seqtk seq [options] &lt;in.fq&gt;|&lt;in.fa&gt;\n\nOptions: -q INT    mask bases with quality lower than INT [0]\n         -X INT    mask bases with quality higher than INT [255]\n         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\n         -l INT    number of residues per line; 0 for 2^32-1 [0]\n         -Q INT    quality shift: ASCII-INT gives base quality [33]\n         -s INT    random seed (effective with -f) [11]\n         -f FLOAT  sample FLOAT fraction of sequences [1]\n         -M FILE   mask regions in BED or name list FILE [null]\n         -L INT    drop sequences with length shorter than INT [0]\n         -c        mask complement region (effective with -M)\n         -r        reverse complement\n         -A        force FASTA output (discard quality)\n         -C        drop comments at the header lines\n         -N        drop sequences containing ambiguous bases\n         -1        output the 2n-1 reads only\n         -2        output the 2n reads only\n         -V        shift quality by \'(-Q) - 33\'\n         -U        convert all bases to uppercases\n\n\n    ]]&gt;&lt;/help&gt;\n    &lt;citations&gt;\n        &lt;citation type=&quot;bibtex&quot;&gt;\n@misc{githubseqtk,\n  author = {LastTODO, FirstTODO},\n  year = {TODO},\n  title = {seqtk},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/lh3/seqtk},\n}&lt;/citation&gt;\n    &lt;/citations&gt;\n&lt;/tool&gt;"><pre class="notranslate">&lt;<span class="pl-ent">tool</span> <span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">"</span>seqtk_seq<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>Convert to FASTA (seqtk)<span class="pl-pds">"</span></span> <span class="pl-e">version</span>=<span class="pl-s"><span class="pl-pds">"</span>0.1.0<span class="pl-pds">"</span></span> <span class="pl-e">python_template_version</span>=<span class="pl-s"><span class="pl-pds">"</span>3.5<span class="pl-pds">"</span></span>&gt;\n    &lt;<span class="pl-ent">requirements</span>&gt;\n        &lt;<span class="pl-ent">requirement</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>package<span class="pl-pds">"</span></span> <span class="pl-e">version</span>=<span class="pl-s"><span class="pl-pds">"</span>1.2<span class="pl-pds">"</span></span>&gt;seqtk&lt;/<span class="pl-ent">requirement</span>&gt;\n    &lt;/<span class="pl-ent">requirements</span>&gt;\n    &lt;<span class="pl-ent">command</span> <span class="pl-e">detect_errors</span>=<span class="pl-s"><span class="pl-pds">"</span>exit_code<span class="pl-pds">"</span></span>&gt;<span class="pl-s"><span class="pl-pds">&lt;![CDATA[</span></span>\n<span class="pl-s">        seqtk seq</span>\n<span class="pl-s">              #if $settings.advanced == "advanced"</span>\n<span class="pl-s">                  $settings.shift_quality</span>\n<span class="pl-s">                  -q $settings.quality_min</span>\n<span class="pl-s">                  -X $settings.quality_max</span>\n<span class="pl-s">                  #if $settings.mask_regions</span>\n<span class="pl-s">                      -M \'$settings.mask_regions\'</span>\n<span class="pl-s">                  #end if</span>\n<span class="pl-s">                  #if $settings.sample.sample</span>\n<span class="pl-s">                      -f $settings.sample.fraction</span>\n<span class="pl-s">                      -s $settings.sample.seed</span>\n<span class="pl-s">                  #end if</span>\n<span class="pl-s">              #end if</span>\n<span class="pl-s">              -a \'$input1\' &gt; \'$output1\'</span>\n<span class="pl-s">    <span class="pl-pds">]]&gt;</span></span>&lt;/<span class="pl-ent">command</span>&gt;\n    &lt;<span class="pl-ent">inputs</span>&gt;\n        &lt;<span class="pl-ent">param</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>input1<span class="pl-pds">"</span></span> <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>fastq<span class="pl-pds">"</span></span> /&gt;\n        &lt;<span class="pl-ent">conditional</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>settings<span class="pl-pds">"</span></span>&gt;\n            &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>advanced<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>select<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Specify advanced parameters<span class="pl-pds">"</span></span>&gt;\n                &lt;<span class="pl-ent">option</span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>simple<span class="pl-pds">"</span></span> <span class="pl-e">selected</span>=<span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span>&gt;No, use program defaults.&lt;/<span class="pl-ent">option</span>&gt;\n                &lt;<span class="pl-ent">option</span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>advanced<span class="pl-pds">"</span></span>&gt;Yes, see full parameter list.&lt;/<span class="pl-ent">option</span>&gt;\n            &lt;/<span class="pl-ent">param</span>&gt;\n            &lt;<span class="pl-ent">when</span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>simple<span class="pl-pds">"</span></span>&gt;\n            &lt;/<span class="pl-ent">when</span>&gt;\n            &lt;<span class="pl-ent">when</span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>advanced<span class="pl-pds">"</span></span>&gt;\n                &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>shift_quality<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>boolean<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Shift quality<span class="pl-pds">"</span></span> \n                       <span class="pl-e">truevalue</span>=<span class="pl-s"><span class="pl-pds">"</span>-V<span class="pl-pds">"</span></span> <span class="pl-e">falsevalue</span>=<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>\n                       <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>shift quality by \'(-Q) - 33\' (-V)<span class="pl-pds">"</span></span> /&gt;\n                &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>quality_min<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>integer<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Mask bases with quality lower than<span class="pl-pds">"</span></span> \n                       <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span> <span class="pl-e">min</span>=<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span> <span class="pl-e">max</span>=<span class="pl-s"><span class="pl-pds">"</span>255<span class="pl-pds">"</span></span> <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-q)<span class="pl-pds">"</span></span> /&gt;\n                &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>quality_max<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>integer<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Mask bases with quality higher than<span class="pl-pds">"</span></span> \n                       <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>255<span class="pl-pds">"</span></span> <span class="pl-e">min</span>=<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span> <span class="pl-e">max</span>=<span class="pl-s"><span class="pl-pds">"</span>255<span class="pl-pds">"</span></span> <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-X)<span class="pl-pds">"</span></span> /&gt;\n                &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>mask_regions<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Mask regions in BED<span class="pl-pds">"</span></span> \n                       <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>bed<span class="pl-pds">"</span></span> <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-M)<span class="pl-pds">"</span></span> <span class="pl-e">optional</span>=<span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span> /&gt;\n                &lt;<span class="pl-ent">conditional</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>sample<span class="pl-pds">"</span></span>&gt;\n                    &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>sample<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>boolean<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Sample fraction of sequences<span class="pl-pds">"</span></span> /&gt;\n                    &lt;<span class="pl-ent">when</span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span>&gt;\n                        &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>fraction<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Fraction<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>float<span class="pl-pds">"</span></span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>1.0<span class="pl-pds">"</span></span>\n                               <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-f)<span class="pl-pds">"</span></span> /&gt;\n                        &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>seed<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Random seed<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>integer<span class="pl-pds">"</span></span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>11<span class="pl-pds">"</span></span>\n                               <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-s)<span class="pl-pds">"</span></span> /&gt;\n                    &lt;/<span class="pl-ent">when</span>&gt;\n                    &lt;<span class="pl-ent">when</span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>false<span class="pl-pds">"</span></span>&gt;\n                    &lt;/<span class="pl-ent">when</span>&gt;\n                &lt;/<span class="pl-ent">conditional</span>&gt;\n            &lt;/<span class="pl-ent">when</span>&gt;\n        &lt;/<span class="pl-ent">conditional</span>&gt;\n    &lt;/<span class="pl-ent">inputs</span>&gt;\n    &lt;<span class="pl-ent">outputs</span>&gt;\n        &lt;<span class="pl-ent">data</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>output1<span class="pl-pds">"</span></span> <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>fasta<span class="pl-pds">"</span></span> /&gt;\n    &lt;/<span class="pl-ent">outputs</span>&gt;\n    &lt;<span class="pl-ent">tests</span>&gt;\n        &lt;<span class="pl-ent">test</span>&gt;\n            &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>input1<span class="pl-pds">"</span></span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>2.fastq<span class="pl-pds">"</span></span>/&gt;\n            &lt;<span class="pl-ent">output</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>output1<span class="pl-pds">"</span></span> <span class="pl-e">file</span>=<span class="pl-s"><span class="pl-pds">"</span>2.fasta<span class="pl-pds">"</span></span>/&gt;\n        &lt;/<span class="pl-ent">test</span>&gt;\n    &lt;/<span class="pl-ent">tests</span>&gt;\n    &lt;<span class="pl-ent">help</span>&gt;<span class="pl-s"><span class="pl-pds">&lt;![CDATA[</span></span>\n<span class="pl-s">        </span>\n<span class="pl-s">Usage:   seqtk seq [options] &lt;in.fq&gt;|&lt;in.fa&gt;</span>\n<span class="pl-s"></span>\n<span class="pl-s">Options: -q INT    mask bases with quality lower than INT [0]</span>\n<span class="pl-s">         -X INT    mask bases with quality higher than INT [255]</span>\n<span class="pl-s">         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]</span>\n<span class="pl-s">         -l INT    number of residues per line; 0 for 2^32-1 [0]</span>\n<span class="pl-s">         -Q INT    quality shift: ASCII-INT gives base quality [33]</span>\n<span class="pl-s">         -s INT    random seed (effective with -f) [11]</span>\n<span class="pl-s">         -f FLOAT  sample FLOAT fraction of sequences [1]</span>\n<span class="pl-s">         -M FILE   mask regions in BED or name list FILE [null]</span>\n<span class="pl-s">         -L INT    drop sequences with length shorter than INT [0]</span>\n<span class="pl-s">         -c        mask complement region (effective with -M)</span>\n<span class="pl-s">         -r        reverse complement</span>\n<span class="pl-s">         -A        force FASTA output (discard quality)</span>\n<span class="pl-s">         -C        drop comments at the header lines</span>\n<span class="pl-s">         -N        drop sequences containing ambiguous bases</span>\n<span class="pl-s">         -1        output the 2n-1 reads only</span>\n<span class="pl-s">         -2        output the 2n reads only</span>\n<span class="pl-s">         -V        shift quality by \'(-Q) - 33\'</span>\n<span class="pl-s">         -U        convert all bases to uppercases</span>\n<span class="pl-s"></span>\n<span class="pl-s"></span>\n<span class="pl-s">    <span class="pl-pds">]]&gt;</span></span>&lt;/<span class="pl-ent">help</span>&gt;\n    &lt;<span class="pl-ent">citations</span>&gt;\n        &lt;<span class="pl-ent">citation</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>bibtex<span class="pl-pds">"</span></span>&gt;\n@misc{githubseqtk,\n  author = {LastTODO, FirstTODO},\n  year = {TODO},\n  title = {seqtk},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/lh3/seqtk},\n}&lt;/<span class="pl-ent">citation</span>&gt;\n    &lt;/<span class="pl-ent">citations</span>&gt;\n&lt;/<span class="pl-ent">tool</span>&gt;</pre></div>\n<h2 dir="auto">脚本封装</h2>\n<p dir="auto">Tool Shed 上已经提供了许多常见的生物信息学应用程序，因此一项常见的开发任务是将各种复杂程度的脚本集成到 Galaxy 中。</p>\n<p dir="auto">考虑以下小型 Perl 脚本。</p>\n<div class="highlight highlight-source-perl notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="#!/usr/bin/perl -w\n\n# usage : perl toolExample.pl &lt;FASTA file&gt; &lt;output file&gt;\n\nopen (IN, &quot;&lt;$ARGV[0]&quot;);\nopen (OUT, &quot;&gt;$ARGV[1]&quot;);\nwhile (&lt;IN&gt;) {\n    chop;\n    if (m/^&gt;/) {\n        s/^&gt;//;\n        if ($. &gt; 1) {\n            print OUT sprintf(&quot;%.3f&quot;, $gc/$length) . &quot;\\n&quot;;\n        }\n        $gc = 0;\n        $length = 0;\n    } else {\n        ++$gc while m/[gc]/ig;\n        $length += length $_;\n    }\n}\nprint OUT sprintf(&quot;%.3f&quot;, $gc/$length) . &quot;\\n&quot;;\nclose( IN );\nclose( OUT );"><pre class="notranslate"><span class="pl-c"><span class="pl-c">#</span>!/usr/bin/perl -w</span>\n\n<span class="pl-c"><span class="pl-c">#</span> usage : perl toolExample.pl &lt;FASTA file&gt; &lt;output file&gt;</span>\n\n<span class="pl-c1">open</span> (IN, <span class="pl-s"><span class="pl-pds">"</span>&lt;<span class="pl-smi">$ARGV</span>[0]<span class="pl-pds">"</span></span>);\n<span class="pl-c1">open</span> (OUT, <span class="pl-s"><span class="pl-pds">"</span>&gt;<span class="pl-smi">$ARGV</span>[1]<span class="pl-pds">"</span></span>);\n<span class="pl-k">while</span> (&lt;IN&gt;) {\n    <span class="pl-c1">chop</span>;\n    <span class="pl-k">if</span> (<span class="pl-sr"><span class="pl-pds"><span class="pl-c1">m</span>/</span>^&gt;<span class="pl-pds">/</span></span>) {\n        <span class="pl-sr"><span class="pl-pds"><span class="pl-c1">s</span>/</span>^&gt;</span><span class="pl-sr"><span class="pl-pds">//</span></span>;\n        <span class="pl-k">if</span> (<span class="pl-smi">$.</span> &gt; 1) {\n            <span class="pl-c1">print</span> OUT <span class="pl-c1">sprintf</span>(<span class="pl-s"><span class="pl-pds">"</span>%.3f<span class="pl-pds">"</span></span>, <span class="pl-smi">$gc</span>/<span class="pl-smi">$length</span>) . <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\n</span><span class="pl-pds">"</span></span>;\n        }\n        <span class="pl-smi">$gc</span> = 0;\n        <span class="pl-smi">$length</span> = 0;\n    } <span class="pl-k">else</span> {\n        ++<span class="pl-smi">$gc</span> <span class="pl-k">while</span> <span class="pl-sr"><span class="pl-pds"><span class="pl-c1">m</span>/</span><span class="pl-c1">[gc]</span><span class="pl-pds">/</span></span><span class="pl-sr"><span class="pl-pds"><span class="pl-k">ig</span></span></span>;\n        <span class="pl-smi">$length</span> += <span class="pl-c1">length</span> <span class="pl-smi">$_</span>;\n    }\n}\n<span class="pl-c1">print</span> OUT <span class="pl-c1">sprintf</span>(<span class="pl-s"><span class="pl-pds">"</span>%.3f<span class="pl-pds">"</span></span>, <span class="pl-smi">$gc</span>/<span class="pl-smi">$length</span>) . <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\n</span><span class="pl-pds">"</span></span>;\n<span class="pl-c1">close</span>( IN );\n<span class="pl-c1">close</span>( OUT );</pre></div>\n<p dir="auto">可以按照以下步骤为此脚本构建 Galaxy 工具，并将脚本与工具 XML 文件本身放在同一目录中。这里的特殊值 <code class="notranslate">$__ tool_directory__</code> 是指工具（即 xml 文件）所在的目录。</p>\n<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;tool id=&quot;gc_content&quot; name=&quot;Compute GC content&quot;&gt;\n  &lt;description&gt;for each sequence in a file&lt;/description&gt;\n  &lt;command&gt;perl \'$__tool_directory__/gc_content.pl\' \'$input\' output.tsv&lt;/command&gt;\n  &lt;inputs&gt;\n    &lt;param name=&quot;input&quot; type=&quot;data&quot; format=&quot;fasta&quot; label=&quot;Source file&quot;/&gt;\n  &lt;/inputs&gt;\n  &lt;outputs&gt;\n    &lt;data name=&quot;output&quot; format=&quot;tabular&quot; from_work_dir=&quot;output.tsv&quot; /&gt;\n  &lt;/outputs&gt;\n  &lt;help&gt;\nThis tool computes GC content from a FASTA file.\n  &lt;/help&gt;\n&lt;/tool&gt;"><pre class="notranslate">&lt;<span class="pl-ent">tool</span> <span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">"</span>gc_content<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>Compute GC content<span class="pl-pds">"</span></span>&gt;\n  &lt;<span class="pl-ent">description</span>&gt;for each sequence in a file&lt;/<span class="pl-ent">description</span>&gt;\n  &lt;<span class="pl-ent">command</span>&gt;perl \'$__tool_directory__/gc_content.pl\' \'$input\' output.tsv&lt;/<span class="pl-ent">command</span>&gt;\n  &lt;<span class="pl-ent">inputs</span>&gt;\n    &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>input<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span> <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>fasta<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Source file<span class="pl-pds">"</span></span>/&gt;\n  &lt;/<span class="pl-ent">inputs</span>&gt;\n  &lt;<span class="pl-ent">outputs</span>&gt;\n    &lt;<span class="pl-ent">data</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>output<span class="pl-pds">"</span></span> <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>tabular<span class="pl-pds">"</span></span> <span class="pl-e">from_work_dir</span>=<span class="pl-s"><span class="pl-pds">"</span>output.tsv<span class="pl-pds">"</span></span> /&gt;\n  &lt;/<span class="pl-ent">outputs</span>&gt;\n  &lt;<span class="pl-ent">help</span>&gt;\nThis tool computes GC content from a FASTA file.\n  &lt;/<span class="pl-ent">help</span>&gt;\n&lt;/<span class="pl-ent">tool</span>&gt;</pre></div>\n<h2 dir="auto">Macros 宏集</h2>\n<p dir="auto">如果您希望为单个相对简单的应用程序或脚本编写工具，则应跳过本节。如果您希望维护一系列相关工具——经验表明，您将意识到有很多重复的 XML 可以很好地做到这一点。Galaxy工具 XML 宏可以帮助减少这种重复。</p>\n<p dir="auto">通过使用 <code class="notranslate">--macros</code> 标志，Planemo 的 <code class="notranslate">tool_init</code> 命令可用于生成适合工具套件的宏文件。我们看一下以前的 <code class="notranslate">tool_init</code> 命令的变体（唯一的区别是现在我们添加了 <code class="notranslate">--macros</code> 标志）。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ planemo tool_init --force \\\n                    --macros \\\n                    --id \'seqtk_seq\' \\\n                    --name \'Convert to FASTA (seqtk)\' \\\n                    --requirement seqtk@1.2 \\\n                    --example_command \'seqtk seq -A 2.fastq &gt; 2.fasta\' \\\n                    --example_input 2.fastq \\\n                    --example_output 2.fasta \\\n                    --test_case \\\n                    --help_from_command \'seqtk seq\'"><pre class="notranslate">$ planemo tool_init --force \\\n                    --macros \\\n                    --id <span class="pl-s"><span class="pl-pds">\'</span>seqtk_seq<span class="pl-pds">\'</span></span> \\\n                    --name <span class="pl-s"><span class="pl-pds">\'</span>Convert to FASTA (seqtk)<span class="pl-pds">\'</span></span> \\\n                    --requirement seqtk@1.2 \\\n                    --example_command <span class="pl-s"><span class="pl-pds">\'</span>seqtk seq -A 2.fastq &gt; 2.fasta<span class="pl-pds">\'</span></span> \\\n                    --example_input 2.fastq \\\n                    --example_output 2.fasta \\\n                    --test_case \\\n                    --help_from_command <span class="pl-s"><span class="pl-pds">\'</span>seqtk seq<span class="pl-pds">\'</span></span></pre></div>\n<p dir="auto">这将在当前目录中产生两个文件（ <code class="notranslate">seqtk_seq.xml</code> 和 <code class="notranslate">macros.xml</code>），而不是一个。</p>\n<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;tool id=&quot;seqtk_seq&quot; name=&quot;Convert to FASTA (seqtk)&quot; version=&quot;0.1.0&quot; python_template_version=&quot;3.5&quot;&gt;\n    &lt;macros&gt;\n        &lt;import&gt;macros.xml&lt;/import&gt;\n    &lt;/macros&gt;\n    &lt;expand macro=&quot;requirements&quot; /&gt;\n    &lt;command detect_errors=&quot;exit_code&quot;&gt;&lt;![CDATA[\n        seqtk seq -A \'$input1\' &gt; \'$output1\'\n    ]]&gt;&lt;/command&gt;\n    &lt;inputs&gt;\n        &lt;param type=&quot;data&quot; name=&quot;input1&quot; format=&quot;fastq&quot; /&gt;\n    &lt;/inputs&gt;\n    &lt;outputs&gt;\n        &lt;data name=&quot;output1&quot; format=&quot;fasta&quot; /&gt;\n    &lt;/outputs&gt;\n    &lt;tests&gt;\n        &lt;test&gt;\n            &lt;param name=&quot;input1&quot; value=&quot;2.fastq&quot;/&gt;\n            &lt;output name=&quot;output1&quot; file=&quot;2.fasta&quot;/&gt;\n        &lt;/test&gt;\n    &lt;/tests&gt;\n    &lt;help&gt;&lt;![CDATA[\n\nUsage:   seqtk seq [options] &lt;in.fq&gt;|&lt;in.fa&gt;\n\nOptions: -q INT    mask bases with quality lower than INT [0]\n         -X INT    mask bases with quality higher than INT [255]\n         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\n         -l INT    number of residues per line; 0 for 2^32-1 [0]\n         -Q INT    quality shift: ASCII-INT gives base quality [33]\n         -s INT    random seed (effective with -f) [11]\n         -f FLOAT  sample FLOAT fraction of sequences [1]\n         -M FILE   mask regions in BED or name list FILE [null]\n         -L INT    drop sequences with length shorter than INT [0]\n         -c        mask complement region (effective with -M)\n         -r        reverse complement\n         -A        force FASTA output (discard quality)\n         -C        drop comments at the header lines\n         -N        drop sequences containing ambiguous bases\n         -1        output the 2n-1 reads only\n         -2        output the 2n reads only\n         -V        shift quality by \'(-Q) - 33\'\n         -U        convert all bases to uppercases\n         -S        strip of white spaces in sequences\n\n\n    ]]&gt;&lt;/help&gt;\n    &lt;expand macro=&quot;citations&quot; /&gt;\n&lt;/tool&gt;"><pre class="notranslate">&lt;<span class="pl-ent">tool</span> <span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">"</span>seqtk_seq<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>Convert to FASTA (seqtk)<span class="pl-pds">"</span></span> <span class="pl-e">version</span>=<span class="pl-s"><span class="pl-pds">"</span>0.1.0<span class="pl-pds">"</span></span> <span class="pl-e">python_template_version</span>=<span class="pl-s"><span class="pl-pds">"</span>3.5<span class="pl-pds">"</span></span>&gt;\n    &lt;<span class="pl-ent">macros</span>&gt;\n        &lt;<span class="pl-ent">import</span>&gt;macros.xml&lt;/<span class="pl-ent">import</span>&gt;\n    &lt;/<span class="pl-ent">macros</span>&gt;\n    &lt;<span class="pl-ent">expand</span> <span class="pl-e">macro</span>=<span class="pl-s"><span class="pl-pds">"</span>requirements<span class="pl-pds">"</span></span> /&gt;\n    &lt;<span class="pl-ent">command</span> <span class="pl-e">detect_errors</span>=<span class="pl-s"><span class="pl-pds">"</span>exit_code<span class="pl-pds">"</span></span>&gt;<span class="pl-s"><span class="pl-pds">&lt;![CDATA[</span></span>\n<span class="pl-s">        seqtk seq -A \'$input1\' &gt; \'$output1\'</span>\n<span class="pl-s">    <span class="pl-pds">]]&gt;</span></span>&lt;/<span class="pl-ent">command</span>&gt;\n    &lt;<span class="pl-ent">inputs</span>&gt;\n        &lt;<span class="pl-ent">param</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>input1<span class="pl-pds">"</span></span> <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>fastq<span class="pl-pds">"</span></span> /&gt;\n    &lt;/<span class="pl-ent">inputs</span>&gt;\n    &lt;<span class="pl-ent">outputs</span>&gt;\n        &lt;<span class="pl-ent">data</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>output1<span class="pl-pds">"</span></span> <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>fasta<span class="pl-pds">"</span></span> /&gt;\n    &lt;/<span class="pl-ent">outputs</span>&gt;\n    &lt;<span class="pl-ent">tests</span>&gt;\n        &lt;<span class="pl-ent">test</span>&gt;\n            &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>input1<span class="pl-pds">"</span></span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>2.fastq<span class="pl-pds">"</span></span>/&gt;\n            &lt;<span class="pl-ent">output</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>output1<span class="pl-pds">"</span></span> <span class="pl-e">file</span>=<span class="pl-s"><span class="pl-pds">"</span>2.fasta<span class="pl-pds">"</span></span>/&gt;\n        &lt;/<span class="pl-ent">test</span>&gt;\n    &lt;/<span class="pl-ent">tests</span>&gt;\n    &lt;<span class="pl-ent">help</span>&gt;<span class="pl-s"><span class="pl-pds">&lt;![CDATA[</span></span>\n<span class="pl-s"></span>\n<span class="pl-s">Usage:   seqtk seq [options] &lt;in.fq&gt;|&lt;in.fa&gt;</span>\n<span class="pl-s"></span>\n<span class="pl-s">Options: -q INT    mask bases with quality lower than INT [0]</span>\n<span class="pl-s">         -X INT    mask bases with quality higher than INT [255]</span>\n<span class="pl-s">         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]</span>\n<span class="pl-s">         -l INT    number of residues per line; 0 for 2^32-1 [0]</span>\n<span class="pl-s">         -Q INT    quality shift: ASCII-INT gives base quality [33]</span>\n<span class="pl-s">         -s INT    random seed (effective with -f) [11]</span>\n<span class="pl-s">         -f FLOAT  sample FLOAT fraction of sequences [1]</span>\n<span class="pl-s">         -M FILE   mask regions in BED or name list FILE [null]</span>\n<span class="pl-s">         -L INT    drop sequences with length shorter than INT [0]</span>\n<span class="pl-s">         -c        mask complement region (effective with -M)</span>\n<span class="pl-s">         -r        reverse complement</span>\n<span class="pl-s">         -A        force FASTA output (discard quality)</span>\n<span class="pl-s">         -C        drop comments at the header lines</span>\n<span class="pl-s">         -N        drop sequences containing ambiguous bases</span>\n<span class="pl-s">         -1        output the 2n-1 reads only</span>\n<span class="pl-s">         -2        output the 2n reads only</span>\n<span class="pl-s">         -V        shift quality by \'(-Q) - 33\'</span>\n<span class="pl-s">         -U        convert all bases to uppercases</span>\n<span class="pl-s">         -S        strip of white spaces in sequences</span>\n<span class="pl-s"></span>\n<span class="pl-s"></span>\n<span class="pl-s">    <span class="pl-pds">]]&gt;</span></span>&lt;/<span class="pl-ent">help</span>&gt;\n    &lt;<span class="pl-ent">expand</span> <span class="pl-e">macro</span>=<span class="pl-s"><span class="pl-pds">"</span>citations<span class="pl-pds">"</span></span> /&gt;\n&lt;/<span class="pl-ent">tool</span>&gt;</pre></div>\n<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;macros&gt;\n    &lt;xml name=&quot;requirements&quot;&gt;\n        &lt;requirements&gt;\n        &lt;requirement type=&quot;package&quot; version=&quot;1.2&quot;&gt;seqtk&lt;/requirement&gt;\n            &lt;yield/&gt;\n        &lt;/requirements&gt;\n    &lt;/xml&gt;\n    &lt;xml name=&quot;citations&quot;&gt;\n        &lt;citations&gt;\n            &lt;yield /&gt;\n        &lt;/citations&gt;\n    &lt;/xml&gt;\n&lt;/macros&gt;"><pre class="notranslate">&lt;<span class="pl-ent">macros</span>&gt;\n    &lt;<span class="pl-ent">xml</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>requirements<span class="pl-pds">"</span></span>&gt;\n        &lt;<span class="pl-ent">requirements</span>&gt;\n        &lt;<span class="pl-ent">requirement</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>package<span class="pl-pds">"</span></span> <span class="pl-e">version</span>=<span class="pl-s"><span class="pl-pds">"</span>1.2<span class="pl-pds">"</span></span>&gt;seqtk&lt;/<span class="pl-ent">requirement</span>&gt;\n            &lt;<span class="pl-ent">yield</span>/&gt;\n        &lt;/<span class="pl-ent">requirements</span>&gt;\n    &lt;/<span class="pl-ent">xml</span>&gt;\n    &lt;<span class="pl-ent">xml</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>citations<span class="pl-pds">"</span></span>&gt;\n        &lt;<span class="pl-ent">citations</span>&gt;\n            &lt;<span class="pl-ent">yield</span> /&gt;\n        &lt;/<span class="pl-ent">citations</span>&gt;\n    &lt;/<span class="pl-ent">xml</span>&gt;\n&lt;/<span class="pl-ent">macros</span>&gt;</pre></div>\n<p dir="auto">如您在上面的代码中所看到的，宏是可重用的 XML 块，它们使避免重复和保持 XML 简洁变得更加容易。</p>\n<h2 dir="auto">参考资料</h2>\n<ul dir="auto">\n<li><a href="https://wiki.galaxyproject.org/Admin/Tools/ToolConfigSyntax#Reusing_Repeated_Configuration_Elements" rel="nofollow">Macros syntax</a> on the Galaxy Wiki.</li>\n<li><a href="https://github.com/galaxyproject/tools-iuc/tree/master/tools/gatk2">GATK tools</a> (example tools making extensive use of macros)</li>\n<li><a href="https://github.com/galaxyproject/tools-iuc/tree/master/tools/gemini">gemini tools</a> (example tools making extensive use of macros)</li>\n<li><a href="https://github.com/galaxyproject/tools-iuc/tree/master/tools/bedtools">bedtools tools</a> (example tools making extensive use of macros)</li>\n<li>Macros implementation details - <a href="https://bitbucket.org/galaxy/galaxy-central/pull-request/129/implement-macro-engine-to-reduce-tool/diff" rel="nofollow">Pull Request #129</a> and <a href="https://bitbucket.org/galaxy/galaxy-central/pull-request/140/improvements-to-tool-xml-macroing-system/diff" rel="nofollow">Pull Request #140</a></li>\n<li><a href="https://docs.galaxyproject.org/en/latest/dev/schema.html" rel="nofollow">Galaxy’s Tool XML Syntax</a></li>\n<li><a href="https://galaxyproject.org/develop/resources-tools/" rel="nofollow">Big List of Tool Development Resources</a></li>\n<li><a href="https://cheetahtemplate.org/users_guide/index.html" rel="nofollow">Cheetah templating</a></li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '3.1-Galaxy'}, 'labels': {'nodes': [{'name': '3.1.x-GalaxyOther'}]}, 'comments': {'nodes': []}}, {'title': '越来越难用的国内代码托管平台', 'number': 56, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/56', 'createdAt': '2024-02-02T03:26:02Z', 'lastEditedAt': '2024-02-04T00:48:19Z', 'updatedAt': '2024-02-04T00:48:19Z', 'body': '国内的代码平台对个人用户极其不友好，GitHub 可用的情况下，还是继续用着 GitHub 吧。\r\n\r\n<!-- more -->\r\n\r\n## 码云\r\n\r\nGitee 的 Issues 永远都无法搜索内容 - <https://gitee.com/oschina/git-osc/issues/I7T4W6>，感觉社区版本已经在摆烂了，现在他们的重点已经放在了企业版本，但是企业版本又难用的要死！\r\n\r\n## 扣钉\r\n\r\nCoding 现在的页面逻辑我是已经搞不明白了，注销的组织名称永远无法释放不说，在代码仓库更是连 Issues 都去掉了......\r\n\r\n## 极狐\r\n\r\n单是从体验上来说，背靠着 Gitlab 的 [极狐(GitLab)](https://gitlab.cn/) 其实做的还不错，虽然也还没有 APP。        \r\n- [极狐 GitLab 怎么样好不好_极狐 GitLab 优势有哪些-极狐 GitLab](https://gitlab.cn/is-it-any-good/)        \r\n- [极狐 GitLab vs GitLab vs GitHub vs Gitee](https://gitlab.cn/comparison/)        \r\n![gitlab-jh](https://shub.weiyan.tech/kgarden/2024/02/jihulab-vs-github-gitee.png)\r\n\r\n但是，现在问题来了，极狐从[2024年1月2日起开始要收费了](https://gitlab.cn/blog/2023/11/29/saas-adjustment/)，这又是一个昙花一现可以放弃的托管平台，即使付费也总让人感觉这个平台套路不少。\r\n\r\n## 最后\r\n\r\n最后，对于国内的代码托管平台的一个感受 —— 对个人用户极其不友好，都热衷去倒腾企业的版本了，所以，GitHub 可用的情况下，还是继续用着 GitHub 吧；某些情况下登录不上 GitHub 了，国内的 GitCode 作为备用暂时凑合着用吧；至于 Gitee/Coding/Jihulab，还是不要浪费时间去折腾了。', 'bodyText': '国内的代码平台对个人用户极其不友好，GitHub 可用的情况下，还是继续用着 GitHub 吧。\n\n码云\nGitee 的 Issues 永远都无法搜索内容 - https://gitee.com/oschina/git-osc/issues/I7T4W6，感觉社区版本已经在摆烂了，现在他们的重点已经放在了企业版本，但是企业版本又难用的要死！\n扣钉\nCoding 现在的页面逻辑我是已经搞不明白了，注销的组织名称永远无法释放不说，在代码仓库更是连 Issues 都去掉了......\n极狐\n单是从体验上来说，背靠着 Gitlab 的 极狐(GitLab) 其实做的还不错，虽然也还没有 APP。\n\n极狐 GitLab 怎么样好不好_极狐 GitLab 优势有哪些-极狐 GitLab\n极狐 GitLab vs GitLab vs GitHub vs Gitee\n\n\n但是，现在问题来了，极狐从2024年1月2日起开始要收费了，这又是一个昙花一现可以放弃的托管平台，即使付费也总让人感觉这个平台套路不少。\n最后\n最后，对于国内的代码托管平台的一个感受 —— 对个人用户极其不友好，都热衷去倒腾企业的版本了，所以，GitHub 可用的情况下，还是继续用着 GitHub 吧；某些情况下登录不上 GitHub 了，国内的 GitCode 作为备用暂时凑合着用吧；至于 Gitee/Coding/Jihulab，还是不要浪费时间去折腾了。', 'bodyHTML': '<p dir="auto">国内的代码平台对个人用户极其不友好，GitHub 可用的情况下，还是继续用着 GitHub 吧。</p>\n\n<h2 dir="auto">码云</h2>\n<p dir="auto">Gitee 的 Issues 永远都无法搜索内容 - <a href="https://gitee.com/oschina/git-osc/issues/I7T4W6" rel="nofollow">https://gitee.com/oschina/git-osc/issues/I7T4W6</a>，感觉社区版本已经在摆烂了，现在他们的重点已经放在了企业版本，但是企业版本又难用的要死！</p>\n<h2 dir="auto">扣钉</h2>\n<p dir="auto">Coding 现在的页面逻辑我是已经搞不明白了，注销的组织名称永远无法释放不说，在代码仓库更是连 Issues 都去掉了......</p>\n<h2 dir="auto">极狐</h2>\n<p dir="auto">单是从体验上来说，背靠着 Gitlab 的 <a href="https://gitlab.cn/" rel="nofollow">极狐(GitLab)</a> 其实做的还不错，虽然也还没有 APP。</p>\n<ul dir="auto">\n<li><a href="https://gitlab.cn/is-it-any-good/" rel="nofollow">极狐 GitLab 怎么样好不好_极狐 GitLab 优势有哪些-极狐 GitLab</a></li>\n<li><a href="https://gitlab.cn/comparison/" rel="nofollow">极狐 GitLab vs GitLab vs GitHub vs Gitee</a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/fce8efbf64a5c3ca4efde8cb1c226c56e7249b07af109b253c3a5561d69cff2e/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30322f6a6968756c61622d76732d6769746875622d67697465652e706e67"><img src="https://camo.githubusercontent.com/fce8efbf64a5c3ca4efde8cb1c226c56e7249b07af109b253c3a5561d69cff2e/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30322f6a6968756c61622d76732d6769746875622d67697465652e706e67" alt="gitlab-jh" data-canonical-src="https://shub.weiyan.tech/kgarden/2024/02/jihulab-vs-github-gitee.png" style="max-width: 100%;"></a></li>\n</ul>\n<p dir="auto">但是，现在问题来了，极狐从<a href="https://gitlab.cn/blog/2023/11/29/saas-adjustment/" rel="nofollow">2024年1月2日起开始要收费了</a>，这又是一个昙花一现可以放弃的托管平台，即使付费也总让人感觉这个平台套路不少。</p>\n<h2 dir="auto">最后</h2>\n<p dir="auto">最后，对于国内的代码托管平台的一个感受 —— 对个人用户极其不友好，都热衷去倒腾企业的版本了，所以，GitHub 可用的情况下，还是继续用着 GitHub 吧；某些情况下登录不上 GitHub 了，国内的 GitCode 作为备用暂时凑合着用吧；至于 Gitee/Coding/Jihulab，还是不要浪费时间去折腾了。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '从公众号到个人独立站点', 'number': 55, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/55', 'createdAt': '2024-01-25T12:28:05Z', 'lastEditedAt': '2024-01-25T12:29:50Z', 'updatedAt': '2024-01-25T12:29:50Z', 'body': '从 2023 年下半年以来 "**BioIT爱好者**" 这个公众号基本上很少更新了，这一点在《[公众号许久没有更新了](https://github.com/shenweiyan/Knowledge-Garden/discussions/28)》就提到过，现在唯一有所区别的是在 [GitHub Discussions](https://github.com/shenweiyan/Knowledge-Garden/discussions/) 的基础上又多了一个个人的独立站点。\r\n\r\n<!-- more -->\r\n\r\n![weiyan-cc-home](https://shub.weiyan.tech/kgarden/2024/01/weiyan-cc-home.png)\r\n\r\n![weiyan-cc-hblog](https://shub.weiyan.tech/kgarden/2024/01/weiyan-cc-blog.png)\r\n\r\n全面拥抱 GitHub 的感觉真的很好，加上手机 APP 的加持，更加如虎添翼。回归了最原始 markdown 的编辑和写作，也终于不用再担心在《[富文本编辑器与 md 语法的一些困惑](https://github.com/shenweiyan/Knowledge-Garden/discussions/26)》中所顾虑的问题。\r\n\r\n从 GitHub 到选择 Material for MkDocs 作为个人博客+文档独立站点，有很多的影响因素，但数据可控算是比较核心的一个出发点。这半年来混迹 GitHub 的确也收获良多，发现了很多[有意思的博客和站点](https://github.com/shenweiyan/Knowledge-Garden/discussions/41)，学习到了很多优秀的项目。很多时候阅读别人的博客（站点），总能发现一些好玩的人和事物。\r\n\r\n2023 年被[椒盐豆豉](https://blog.douchi.space/)的一篇《[2023 年了你为什么需要写博客](https://blog.douchi.space/2023-why-you-need-a-blog/)》所吸引，尤其是 "博客是赛博空间的另一个你，也能反过来定义你" 这一句，写出了很多心声。\r\n\r\n> 比较反感 "个人品牌" 这个过于商业化的说法，不写技术不写学术的非实名博客甚至起不到简历作用。但它确是比简历更 "像个人"，比碎片化社交网络更全面展现我是怎样一个人的网络门面。当然这是我这个博客的用法，网上靠博客经营自己品牌的也比比皆是。总之，内容的自由度和高度的定制化让博客可以成为任何你想让它成为的东西。反之，博客写的久了，发现 "写博客" 也已经成为了自己（不只是线上） identity 的一部分——毕竟这是很多人认识我的渠道，也重塑了我的一部分自我认知。\r\n\r\n虽然期间尝试过《[飞书文档初体验](https://github.com/shenweiyan/Knowledge-Garden/discussions/11)》，从国内版本的飞书到 LarkSuite，但终究不如 GitHub + Material for MkDocs 组合来得顺畅。GitHub 也好，飞书也罢，各种五花八门的奇淫巧技和折腾组合，总有能玩出花来的一波人，找到自己喜欢的并持之以恒就已经足够。\r\n\r\n趁着今天有时间，在公众号同步了这一篇，希望我们不忘初心，做到最好。', 'bodyText': '从 2023 年下半年以来 "BioIT爱好者" 这个公众号基本上很少更新了，这一点在《公众号许久没有更新了》就提到过，现在唯一有所区别的是在 GitHub Discussions 的基础上又多了一个个人的独立站点。\n\n\n\n全面拥抱 GitHub 的感觉真的很好，加上手机 APP 的加持，更加如虎添翼。回归了最原始 markdown 的编辑和写作，也终于不用再担心在《富文本编辑器与 md 语法的一些困惑》中所顾虑的问题。\n从 GitHub 到选择 Material for MkDocs 作为个人博客+文档独立站点，有很多的影响因素，但数据可控算是比较核心的一个出发点。这半年来混迹 GitHub 的确也收获良多，发现了很多有意思的博客和站点，学习到了很多优秀的项目。很多时候阅读别人的博客（站点），总能发现一些好玩的人和事物。\n2023 年被椒盐豆豉的一篇《2023 年了你为什么需要写博客》所吸引，尤其是 "博客是赛博空间的另一个你，也能反过来定义你" 这一句，写出了很多心声。\n\n比较反感 "个人品牌" 这个过于商业化的说法，不写技术不写学术的非实名博客甚至起不到简历作用。但它确是比简历更 "像个人"，比碎片化社交网络更全面展现我是怎样一个人的网络门面。当然这是我这个博客的用法，网上靠博客经营自己品牌的也比比皆是。总之，内容的自由度和高度的定制化让博客可以成为任何你想让它成为的东西。反之，博客写的久了，发现 "写博客" 也已经成为了自己（不只是线上） identity 的一部分——毕竟这是很多人认识我的渠道，也重塑了我的一部分自我认知。\n\n虽然期间尝试过《飞书文档初体验》，从国内版本的飞书到 LarkSuite，但终究不如 GitHub + Material for MkDocs 组合来得顺畅。GitHub 也好，飞书也罢，各种五花八门的奇淫巧技和折腾组合，总有能玩出花来的一波人，找到自己喜欢的并持之以恒就已经足够。\n趁着今天有时间，在公众号同步了这一篇，希望我们不忘初心，做到最好。', 'bodyHTML': '<p dir="auto">从 2023 年下半年以来 "<strong>BioIT爱好者</strong>" 这个公众号基本上很少更新了，这一点在《<a href="https://github.com/shenweiyan/Knowledge-Garden/discussions/28" data-hovercard-type="discussion" data-hovercard-url="/shenweiyan/Digital-Garden/discussions/28/hovercard">公众号许久没有更新了</a>》就提到过，现在唯一有所区别的是在 <a href="https://github.com/shenweiyan/Knowledge-Garden/discussions/">GitHub Discussions</a> 的基础上又多了一个个人的独立站点。</p>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/64ca78c1cf80b2e53fc12e8099821df8f64465240ae2810f9fb4e09f3f1f123e/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f77656979616e2d63632d686f6d652e706e67"><img src="https://camo.githubusercontent.com/64ca78c1cf80b2e53fc12e8099821df8f64465240ae2810f9fb4e09f3f1f123e/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f77656979616e2d63632d686f6d652e706e67" alt="weiyan-cc-home" data-canonical-src="https://shub.weiyan.tech/kgarden/2024/01/weiyan-cc-home.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/a36b5c171714a8827792fb1c52574e62facb4b27d92d9647c5fde1d5f7f9dd66/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f77656979616e2d63632d626c6f672e706e67"><img src="https://camo.githubusercontent.com/a36b5c171714a8827792fb1c52574e62facb4b27d92d9647c5fde1d5f7f9dd66/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f77656979616e2d63632d626c6f672e706e67" alt="weiyan-cc-hblog" data-canonical-src="https://shub.weiyan.tech/kgarden/2024/01/weiyan-cc-blog.png" style="max-width: 100%;"></a></p>\n<p dir="auto">全面拥抱 GitHub 的感觉真的很好，加上手机 APP 的加持，更加如虎添翼。回归了最原始 markdown 的编辑和写作，也终于不用再担心在《<a href="https://github.com/shenweiyan/Knowledge-Garden/discussions/26" data-hovercard-type="discussion" data-hovercard-url="/shenweiyan/Digital-Garden/discussions/26/hovercard">富文本编辑器与 md 语法的一些困惑</a>》中所顾虑的问题。</p>\n<p dir="auto">从 GitHub 到选择 Material for MkDocs 作为个人博客+文档独立站点，有很多的影响因素，但数据可控算是比较核心的一个出发点。这半年来混迹 GitHub 的确也收获良多，发现了很多<a href="https://github.com/shenweiyan/Knowledge-Garden/discussions/41" data-hovercard-type="discussion" data-hovercard-url="/shenweiyan/Digital-Garden/discussions/41/hovercard">有意思的博客和站点</a>，学习到了很多优秀的项目。很多时候阅读别人的博客（站点），总能发现一些好玩的人和事物。</p>\n<p dir="auto">2023 年被<a href="https://blog.douchi.space/" rel="nofollow">椒盐豆豉</a>的一篇《<a href="https://blog.douchi.space/2023-why-you-need-a-blog/" rel="nofollow">2023 年了你为什么需要写博客</a>》所吸引，尤其是 "博客是赛博空间的另一个你，也能反过来定义你" 这一句，写出了很多心声。</p>\n<blockquote>\n<p dir="auto">比较反感 "个人品牌" 这个过于商业化的说法，不写技术不写学术的非实名博客甚至起不到简历作用。但它确是比简历更 "像个人"，比碎片化社交网络更全面展现我是怎样一个人的网络门面。当然这是我这个博客的用法，网上靠博客经营自己品牌的也比比皆是。总之，内容的自由度和高度的定制化让博客可以成为任何你想让它成为的东西。反之，博客写的久了，发现 "写博客" 也已经成为了自己（不只是线上） identity 的一部分——毕竟这是很多人认识我的渠道，也重塑了我的一部分自我认知。</p>\n</blockquote>\n<p dir="auto">虽然期间尝试过《<a href="https://github.com/shenweiyan/Knowledge-Garden/discussions/11" data-hovercard-type="discussion" data-hovercard-url="/shenweiyan/Digital-Garden/discussions/11/hovercard">飞书文档初体验</a>》，从国内版本的飞书到 LarkSuite，但终究不如 GitHub + Material for MkDocs 组合来得顺畅。GitHub 也好，飞书也罢，各种五花八门的奇淫巧技和折腾组合，总有能玩出花来的一波人，找到自己喜欢的并持之以恒就已经足够。</p>\n<p dir="auto">趁着今天有时间，在公众号同步了这一篇，希望我们不忘初心，做到最好。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': [{'name': '公众号'}]}, 'comments': {'nodes': []}}, {'title': 'Mkdocs material 使用自定义 slug 和 url', 'number': 54, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/54', 'createdAt': '2024-01-23T06:53:45Z', 'lastEditedAt': None, 'updatedAt': '2024-01-23T06:53:46Z', 'body': 'Mkdocs material 默认使用目录+文件名作为 post 展示的 URL，如果目录名/文件名太长的话，你的 URL 就会显得非常长。尤其是当你从浏览器地址栏中复制某一篇文档的链接时候，如果你的 URL 同时包含了中文，URL 转码后会导致你复制后粘贴的链接变得更加长。\r\n\r\n<!-- more -->\r\n\r\nMkdocs material 目前我是没看到有什么具体的插件解决这个问题，只不过有人在 [squidfunk/mkdocs-material#5161](https://github.com/squidfunk/mkdocs-material/discussions/5161) 基于 hook 提供了一个解决的方案。这个方案基本上能满足我们的需求，但也有一些限制。\r\n\r\n- slug 必须是不能以 `/` 作为开头，且必须以 `/` 作为结尾。\r\n- 可能会导致内部链接引用出现问题。\r\n- 会重复读取任务，如果文件非常多，会降低相对于文件量的整体性能。', 'bodyText': 'Mkdocs material 默认使用目录+文件名作为 post 展示的 URL，如果目录名/文件名太长的话，你的 URL 就会显得非常长。尤其是当你从浏览器地址栏中复制某一篇文档的链接时候，如果你的 URL 同时包含了中文，URL 转码后会导致你复制后粘贴的链接变得更加长。\n\nMkdocs material 目前我是没看到有什么具体的插件解决这个问题，只不过有人在 squidfunk/mkdocs-material#5161 基于 hook 提供了一个解决的方案。这个方案基本上能满足我们的需求，但也有一些限制。\n\nslug 必须是不能以 / 作为开头，且必须以 / 作为结尾。\n可能会导致内部链接引用出现问题。\n会重复读取任务，如果文件非常多，会降低相对于文件量的整体性能。', 'bodyHTML': '<p dir="auto">Mkdocs material 默认使用目录+文件名作为 post 展示的 URL，如果目录名/文件名太长的话，你的 URL 就会显得非常长。尤其是当你从浏览器地址栏中复制某一篇文档的链接时候，如果你的 URL 同时包含了中文，URL 转码后会导致你复制后粘贴的链接变得更加长。</p>\n\n<p dir="auto">Mkdocs material 目前我是没看到有什么具体的插件解决这个问题，只不过有人在 <a href="https://github.com/squidfunk/mkdocs-material/discussions/5161" data-hovercard-type="discussion" data-hovercard-url="/squidfunk/mkdocs-material/discussions/5161/hovercard">squidfunk/mkdocs-material#5161</a> 基于 hook 提供了一个解决的方案。这个方案基本上能满足我们的需求，但也有一些限制。</p>\n<ul dir="auto">\n<li>slug 必须是不能以 <code class="notranslate">/</code> 作为开头，且必须以 <code class="notranslate">/</code> 作为结尾。</li>\n<li>可能会导致内部链接引用出现问题。</li>\n<li>会重复读取任务，如果文件非常多，会降低相对于文件量的整体性能。</li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': 'Mkdocs material 对指定页面隐藏 H1 标题', 'number': 53, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/53', 'createdAt': '2024-01-19T03:42:11Z', 'lastEditedAt': None, 'updatedAt': '2024-01-19T03:42:12Z', 'body': '主要记录一下在 Mkdocs material 中对指定页面隐藏标题，尤其是指在 Home 页面把 H1 级别的标题隐藏的一些解决方法。\r\n\r\n<!-- more -->\r\n\r\n## 背景\r\n\r\n对于一些特定的页面，不想显示顶级的标题，尤其是 H1 标题。Mkdocs material 讨论区给出了几个方案：\r\n\r\n1. 内联 CSS 的方法，参考 [squidfunk/mkdocs-material#2163](https://github.com/squidfunk/mkdocs-material/issues/2163)。    \r\n   这个方法的确能解决隐藏当前页面的 H1 标题，但**同时会把搜索栏搜索结果的 H1 标题给隐藏了**。有点治标不治本！\r\n2. 自定义页面模板，参考 [squidfunk/mkdocs-material#6185](https://github.com/squidfunk/mkdocs-material/discussions/6185)。\r\n   这个参考的讨论里面没有给出具体的解决方法，本文章来详细介绍一下。\r\n\r\n## 创建模板\r\n\r\n首先，在 `overrides` 目录下创建一个名为 `home.html` 的文件(文件名可以随意命名)，内容可以参考 [`blog.html`](https://github.com/squidfunk/mkdocs-material/blob/master/material/templates/blog.html) 的内容。\r\n```\r\n{% extends "base.html" %}\r\n{% block htmltitle %}\r\n      {% if page.meta and page.meta.title %}\r\n        <title>{{ page.meta.title }}</title>\r\n      {% elif page.title and not page.is_homepage %}\r\n        <title>{{ page.title | striptags }}</title>\r\n      {% else %}\r\n        <title>{{ config.site_name }}</title>\r\n      {% endif %}\r\n{% endblock %}\r\n\r\n{% block container %}\r\n    <div class="md-content" data-md-component="content">\r\n      <article class="md-content__inner md-typeset">\r\n        {% block content %}\r\n          {% include "partials/mycontent.html" %}\r\n        {% endblock %}\r\n      </article>\r\n    </div>\r\n{% endblock %}\r\n\r\n{% block extrahead %}\r\n      <!--style>.md-typeset h1,.md-content__button {display:none !important}; </style-->\r\n      <style>.md-header__topic {font-weight:700 !important}</style>\r\n{% endblock %}\r\n```\r\n\r\n第二，创建 `overrides/partials/mycontent.html` 文件，内容参考 [`content.html`](https://github.com/squidfunk/mkdocs-material/blob/master/material/templates/partials/content.html) 文件，注意把 h1 的元素注释掉。\r\n```\r\n{#-\r\n  This file was automatically generated - do not edit\r\n-#}\r\n{% if "material/tags" in config.plugins and tags %}\r\n  {% include "partials/tags.html" %}\r\n{% endif %}\r\n{% include "partials/actions.html" %}\r\n{% if "\\x3ch1" not in page.content %}\r\n  <!--h1>{{ page.title | d(config.site_name, true)}}</h1-->\r\n{% endif %}\r\n{{ page.content }}\r\n{% include "partials/source-file.html" %}\r\n{% include "partials/feedback.html" %}\r\n{% include "partials/comments.html" %}\r\n```\r\n\r\n## 在页面中使用模板\r\n\r\n例如，在个人站点的主页文件 `docs/index.md` 中头部，使用 `template` 指定使用的模板。\r\n```\r\n---\r\ntitle: 维燕的知识花园\r\ntemplate: home.html\r\n---\r\n```\r\n\r\n最后，重新启动 mkdocs 就可以看到对应页面 H1 隐藏后的效果。\r\n', 'bodyText': '主要记录一下在 Mkdocs material 中对指定页面隐藏标题，尤其是指在 Home 页面把 H1 级别的标题隐藏的一些解决方法。\n\n背景\n对于一些特定的页面，不想显示顶级的标题，尤其是 H1 标题。Mkdocs material 讨论区给出了几个方案：\n\n内联 CSS 的方法，参考 squidfunk/mkdocs-material#2163。\n这个方法的确能解决隐藏当前页面的 H1 标题，但同时会把搜索栏搜索结果的 H1 标题给隐藏了。有点治标不治本！\n自定义页面模板，参考 squidfunk/mkdocs-material#6185。\n这个参考的讨论里面没有给出具体的解决方法，本文章来详细介绍一下。\n\n创建模板\n首先，在 overrides 目录下创建一个名为 home.html 的文件(文件名可以随意命名)，内容可以参考 blog.html 的内容。\n{% extends "base.html" %}\n{% block htmltitle %}\n      {% if page.meta and page.meta.title %}\n        <title>{{ page.meta.title }}</title>\n      {% elif page.title and not page.is_homepage %}\n        <title>{{ page.title | striptags }}</title>\n      {% else %}\n        <title>{{ config.site_name }}</title>\n      {% endif %}\n{% endblock %}\n\n{% block container %}\n    <div class="md-content" data-md-component="content">\n      <article class="md-content__inner md-typeset">\n        {% block content %}\n          {% include "partials/mycontent.html" %}\n        {% endblock %}\n      </article>\n    </div>\n{% endblock %}\n\n{% block extrahead %}\n      <!--style>.md-typeset h1,.md-content__button {display:none !important}; </style-->\n      <style>.md-header__topic {font-weight:700 !important}</style>\n{% endblock %}\n\n第二，创建 overrides/partials/mycontent.html 文件，内容参考 content.html 文件，注意把 h1 的元素注释掉。\n{#-\n  This file was automatically generated - do not edit\n-#}\n{% if "material/tags" in config.plugins and tags %}\n  {% include "partials/tags.html" %}\n{% endif %}\n{% include "partials/actions.html" %}\n{% if "\\x3ch1" not in page.content %}\n  <!--h1>{{ page.title | d(config.site_name, true)}}</h1-->\n{% endif %}\n{{ page.content }}\n{% include "partials/source-file.html" %}\n{% include "partials/feedback.html" %}\n{% include "partials/comments.html" %}\n\n在页面中使用模板\n例如，在个人站点的主页文件 docs/index.md 中头部，使用 template 指定使用的模板。\n---\ntitle: 维燕的知识花园\ntemplate: home.html\n---\n\n最后，重新启动 mkdocs 就可以看到对应页面 H1 隐藏后的效果。', 'bodyHTML': '<p dir="auto">主要记录一下在 Mkdocs material 中对指定页面隐藏标题，尤其是指在 Home 页面把 H1 级别的标题隐藏的一些解决方法。</p>\n\n<h2 dir="auto">背景</h2>\n<p dir="auto">对于一些特定的页面，不想显示顶级的标题，尤其是 H1 标题。Mkdocs material 讨论区给出了几个方案：</p>\n<ol dir="auto">\n<li>内联 CSS 的方法，参考 <a href="https://github.com/squidfunk/mkdocs-material/issues/2163" data-hovercard-type="issue" data-hovercard-url="/squidfunk/mkdocs-material/issues/2163/hovercard">squidfunk/mkdocs-material#2163</a>。<br>\n这个方法的确能解决隐藏当前页面的 H1 标题，但<strong>同时会把搜索栏搜索结果的 H1 标题给隐藏了</strong>。有点治标不治本！</li>\n<li>自定义页面模板，参考 <a href="https://github.com/squidfunk/mkdocs-material/discussions/6185" data-hovercard-type="discussion" data-hovercard-url="/squidfunk/mkdocs-material/discussions/6185/hovercard">squidfunk/mkdocs-material#6185</a>。<br>\n这个参考的讨论里面没有给出具体的解决方法，本文章来详细介绍一下。</li>\n</ol>\n<h2 dir="auto">创建模板</h2>\n<p dir="auto">首先，在 <code class="notranslate">overrides</code> 目录下创建一个名为 <code class="notranslate">home.html</code> 的文件(文件名可以随意命名)，内容可以参考 <a href="https://github.com/squidfunk/mkdocs-material/blob/master/material/templates/blog.html"><code class="notranslate">blog.html</code></a> 的内容。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="{% extends &quot;base.html&quot; %}\n{% block htmltitle %}\n      {% if page.meta and page.meta.title %}\n        &lt;title&gt;{{ page.meta.title }}&lt;/title&gt;\n      {% elif page.title and not page.is_homepage %}\n        &lt;title&gt;{{ page.title | striptags }}&lt;/title&gt;\n      {% else %}\n        &lt;title&gt;{{ config.site_name }}&lt;/title&gt;\n      {% endif %}\n{% endblock %}\n\n{% block container %}\n    &lt;div class=&quot;md-content&quot; data-md-component=&quot;content&quot;&gt;\n      &lt;article class=&quot;md-content__inner md-typeset&quot;&gt;\n        {% block content %}\n          {% include &quot;partials/mycontent.html&quot; %}\n        {% endblock %}\n      &lt;/article&gt;\n    &lt;/div&gt;\n{% endblock %}\n\n{% block extrahead %}\n      &lt;!--style&gt;.md-typeset h1,.md-content__button {display:none !important}; &lt;/style--&gt;\n      &lt;style&gt;.md-header__topic {font-weight:700 !important}&lt;/style&gt;\n{% endblock %}"><pre class="notranslate"><code class="notranslate">{% extends "base.html" %}\n{% block htmltitle %}\n      {% if page.meta and page.meta.title %}\n        &lt;title&gt;{{ page.meta.title }}&lt;/title&gt;\n      {% elif page.title and not page.is_homepage %}\n        &lt;title&gt;{{ page.title | striptags }}&lt;/title&gt;\n      {% else %}\n        &lt;title&gt;{{ config.site_name }}&lt;/title&gt;\n      {% endif %}\n{% endblock %}\n\n{% block container %}\n    &lt;div class="md-content" data-md-component="content"&gt;\n      &lt;article class="md-content__inner md-typeset"&gt;\n        {% block content %}\n          {% include "partials/mycontent.html" %}\n        {% endblock %}\n      &lt;/article&gt;\n    &lt;/div&gt;\n{% endblock %}\n\n{% block extrahead %}\n      &lt;!--style&gt;.md-typeset h1,.md-content__button {display:none !important}; &lt;/style--&gt;\n      &lt;style&gt;.md-header__topic {font-weight:700 !important}&lt;/style&gt;\n{% endblock %}\n</code></pre></div>\n<p dir="auto">第二，创建 <code class="notranslate">overrides/partials/mycontent.html</code> 文件，内容参考 <a href="https://github.com/squidfunk/mkdocs-material/blob/master/material/templates/partials/content.html"><code class="notranslate">content.html</code></a> 文件，注意把 h1 的元素注释掉。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="{#-\n  This file was automatically generated - do not edit\n-#}\n{% if &quot;material/tags&quot; in config.plugins and tags %}\n  {% include &quot;partials/tags.html&quot; %}\n{% endif %}\n{% include &quot;partials/actions.html&quot; %}\n{% if &quot;\\x3ch1&quot; not in page.content %}\n  &lt;!--h1&gt;{{ page.title | d(config.site_name, true)}}&lt;/h1--&gt;\n{% endif %}\n{{ page.content }}\n{% include &quot;partials/source-file.html&quot; %}\n{% include &quot;partials/feedback.html&quot; %}\n{% include &quot;partials/comments.html&quot; %}"><pre class="notranslate"><code class="notranslate">{#-\n  This file was automatically generated - do not edit\n-#}\n{% if "material/tags" in config.plugins and tags %}\n  {% include "partials/tags.html" %}\n{% endif %}\n{% include "partials/actions.html" %}\n{% if "\\x3ch1" not in page.content %}\n  &lt;!--h1&gt;{{ page.title | d(config.site_name, true)}}&lt;/h1--&gt;\n{% endif %}\n{{ page.content }}\n{% include "partials/source-file.html" %}\n{% include "partials/feedback.html" %}\n{% include "partials/comments.html" %}\n</code></pre></div>\n<h2 dir="auto">在页面中使用模板</h2>\n<p dir="auto">例如，在个人站点的主页文件 <code class="notranslate">docs/index.md</code> 中头部，使用 <code class="notranslate">template</code> 指定使用的模板。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="---\ntitle: 维燕的知识花园\ntemplate: home.html\n---"><pre class="notranslate"><code class="notranslate">---\ntitle: 维燕的知识花园\ntemplate: home.html\n---\n</code></pre></div>\n<p dir="auto">最后，重新启动 mkdocs 就可以看到对应页面 H1 隐藏后的效果。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': 'MkDocs Material  的一些使用与问题汇总', 'number': 52, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/52', 'createdAt': '2024-01-18T07:51:11Z', 'lastEditedAt': None, 'updatedAt': '2024-01-18T07:51:12Z', 'body': '记录一下 MkDocs Material 在使用过程中遇到的一些问题。\r\n\r\n<!-- more -->\r\n\r\n1. 如何避免锚点链接的非英文字符转换成数字    \r\n   - [How to disable converting non-english header links to numbers?#4682](https://github.com/squidfunk/mkdocs-material/discussions/4682)', 'bodyText': '记录一下 MkDocs Material 在使用过程中遇到的一些问题。\n\n\n如何避免锚点链接的非英文字符转换成数字\n\nHow to disable converting non-english header links to numbers?#4682', 'bodyHTML': '<p dir="auto">记录一下 MkDocs Material 在使用过程中遇到的一些问题。</p>\n\n<ol dir="auto">\n<li>如何避免锚点链接的非英文字符转换成数字\n<ul dir="auto">\n<li><a href="https://github.com/squidfunk/mkdocs-material/discussions/4682" data-hovercard-type="discussion" data-hovercard-url="/squidfunk/mkdocs-material/discussions/4682/hovercard">How to disable converting non-english header links to numbers?#4682</a></li>\n</ul>\n</li>\n</ol>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': 'MkDocs 主题 awesome-pages 使用', 'number': 51, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/51', 'createdAt': '2024-01-11T09:24:34Z', 'lastEditedAt': '2024-01-12T02:12:55Z', 'updatedAt': '2024-01-12T02:12:55Z', 'body': '很长一段时间都在使用 [mkdocs_include_dir_to_nav](https://github.com/mysiki/mkdocs_include_dir_to_nav) 这个插件来自动包含目录下的所有 md 文件，但随着新需求的出现 —— **如何给某一个指定的子目录使用 `reverse_sort_file`，即升序排列展示子目录相应的 markdown 内容**。这才开始接触到 [MkDocs Awesome Pages Plugin](https://github.com/lukasgeiter/mkdocs-awesome-pages-plugin) 这个插件。\r\n\r\n<!-- more -->\r\n\r\n## 开始\r\n\r\n从 GitHub 可以很直观看到的是 [mkdocs_include_dir_to_nav](https://github.com/mysiki/mkdocs_include_dir_to_nav) 自从 2022-05-01 更新了 [V1.2.0](https://github.com/mysiki/mkdocs_include_dir_to_nav/releases/tag/v1.2.0) 版本后基本就已经停止了更新，Star 也才 20 多人。       \r\n![mkdocs-include-dir-to-nav](https://shub.weiyan.tech/kgarden/2024/01/mkdocs-include-dir-to-nav.png)\r\n\r\n反而是 [MkDocs Awesome Pages Plugin](https://github.com/lukasgeiter/mkdocs-awesome-pages-plugin) 一直保持着非常积极的更新频率，而且维护者和关注和使用用户也远远比 [mkdocs_include_dir_to_nav](https://github.com/mysiki/mkdocs_include_dir_to_nav) 多得多。     \r\n![mkdocs-awesome-pages-plugin](https://shub.weiyan.tech/kgarden/2024/01/mkdocs-awesome-pages-plugin.png)\r\n\r\n于是，开始着入手 [MkDocs Awesome Pages Plugin](https://github.com/lukasgeiter/mkdocs-awesome-pages-plugin)。不得不说，Awesome-Pages 这个插件的功能很强大，可以很好解决我"指定子目录自定义文档排序"的需求。但不可否认的是 Awesome-Pages 的文档写的的确有点糙，不认真看还真不知道应该如何上手，这也是花费我最多时间的地方。\r\n\r\n## 使用\r\n\r\n使用 [MkDocs Awesome Pages Plugin](https://github.com/lukasgeiter/mkdocs-awesome-pages-plugin) 有两个很重要的前提：\r\n\r\n1. 如果你在 `mkdocs.yml` 定义了 `nav` 或 `pages` 条目，则此插件不会执行任何操作。要使用该插件列出的功能，我们必须完全删除该条目或向其中添加 `...` 条目 ([add a `...` entry to it](https://github.com/lukasgeiter/mkdocs-awesome-pages-plugin?tab=readme-ov-file#combine-custom-navigation--file-structure))。\r\n2. 自定义导航时，在目录(或者子目录)中创建一个名为 `.pages` 的文件时，使用 `nav` 属性只能自定义**该级别的导航**！然后，按照文件和子目录在导航中出现的顺序列出文件和子目录。\r\n\r\n```\r\ndocs/\r\n├── README.md\r\n├── dirNamedA\r\n│   ├── dirA-page01.md\r\n│   ├── dirA-page02.md\r\n│   └── subDirNamedA1\r\n│   │   ├── subDirA1-page01.md\r\n│   │   └── subDirA1-page02.md\r\n│   └── subDirNamedA2\r\n│       ├── subDirA2-page01.md\r\n│       └── subDirA2-page02.md\r\n├── dirNamedB\r\n│   ├── dirB-page01.md\r\n│   ├── dirB-page02.md\r\n│   └── subDirNamedB1\r\n│       ├── subDirB1-page01.md\r\n│       └── subDirB1-page02.md\r\n└── emptyDir\r\n```\r\n\r\n这就发现了 [MkDocs Awesome Pages Plugin](https://github.com/lukasgeiter/mkdocs-awesome-pages-plugin) 和 MkDocs  、[mkdocs_include_dir_to_nav](https://github.com/mysiki/mkdocs_include_dir_to_nav) 在设置 navigation 时候的区别：[MkDocs Awesome Pages Plugin](https://github.com/lukasgeiter/mkdocs-awesome-pages-plugin) 的 `nav` 属性只能自定义**该级别的导航**！即无法只通过一个 `.pages` 实现所有目录+子目录的 navigation 排序配置。\r\n\r\n所以，最好的做法就是在 `docs` 目录下(包含 `docs`) 给每个目录增加一个 `.pages` 文件，用于控制当前目录的所有子目录(或者 Posts) 的排序和展示。\r\n\r\n', 'bodyText': '很长一段时间都在使用 mkdocs_include_dir_to_nav 这个插件来自动包含目录下的所有 md 文件，但随着新需求的出现 —— 如何给某一个指定的子目录使用 reverse_sort_file，即升序排列展示子目录相应的 markdown 内容。这才开始接触到 MkDocs Awesome Pages Plugin 这个插件。\n\n开始\n从 GitHub 可以很直观看到的是 mkdocs_include_dir_to_nav 自从 2022-05-01 更新了 V1.2.0 版本后基本就已经停止了更新，Star 也才 20 多人。\n\n反而是 MkDocs Awesome Pages Plugin 一直保持着非常积极的更新频率，而且维护者和关注和使用用户也远远比 mkdocs_include_dir_to_nav 多得多。\n\n于是，开始着入手 MkDocs Awesome Pages Plugin。不得不说，Awesome-Pages 这个插件的功能很强大，可以很好解决我"指定子目录自定义文档排序"的需求。但不可否认的是 Awesome-Pages 的文档写的的确有点糙，不认真看还真不知道应该如何上手，这也是花费我最多时间的地方。\n使用\n使用 MkDocs Awesome Pages Plugin 有两个很重要的前提：\n\n如果你在 mkdocs.yml 定义了 nav 或 pages 条目，则此插件不会执行任何操作。要使用该插件列出的功能，我们必须完全删除该条目或向其中添加 ... 条目 (add a ... entry to it)。\n自定义导航时，在目录(或者子目录)中创建一个名为 .pages 的文件时，使用 nav 属性只能自定义该级别的导航！然后，按照文件和子目录在导航中出现的顺序列出文件和子目录。\n\ndocs/\n├── README.md\n├── dirNamedA\n│   ├── dirA-page01.md\n│   ├── dirA-page02.md\n│   └── subDirNamedA1\n│   │   ├── subDirA1-page01.md\n│   │   └── subDirA1-page02.md\n│   └── subDirNamedA2\n│       ├── subDirA2-page01.md\n│       └── subDirA2-page02.md\n├── dirNamedB\n│   ├── dirB-page01.md\n│   ├── dirB-page02.md\n│   └── subDirNamedB1\n│       ├── subDirB1-page01.md\n│       └── subDirB1-page02.md\n└── emptyDir\n\n这就发现了 MkDocs Awesome Pages Plugin 和 MkDocs  、mkdocs_include_dir_to_nav 在设置 navigation 时候的区别：MkDocs Awesome Pages Plugin 的 nav 属性只能自定义该级别的导航！即无法只通过一个 .pages 实现所有目录+子目录的 navigation 排序配置。\n所以，最好的做法就是在 docs 目录下(包含 docs) 给每个目录增加一个 .pages 文件，用于控制当前目录的所有子目录(或者 Posts) 的排序和展示。', 'bodyHTML': '<p dir="auto">很长一段时间都在使用 <a href="https://github.com/mysiki/mkdocs_include_dir_to_nav">mkdocs_include_dir_to_nav</a> 这个插件来自动包含目录下的所有 md 文件，但随着新需求的出现 —— <strong>如何给某一个指定的子目录使用 <code class="notranslate">reverse_sort_file</code>，即升序排列展示子目录相应的 markdown 内容</strong>。这才开始接触到 <a href="https://github.com/lukasgeiter/mkdocs-awesome-pages-plugin">MkDocs Awesome Pages Plugin</a> 这个插件。</p>\n\n<h2 dir="auto">开始</h2>\n<p dir="auto">从 GitHub 可以很直观看到的是 <a href="https://github.com/mysiki/mkdocs_include_dir_to_nav">mkdocs_include_dir_to_nav</a> 自从 2022-05-01 更新了 <a href="https://github.com/mysiki/mkdocs_include_dir_to_nav/releases/tag/v1.2.0">V1.2.0</a> 版本后基本就已经停止了更新，Star 也才 20 多人。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/238c450f3373ca7027dc228e728f4cecae76d3e1a58ace35e8543f45b6a24223/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f6d6b646f63732d696e636c7564652d6469722d746f2d6e61762e706e67"><img src="https://camo.githubusercontent.com/238c450f3373ca7027dc228e728f4cecae76d3e1a58ace35e8543f45b6a24223/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f6d6b646f63732d696e636c7564652d6469722d746f2d6e61762e706e67" alt="mkdocs-include-dir-to-nav" data-canonical-src="https://shub.weiyan.tech/kgarden/2024/01/mkdocs-include-dir-to-nav.png" style="max-width: 100%;"></a></p>\n<p dir="auto">反而是 <a href="https://github.com/lukasgeiter/mkdocs-awesome-pages-plugin">MkDocs Awesome Pages Plugin</a> 一直保持着非常积极的更新频率，而且维护者和关注和使用用户也远远比 <a href="https://github.com/mysiki/mkdocs_include_dir_to_nav">mkdocs_include_dir_to_nav</a> 多得多。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/4a6a0daa25a3ee3c9a2eae44bff6694c0b80a90eeb5d7462cdb72711329c55c1/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f6d6b646f63732d617765736f6d652d70616765732d706c7567696e2e706e67"><img src="https://camo.githubusercontent.com/4a6a0daa25a3ee3c9a2eae44bff6694c0b80a90eeb5d7462cdb72711329c55c1/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f6d6b646f63732d617765736f6d652d70616765732d706c7567696e2e706e67" alt="mkdocs-awesome-pages-plugin" data-canonical-src="https://shub.weiyan.tech/kgarden/2024/01/mkdocs-awesome-pages-plugin.png" style="max-width: 100%;"></a></p>\n<p dir="auto">于是，开始着入手 <a href="https://github.com/lukasgeiter/mkdocs-awesome-pages-plugin">MkDocs Awesome Pages Plugin</a>。不得不说，Awesome-Pages 这个插件的功能很强大，可以很好解决我"指定子目录自定义文档排序"的需求。但不可否认的是 Awesome-Pages 的文档写的的确有点糙，不认真看还真不知道应该如何上手，这也是花费我最多时间的地方。</p>\n<h2 dir="auto">使用</h2>\n<p dir="auto">使用 <a href="https://github.com/lukasgeiter/mkdocs-awesome-pages-plugin">MkDocs Awesome Pages Plugin</a> 有两个很重要的前提：</p>\n<ol dir="auto">\n<li>如果你在 <code class="notranslate">mkdocs.yml</code> 定义了 <code class="notranslate">nav</code> 或 <code class="notranslate">pages</code> 条目，则此插件不会执行任何操作。要使用该插件列出的功能，我们必须完全删除该条目或向其中添加 <code class="notranslate">...</code> 条目 (<a href="https://github.com/lukasgeiter/mkdocs-awesome-pages-plugin?tab=readme-ov-file#combine-custom-navigation--file-structure">add a <code class="notranslate">...</code> entry to it</a>)。</li>\n<li>自定义导航时，在目录(或者子目录)中创建一个名为 <code class="notranslate">.pages</code> 的文件时，使用 <code class="notranslate">nav</code> 属性只能自定义<strong>该级别的导航</strong>！然后，按照文件和子目录在导航中出现的顺序列出文件和子目录。</li>\n</ol>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="docs/\n├── README.md\n├── dirNamedA\n│   ├── dirA-page01.md\n│   ├── dirA-page02.md\n│   └── subDirNamedA1\n│   │   ├── subDirA1-page01.md\n│   │   └── subDirA1-page02.md\n│   └── subDirNamedA2\n│       ├── subDirA2-page01.md\n│       └── subDirA2-page02.md\n├── dirNamedB\n│   ├── dirB-page01.md\n│   ├── dirB-page02.md\n│   └── subDirNamedB1\n│       ├── subDirB1-page01.md\n│       └── subDirB1-page02.md\n└── emptyDir"><pre class="notranslate"><code class="notranslate">docs/\n├── README.md\n├── dirNamedA\n│   ├── dirA-page01.md\n│   ├── dirA-page02.md\n│   └── subDirNamedA1\n│   │   ├── subDirA1-page01.md\n│   │   └── subDirA1-page02.md\n│   └── subDirNamedA2\n│       ├── subDirA2-page01.md\n│       └── subDirA2-page02.md\n├── dirNamedB\n│   ├── dirB-page01.md\n│   ├── dirB-page02.md\n│   └── subDirNamedB1\n│       ├── subDirB1-page01.md\n│       └── subDirB1-page02.md\n└── emptyDir\n</code></pre></div>\n<p dir="auto">这就发现了 <a href="https://github.com/lukasgeiter/mkdocs-awesome-pages-plugin">MkDocs Awesome Pages Plugin</a> 和 MkDocs  、<a href="https://github.com/mysiki/mkdocs_include_dir_to_nav">mkdocs_include_dir_to_nav</a> 在设置 navigation 时候的区别：<a href="https://github.com/lukasgeiter/mkdocs-awesome-pages-plugin">MkDocs Awesome Pages Plugin</a> 的 <code class="notranslate">nav</code> 属性只能自定义<strong>该级别的导航</strong>！即无法只通过一个 <code class="notranslate">.pages</code> 实现所有目录+子目录的 navigation 排序配置。</p>\n<p dir="auto">所以，最好的做法就是在 <code class="notranslate">docs</code> 目录下(包含 <code class="notranslate">docs</code>) 给每个目录增加一个 <code class="notranslate">.pages</code> 文件，用于控制当前目录的所有子目录(或者 Posts) 的排序和展示。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '2023 年年终总结', 'number': 50, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/50', 'createdAt': '2024-01-10T05:34:20Z', 'lastEditedAt': '2024-01-10T09:10:58Z', 'updatedAt': '2024-01-10T09:10:58Z', 'body': '本来没想着写年终总结 —— 主要是最近对于码字没太多的欲望，但翻到了 2021/2022 的一些年终记录，也看了不少其他网友博主 2023 年的总结，所以对自己说，还是写一写吧。\r\n\r\n2023 年对个人来说是变动的一年，这个变动主要体现在工作上。反观生活，除去家庭的一些琐事基本上也就是波澜不惊的一个状态。\r\n\r\n<!-- more -->\r\n\r\n## 工作\r\n\r\n2023 年工作最大的变动之一就是公司搬迁新的厂区。随之而来是上下班通勤的变更，这一切让原本相对充裕的时间变得更加紧凑。但时间是最大的习惯，久而久之这就成了生活的一部分，朝九晚五体现的淋漓尽致。\r\n\r\n第二个变动最大的是新办公地点新办公规章。这一点影响很大，以至于让我不得不放弃了很多以前形成的一部分工具习惯，转身去重新接纳一些新的工具和平台。于是，有了现在的[个人知识站点](https://weiyan.cc)，有了[飞书的使用体验](https://www.weiyan.cc/blog/2023/10/24/discussion-11/)，GitHub 更是一瞬间成为了个人最常逛和依赖的平台 —— 这也让我重新认识了这个平台的强大和无可替代。    \r\n<p align="center">\r\n    <img src="https://shub.weiyan.tech/kgarden/2024/01/github-contributions.png" alt="github-contributions-2023">\r\n</p>\r\n\r\n职业方向上探索了一把 AI，浅尝辄止又摸不着门道；mRNA 到 Protein 的优化道路上才刚刚看到入口，任重道远；只能背靠着老本行，在不断优化的道路上踉踉跄跄走着。\r\n\r\n职业生涯的道路上人来人往，铁打的营盘流水的兵，走了就走了，无需留念。\r\n\r\n## 生活\r\n\r\n生活上其实没什么太多说的，感觉到微妙变化的是比以前更加注意到自己和身边人的健康问题了。从老婆孩子，到母亲的腰椎问题，再到自己，再加上这一年的流感、肺炎(尤其是支原体肺炎)，2023 年在健康这个问题上的确投入了很大的一部分时间和精力。\r\n\r\n家庭琐事上，家人彼此磕磕碰碰的事情总会有，生活无律，人生无常，我们更需要的是相互之间相互理解与包容。对于老婆和孩子，需要更多的关心和陪伴。\r\n\r\n运动这件事情上，基本还能保持着每周至少一场羽毛球，这是值得肯定的。虽然变换了新的地方，融入了新的面孔，但至少我们还能在一起用羽毛球找到属于彼此的快乐，那也足够了。\r\n\r\n孩子的事情上，这一年约着她的同班同学打卡了不少地方，这也让集体一起遛娃成为了周末值得期待的活动之一。\r\n\r\n## 最后\r\n\r\n最后，2024 年就要搬进新的房子了，这是值得期待和努力的一件大事。希望自己和家人在新的环境中能收获新的惊喜，身体健康，和和美满。\r\n\r\n', 'bodyText': '本来没想着写年终总结 —— 主要是最近对于码字没太多的欲望，但翻到了 2021/2022 的一些年终记录，也看了不少其他网友博主 2023 年的总结，所以对自己说，还是写一写吧。\n2023 年对个人来说是变动的一年，这个变动主要体现在工作上。反观生活，除去家庭的一些琐事基本上也就是波澜不惊的一个状态。\n\n工作\n2023 年工作最大的变动之一就是公司搬迁新的厂区。随之而来是上下班通勤的变更，这一切让原本相对充裕的时间变得更加紧凑。但时间是最大的习惯，久而久之这就成了生活的一部分，朝九晚五体现的淋漓尽致。\n第二个变动最大的是新办公地点新办公规章。这一点影响很大，以至于让我不得不放弃了很多以前形成的一部分工具习惯，转身去重新接纳一些新的工具和平台。于是，有了现在的个人知识站点，有了飞书的使用体验，GitHub 更是一瞬间成为了个人最常逛和依赖的平台 —— 这也让我重新认识了这个平台的强大和无可替代。\n\n    \n\n职业方向上探索了一把 AI，浅尝辄止又摸不着门道；mRNA 到 Protein 的优化道路上才刚刚看到入口，任重道远；只能背靠着老本行，在不断优化的道路上踉踉跄跄走着。\n职业生涯的道路上人来人往，铁打的营盘流水的兵，走了就走了，无需留念。\n生活\n生活上其实没什么太多说的，感觉到微妙变化的是比以前更加注意到自己和身边人的健康问题了。从老婆孩子，到母亲的腰椎问题，再到自己，再加上这一年的流感、肺炎(尤其是支原体肺炎)，2023 年在健康这个问题上的确投入了很大的一部分时间和精力。\n家庭琐事上，家人彼此磕磕碰碰的事情总会有，生活无律，人生无常，我们更需要的是相互之间相互理解与包容。对于老婆和孩子，需要更多的关心和陪伴。\n运动这件事情上，基本还能保持着每周至少一场羽毛球，这是值得肯定的。虽然变换了新的地方，融入了新的面孔，但至少我们还能在一起用羽毛球找到属于彼此的快乐，那也足够了。\n孩子的事情上，这一年约着她的同班同学打卡了不少地方，这也让集体一起遛娃成为了周末值得期待的活动之一。\n最后\n最后，2024 年就要搬进新的房子了，这是值得期待和努力的一件大事。希望自己和家人在新的环境中能收获新的惊喜，身体健康，和和美满。', 'bodyHTML': '<p dir="auto">本来没想着写年终总结 —— 主要是最近对于码字没太多的欲望，但翻到了 2021/2022 的一些年终记录，也看了不少其他网友博主 2023 年的总结，所以对自己说，还是写一写吧。</p>\n<p dir="auto">2023 年对个人来说是变动的一年，这个变动主要体现在工作上。反观生活，除去家庭的一些琐事基本上也就是波澜不惊的一个状态。</p>\n\n<h2 dir="auto">工作</h2>\n<p dir="auto">2023 年工作最大的变动之一就是公司搬迁新的厂区。随之而来是上下班通勤的变更，这一切让原本相对充裕的时间变得更加紧凑。但时间是最大的习惯，久而久之这就成了生活的一部分，朝九晚五体现的淋漓尽致。</p>\n<p dir="auto">第二个变动最大的是新办公地点新办公规章。这一点影响很大，以至于让我不得不放弃了很多以前形成的一部分工具习惯，转身去重新接纳一些新的工具和平台。于是，有了现在的<a href="https://weiyan.cc" rel="nofollow">个人知识站点</a>，有了<a href="https://www.weiyan.cc/blog/2023/10/24/discussion-11/" rel="nofollow">飞书的使用体验</a>，GitHub 更是一瞬间成为了个人最常逛和依赖的平台 —— 这也让我重新认识了这个平台的强大和无可替代。</p>\n<p align="center" dir="auto">\n    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/f85976c0da489e47b6f0a845881305b70b32db280dfbfcc69f08677e7afab6a2/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f6769746875622d636f6e747269627574696f6e732e706e67"><img src="https://camo.githubusercontent.com/f85976c0da489e47b6f0a845881305b70b32db280dfbfcc69f08677e7afab6a2/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f6769746875622d636f6e747269627574696f6e732e706e67" alt="github-contributions-2023" data-canonical-src="https://shub.weiyan.tech/kgarden/2024/01/github-contributions.png" style="max-width: 100%;"></a>\n</p>\n<p dir="auto">职业方向上探索了一把 AI，浅尝辄止又摸不着门道；mRNA 到 Protein 的优化道路上才刚刚看到入口，任重道远；只能背靠着老本行，在不断优化的道路上踉踉跄跄走着。</p>\n<p dir="auto">职业生涯的道路上人来人往，铁打的营盘流水的兵，走了就走了，无需留念。</p>\n<h2 dir="auto">生活</h2>\n<p dir="auto">生活上其实没什么太多说的，感觉到微妙变化的是比以前更加注意到自己和身边人的健康问题了。从老婆孩子，到母亲的腰椎问题，再到自己，再加上这一年的流感、肺炎(尤其是支原体肺炎)，2023 年在健康这个问题上的确投入了很大的一部分时间和精力。</p>\n<p dir="auto">家庭琐事上，家人彼此磕磕碰碰的事情总会有，生活无律，人生无常，我们更需要的是相互之间相互理解与包容。对于老婆和孩子，需要更多的关心和陪伴。</p>\n<p dir="auto">运动这件事情上，基本还能保持着每周至少一场羽毛球，这是值得肯定的。虽然变换了新的地方，融入了新的面孔，但至少我们还能在一起用羽毛球找到属于彼此的快乐，那也足够了。</p>\n<p dir="auto">孩子的事情上，这一年约着她的同班同学打卡了不少地方，这也让集体一起遛娃成为了周末值得期待的活动之一。</p>\n<h2 dir="auto">最后</h2>\n<p dir="auto">最后，2024 年就要搬进新的房子了，这是值得期待和努力的一件大事。希望自己和家人在新的环境中能收获新的惊喜，身体健康，和和美满。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '苹果字体 PingFang SC 的一些踩坑记录', 'number': 49, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/49', 'createdAt': '2024-01-09T05:43:52Z', 'lastEditedAt': '2024-06-03T07:43:27Z', 'updatedAt': '2024-06-03T07:43:27Z', 'body': '曾经在 《[为 Windows 系统替换优雅的苹果字体](https://www.weiyan.cc/cookbook/%E5%BC%80%E5%8F%91%E8%BF%90%E7%BB%B4/windows/2021-02-19-win-font/)》中提到可在 Windows 中使用苹方字体替代默认的微软雅黑，这里就有一个问题即需要在 Wondows 下安装苹方字体 —— 如果你的字体安装错误，很有可能导致你的浏览器或其他应用出现乱码。\r\n\r\n## 浏览器乱码\r\n\r\n出现这个的原因主要是站点使用了 `PingFang SC` 的字体设置。\r\n```\r\nbody {\r\n    font-family: PingFang SC,microsoft yahei,sans-serif;\r\n}\r\n```\r\n\r\n我们可以看到使用 F12 检查源码模式把 `font-family` 中的 `PingFang SC` 去掉后即可显示正常。\r\n\r\n## 字体安装后不起作用\r\n\r\n这里就涉及一个 **萍方** vs **苹方** vs **PingFang** 区别的一个问题。\r\n\r\n> 猛地看上去，萍方/苹方/PingFang 应该是同一个字体。但是，实际上的效果，却并不相同。那么，到底谁是真正的 pingfang sc呢？    \r\n>     \r\n> 这里以能否**以 PingFang SC 为名称识别出来，作为标准**。为什么这么说呢？因为网页里面的 font-family，写的都是 pingfang sc，也许萍方/苹方都是差不多的字体，但是不能在网页里面自动识别出来。所以，就等于零。\r\n> \r\n> ```\r\n> body {\r\n>    font-family: PingFang SC,microsoft yahei,sans-serif;\r\n> }\r\n> ```\r\n> 比如，上述 css 定义，就来自于腾讯云主页。在实际的应用过程中，只有安装好的 pingfang sc 系列字体才能被识别【如下图中的右侧字体】。    \r\n> **注意：萍方/苹方，在安装的时候，文件名也都是 pingfang-sc 之类的文件名。但是，安装完成的真正成品，可不是这个拼音名字。进而导致字体不能识别。**\r\n> ![pingfang sc 区别](https://shub.weiyan.tech/kgarden/2024/01/fingfang-sc.png)\r\n>     \r\n> From 《[由 pingfang sc 字体缺失，所暴露的字体加载顺序的潜规则](https://newsn.net/say/css-font-family-pingfang.html)》\r\n\r\n## 解决方案\r\n\r\n参考 《[由 pingfang sc 字体缺失，所暴露的字体加载顺序的潜规则](https://newsn.net/say/css-font-family-pingfang.html)》 一文的方案。\r\n\r\n### 安装 PingFang SC\r\n\r\n名称为 **PingFang SC** (英文) 的字体找了很久才在 GitHub 翻到一个(以防丢失，个人 Fork 了过来)：[shenweiyan/PingFangSC-Fonts](https://github.com/shenweiyan/PingFangSC-Fonts)，如有需要可以直接下载安装。\r\n\r\n> 国内大多数网页，在定义网页字体的时候，都是先定义 PingFang SC，然后定义微软雅黑。那么：    \r\n>    \r\n> - 正常来说，win 系统是不会安装 PingFang SC 字体的，所以，显示微软雅黑，页面正常。    \r\n> - 但是，一旦单独安装了 PingFang SC Light，页面就会识别出这个 Light 字体，页面不正常。    \r\n> - 解决方案是：再安装一个 PingFang SC Regular，页面会在 Light 之前优先识别 Regular，页面正常。    \r\n\r\n>    \r\n> 如果您非要在 win 下面安装 pingfang sc 字体，可能要三思而后安装了。李鬼似乎有点多...\r\n\r\n>    \r\n> ![PingFang SC Regular](https://shub.weiyan.tech/kgarden/2024/01/pingfang-sc-regular.png)\r\n\r\n### 删除 PingFang SC\r\n\r\n个人用的就是这一个方法，但是在 `C:\\Windows\\Fonts` 中删除的时候会提示 **该字体正在使用无法删除！所以，必须要关闭使用苹方字体的程序。**\r\n\r\n因此，我们需要：\r\n\r\n参考：《[电脑安装新字体，浏览器字体全变了，如何删除正在使用的苹方字体](https://www.bilibili.com/video/BV1nc411575s/)》 - 哔哩哔哩\r\n\r\n- 在 Windows 任务管理的进程中把浏览器相关的全部结束掉，如 360 浏览器相关的进程、Microsoft edge、Google Chrome 等等，全部选择结束任务。    \r\n- 把其他可能使用苹方字体的，如 OneNote、WPS、微信、... 这些的进程也全部结束掉。    \r\n\r\n最后，回到 `C:\\Windows\\Fonts` 中再次删除相应的苹方字体，发现即可成功删除。删除了这些苹方字体，浏览器上的字体显示也就恢复正常了。\r\n\r\n## 参考资料\r\n\r\n1. 苏南大叔，《[由 pingfang sc 字体缺失，所暴露的字体加载顺序的潜规则](https://newsn.net/say/css-font-family-pingfang.html)》\r\n2. 科技猎手2023，《[电脑安装新字体，浏览器字体全变了，如何删除正在使用的苹方字体](https://www.bilibili.com/video/BV1nc411575s/)》 - 哔哩哔哩', 'bodyText': '曾经在 《为 Windows 系统替换优雅的苹果字体》中提到可在 Windows 中使用苹方字体替代默认的微软雅黑，这里就有一个问题即需要在 Wondows 下安装苹方字体 —— 如果你的字体安装错误，很有可能导致你的浏览器或其他应用出现乱码。\n浏览器乱码\n出现这个的原因主要是站点使用了 PingFang SC 的字体设置。\nbody {\n    font-family: PingFang SC,microsoft yahei,sans-serif;\n}\n\n我们可以看到使用 F12 检查源码模式把 font-family 中的 PingFang SC 去掉后即可显示正常。\n字体安装后不起作用\n这里就涉及一个 萍方 vs 苹方 vs PingFang 区别的一个问题。\n\n猛地看上去，萍方/苹方/PingFang 应该是同一个字体。但是，实际上的效果，却并不相同。那么，到底谁是真正的 pingfang sc呢？\n这里以能否以 PingFang SC 为名称识别出来，作为标准。为什么这么说呢？因为网页里面的 font-family，写的都是 pingfang sc，也许萍方/苹方都是差不多的字体，但是不能在网页里面自动识别出来。所以，就等于零。\nbody {\n   font-family: PingFang SC,microsoft yahei,sans-serif;\n}\n\n比如，上述 css 定义，就来自于腾讯云主页。在实际的应用过程中，只有安装好的 pingfang sc 系列字体才能被识别【如下图中的右侧字体】。\n注意：萍方/苹方，在安装的时候，文件名也都是 pingfang-sc 之类的文件名。但是，安装完成的真正成品，可不是这个拼音名字。进而导致字体不能识别。\n\nFrom 《由 pingfang sc 字体缺失，所暴露的字体加载顺序的潜规则》\n\n解决方案\n参考 《由 pingfang sc 字体缺失，所暴露的字体加载顺序的潜规则》 一文的方案。\n安装 PingFang SC\n名称为 PingFang SC (英文) 的字体找了很久才在 GitHub 翻到一个(以防丢失，个人 Fork 了过来)：shenweiyan/PingFangSC-Fonts，如有需要可以直接下载安装。\n\n国内大多数网页，在定义网页字体的时候，都是先定义 PingFang SC，然后定义微软雅黑。那么：\n\n正常来说，win 系统是不会安装 PingFang SC 字体的，所以，显示微软雅黑，页面正常。\n但是，一旦单独安装了 PingFang SC Light，页面就会识别出这个 Light 字体，页面不正常。\n解决方案是：再安装一个 PingFang SC Regular，页面会在 Light 之前优先识别 Regular，页面正常。\n\n\n\n如果您非要在 win 下面安装 pingfang sc 字体，可能要三思而后安装了。李鬼似乎有点多...\n\n\n\n\n删除 PingFang SC\n个人用的就是这一个方法，但是在 C:\\Windows\\Fonts 中删除的时候会提示 该字体正在使用无法删除！所以，必须要关闭使用苹方字体的程序。\n因此，我们需要：\n参考：《电脑安装新字体，浏览器字体全变了，如何删除正在使用的苹方字体》 - 哔哩哔哩\n\n在 Windows 任务管理的进程中把浏览器相关的全部结束掉，如 360 浏览器相关的进程、Microsoft edge、Google Chrome 等等，全部选择结束任务。\n把其他可能使用苹方字体的，如 OneNote、WPS、微信、... 这些的进程也全部结束掉。\n\n最后，回到 C:\\Windows\\Fonts 中再次删除相应的苹方字体，发现即可成功删除。删除了这些苹方字体，浏览器上的字体显示也就恢复正常了。\n参考资料\n\n苏南大叔，《由 pingfang sc 字体缺失，所暴露的字体加载顺序的潜规则》\n科技猎手2023，《电脑安装新字体，浏览器字体全变了，如何删除正在使用的苹方字体》 - 哔哩哔哩', 'bodyHTML': '<p dir="auto">曾经在 《<a href="https://www.weiyan.cc/cookbook/%E5%BC%80%E5%8F%91%E8%BF%90%E7%BB%B4/windows/2021-02-19-win-font/" rel="nofollow">为 Windows 系统替换优雅的苹果字体</a>》中提到可在 Windows 中使用苹方字体替代默认的微软雅黑，这里就有一个问题即需要在 Wondows 下安装苹方字体 —— 如果你的字体安装错误，很有可能导致你的浏览器或其他应用出现乱码。</p>\n<h2 dir="auto">浏览器乱码</h2>\n<p dir="auto">出现这个的原因主要是站点使用了 <code class="notranslate">PingFang SC</code> 的字体设置。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="body {\n    font-family: PingFang SC,microsoft yahei,sans-serif;\n}"><pre class="notranslate"><code class="notranslate">body {\n    font-family: PingFang SC,microsoft yahei,sans-serif;\n}\n</code></pre></div>\n<p dir="auto">我们可以看到使用 F12 检查源码模式把 <code class="notranslate">font-family</code> 中的 <code class="notranslate">PingFang SC</code> 去掉后即可显示正常。</p>\n<h2 dir="auto">字体安装后不起作用</h2>\n<p dir="auto">这里就涉及一个 <strong>萍方</strong> vs <strong>苹方</strong> vs <strong>PingFang</strong> 区别的一个问题。</p>\n<blockquote>\n<p dir="auto">猛地看上去，萍方/苹方/PingFang 应该是同一个字体。但是，实际上的效果，却并不相同。那么，到底谁是真正的 pingfang sc呢？</p>\n<p dir="auto">这里以能否<strong>以 PingFang SC 为名称识别出来，作为标准</strong>。为什么这么说呢？因为网页里面的 font-family，写的都是 pingfang sc，也许萍方/苹方都是差不多的字体，但是不能在网页里面自动识别出来。所以，就等于零。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="body {\n   font-family: PingFang SC,microsoft yahei,sans-serif;\n}"><pre class="notranslate"><code class="notranslate">body {\n   font-family: PingFang SC,microsoft yahei,sans-serif;\n}\n</code></pre></div>\n<p dir="auto">比如，上述 css 定义，就来自于腾讯云主页。在实际的应用过程中，只有安装好的 pingfang sc 系列字体才能被识别【如下图中的右侧字体】。<br>\n<strong>注意：萍方/苹方，在安装的时候，文件名也都是 pingfang-sc 之类的文件名。但是，安装完成的真正成品，可不是这个拼音名字。进而导致字体不能识别。</strong><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/53b3f80cc77f2f52f5cecad604d92fb3f5a19f7825cc6e768d7de3deb596dcdc/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f66696e6766616e672d73632e706e67"><img src="https://camo.githubusercontent.com/53b3f80cc77f2f52f5cecad604d92fb3f5a19f7825cc6e768d7de3deb596dcdc/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f66696e6766616e672d73632e706e67" alt="pingfang sc 区别" data-canonical-src="https://shub.weiyan.tech/kgarden/2024/01/fingfang-sc.png" style="max-width: 100%;"></a></p>\n<p dir="auto">From 《<a href="https://newsn.net/say/css-font-family-pingfang.html" rel="nofollow">由 pingfang sc 字体缺失，所暴露的字体加载顺序的潜规则</a>》</p>\n</blockquote>\n<h2 dir="auto">解决方案</h2>\n<p dir="auto">参考 《<a href="https://newsn.net/say/css-font-family-pingfang.html" rel="nofollow">由 pingfang sc 字体缺失，所暴露的字体加载顺序的潜规则</a>》 一文的方案。</p>\n<h3 dir="auto">安装 PingFang SC</h3>\n<p dir="auto">名称为 <strong>PingFang SC</strong> (英文) 的字体找了很久才在 GitHub 翻到一个(以防丢失，个人 Fork 了过来)：<a href="https://github.com/shenweiyan/PingFangSC-Fonts">shenweiyan/PingFangSC-Fonts</a>，如有需要可以直接下载安装。</p>\n<blockquote>\n<p dir="auto">国内大多数网页，在定义网页字体的时候，都是先定义 PingFang SC，然后定义微软雅黑。那么：</p>\n<ul dir="auto">\n<li>正常来说，win 系统是不会安装 PingFang SC 字体的，所以，显示微软雅黑，页面正常。</li>\n<li>但是，一旦单独安装了 PingFang SC Light，页面就会识别出这个 Light 字体，页面不正常。</li>\n<li>解决方案是：再安装一个 PingFang SC Regular，页面会在 Light 之前优先识别 Regular，页面正常。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p dir="auto">如果您非要在 win 下面安装 pingfang sc 字体，可能要三思而后安装了。李鬼似乎有点多...</p>\n</blockquote>\n<blockquote>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b43298cb62081310626bda0b2ef1a69a5d6faee4e1d18ac2f3d6fea992f47c58/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f70696e6766616e672d73632d726567756c61722e706e67"><img src="https://camo.githubusercontent.com/b43298cb62081310626bda0b2ef1a69a5d6faee4e1d18ac2f3d6fea992f47c58/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f70696e6766616e672d73632d726567756c61722e706e67" alt="PingFang SC Regular" data-canonical-src="https://shub.weiyan.tech/kgarden/2024/01/pingfang-sc-regular.png" style="max-width: 100%;"></a></p>\n</blockquote>\n<h3 dir="auto">删除 PingFang SC</h3>\n<p dir="auto">个人用的就是这一个方法，但是在 <code class="notranslate">C:\\Windows\\Fonts</code> 中删除的时候会提示 <strong>该字体正在使用无法删除！所以，必须要关闭使用苹方字体的程序。</strong></p>\n<p dir="auto">因此，我们需要：</p>\n<p dir="auto">参考：《<a href="https://www.bilibili.com/video/BV1nc411575s/" rel="nofollow">电脑安装新字体，浏览器字体全变了，如何删除正在使用的苹方字体</a>》 - 哔哩哔哩</p>\n<ul dir="auto">\n<li>在 Windows 任务管理的进程中把浏览器相关的全部结束掉，如 360 浏览器相关的进程、Microsoft edge、Google Chrome 等等，全部选择结束任务。</li>\n<li>把其他可能使用苹方字体的，如 OneNote、WPS、微信、... 这些的进程也全部结束掉。</li>\n</ul>\n<p dir="auto">最后，回到 <code class="notranslate">C:\\Windows\\Fonts</code> 中再次删除相应的苹方字体，发现即可成功删除。删除了这些苹方字体，浏览器上的字体显示也就恢复正常了。</p>\n<h2 dir="auto">参考资料</h2>\n<ol dir="auto">\n<li>苏南大叔，《<a href="https://newsn.net/say/css-font-family-pingfang.html" rel="nofollow">由 pingfang sc 字体缺失，所暴露的字体加载顺序的潜规则</a>》</li>\n<li>科技猎手2023，《<a href="https://www.bilibili.com/video/BV1nc411575s/" rel="nofollow">电脑安装新字体，浏览器字体全变了，如何删除正在使用的苹方字体</a>》 - 哔哩哔哩</li>\n</ol>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.3-折腾'}, 'labels': {'nodes': [{'name': '公众号'}, {'name': '1.3.10-Windows'}]}, 'comments': {'nodes': []}}, {'title': '2-框架依赖', 'number': 48, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/48', 'createdAt': '2024-01-08T03:49:03Z', 'lastEditedAt': '2024-01-12T07:11:22Z', 'updatedAt': '2024-04-24T06:54:28Z', 'body': '> 编译：[Shen Weiyan](https://www.weiyan.cc)      \r\n> 原文：<https://docs.galaxyproject.org/en/master/admin/python.html>      ', 'bodyText': '编译：Shen Weiyan\n原文：https://docs.galaxyproject.org/en/master/admin/python.html', 'bodyHTML': '<blockquote>\n<p dir="auto">编译：<a href="https://www.weiyan.cc" rel="nofollow">Shen Weiyan</a><br>\n原文：<a href="https://docs.galaxyproject.org/en/master/admin/python.html" rel="nofollow">https://docs.galaxyproject.org/en/master/admin/python.html</a></p>\n</blockquote>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '3.1-Galaxy'}, 'labels': {'nodes': [{'name': '3.1.2-Administration'}]}, 'comments': {'nodes': []}}, {'title': '1-支持的 Python 版本', 'number': 47, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/47', 'createdAt': '2024-01-08T02:21:30Z', 'lastEditedAt': '2024-01-12T07:11:40Z', 'updatedAt': '2024-04-24T06:54:09Z', 'body': '> 编译：[沈维燕](https://www.weiyan.cc)     \r\n> 原文：<https://docs.galaxyproject.org/en/master/admin/python.html>       \r\n\r\nGalaxy 的核心功能目前支持 Python >=3.7。\r\n\r\n如果 Galaxy 排斥你正在使用的 Python 版本：\r\n\r\n1. 完全删除 Galaxy 使用的 Python virtualenv（可以使用 `GALAXY_VIRTUAL_ENV` 环境变量配置，默认为 `.venv` ），例如： `rm -rf /path/to/galaxy/.venv`。\r\n2. 如果您在 conda 环境中使用 Python（可以使用 `GALAXY_CONDA_ENV` 环境变量进行配置，默认为 `_galaxy_`），请将其删除，例如： `conda env remove -n _galaxy_`。\r\n3. 让 Galaxy 知道要使用哪个 Python 的方法有以下几种：    \r\n   - 如果您想从 conda 使用 Python，只需激活 `base` 环境，Galaxy 将为自己创建一个新的 conda 环境。\r\n   - 否则：    \r\n     - 确保安装了受支持的 Python 版本。\r\n     - 验证您要使用的 Python 解释器是否位于 `which -a python3 python` 输出中的第一个位置（如果您使用的是 Galaxy <=19.09，则为 `which -a python` ）。如果不是这种情况：     \r\n       - 如果您使用的是 Galaxy >= 20.01，只需执行： `export GALAXY_PYTHON=/path/to/python`。\r\n       - 如果你使用的是较旧版本的 Galaxy，你可以操控你的 shell 的 `PATH` 变量，将正确的版本置于首位。你可以通过创建一个新目录，将 python 的符号链接添加到其中，并将该目录置于 PATH 的最前面来完成此操作：\r\n         ```bash\r\n         % mkdir ~/galaxy-python\r\n         % ln -s /path/to/python ~/galaxy-python/python\r\n         % export PATH=~/galaxy-python:$PATH\r\n         ```\r\n\r\n4. 从 Python 2 升级时，删除已编译的 `mako` 模板：\r\n   ```basn\r\n   % rm -rf /path/to/galaxy/database/compiled_templates/\r\n   ```\r\n   这些模板将在启动 Galaxy 时自动重新生成。\r\n\r\n5. 再次启动 Galaxy。\r\n\r\n!!! abstract "注意"\r\n\r\n    如果您从源代码编译自己的 Python 解释器，请确保构建了 `ssl`、`sqlite3`、`curses` 和 `bz2` 模块，并且安装后可导入。这些 "额外" 模块是在编译过程的最后阶段构建的，并且是 Galaxy 框架所需的。如果在 Linux 上进行编译，您可能需要安装适用于 OpenSSL 和 Bzip2 的 `-dev` 包。您可能还需要使用共享库 (`--enable-shared`) 构建 Python。', 'bodyText': '编译：沈维燕\n原文：https://docs.galaxyproject.org/en/master/admin/python.html\n\nGalaxy 的核心功能目前支持 Python >=3.7。\n如果 Galaxy 排斥你正在使用的 Python 版本：\n\n\n完全删除 Galaxy 使用的 Python virtualenv（可以使用 GALAXY_VIRTUAL_ENV 环境变量配置，默认为 .venv ），例如： rm -rf /path/to/galaxy/.venv。\n\n\n如果您在 conda 环境中使用 Python（可以使用 GALAXY_CONDA_ENV 环境变量进行配置，默认为 _galaxy_），请将其删除，例如： conda env remove -n _galaxy_。\n\n\n让 Galaxy 知道要使用哪个 Python 的方法有以下几种：\n\n如果您想从 conda 使用 Python，只需激活 base 环境，Galaxy 将为自己创建一个新的 conda 环境。\n否则：\n\n确保安装了受支持的 Python 版本。\n验证您要使用的 Python 解释器是否位于 which -a python3 python 输出中的第一个位置（如果您使用的是 Galaxy <=19.09，则为 which -a python ）。如果不是这种情况：\n\n如果您使用的是 Galaxy >= 20.01，只需执行： export GALAXY_PYTHON=/path/to/python。\n如果你使用的是较旧版本的 Galaxy，你可以操控你的 shell 的 PATH 变量，将正确的版本置于首位。你可以通过创建一个新目录，将 python 的符号链接添加到其中，并将该目录置于 PATH 的最前面来完成此操作：\n% mkdir ~/galaxy-python\n% ln -s /path/to/python ~/galaxy-python/python\n% export PATH=~/galaxy-python:$PATH\n\n\n\n\n\n\n\n\n从 Python 2 升级时，删除已编译的 mako 模板：\n% rm -rf /path/to/galaxy/database/compiled_templates/\n\n这些模板将在启动 Galaxy 时自动重新生成。\n\n\n再次启动 Galaxy。\n\n\n!!! abstract "注意"\n如果您从源代码编译自己的 Python 解释器，请确保构建了 `ssl`、`sqlite3`、`curses` 和 `bz2` 模块，并且安装后可导入。这些 "额外" 模块是在编译过程的最后阶段构建的，并且是 Galaxy 框架所需的。如果在 Linux 上进行编译，您可能需要安装适用于 OpenSSL 和 Bzip2 的 `-dev` 包。您可能还需要使用共享库 (`--enable-shared`) 构建 Python。', 'bodyHTML': '<blockquote>\n<p dir="auto">编译：<a href="https://www.weiyan.cc" rel="nofollow">沈维燕</a><br>\n原文：<a href="https://docs.galaxyproject.org/en/master/admin/python.html" rel="nofollow">https://docs.galaxyproject.org/en/master/admin/python.html</a></p>\n</blockquote>\n<p dir="auto">Galaxy 的核心功能目前支持 Python &gt;=3.7。</p>\n<p dir="auto">如果 Galaxy 排斥你正在使用的 Python 版本：</p>\n<ol dir="auto">\n<li>\n<p dir="auto">完全删除 Galaxy 使用的 Python virtualenv（可以使用 <code class="notranslate">GALAXY_VIRTUAL_ENV</code> 环境变量配置，默认为 <code class="notranslate">.venv</code> ），例如： <code class="notranslate">rm -rf /path/to/galaxy/.venv</code>。</p>\n</li>\n<li>\n<p dir="auto">如果您在 conda 环境中使用 Python（可以使用 <code class="notranslate">GALAXY_CONDA_ENV</code> 环境变量进行配置，默认为 <code class="notranslate">_galaxy_</code>），请将其删除，例如： <code class="notranslate">conda env remove -n _galaxy_</code>。</p>\n</li>\n<li>\n<p dir="auto">让 Galaxy 知道要使用哪个 Python 的方法有以下几种：</p>\n<ul dir="auto">\n<li>如果您想从 conda 使用 Python，只需激活 <code class="notranslate">base</code> 环境，Galaxy 将为自己创建一个新的 conda 环境。</li>\n<li>否则：\n<ul dir="auto">\n<li>确保安装了受支持的 Python 版本。</li>\n<li>验证您要使用的 Python 解释器是否位于 <code class="notranslate">which -a python3 python</code> 输出中的第一个位置（如果您使用的是 Galaxy &lt;=19.09，则为 <code class="notranslate">which -a python</code> ）。如果不是这种情况：\n<ul dir="auto">\n<li>如果您使用的是 Galaxy &gt;= 20.01，只需执行： <code class="notranslate">export GALAXY_PYTHON=/path/to/python</code>。</li>\n<li>如果你使用的是较旧版本的 Galaxy，你可以操控你的 shell 的 <code class="notranslate">PATH</code> 变量，将正确的版本置于首位。你可以通过创建一个新目录，将 python 的符号链接添加到其中，并将该目录置于 PATH 的最前面来完成此操作：\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="% mkdir ~/galaxy-python\n% ln -s /path/to/python ~/galaxy-python/python\n% export PATH=~/galaxy-python:$PATH"><pre class="notranslate">% mkdir <span class="pl-k">~</span>/galaxy-python\n% ln -s /path/to/python <span class="pl-k">~</span>/galaxy-python/python\n% <span class="pl-k">export</span> PATH=<span class="pl-k">~</span>/galaxy-python:<span class="pl-smi">$PATH</span></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p dir="auto">从 Python 2 升级时，删除已编译的 <code class="notranslate">mako</code> 模板：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="% rm -rf /path/to/galaxy/database/compiled_templates/"><pre lang="basn" class="notranslate"><code class="notranslate">% rm -rf /path/to/galaxy/database/compiled_templates/\n</code></pre></div>\n<p dir="auto">这些模板将在启动 Galaxy 时自动重新生成。</p>\n</li>\n<li>\n<p dir="auto">再次启动 Galaxy。</p>\n</li>\n</ol>\n<p dir="auto">!!! abstract "注意"</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="如果您从源代码编译自己的 Python 解释器，请确保构建了 `ssl`、`sqlite3`、`curses` 和 `bz2` 模块，并且安装后可导入。这些 &quot;额外&quot; 模块是在编译过程的最后阶段构建的，并且是 Galaxy 框架所需的。如果在 Linux 上进行编译，您可能需要安装适用于 OpenSSL 和 Bzip2 的 `-dev` 包。您可能还需要使用共享库 (`--enable-shared`) 构建 Python。"><pre class="notranslate"><code class="notranslate">如果您从源代码编译自己的 Python 解释器，请确保构建了 `ssl`、`sqlite3`、`curses` 和 `bz2` 模块，并且安装后可导入。这些 "额外" 模块是在编译过程的最后阶段构建的，并且是 Galaxy 框架所需的。如果在 Linux 上进行编译，您可能需要安装适用于 OpenSSL 和 Bzip2 的 `-dev` 包。您可能还需要使用共享库 (`--enable-shared`) 构建 Python。\n</code></pre></div>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '3.1-Galaxy'}, 'labels': {'nodes': [{'name': '3.1.2-Administration'}]}, 'comments': {'nodes': []}}, {'title': 'Galaxy Project 的 Sphinx 文档部署', 'number': 46, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/46', 'createdAt': '2024-01-05T07:29:59Z', 'lastEditedAt': '2024-02-02T01:23:29Z', 'updatedAt': '2024-04-24T06:29:53Z', 'body': '<https://docs.galaxyproject.org/> 是 Galaxy Project 官方的文档地址链接，这是一个基于 [Sphinx](https://www.sphinx-doc.org/) + [Read the Docs](https://readthedocs.org/) 的文档站点。如果我们也想要创建一个这样一模一样的 Galaxy 文档需要怎么操作呢？\r\n\r\n<!-- more -->\r\n\r\n虽然 [Galaxy 官方文档](https://docs.galaxyproject.org/en/master/#building-this-documentation) 也给出了关于构建该文档的一些说明，但没有太多细节。\r\n\r\n> If you have your own copy of the Galaxy source code, you can also generate your own version of this documentation. Run the following command from the Galaxy’s root:\r\n> ```\r\n> $ make docs\r\n> ```\r\n> The generated documentation will be in `doc/build/html/` and can be viewed with a web browser. Note that you will need to install Sphinx and other module dependencies which are listed in the Makefile in the Galaxy root folder.\r\n\r\n下面我们来详细分解一下 `make docs` 这个命令具体执行的构建步骤。\r\n\r\n首先，在 Galaxy 根目录的执行 `make docs`，主要是执行了该目录下 [Makefile](https://github.com/galaxyproject/galaxy/blob/dev/Makefile) 中的这几句命令：\r\n```\r\ndocs: ## Generate HTML documentation.\r\n# Run following commands to setup the Python portion of the requirements:\r\n#   $ ./scripts/common_startup.sh\r\n#   $ . .venv/bin/activate\r\n#   $ pip install -r requirements.txt -r lib/galaxy/dependencies/dev-requirements.txt\r\n\t$(IN_VENV) $(MAKE) -C doc clean\r\n\t$(IN_VENV) $(MAKE) -C doc html\r\n```\r\n- `$(MAKE)`就是预设的 `make` 这个命令的名称（或者路径）。    \r\n- `-C`：到指定目录下读取 Makefile 文件并执行（给出指定的目录的路径）。     \r\n\r\n第二步，读取 `doc` 目录下的 [Makefile](https://github.com/galaxyproject/galaxy/blob/dev/doc/Makefile) 文件，并执行 `make html`。\r\n```\r\nhtml: $(GENERATED_RST)\r\n\t$(SPHINXBUILD) -b html $(ALLSPHINXOPTS) $(BUILDDIR)/html\r\n\t@echo\r\n\t@echo "Build finished. The HTML pages are in $(BUILDDIR)/html."\r\n```\r\n\r\n结合其中的一些参数，其实最终就是执行了下面这个命令完成最终的构建。\r\n```bash\r\nsphinx-build -b html -d build/doctrees source build/html\r\n```\r\n\r\n- sphinx-build [OPTIONS] SOURCEDIR OUTPUTDIR [FILENAMES...]\r\n- sourcedir：path to documentation source files\r\n- outputdir：path to output directory\r\n- `-b`：BUILDER，builder to use (default: html)\r\n\r\n了解了以上几个步骤后，我们就可以把 Galaxy 根目录的 doc 目录单独拎出来，通过 Sphinx 的命令实现独立构建部署。\r\n\r\n## 1. 安装必须依赖\r\n\r\n主要包括三个依赖。\r\n```\r\npip3 install Sphinx sphinx_rtd_theme myst_parser\r\n```\r\n\r\n## 2. 修改配置\r\n\r\n由于 `sphinx-build` 会读取 `source/conf.py` 并执行，但这个文件调用了 [`galaxy.version`](https://github.com/galaxyproject/galaxy/blob/dev/lib/galaxy/version.py) 模块：\r\n![No module named \'galaxy\'](https://shub.weiyan.tech/kgarden/2024/01/no-galaxy-version.png)\r\n\r\n所以，如果我们想要把 `galaxy/doc` 和 Galaxy 独立开来进行部署，就需要修改一下 `source/conf.py`：\r\n```python\r\n# The short X.Y version.\r\n#from galaxy.version import (\r\n#    VERSION,\r\n#    VERSION_MAJOR,\r\n#)\r\n\r\nVERSION_MAJOR = "23.1"\r\nVERSION_MINOR = "5.dev0"\r\nVERSION = VERSION_MAJOR + (f".{VERSION_MINOR}" if VERSION_MINOR else "")\r\n```\r\n\r\n## 3. 执行构建\r\n```bash\r\n$ sphinx-build -b html -d build/doctrees   source build/html\r\nRunning Sphinx v7.2.6\r\nmaking output directory... done\r\nmyst v2.0.0: MdParserConfig(commonmark_only=False, gfm_only=False, enable_extensions={\'deflist\', \'attrs_block\', \'substitution\'}, disable_syntax=[], all_links_external=False, url_schemes=(\'http\', \'https\', \'mailto\', \'ftp\'), ref_domains=None, fence_as_directive=set(), number_code_blocks=[], title_to_header=False, heading_anchors=5, heading_slug_func=<function make_id at 0x7f46201a6a60>, html_meta={}, footnote_transition=True, words_per_minute=200, substitutions={}, linkify_fuzzy_links=True, dmath_allow_labels=True, dmath_allow_space=True, dmath_allow_digits=True, dmath_double_inline=False, update_mathjax=True, mathjax_classes=\'tex2jax_process|mathjax_process|math|output_area\', enable_checkboxes=False, suppress_warnings=[], highlight_code_blocks=True)\r\nloading intersphinx inventory from https://docs.python.org/3/objects.inv...\r\nloading intersphinx inventory from https://requests.readthedocs.io/en/master/objects.inv...\r\nintersphinx inventory has moved: https://requests.readthedocs.io/en/master/objects.inv -> https://requests.readthedocs.io/en/latest/objects.inv\r\nbuilding [mo]: targets for 0 po files that are out of date\r\nwriting output... \r\nbuilding [html]: targets for 332 source files that are out of date\r\nupdating environment: [new config] 332 added, 0 changed, 0 removed\r\nreading sources... [100%] ts_api_doc\r\n\r\n...\r\n\r\ngenerating indices... genindex done\r\nhighlighting module code... \r\nwriting additional pages... search done\r\ncopying images... [100%] releases/images/23.1-hdf5.png\r\ndumping search index in English (code: en)... done\r\ndumping object inventory... done\r\nbuild succeeded, 1223 warnings.\r\n\r\nThe HTML pages are in build/html.\r\n```\r\n\r\n最后生成的静态文件都保存在了 `build/html` 目录，我们可以借助 NGINX 或者其他 Pages 就可以直接看到一个一模一样对应当前 Repo 版本的 Galaxy Project 文档了。', 'bodyText': 'https://docs.galaxyproject.org/ 是 Galaxy Project 官方的文档地址链接，这是一个基于 Sphinx + Read the Docs 的文档站点。如果我们也想要创建一个这样一模一样的 Galaxy 文档需要怎么操作呢？\n\n虽然 Galaxy 官方文档 也给出了关于构建该文档的一些说明，但没有太多细节。\n\nIf you have your own copy of the Galaxy source code, you can also generate your own version of this documentation. Run the following command from the Galaxy’s root:\n$ make docs\n\nThe generated documentation will be in doc/build/html/ and can be viewed with a web browser. Note that you will need to install Sphinx and other module dependencies which are listed in the Makefile in the Galaxy root folder.\n\n下面我们来详细分解一下 make docs 这个命令具体执行的构建步骤。\n首先，在 Galaxy 根目录的执行 make docs，主要是执行了该目录下 Makefile 中的这几句命令：\ndocs: ## Generate HTML documentation.\n# Run following commands to setup the Python portion of the requirements:\n#   $ ./scripts/common_startup.sh\n#   $ . .venv/bin/activate\n#   $ pip install -r requirements.txt -r lib/galaxy/dependencies/dev-requirements.txt\n\t$(IN_VENV) $(MAKE) -C doc clean\n\t$(IN_VENV) $(MAKE) -C doc html\n\n\n$(MAKE)就是预设的 make 这个命令的名称（或者路径）。\n-C：到指定目录下读取 Makefile 文件并执行（给出指定的目录的路径）。\n\n第二步，读取 doc 目录下的 Makefile 文件，并执行 make html。\nhtml: $(GENERATED_RST)\n\t$(SPHINXBUILD) -b html $(ALLSPHINXOPTS) $(BUILDDIR)/html\n\t@echo\n\t@echo "Build finished. The HTML pages are in $(BUILDDIR)/html."\n\n结合其中的一些参数，其实最终就是执行了下面这个命令完成最终的构建。\nsphinx-build -b html -d build/doctrees source build/html\n\nsphinx-build [OPTIONS] SOURCEDIR OUTPUTDIR [FILENAMES...]\nsourcedir：path to documentation source files\noutputdir：path to output directory\n-b：BUILDER，builder to use (default: html)\n\n了解了以上几个步骤后，我们就可以把 Galaxy 根目录的 doc 目录单独拎出来，通过 Sphinx 的命令实现独立构建部署。\n1. 安装必须依赖\n主要包括三个依赖。\npip3 install Sphinx sphinx_rtd_theme myst_parser\n\n2. 修改配置\n由于 sphinx-build 会读取 source/conf.py 并执行，但这个文件调用了 galaxy.version 模块：\n\n所以，如果我们想要把 galaxy/doc 和 Galaxy 独立开来进行部署，就需要修改一下 source/conf.py：\n# The short X.Y version.\n#from galaxy.version import (\n#    VERSION,\n#    VERSION_MAJOR,\n#)\n\nVERSION_MAJOR = "23.1"\nVERSION_MINOR = "5.dev0"\nVERSION = VERSION_MAJOR + (f".{VERSION_MINOR}" if VERSION_MINOR else "")\n3. 执行构建\n$ sphinx-build -b html -d build/doctrees   source build/html\nRunning Sphinx v7.2.6\nmaking output directory... done\nmyst v2.0.0: MdParserConfig(commonmark_only=False, gfm_only=False, enable_extensions={\'deflist\', \'attrs_block\', \'substitution\'}, disable_syntax=[], all_links_external=False, url_schemes=(\'http\', \'https\', \'mailto\', \'ftp\'), ref_domains=None, fence_as_directive=set(), number_code_blocks=[], title_to_header=False, heading_anchors=5, heading_slug_func=<function make_id at 0x7f46201a6a60>, html_meta={}, footnote_transition=True, words_per_minute=200, substitutions={}, linkify_fuzzy_links=True, dmath_allow_labels=True, dmath_allow_space=True, dmath_allow_digits=True, dmath_double_inline=False, update_mathjax=True, mathjax_classes=\'tex2jax_process|mathjax_process|math|output_area\', enable_checkboxes=False, suppress_warnings=[], highlight_code_blocks=True)\nloading intersphinx inventory from https://docs.python.org/3/objects.inv...\nloading intersphinx inventory from https://requests.readthedocs.io/en/master/objects.inv...\nintersphinx inventory has moved: https://requests.readthedocs.io/en/master/objects.inv -> https://requests.readthedocs.io/en/latest/objects.inv\nbuilding [mo]: targets for 0 po files that are out of date\nwriting output... \nbuilding [html]: targets for 332 source files that are out of date\nupdating environment: [new config] 332 added, 0 changed, 0 removed\nreading sources... [100%] ts_api_doc\n\n...\n\ngenerating indices... genindex done\nhighlighting module code... \nwriting additional pages... search done\ncopying images... [100%] releases/images/23.1-hdf5.png\ndumping search index in English (code: en)... done\ndumping object inventory... done\nbuild succeeded, 1223 warnings.\n\nThe HTML pages are in build/html.\n最后生成的静态文件都保存在了 build/html 目录，我们可以借助 NGINX 或者其他 Pages 就可以直接看到一个一模一样对应当前 Repo 版本的 Galaxy Project 文档了。', 'bodyHTML': '<p dir="auto"><a href="https://docs.galaxyproject.org/" rel="nofollow">https://docs.galaxyproject.org/</a> 是 Galaxy Project 官方的文档地址链接，这是一个基于 <a href="https://www.sphinx-doc.org/" rel="nofollow">Sphinx</a> + <a href="https://readthedocs.org/" rel="nofollow">Read the Docs</a> 的文档站点。如果我们也想要创建一个这样一模一样的 Galaxy 文档需要怎么操作呢？</p>\n\n<p dir="auto">虽然 <a href="https://docs.galaxyproject.org/en/master/#building-this-documentation" rel="nofollow">Galaxy 官方文档</a> 也给出了关于构建该文档的一些说明，但没有太多细节。</p>\n<blockquote>\n<p dir="auto">If you have your own copy of the Galaxy source code, you can also generate your own version of this documentation. Run the following command from the Galaxy’s root:</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ make docs"><pre class="notranslate"><code class="notranslate">$ make docs\n</code></pre></div>\n<p dir="auto">The generated documentation will be in <code class="notranslate">doc/build/html/</code> and can be viewed with a web browser. Note that you will need to install Sphinx and other module dependencies which are listed in the Makefile in the Galaxy root folder.</p>\n</blockquote>\n<p dir="auto">下面我们来详细分解一下 <code class="notranslate">make docs</code> 这个命令具体执行的构建步骤。</p>\n<p dir="auto">首先，在 Galaxy 根目录的执行 <code class="notranslate">make docs</code>，主要是执行了该目录下 <a href="https://github.com/galaxyproject/galaxy/blob/dev/Makefile">Makefile</a> 中的这几句命令：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="docs: ## Generate HTML documentation.\n# Run following commands to setup the Python portion of the requirements:\n#   $ ./scripts/common_startup.sh\n#   $ . .venv/bin/activate\n#   $ pip install -r requirements.txt -r lib/galaxy/dependencies/dev-requirements.txt\n\t$(IN_VENV) $(MAKE) -C doc clean\n\t$(IN_VENV) $(MAKE) -C doc html"><pre class="notranslate"><code class="notranslate">docs: ## Generate HTML documentation.\n# Run following commands to setup the Python portion of the requirements:\n#   $ ./scripts/common_startup.sh\n#   $ . .venv/bin/activate\n#   $ pip install -r requirements.txt -r lib/galaxy/dependencies/dev-requirements.txt\n\t$(IN_VENV) $(MAKE) -C doc clean\n\t$(IN_VENV) $(MAKE) -C doc html\n</code></pre></div>\n<ul dir="auto">\n<li><code class="notranslate">$(MAKE)</code>就是预设的 <code class="notranslate">make</code> 这个命令的名称（或者路径）。</li>\n<li><code class="notranslate">-C</code>：到指定目录下读取 Makefile 文件并执行（给出指定的目录的路径）。</li>\n</ul>\n<p dir="auto">第二步，读取 <code class="notranslate">doc</code> 目录下的 <a href="https://github.com/galaxyproject/galaxy/blob/dev/doc/Makefile">Makefile</a> 文件，并执行 <code class="notranslate">make html</code>。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="html: $(GENERATED_RST)\n\t$(SPHINXBUILD) -b html $(ALLSPHINXOPTS) $(BUILDDIR)/html\n\t@echo\n\t@echo &quot;Build finished. The HTML pages are in $(BUILDDIR)/html.&quot;"><pre class="notranslate"><code class="notranslate">html: $(GENERATED_RST)\n\t$(SPHINXBUILD) -b html $(ALLSPHINXOPTS) $(BUILDDIR)/html\n\t@echo\n\t@echo "Build finished. The HTML pages are in $(BUILDDIR)/html."\n</code></pre></div>\n<p dir="auto">结合其中的一些参数，其实最终就是执行了下面这个命令完成最终的构建。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sphinx-build -b html -d build/doctrees source build/html"><pre class="notranslate">sphinx-build -b html -d build/doctrees <span class="pl-c1">source</span> build/html</pre></div>\n<ul dir="auto">\n<li>sphinx-build [OPTIONS] SOURCEDIR OUTPUTDIR [FILENAMES...]</li>\n<li>sourcedir：path to documentation source files</li>\n<li>outputdir：path to output directory</li>\n<li><code class="notranslate">-b</code>：BUILDER，builder to use (default: html)</li>\n</ul>\n<p dir="auto">了解了以上几个步骤后，我们就可以把 Galaxy 根目录的 doc 目录单独拎出来，通过 Sphinx 的命令实现独立构建部署。</p>\n<h2 dir="auto">1. 安装必须依赖</h2>\n<p dir="auto">主要包括三个依赖。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pip3 install Sphinx sphinx_rtd_theme myst_parser"><pre class="notranslate"><code class="notranslate">pip3 install Sphinx sphinx_rtd_theme myst_parser\n</code></pre></div>\n<h2 dir="auto">2. 修改配置</h2>\n<p dir="auto">由于 <code class="notranslate">sphinx-build</code> 会读取 <code class="notranslate">source/conf.py</code> 并执行，但这个文件调用了 <a href="https://github.com/galaxyproject/galaxy/blob/dev/lib/galaxy/version.py"><code class="notranslate">galaxy.version</code></a> 模块：<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/09e4cead16475f55f62ca681b589a28a924de9fd8e3d4db681e40e516b3c37b4/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f6e6f2d67616c6178792d76657273696f6e2e706e67"><img src="https://camo.githubusercontent.com/09e4cead16475f55f62ca681b589a28a924de9fd8e3d4db681e40e516b3c37b4/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f6e6f2d67616c6178792d76657273696f6e2e706e67" alt="No module named \'galaxy\'" data-canonical-src="https://shub.weiyan.tech/kgarden/2024/01/no-galaxy-version.png" style="max-width: 100%;"></a></p>\n<p dir="auto">所以，如果我们想要把 <code class="notranslate">galaxy/doc</code> 和 Galaxy 独立开来进行部署，就需要修改一下 <code class="notranslate">source/conf.py</code>：</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# The short X.Y version.\n#from galaxy.version import (\n#    VERSION,\n#    VERSION_MAJOR,\n#)\n\nVERSION_MAJOR = &quot;23.1&quot;\nVERSION_MINOR = &quot;5.dev0&quot;\nVERSION = VERSION_MAJOR + (f&quot;.{VERSION_MINOR}&quot; if VERSION_MINOR else &quot;&quot;)"><pre class="notranslate"><span class="pl-c"># The short X.Y version.</span>\n<span class="pl-c">#from galaxy.version import (</span>\n<span class="pl-c">#    VERSION,</span>\n<span class="pl-c">#    VERSION_MAJOR,</span>\n<span class="pl-c">#)</span>\n\n<span class="pl-c1">VERSION_MAJOR</span> <span class="pl-c1">=</span> <span class="pl-s">"23.1"</span>\n<span class="pl-c1">VERSION_MINOR</span> <span class="pl-c1">=</span> <span class="pl-s">"5.dev0"</span>\n<span class="pl-c1">VERSION</span> <span class="pl-c1">=</span> <span class="pl-c1">VERSION_MAJOR</span> <span class="pl-c1">+</span> (<span class="pl-s">f".<span class="pl-s1"><span class="pl-kos">{</span><span class="pl-c1">VERSION_MINOR</span><span class="pl-kos">}</span></span>"</span> <span class="pl-k">if</span> <span class="pl-c1">VERSION_MINOR</span> <span class="pl-k">else</span> <span class="pl-s">""</span>)</pre></div>\n<h2 dir="auto">3. 执行构建</h2>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ sphinx-build -b html -d build/doctrees   source build/html\nRunning Sphinx v7.2.6\nmaking output directory... done\nmyst v2.0.0: MdParserConfig(commonmark_only=False, gfm_only=False, enable_extensions={\'deflist\', \'attrs_block\', \'substitution\'}, disable_syntax=[], all_links_external=False, url_schemes=(\'http\', \'https\', \'mailto\', \'ftp\'), ref_domains=None, fence_as_directive=set(), number_code_blocks=[], title_to_header=False, heading_anchors=5, heading_slug_func=&lt;function make_id at 0x7f46201a6a60&gt;, html_meta={}, footnote_transition=True, words_per_minute=200, substitutions={}, linkify_fuzzy_links=True, dmath_allow_labels=True, dmath_allow_space=True, dmath_allow_digits=True, dmath_double_inline=False, update_mathjax=True, mathjax_classes=\'tex2jax_process|mathjax_process|math|output_area\', enable_checkboxes=False, suppress_warnings=[], highlight_code_blocks=True)\nloading intersphinx inventory from https://docs.python.org/3/objects.inv...\nloading intersphinx inventory from https://requests.readthedocs.io/en/master/objects.inv...\nintersphinx inventory has moved: https://requests.readthedocs.io/en/master/objects.inv -&gt; https://requests.readthedocs.io/en/latest/objects.inv\nbuilding [mo]: targets for 0 po files that are out of date\nwriting output... \nbuilding [html]: targets for 332 source files that are out of date\nupdating environment: [new config] 332 added, 0 changed, 0 removed\nreading sources... [100%] ts_api_doc\n\n...\n\ngenerating indices... genindex done\nhighlighting module code... \nwriting additional pages... search done\ncopying images... [100%] releases/images/23.1-hdf5.png\ndumping search index in English (code: en)... done\ndumping object inventory... done\nbuild succeeded, 1223 warnings.\n\nThe HTML pages are in build/html."><pre class="notranslate">$ sphinx-build -b html -d build/doctrees   <span class="pl-c1">source</span> build/html\nRunning Sphinx v7.2.6\nmaking output directory... <span class="pl-k">done</span>\nmyst v2.0.0: MdParserConfig(commonmark_only=False, gfm_only=False, enable_extensions={<span class="pl-s"><span class="pl-pds">\'</span>deflist<span class="pl-pds">\'</span></span>, <span class="pl-s"><span class="pl-pds">\'</span>attrs_block<span class="pl-pds">\'</span></span>, <span class="pl-s"><span class="pl-pds">\'</span>substitution<span class="pl-pds">\'</span></span>}, disable_syntax=[], all_links_external=False, url_schemes=(<span class="pl-s"><span class="pl-pds">\'</span>http<span class="pl-pds">\'</span></span>, <span class="pl-s"><span class="pl-pds">\'</span>https<span class="pl-pds">\'</span></span>, <span class="pl-s"><span class="pl-pds">\'</span>mailto<span class="pl-pds">\'</span></span>, <span class="pl-s"><span class="pl-pds">\'</span>ftp<span class="pl-pds">\'</span></span>), ref_domains=None, fence_as_directive=set(), number_code_blocks=[], title_to_header=False, heading_anchors=5, heading_slug_func=<span class="pl-k">&lt;</span>function make_id at 0x7f46201a6a<span class="pl-k">60&gt;</span>, html_meta={}, footnote_transition=True, words_per_minute=200, substitutions={}, linkify_fuzzy_links=True, dmath_allow_labels=True, dmath_allow_space=True, dmath_allow_digits=True, dmath_double_inline=False, update_mathjax=True, mathjax_classes=<span class="pl-s"><span class="pl-pds">\'</span>tex2jax_process|mathjax_process|math|output_area<span class="pl-pds">\'</span></span>, enable_checkboxes=False, suppress_warnings=[], highlight_code_blocks=True)\nloading intersphinx inventory from https://docs.python.org/3/objects.inv...\nloading intersphinx inventory from https://requests.readthedocs.io/en/master/objects.inv...\nintersphinx inventory has moved: https://requests.readthedocs.io/en/master/objects.inv -<span class="pl-k">&gt;</span> https://requests.readthedocs.io/en/latest/objects.inv\nbuilding [mo]: targets <span class="pl-k">for</span> 0 po files that are out of date\nwriting output... \nbuilding [html]: targets <span class="pl-k">for</span> 332 <span class="pl-c1">source</span> files that are out of date\nupdating environment: [new config] 332 added, 0 changed, 0 removed\nreading sources... [100%] ts_api_doc\n\n...\n\ngenerating indices... genindex <span class="pl-k">done</span>\nhighlighting module code... \nwriting additional pages... search <span class="pl-k">done</span>\ncopying images... [100%] releases/images/23.1-hdf5.png\ndumping search index <span class="pl-k">in</span> English (code: en)... <span class="pl-k">done</span>\ndumping object inventory... <span class="pl-k">done</span>\nbuild succeeded, 1223 warnings.\n\nThe HTML pages are <span class="pl-k">in</span> build/html.</pre></div>\n<p dir="auto">最后生成的静态文件都保存在了 <code class="notranslate">build/html</code> 目录，我们可以借助 NGINX 或者其他 Pages 就可以直接看到一个一模一样对应当前 Repo 版本的 Galaxy Project 文档了。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '3.1-Galaxy'}, 'labels': {'nodes': [{'name': '公众号'}, {'name': '3.1.x-GalaxyOther'}]}, 'comments': {'nodes': []}}, {'title': '更新记录', 'number': 45, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/45', 'createdAt': '2024-01-04T05:50:47Z', 'lastEditedAt': '2025-01-22T01:30:56Z', 'updatedAt': '2025-01-22T01:30:56Z', 'body': '记录一下本知识仓库 [Knowledge-Garden](https://github.com/shenweiyan/Knowledge-Garden) 的一些主要更新记录。\r\n\r\n<!-- more -->\r\n\r\n#### 2025-01-22\r\n- **Knowledge-Garden** 更名为 **Digital-Garden**。\r\n\r\n#### 2025-01-21\r\n- 图片相关静态文件 [kg.weiyan.cc](https://kg.weiyan.cc/) 由原来的 Cloudflare Pages 变更为 EdgeOne Pages；Cloudflare Pages 增加 [kg.weiyan.tech](https://kg.weiyan.tech/) 访问域名。\r\n\r\n#### 2024-07-16\r\n- GitHub Pages 域名由 [doc.weiyan.cc](https://doc.weiyan.cc/) 变更为 [gh-pages.weiyan.cc](https://gh-pages.weiyan.cc/)。\r\n\r\n#### 2024-01-04   \r\n- 域名 `weiyan.cc` DNS 从 Cloudflare 转回阿里云。        \r\n- 把站点从 [Cloudflare Pages](https://pages.cloudflare.com/) 转移到 [Netlify](https://app.netlify.com/)，绑定 [www.weiyan.cc](https://www.weiyan.cc/)，实现 [weiyan.cc](https://weiyan.cc/) 重定向到 www 主域名 (Redirects automatically to primary domain)。\r\n\r\n#### 2023-11-28    \r\n- 镜像站点（[weiyan.pages.dev](https://weiyan.pages.dev/)）部署到 [Cloudflare Pages](https://pages.cloudflare.com/)，绑定自定义域名 [weiyan.cc](https://weiyan.cc/)。 \r\n\r\n#### 2023-10-16         \r\n- GitHub 正式创建 [Knowledge-Garden](https://github.com/shenweiyan/Knowledge-Garden) 仓库，开启 GitHub Pages，绑定 [doc.weiyan.cc](https://doc.weiyan.cc/)。', 'bodyText': '记录一下本知识仓库 Knowledge-Garden 的一些主要更新记录。\n\n2025-01-22\n\nKnowledge-Garden 更名为 Digital-Garden。\n\n2025-01-21\n\n图片相关静态文件 kg.weiyan.cc 由原来的 Cloudflare Pages 变更为 EdgeOne Pages；Cloudflare Pages 增加 kg.weiyan.tech 访问域名。\n\n2024-07-16\n\nGitHub Pages 域名由 doc.weiyan.cc 变更为 gh-pages.weiyan.cc。\n\n2024-01-04\n\n域名 weiyan.cc DNS 从 Cloudflare 转回阿里云。\n把站点从 Cloudflare Pages 转移到 Netlify，绑定 www.weiyan.cc，实现 weiyan.cc 重定向到 www 主域名 (Redirects automatically to primary domain)。\n\n2023-11-28\n\n镜像站点（weiyan.pages.dev）部署到 Cloudflare Pages，绑定自定义域名 weiyan.cc。\n\n2023-10-16\n\nGitHub 正式创建 Knowledge-Garden 仓库，开启 GitHub Pages，绑定 doc.weiyan.cc。', 'bodyHTML': '<p dir="auto">记录一下本知识仓库 <a href="https://github.com/shenweiyan/Knowledge-Garden">Knowledge-Garden</a> 的一些主要更新记录。</p>\n\n<h4 dir="auto">2025-01-22</h4>\n<ul dir="auto">\n<li><strong>Knowledge-Garden</strong> 更名为 <strong>Digital-Garden</strong>。</li>\n</ul>\n<h4 dir="auto">2025-01-21</h4>\n<ul dir="auto">\n<li>图片相关静态文件 <a href="https://kg.weiyan.cc/" rel="nofollow">kg.weiyan.cc</a> 由原来的 Cloudflare Pages 变更为 EdgeOne Pages；Cloudflare Pages 增加 <a href="https://kg.weiyan.tech/" rel="nofollow">kg.weiyan.tech</a> 访问域名。</li>\n</ul>\n<h4 dir="auto">2024-07-16</h4>\n<ul dir="auto">\n<li>GitHub Pages 域名由 <a href="https://doc.weiyan.cc/" rel="nofollow">doc.weiyan.cc</a> 变更为 <a href="https://gh-pages.weiyan.cc/" rel="nofollow">gh-pages.weiyan.cc</a>。</li>\n</ul>\n<h4 dir="auto">2024-01-04</h4>\n<ul dir="auto">\n<li>域名 <code class="notranslate">weiyan.cc</code> DNS 从 Cloudflare 转回阿里云。</li>\n<li>把站点从 <a href="https://pages.cloudflare.com/" rel="nofollow">Cloudflare Pages</a> 转移到 <a href="https://app.netlify.com/" rel="nofollow">Netlify</a>，绑定 <a href="https://www.weiyan.cc/" rel="nofollow">www.weiyan.cc</a>，实现 <a href="https://weiyan.cc/" rel="nofollow">weiyan.cc</a> 重定向到 www 主域名 (Redirects automatically to primary domain)。</li>\n</ul>\n<h4 dir="auto">2023-11-28</h4>\n<ul dir="auto">\n<li>镜像站点（<a href="https://weiyan.pages.dev/" rel="nofollow">weiyan.pages.dev</a>）部署到 <a href="https://pages.cloudflare.com/" rel="nofollow">Cloudflare Pages</a>，绑定自定义域名 <a href="https://weiyan.cc/" rel="nofollow">weiyan.cc</a>。</li>\n</ul>\n<h4 dir="auto">2023-10-16</h4>\n<ul dir="auto">\n<li>GitHub 正式创建 <a href="https://github.com/shenweiyan/Knowledge-Garden">Knowledge-Garden</a> 仓库，开启 GitHub Pages，绑定 <a href="https://doc.weiyan.cc/" rel="nofollow">doc.weiyan.cc</a>。</li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '0.1-站点'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '不要使用 requirements.txt', 'number': 44, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/44', 'createdAt': '2024-01-03T07:50:27Z', 'lastEditedAt': '2024-01-03T07:55:06Z', 'updatedAt': '2024-01-03T07:55:06Z', 'body': '> 作者：[Miikka Koskinen](https://miikka.me/)       \r\n> 编译：[沈维燕](https://weiyan.cc)       \r\n> 时间：原文发表于 2023-10-31       \r\n> 原文：[Do not use requirements.txt](https://quanttype.net/posts/2023-10-31-do-not-use-requirements.txt.html)\r\n\r\n你是否在用 Python 开发后端服务？我有两条建议：\r\n\r\n- 不要使用 `pip` 和 `requirements.txt` 来管理 Python 依赖。它们缺乏一些应该内置的关键功能。\r\n- 改用 [Poetry](https://python-poetry.org/)。\r\n\r\n<!-- more -->\r\n\r\n对我来说，第一条建议毋庸置疑。第二条则更具有暂时性：Poetry 是一个很好的选择，但并非唯一值得考虑的选择。\r\n\r\n我将在下面进行解释。\r\n\r\n请注意：如果你使用 Python 做其他事情而不是构建后端服务，那么本文中的建议可能并不适用于你。例如，如果你是[一个正在迁移 `setup.py` 的库开发者](https://gregoryszorc.com/blog/2023/10/30/my-user-experience-porting-off-setup.py/)，Poetry 并不明显是一个完美的选择。\r\n\r\n## PIP 缺失的功能\r\n[pip](https://pypi.org/project/pip/) 是一个工具，你可以用它从 [The Python Package Index (PyPI)](https://pypi.org/) 中安装软件包。它随 Python 一起安装，如果你是 Python 开发者，你可能已经多次使用过它。\r\n\r\n管理 Python 项目依赖的传统方式是将它们列在一个名为 `requirements.txt` 的文件中，并使用 `pip install -r requirements.txt` 进行安装。然而，`pip` 被设计成一个软件包安装工具，而不是一个功能齐全的项目工作流工具。**pip 缺乏两个关键功能，即依赖的锁定文件 (dependency lockfiles) 和虚拟环境的自动管理(automatic management of virtualenvs)。**\r\n\r\n## 依赖锁定文件\r\n如果你希望在所有环境中（比如你的笔记本电脑、持续集成(CI)、生产环境）获得相同的行为，你需要锁定你的依赖项及其传递依赖的版本。你可以在 `requirements.txt` 中锁定你直接依赖的版本，例如，使用 `requests==2.31.0` 而不是 `requests`。\r\n\r\n然而，pip 不会锁定传递依赖的版本。这可以通过使用 [pip-tools](https://github.com/jazzband/pip-tools) 来解决，将 `requirements.txt` 扩展成一个列出完整依赖图的文件，包括准确版本和构件的校验和(checksums for the artifacts)。pip-tools 很不错，但你需要自行设置并弄清楚它如何适应你的工作流程。\r\n\r\n在其他编程语言中，这个功能是基本要求的 - 例如，npm 多年来一直有 `package-lock.json`，Cargo 也有 `Cargo.lock`。这个功能实在应该是一个项目工作流工具中的内置功能。\r\n\r\n## 虚拟环境的自动管理\r\n\r\n在 Python 中创建隔离环境的方式是使用 [virtualenvs](https://docs.python.org/3/library/venv.html)。传统上，你需要手动管理它们：通过一个 shell 命令创建一个（比如 `python -m venv example` 来创建名为 `example` 的虚拟环境），当你想要使用它时，需要用另一个 shell 命令来激活它。\r\n\r\n这容易出错：忘记激活虚拟环境或者激活错误的虚拟环境是常见的错误。有一堆的解决方法。例如，你可以使用 [pyenv-virtualenv](https://github.com/pyenv/pyenv-virtualenv)，在进入项目目录时让你的 shell 自动激活一个虚拟环境。[direnv](https://github.com/direnv/direnv/wiki/Python) 也可以做到。\r\n\r\n同样，这也应该成为工作流工具中的一个内置功能。你不应该需要将多个工具粘合在一起。你不会听到 npm 或 Cargo 用户在虚拟环境上遇到问题的。\r\n\r\n## Poetry 及其他选择\r\n\r\n幸运的是，许多人已经意识到这些问题并努力解决它们。不太幸运的是，这导致了大量的 Python 项目工作流工具涌现。那么该如何选择呢？\r\n\r\n我的建议是：**选择 [Poetry](https://python-poetry.org/docs/)**。它有锁定文件，有虚拟环境管理，而且很受欢迎且在积极开发中。根据我的经验，它并不完美，但是它起作用。\r\n\r\n你也可以考虑 [Hatch](https://hatch.pypa.io/latest/) 或 [PDM](https://github.com/pdm-project/pdm)。它们与 Poetry 相似。我自己没有使用过它们，但我听说其他人成功地使用了它们。Hatch 似乎在库作者 (library authors) 中特别受欢迎。\r\n\r\n如果你正在寻找一个更强大的选项，可以处理多个子项目，[Pants 构建系统](https://www.pantsbuild.org/)在 Python 支持方面做得很好。然而，它的学习曲线相对陡峭。\r\n\r\n最后，如果你正在寻找一个类似 rustup 那样可以为你安装 Python 的解决方案，那么有 [rye](https://github.com/mitsuhiko/rye)。它是新的实验性工具，但也许它对你来说是正确的选择？\r\n\r\n## 哪个是权威的工作流工具？\r\n\r\n如果 Python 自带一个权威的项目工作流工具会很好。很多人希望 pip 成为这样一个工具。Node.js 自带 npm，Rust 自带 Cargo，那么为什么 Python 就不能有一个呢？为什么会有这么多竞争的选择呢？\r\n\r\n据我所知，最大的障碍是，由于 Python 被广泛使用且用于许多不同的用例，制定一个通用的官方解决方案是困难且缓慢的（并且资金不足的）工作。另外，也不清楚 pip 是否适合这些功能。\r\n\r\n如果你想了解更多信息，请阅读和听取这些与我不同、深度参与 Python 社区的人的意见：    \r\n- Stargirl (Thea Flowers) on Fediverse：《[所以你想解决 Python 打包问题：一个实用指南](https://hachyderm.io/@stargirl/109697057391904145)》\r\n- Pradyun Gedam：《[关于 Python 打包生态系统的思考](https://pradyunsg.me/blog/2023/01/21/thoughts-on-python-packaging/)》\r\n- Talk Python to Me (podcast)：《[重新构想 Python 的打包工作流程](https://talkpython.fm/episodes/show/406/reimagining-pythons-packaging-workflows)》\r\n\r\n## 关于 Clojure \r\n\r\n阅读我的博客的 Clojure 开发者可能会问：嘿，Clojure 怎么样？为什么我们没有锁定文件呢？这是一个很好的问题！\r\n\r\nClojure 社区通过始终使用明确的版本而不是版本范围来解决了这个问题，即使在库中也是如此。版本描述实际上支持范围，但没有人会使用它们。这样，只要版本解析算法稳定，你总是会得到相同的版本。\r\n\r\n理论上，传递依赖项版本不匹配可能是一个问题，但 Clojure 支持一种编码风格，很少引起问题。\r\n\r\n相比之下，在 Python 和 Node.js 社区，通常期望库列出其依赖项的版本范围，而软件包管理工具会抱怨版本不匹配的问题。', 'bodyText': '作者：Miikka Koskinen\n编译：沈维燕\n时间：原文发表于 2023-10-31\n原文：Do not use requirements.txt\n\n你是否在用 Python 开发后端服务？我有两条建议：\n\n不要使用 pip 和 requirements.txt 来管理 Python 依赖。它们缺乏一些应该内置的关键功能。\n改用 Poetry。\n\n\n对我来说，第一条建议毋庸置疑。第二条则更具有暂时性：Poetry 是一个很好的选择，但并非唯一值得考虑的选择。\n我将在下面进行解释。\n请注意：如果你使用 Python 做其他事情而不是构建后端服务，那么本文中的建议可能并不适用于你。例如，如果你是一个正在迁移 setup.py 的库开发者，Poetry 并不明显是一个完美的选择。\nPIP 缺失的功能\npip 是一个工具，你可以用它从 The Python Package Index (PyPI) 中安装软件包。它随 Python 一起安装，如果你是 Python 开发者，你可能已经多次使用过它。\n管理 Python 项目依赖的传统方式是将它们列在一个名为 requirements.txt 的文件中，并使用 pip install -r requirements.txt 进行安装。然而，pip 被设计成一个软件包安装工具，而不是一个功能齐全的项目工作流工具。pip 缺乏两个关键功能，即依赖的锁定文件 (dependency lockfiles) 和虚拟环境的自动管理(automatic management of virtualenvs)。\n依赖锁定文件\n如果你希望在所有环境中（比如你的笔记本电脑、持续集成(CI)、生产环境）获得相同的行为，你需要锁定你的依赖项及其传递依赖的版本。你可以在 requirements.txt 中锁定你直接依赖的版本，例如，使用 requests==2.31.0 而不是 requests。\n然而，pip 不会锁定传递依赖的版本。这可以通过使用 pip-tools 来解决，将 requirements.txt 扩展成一个列出完整依赖图的文件，包括准确版本和构件的校验和(checksums for the artifacts)。pip-tools 很不错，但你需要自行设置并弄清楚它如何适应你的工作流程。\n在其他编程语言中，这个功能是基本要求的 - 例如，npm 多年来一直有 package-lock.json，Cargo 也有 Cargo.lock。这个功能实在应该是一个项目工作流工具中的内置功能。\n虚拟环境的自动管理\n在 Python 中创建隔离环境的方式是使用 virtualenvs。传统上，你需要手动管理它们：通过一个 shell 命令创建一个（比如 python -m venv example 来创建名为 example 的虚拟环境），当你想要使用它时，需要用另一个 shell 命令来激活它。\n这容易出错：忘记激活虚拟环境或者激活错误的虚拟环境是常见的错误。有一堆的解决方法。例如，你可以使用 pyenv-virtualenv，在进入项目目录时让你的 shell 自动激活一个虚拟环境。direnv 也可以做到。\n同样，这也应该成为工作流工具中的一个内置功能。你不应该需要将多个工具粘合在一起。你不会听到 npm 或 Cargo 用户在虚拟环境上遇到问题的。\nPoetry 及其他选择\n幸运的是，许多人已经意识到这些问题并努力解决它们。不太幸运的是，这导致了大量的 Python 项目工作流工具涌现。那么该如何选择呢？\n我的建议是：选择 Poetry。它有锁定文件，有虚拟环境管理，而且很受欢迎且在积极开发中。根据我的经验，它并不完美，但是它起作用。\n你也可以考虑 Hatch 或 PDM。它们与 Poetry 相似。我自己没有使用过它们，但我听说其他人成功地使用了它们。Hatch 似乎在库作者 (library authors) 中特别受欢迎。\n如果你正在寻找一个更强大的选项，可以处理多个子项目，Pants 构建系统在 Python 支持方面做得很好。然而，它的学习曲线相对陡峭。\n最后，如果你正在寻找一个类似 rustup 那样可以为你安装 Python 的解决方案，那么有 rye。它是新的实验性工具，但也许它对你来说是正确的选择？\n哪个是权威的工作流工具？\n如果 Python 自带一个权威的项目工作流工具会很好。很多人希望 pip 成为这样一个工具。Node.js 自带 npm，Rust 自带 Cargo，那么为什么 Python 就不能有一个呢？为什么会有这么多竞争的选择呢？\n据我所知，最大的障碍是，由于 Python 被广泛使用且用于许多不同的用例，制定一个通用的官方解决方案是困难且缓慢的（并且资金不足的）工作。另外，也不清楚 pip 是否适合这些功能。\n如果你想了解更多信息，请阅读和听取这些与我不同、深度参与 Python 社区的人的意见：\n\nStargirl (Thea Flowers) on Fediverse：《所以你想解决 Python 打包问题：一个实用指南》\nPradyun Gedam：《关于 Python 打包生态系统的思考》\nTalk Python to Me (podcast)：《重新构想 Python 的打包工作流程》\n\n关于 Clojure\n阅读我的博客的 Clojure 开发者可能会问：嘿，Clojure 怎么样？为什么我们没有锁定文件呢？这是一个很好的问题！\nClojure 社区通过始终使用明确的版本而不是版本范围来解决了这个问题，即使在库中也是如此。版本描述实际上支持范围，但没有人会使用它们。这样，只要版本解析算法稳定，你总是会得到相同的版本。\n理论上，传递依赖项版本不匹配可能是一个问题，但 Clojure 支持一种编码风格，很少引起问题。\n相比之下，在 Python 和 Node.js 社区，通常期望库列出其依赖项的版本范围，而软件包管理工具会抱怨版本不匹配的问题。', 'bodyHTML': '<blockquote>\n<p dir="auto">作者：<a href="https://miikka.me/" rel="nofollow">Miikka Koskinen</a><br>\n编译：<a href="https://weiyan.cc" rel="nofollow">沈维燕</a><br>\n时间：原文发表于 2023-10-31<br>\n原文：<a href="https://quanttype.net/posts/2023-10-31-do-not-use-requirements.txt.html" rel="nofollow">Do not use requirements.txt</a></p>\n</blockquote>\n<p dir="auto">你是否在用 Python 开发后端服务？我有两条建议：</p>\n<ul dir="auto">\n<li>不要使用 <code class="notranslate">pip</code> 和 <code class="notranslate">requirements.txt</code> 来管理 Python 依赖。它们缺乏一些应该内置的关键功能。</li>\n<li>改用 <a href="https://python-poetry.org/" rel="nofollow">Poetry</a>。</li>\n</ul>\n\n<p dir="auto">对我来说，第一条建议毋庸置疑。第二条则更具有暂时性：Poetry 是一个很好的选择，但并非唯一值得考虑的选择。</p>\n<p dir="auto">我将在下面进行解释。</p>\n<p dir="auto">请注意：如果你使用 Python 做其他事情而不是构建后端服务，那么本文中的建议可能并不适用于你。例如，如果你是<a href="https://gregoryszorc.com/blog/2023/10/30/my-user-experience-porting-off-setup.py/" rel="nofollow">一个正在迁移 <code class="notranslate">setup.py</code> 的库开发者</a>，Poetry 并不明显是一个完美的选择。</p>\n<h2 dir="auto">PIP 缺失的功能</h2>\n<p dir="auto"><a href="https://pypi.org/project/pip/" rel="nofollow">pip</a> 是一个工具，你可以用它从 <a href="https://pypi.org/" rel="nofollow">The Python Package Index (PyPI)</a> 中安装软件包。它随 Python 一起安装，如果你是 Python 开发者，你可能已经多次使用过它。</p>\n<p dir="auto">管理 Python 项目依赖的传统方式是将它们列在一个名为 <code class="notranslate">requirements.txt</code> 的文件中，并使用 <code class="notranslate">pip install -r requirements.txt</code> 进行安装。然而，<code class="notranslate">pip</code> 被设计成一个软件包安装工具，而不是一个功能齐全的项目工作流工具。<strong>pip 缺乏两个关键功能，即依赖的锁定文件 (dependency lockfiles) 和虚拟环境的自动管理(automatic management of virtualenvs)。</strong></p>\n<h2 dir="auto">依赖锁定文件</h2>\n<p dir="auto">如果你希望在所有环境中（比如你的笔记本电脑、持续集成(CI)、生产环境）获得相同的行为，你需要锁定你的依赖项及其传递依赖的版本。你可以在 <code class="notranslate">requirements.txt</code> 中锁定你直接依赖的版本，例如，使用 <code class="notranslate">requests==2.31.0</code> 而不是 <code class="notranslate">requests</code>。</p>\n<p dir="auto">然而，pip 不会锁定传递依赖的版本。这可以通过使用 <a href="https://github.com/jazzband/pip-tools">pip-tools</a> 来解决，将 <code class="notranslate">requirements.txt</code> 扩展成一个列出完整依赖图的文件，包括准确版本和构件的校验和(checksums for the artifacts)。pip-tools 很不错，但你需要自行设置并弄清楚它如何适应你的工作流程。</p>\n<p dir="auto">在其他编程语言中，这个功能是基本要求的 - 例如，npm 多年来一直有 <code class="notranslate">package-lock.json</code>，Cargo 也有 <code class="notranslate">Cargo.lock</code>。这个功能实在应该是一个项目工作流工具中的内置功能。</p>\n<h2 dir="auto">虚拟环境的自动管理</h2>\n<p dir="auto">在 Python 中创建隔离环境的方式是使用 <a href="https://docs.python.org/3/library/venv.html" rel="nofollow">virtualenvs</a>。传统上，你需要手动管理它们：通过一个 shell 命令创建一个（比如 <code class="notranslate">python -m venv example</code> 来创建名为 <code class="notranslate">example</code> 的虚拟环境），当你想要使用它时，需要用另一个 shell 命令来激活它。</p>\n<p dir="auto">这容易出错：忘记激活虚拟环境或者激活错误的虚拟环境是常见的错误。有一堆的解决方法。例如，你可以使用 <a href="https://github.com/pyenv/pyenv-virtualenv">pyenv-virtualenv</a>，在进入项目目录时让你的 shell 自动激活一个虚拟环境。<a href="https://github.com/direnv/direnv/wiki/Python">direnv</a> 也可以做到。</p>\n<p dir="auto">同样，这也应该成为工作流工具中的一个内置功能。你不应该需要将多个工具粘合在一起。你不会听到 npm 或 Cargo 用户在虚拟环境上遇到问题的。</p>\n<h2 dir="auto">Poetry 及其他选择</h2>\n<p dir="auto">幸运的是，许多人已经意识到这些问题并努力解决它们。不太幸运的是，这导致了大量的 Python 项目工作流工具涌现。那么该如何选择呢？</p>\n<p dir="auto">我的建议是：<strong>选择 <a href="https://python-poetry.org/docs/" rel="nofollow">Poetry</a></strong>。它有锁定文件，有虚拟环境管理，而且很受欢迎且在积极开发中。根据我的经验，它并不完美，但是它起作用。</p>\n<p dir="auto">你也可以考虑 <a href="https://hatch.pypa.io/latest/" rel="nofollow">Hatch</a> 或 <a href="https://github.com/pdm-project/pdm">PDM</a>。它们与 Poetry 相似。我自己没有使用过它们，但我听说其他人成功地使用了它们。Hatch 似乎在库作者 (library authors) 中特别受欢迎。</p>\n<p dir="auto">如果你正在寻找一个更强大的选项，可以处理多个子项目，<a href="https://www.pantsbuild.org/" rel="nofollow">Pants 构建系统</a>在 Python 支持方面做得很好。然而，它的学习曲线相对陡峭。</p>\n<p dir="auto">最后，如果你正在寻找一个类似 rustup 那样可以为你安装 Python 的解决方案，那么有 <a href="https://github.com/mitsuhiko/rye">rye</a>。它是新的实验性工具，但也许它对你来说是正确的选择？</p>\n<h2 dir="auto">哪个是权威的工作流工具？</h2>\n<p dir="auto">如果 Python 自带一个权威的项目工作流工具会很好。很多人希望 pip 成为这样一个工具。Node.js 自带 npm，Rust 自带 Cargo，那么为什么 Python 就不能有一个呢？为什么会有这么多竞争的选择呢？</p>\n<p dir="auto">据我所知，最大的障碍是，由于 Python 被广泛使用且用于许多不同的用例，制定一个通用的官方解决方案是困难且缓慢的（并且资金不足的）工作。另外，也不清楚 pip 是否适合这些功能。</p>\n<p dir="auto">如果你想了解更多信息，请阅读和听取这些与我不同、深度参与 Python 社区的人的意见：</p>\n<ul dir="auto">\n<li>Stargirl (Thea Flowers) on Fediverse：《<a href="https://hachyderm.io/@stargirl/109697057391904145" rel="nofollow">所以你想解决 Python 打包问题：一个实用指南</a>》</li>\n<li>Pradyun Gedam：《<a href="https://pradyunsg.me/blog/2023/01/21/thoughts-on-python-packaging/" rel="nofollow">关于 Python 打包生态系统的思考</a>》</li>\n<li>Talk Python to Me (podcast)：《<a href="https://talkpython.fm/episodes/show/406/reimagining-pythons-packaging-workflows" rel="nofollow">重新构想 Python 的打包工作流程</a>》</li>\n</ul>\n<h2 dir="auto">关于 Clojure</h2>\n<p dir="auto">阅读我的博客的 Clojure 开发者可能会问：嘿，Clojure 怎么样？为什么我们没有锁定文件呢？这是一个很好的问题！</p>\n<p dir="auto">Clojure 社区通过始终使用明确的版本而不是版本范围来解决了这个问题，即使在库中也是如此。版本描述实际上支持范围，但没有人会使用它们。这样，只要版本解析算法稳定，你总是会得到相同的版本。</p>\n<p dir="auto">理论上，传递依赖项版本不匹配可能是一个问题，但 Clojure 支持一种编码风格，很少引起问题。</p>\n<p dir="auto">相比之下，在 Python 和 Node.js 社区，通常期望库列出其依赖项的版本范围，而软件包管理工具会抱怨版本不匹配的问题。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.2-编程'}, 'labels': {'nodes': [{'name': '翻译'}, {'name': '1.2.3-Python'}]}, 'comments': {'nodes': []}}, {'title': '技术人月刊（第 2 期 2024-01）', 'number': 43, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/43', 'createdAt': '2024-01-02T06:33:05Z', 'lastEditedAt': None, 'updatedAt': '2024-01-02T06:33:06Z', 'body': '## 文章', 'bodyText': '文章', 'bodyHTML': '<h2 dir="auto">文章</h2>', 'author': {'login': 'shenweiyan'}, 'category': {'name': 'x.2-月刊'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '基于 Matrix 协议的 Elements 通讯加密应用', 'number': 42, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/42', 'createdAt': '2023-12-28T09:17:08Z', 'lastEditedAt': '2023-12-30T09:56:12Z', 'updatedAt': '2023-12-30T09:56:13Z', 'body': 'Matrix 是一个开源、开放、轻量级、去中心化的即时聊天通讯协议，它是包括 deepin、Mozilla、Fedora、KDE、Archlinux、Debian 等开源社区均在广泛使用的即时聊天协议。\r\n\r\n<!-- more -->\r\n\r\nElement 是 Matrix 官方性质的，基于 Web 技术的 Matrix 客户端实现，除了网页环境外，也有桌面客户端可用。可以在你所使用的发行版的应用商店或包管理工具中搜索 element-desktop 或近似名称来检索和安装此客户端，然后即可运行并登录你的帐号。\r\n\r\nElement 可以和 GitHub 的仓库实现关联，把 GitHub 仓库的诸多信息同步到 Element。', 'bodyText': 'Matrix 是一个开源、开放、轻量级、去中心化的即时聊天通讯协议，它是包括 deepin、Mozilla、Fedora、KDE、Archlinux、Debian 等开源社区均在广泛使用的即时聊天协议。\n\nElement 是 Matrix 官方性质的，基于 Web 技术的 Matrix 客户端实现，除了网页环境外，也有桌面客户端可用。可以在你所使用的发行版的应用商店或包管理工具中搜索 element-desktop 或近似名称来检索和安装此客户端，然后即可运行并登录你的帐号。\nElement 可以和 GitHub 的仓库实现关联，把 GitHub 仓库的诸多信息同步到 Element。', 'bodyHTML': '<p dir="auto">Matrix 是一个开源、开放、轻量级、去中心化的即时聊天通讯协议，它是包括 deepin、Mozilla、Fedora、KDE、Archlinux、Debian 等开源社区均在广泛使用的即时聊天协议。</p>\n\n<p dir="auto">Element 是 Matrix 官方性质的，基于 Web 技术的 Matrix 客户端实现，除了网页环境外，也有桌面客户端可用。可以在你所使用的发行版的应用商店或包管理工具中搜索 element-desktop 或近似名称来检索和安装此客户端，然后即可运行并登录你的帐号。</p>\n<p dir="auto">Element 可以和 GitHub 的仓库实现关联，把 GitHub 仓库的诸多信息同步到 Element。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '阅读别人的博客', 'number': 41, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/41', 'createdAt': '2023-12-27T06:52:53Z', 'lastEditedAt': '2024-05-09T03:45:21Z', 'updatedAt': '2024-05-09T03:45:21Z', 'body': '很多时候阅读别人的博客（站点），总能发现一些好玩的人和事物。2023 年被[椒盐豆豉](https://blog.douchi.space/)的一篇《[2023 年了你为什么需要写博客](https://blog.douchi.space/2023-why-you-need-a-blog/)》所吸引，尤其是 **"博客是赛博空间的另一个你，也能反过来定义你"** 这一句，写出了很多心声。\r\n\r\n<!-- more -->\r\n\r\n> 比较反感 "个人品牌" 这个过于商业化的说法，不写技术不写学术的非实名博客甚至起不到简历作用。但它确是比简历更 "像个人"，比碎片化社交网络更全面展现我是怎样一个人的网络门面。当然这是我这个博客的用法，网上靠博客经营自己品牌的也比比皆是。总之，内容的自由度和高度的定制化让博客可以成为任何你想让它成为的东西。反之，博客写的久了，发现 "写博客" 也已经成为了自己（不只是线上） identity 的一部分——毕竟这是很多人认识我的渠道，也重塑了我的一部分自我认知。\r\n\r\n鉴于此，终于在个人的[站点](https://weiyan.cc/)新增加了一个[友链](https://weiyan.cc/flinks/)页面，把一部分有意思的博客与站点都以友链的方式放到了这里（会不定期清理失效域名、停更的博客）。\r\n', 'bodyText': '很多时候阅读别人的博客（站点），总能发现一些好玩的人和事物。2023 年被椒盐豆豉的一篇《2023 年了你为什么需要写博客》所吸引，尤其是 "博客是赛博空间的另一个你，也能反过来定义你" 这一句，写出了很多心声。\n\n\n比较反感 "个人品牌" 这个过于商业化的说法，不写技术不写学术的非实名博客甚至起不到简历作用。但它确是比简历更 "像个人"，比碎片化社交网络更全面展现我是怎样一个人的网络门面。当然这是我这个博客的用法，网上靠博客经营自己品牌的也比比皆是。总之，内容的自由度和高度的定制化让博客可以成为任何你想让它成为的东西。反之，博客写的久了，发现 "写博客" 也已经成为了自己（不只是线上） identity 的一部分——毕竟这是很多人认识我的渠道，也重塑了我的一部分自我认知。\n\n鉴于此，终于在个人的站点新增加了一个友链页面，把一部分有意思的博客与站点都以友链的方式放到了这里（会不定期清理失效域名、停更的博客）。', 'bodyHTML': '<p dir="auto">很多时候阅读别人的博客（站点），总能发现一些好玩的人和事物。2023 年被<a href="https://blog.douchi.space/" rel="nofollow">椒盐豆豉</a>的一篇《<a href="https://blog.douchi.space/2023-why-you-need-a-blog/" rel="nofollow">2023 年了你为什么需要写博客</a>》所吸引，尤其是 <strong>"博客是赛博空间的另一个你，也能反过来定义你"</strong> 这一句，写出了很多心声。</p>\n\n<blockquote>\n<p dir="auto">比较反感 "个人品牌" 这个过于商业化的说法，不写技术不写学术的非实名博客甚至起不到简历作用。但它确是比简历更 "像个人"，比碎片化社交网络更全面展现我是怎样一个人的网络门面。当然这是我这个博客的用法，网上靠博客经营自己品牌的也比比皆是。总之，内容的自由度和高度的定制化让博客可以成为任何你想让它成为的东西。反之，博客写的久了，发现 "写博客" 也已经成为了自己（不只是线上） identity 的一部分——毕竟这是很多人认识我的渠道，也重塑了我的一部分自我认知。</p>\n</blockquote>\n<p dir="auto">鉴于此，终于在个人的<a href="https://weiyan.cc/" rel="nofollow">站点</a>新增加了一个<a href="https://weiyan.cc/flinks/" rel="nofollow">友链</a>页面，把一部分有意思的博客与站点都以友链的方式放到了这里（会不定期清理失效域名、停更的博客）。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': 'Pandas 处理 Excel 常用方法技巧', 'number': 40, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/40', 'createdAt': '2023-12-26T06:12:05Z', 'lastEditedAt': '2024-02-01T05:37:17Z', 'updatedAt': '2024-02-01T05:37:17Z', 'body': '在使用 Pandas 前需要学习了解一下 Series 和 DataFrame 的基本数据结构和索引的相关概念，之后就可以练习基本的 Excel操作。Pandas 读取一个 Excel 文件后会将其转化为 DataFrame 对象，每一列或行就是一个 Series 对象。这里我们看下如何对一个 excel 进行读写，以及 Sheet、行列、表头处理的一些常用技巧。\r\n\r\n## 读取 Excel\r\n\r\n如果您想读取 Excel 表格中的数据，可以使用 `read_excel()` 方法，其语法格式如下：\r\n\r\n```\r\npd.read_excel(io, sheet_name=0, header=0, names=None, index_col=None,\r\n              usecols=None, squeeze=False,dtype=None, engine=None,\r\n              converters=None, true_values=None, false_values=None,\r\n              skiprows=None, nrows=None, na_values=None, parse_dates=False,\r\n              date_parser=None, thousands=None, comment=None, skipfooter=0,\r\n              convert_float=True, **kwds)\r\n```\r\n\r\n下表对常用参数做了说明：\r\n\r\n|参数名称|说明|\r\n|:----|:----|\r\n|io|表示 Excel 文件的存储路径。|\r\n|sheet_name|要读取的工作表名称，默认0，即读取第一个工作表作为 DataFrame(一定要加`sheet_name=None`，才能读取出所有的 sheet，否则默认读取第一个 sheet)。|\r\n|header|指定作为列名的行，默认0，即取第一行的值为列名；若数据不包含列名，则设定 header = None。若将其设置为 header=2，则表示将前两行作为多重索引。|\r\n|names|一般适用于Excel缺少列名，或者需要重新定义列名的情况；names的长度必须等于Excel表格列的长度，否则会报错。|\r\n|index_col|用做行索引的列，可以是工作表的列名称，如 index_col = \'列名\'，也可以是整数或者列表。|\r\n|usecols|int或list类型，默认为None，表示需要读取所有列。|\r\n|squeeze|boolean，默认为False，如果解析的数据只包含一列，则返回一个Series。|\r\n|converters|规定每一列的数据类型。|\r\n|skiprows|接受一个列表，表示跳过指定行数的数据，从头部第一行开始。|\r\n|nrows|需要读取的行数。|\r\n|skipfooter|接受一个列表，省略指定行数的数据，从尾部最后一行开始。|\r\n\r\n示例如下所示：\r\n```python\r\nimport pandas as pd\r\n\r\n# 读取所有Sheet\r\ndf = pd.read_excel(\'example.xlsx\', sheet_name=None)\r\n\r\n# 读取第一个、第二个和名为"Sheet5"的工作表作为 DataFrame 的字典\r\ndf = pd.read_excel(\'example.xlsx\', sheet_name=[0, 1, "Sheet5"])\r\n```\r\n\r\n## 获取行数和列数\r\n```python\r\nimport pandas as pd\r\n \r\ndf = pd.read_excel(\'example.xlsx\')\r\n# 行索引\r\nprint(df.index)  \r\n# RangeIndex(start=0, stop=3747, step=1)\r\n\r\n# 输出元祖,分别为行数和列数,默认第一行是表头不算行数\r\nprint(df.shape) \r\n# (3747, 4)\r\n```\r\n\r\n## 获取表头\r\n`read_excel` 默认是把 excel 的第一行当成表头。注意：如果 `read_excel` 的 `sheet_name=None`，读取的是所有 excel 的 sheet_name(key) 和 sheet_values(values) 组成的字典，`df.keys()` 的结果是所有 sheet_name，即名字(字典的键)。\r\n\r\n### 获取第一个 sheet\r\n这时候 `df.keys()` 和 `df.columns` 的结果是一样的，都是第一个 sheet 的表头。\r\n\r\n```python\r\nimport pandas as pd\r\n \r\ndf = pd.read_excel(\'input.xlsx\')\r\nprint(df.keys())\r\nprint(\'---------------\')\r\nprint(df.columns)\r\n```\r\n\r\n### 获取所有 sheet\r\n```python\r\nimport pandas as pd\r\n \r\n# 参数为 None 代表读取所有 sheet\r\ndf = pd.read_excel(\'input.xlsx\',sheet_name=None)\r\n\r\n# 获取所有sheet名字, 如果read_excel参数不是None, 则df.keys()为表头\r\nsheet_names = list(df.keys())\r\nprint(sheet_names)\r\n```\r\n\r\n## 参考资料\r\n1. 老董，《[pandas获取excel的行数,列数,表头,sheet,前后行等数据](https://www.python66.com/pandasshujufenxi/268.html)》，[Python编程网](https://www.python66.com/)\r\n2. 《[Pandas Excel读写操作详解](https://c.biancheng.net/pandas/excel.html)》，[C语言中文网](https://c.biancheng.net/)\r\n3. 《[pandas.read_excel — pandas 2.1.4 documentation](https://pandas.pydata.org/docs/reference/api/pandas.read_excel.html)》，[pandas documentation — pandas 2.1.4 documentation](https://pandas.pydata.org/docs/index.html)', 'bodyText': '在使用 Pandas 前需要学习了解一下 Series 和 DataFrame 的基本数据结构和索引的相关概念，之后就可以练习基本的 Excel操作。Pandas 读取一个 Excel 文件后会将其转化为 DataFrame 对象，每一列或行就是一个 Series 对象。这里我们看下如何对一个 excel 进行读写，以及 Sheet、行列、表头处理的一些常用技巧。\n读取 Excel\n如果您想读取 Excel 表格中的数据，可以使用 read_excel() 方法，其语法格式如下：\npd.read_excel(io, sheet_name=0, header=0, names=None, index_col=None,\n              usecols=None, squeeze=False,dtype=None, engine=None,\n              converters=None, true_values=None, false_values=None,\n              skiprows=None, nrows=None, na_values=None, parse_dates=False,\n              date_parser=None, thousands=None, comment=None, skipfooter=0,\n              convert_float=True, **kwds)\n\n下表对常用参数做了说明：\n\n\n\n参数名称\n说明\n\n\n\n\nio\n表示 Excel 文件的存储路径。\n\n\nsheet_name\n要读取的工作表名称，默认0，即读取第一个工作表作为 DataFrame(一定要加sheet_name=None，才能读取出所有的 sheet，否则默认读取第一个 sheet)。\n\n\nheader\n指定作为列名的行，默认0，即取第一行的值为列名；若数据不包含列名，则设定 header = None。若将其设置为 header=2，则表示将前两行作为多重索引。\n\n\nnames\n一般适用于Excel缺少列名，或者需要重新定义列名的情况；names的长度必须等于Excel表格列的长度，否则会报错。\n\n\nindex_col\n用做行索引的列，可以是工作表的列名称，如 index_col = \'列名\'，也可以是整数或者列表。\n\n\nusecols\nint或list类型，默认为None，表示需要读取所有列。\n\n\nsqueeze\nboolean，默认为False，如果解析的数据只包含一列，则返回一个Series。\n\n\nconverters\n规定每一列的数据类型。\n\n\nskiprows\n接受一个列表，表示跳过指定行数的数据，从头部第一行开始。\n\n\nnrows\n需要读取的行数。\n\n\nskipfooter\n接受一个列表，省略指定行数的数据，从尾部最后一行开始。\n\n\n\n示例如下所示：\nimport pandas as pd\n\n# 读取所有Sheet\ndf = pd.read_excel(\'example.xlsx\', sheet_name=None)\n\n# 读取第一个、第二个和名为"Sheet5"的工作表作为 DataFrame 的字典\ndf = pd.read_excel(\'example.xlsx\', sheet_name=[0, 1, "Sheet5"])\n获取行数和列数\nimport pandas as pd\n \ndf = pd.read_excel(\'example.xlsx\')\n# 行索引\nprint(df.index)  \n# RangeIndex(start=0, stop=3747, step=1)\n\n# 输出元祖,分别为行数和列数,默认第一行是表头不算行数\nprint(df.shape) \n# (3747, 4)\n获取表头\nread_excel 默认是把 excel 的第一行当成表头。注意：如果 read_excel 的 sheet_name=None，读取的是所有 excel 的 sheet_name(key) 和 sheet_values(values) 组成的字典，df.keys() 的结果是所有 sheet_name，即名字(字典的键)。\n获取第一个 sheet\n这时候 df.keys() 和 df.columns 的结果是一样的，都是第一个 sheet 的表头。\nimport pandas as pd\n \ndf = pd.read_excel(\'input.xlsx\')\nprint(df.keys())\nprint(\'---------------\')\nprint(df.columns)\n获取所有 sheet\nimport pandas as pd\n \n# 参数为 None 代表读取所有 sheet\ndf = pd.read_excel(\'input.xlsx\',sheet_name=None)\n\n# 获取所有sheet名字, 如果read_excel参数不是None, 则df.keys()为表头\nsheet_names = list(df.keys())\nprint(sheet_names)\n参考资料\n\n老董，《pandas获取excel的行数,列数,表头,sheet,前后行等数据》，Python编程网\n《Pandas Excel读写操作详解》，C语言中文网\n《pandas.read_excel — pandas 2.1.4 documentation》，pandas documentation — pandas 2.1.4 documentation', 'bodyHTML': '<p dir="auto">在使用 Pandas 前需要学习了解一下 Series 和 DataFrame 的基本数据结构和索引的相关概念，之后就可以练习基本的 Excel操作。Pandas 读取一个 Excel 文件后会将其转化为 DataFrame 对象，每一列或行就是一个 Series 对象。这里我们看下如何对一个 excel 进行读写，以及 Sheet、行列、表头处理的一些常用技巧。</p>\n<h2 dir="auto">读取 Excel</h2>\n<p dir="auto">如果您想读取 Excel 表格中的数据，可以使用 <code class="notranslate">read_excel()</code> 方法，其语法格式如下：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pd.read_excel(io, sheet_name=0, header=0, names=None, index_col=None,\n              usecols=None, squeeze=False,dtype=None, engine=None,\n              converters=None, true_values=None, false_values=None,\n              skiprows=None, nrows=None, na_values=None, parse_dates=False,\n              date_parser=None, thousands=None, comment=None, skipfooter=0,\n              convert_float=True, **kwds)"><pre class="notranslate"><code class="notranslate">pd.read_excel(io, sheet_name=0, header=0, names=None, index_col=None,\n              usecols=None, squeeze=False,dtype=None, engine=None,\n              converters=None, true_values=None, false_values=None,\n              skiprows=None, nrows=None, na_values=None, parse_dates=False,\n              date_parser=None, thousands=None, comment=None, skipfooter=0,\n              convert_float=True, **kwds)\n</code></pre></div>\n<p dir="auto">下表对常用参数做了说明：</p>\n<markdown-accessiblity-table><table role="table">\n<thead>\n<tr>\n<th align="left">参数名称</th>\n<th align="left">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align="left">io</td>\n<td align="left">表示 Excel 文件的存储路径。</td>\n</tr>\n<tr>\n<td align="left">sheet_name</td>\n<td align="left">要读取的工作表名称，默认0，即读取第一个工作表作为 DataFrame(一定要加<code class="notranslate">sheet_name=None</code>，才能读取出所有的 sheet，否则默认读取第一个 sheet)。</td>\n</tr>\n<tr>\n<td align="left">header</td>\n<td align="left">指定作为列名的行，默认0，即取第一行的值为列名；若数据不包含列名，则设定 header = None。若将其设置为 header=2，则表示将前两行作为多重索引。</td>\n</tr>\n<tr>\n<td align="left">names</td>\n<td align="left">一般适用于Excel缺少列名，或者需要重新定义列名的情况；names的长度必须等于Excel表格列的长度，否则会报错。</td>\n</tr>\n<tr>\n<td align="left">index_col</td>\n<td align="left">用做行索引的列，可以是工作表的列名称，如 index_col = \'列名\'，也可以是整数或者列表。</td>\n</tr>\n<tr>\n<td align="left">usecols</td>\n<td align="left">int或list类型，默认为None，表示需要读取所有列。</td>\n</tr>\n<tr>\n<td align="left">squeeze</td>\n<td align="left">boolean，默认为False，如果解析的数据只包含一列，则返回一个Series。</td>\n</tr>\n<tr>\n<td align="left">converters</td>\n<td align="left">规定每一列的数据类型。</td>\n</tr>\n<tr>\n<td align="left">skiprows</td>\n<td align="left">接受一个列表，表示跳过指定行数的数据，从头部第一行开始。</td>\n</tr>\n<tr>\n<td align="left">nrows</td>\n<td align="left">需要读取的行数。</td>\n</tr>\n<tr>\n<td align="left">skipfooter</td>\n<td align="left">接受一个列表，省略指定行数的数据，从尾部最后一行开始。</td>\n</tr>\n</tbody>\n</table></markdown-accessiblity-table>\n<p dir="auto">示例如下所示：</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import pandas as pd\n\n# 读取所有Sheet\ndf = pd.read_excel(\'example.xlsx\', sheet_name=None)\n\n# 读取第一个、第二个和名为&quot;Sheet5&quot;的工作表作为 DataFrame 的字典\ndf = pd.read_excel(\'example.xlsx\', sheet_name=[0, 1, &quot;Sheet5&quot;])"><pre class="notranslate"><span class="pl-k">import</span> <span class="pl-s1">pandas</span> <span class="pl-k">as</span> <span class="pl-s1">pd</span>\n\n<span class="pl-c"># 读取所有Sheet</span>\n<span class="pl-s1">df</span> <span class="pl-c1">=</span> <span class="pl-s1">pd</span>.<span class="pl-c1">read_excel</span>(<span class="pl-s">\'example.xlsx\'</span>, <span class="pl-s1">sheet_name</span><span class="pl-c1">=</span><span class="pl-c1">None</span>)\n\n<span class="pl-c"># 读取第一个、第二个和名为"Sheet5"的工作表作为 DataFrame 的字典</span>\n<span class="pl-s1">df</span> <span class="pl-c1">=</span> <span class="pl-s1">pd</span>.<span class="pl-c1">read_excel</span>(<span class="pl-s">\'example.xlsx\'</span>, <span class="pl-s1">sheet_name</span><span class="pl-c1">=</span>[<span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-s">"Sheet5"</span>])</pre></div>\n<h2 dir="auto">获取行数和列数</h2>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import pandas as pd\n \ndf = pd.read_excel(\'example.xlsx\')\n# 行索引\nprint(df.index)  \n# RangeIndex(start=0, stop=3747, step=1)\n\n# 输出元祖,分别为行数和列数,默认第一行是表头不算行数\nprint(df.shape) \n# (3747, 4)"><pre class="notranslate"><span class="pl-k">import</span> <span class="pl-s1">pandas</span> <span class="pl-k">as</span> <span class="pl-s1">pd</span>\n \n<span class="pl-s1">df</span> <span class="pl-c1">=</span> <span class="pl-s1">pd</span>.<span class="pl-c1">read_excel</span>(<span class="pl-s">\'example.xlsx\'</span>)\n<span class="pl-c"># 行索引</span>\n<span class="pl-en">print</span>(<span class="pl-s1">df</span>.<span class="pl-c1">index</span>)  \n<span class="pl-c"># RangeIndex(start=0, stop=3747, step=1)</span>\n\n<span class="pl-c"># 输出元祖,分别为行数和列数,默认第一行是表头不算行数</span>\n<span class="pl-en">print</span>(<span class="pl-s1">df</span>.<span class="pl-c1">shape</span>) \n<span class="pl-c"># (3747, 4)</span></pre></div>\n<h2 dir="auto">获取表头</h2>\n<p dir="auto"><code class="notranslate">read_excel</code> 默认是把 excel 的第一行当成表头。注意：如果 <code class="notranslate">read_excel</code> 的 <code class="notranslate">sheet_name=None</code>，读取的是所有 excel 的 sheet_name(key) 和 sheet_values(values) 组成的字典，<code class="notranslate">df.keys()</code> 的结果是所有 sheet_name，即名字(字典的键)。</p>\n<h3 dir="auto">获取第一个 sheet</h3>\n<p dir="auto">这时候 <code class="notranslate">df.keys()</code> 和 <code class="notranslate">df.columns</code> 的结果是一样的，都是第一个 sheet 的表头。</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import pandas as pd\n \ndf = pd.read_excel(\'input.xlsx\')\nprint(df.keys())\nprint(\'---------------\')\nprint(df.columns)"><pre class="notranslate"><span class="pl-k">import</span> <span class="pl-s1">pandas</span> <span class="pl-k">as</span> <span class="pl-s1">pd</span>\n \n<span class="pl-s1">df</span> <span class="pl-c1">=</span> <span class="pl-s1">pd</span>.<span class="pl-c1">read_excel</span>(<span class="pl-s">\'input.xlsx\'</span>)\n<span class="pl-en">print</span>(<span class="pl-s1">df</span>.<span class="pl-c1">keys</span>())\n<span class="pl-en">print</span>(<span class="pl-s">\'---------------\'</span>)\n<span class="pl-en">print</span>(<span class="pl-s1">df</span>.<span class="pl-c1">columns</span>)</pre></div>\n<h3 dir="auto">获取所有 sheet</h3>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import pandas as pd\n \n# 参数为 None 代表读取所有 sheet\ndf = pd.read_excel(\'input.xlsx\',sheet_name=None)\n\n# 获取所有sheet名字, 如果read_excel参数不是None, 则df.keys()为表头\nsheet_names = list(df.keys())\nprint(sheet_names)"><pre class="notranslate"><span class="pl-k">import</span> <span class="pl-s1">pandas</span> <span class="pl-k">as</span> <span class="pl-s1">pd</span>\n \n<span class="pl-c"># 参数为 None 代表读取所有 sheet</span>\n<span class="pl-s1">df</span> <span class="pl-c1">=</span> <span class="pl-s1">pd</span>.<span class="pl-c1">read_excel</span>(<span class="pl-s">\'input.xlsx\'</span>,<span class="pl-s1">sheet_name</span><span class="pl-c1">=</span><span class="pl-c1">None</span>)\n\n<span class="pl-c"># 获取所有sheet名字, 如果read_excel参数不是None, 则df.keys()为表头</span>\n<span class="pl-s1">sheet_names</span> <span class="pl-c1">=</span> <span class="pl-en">list</span>(<span class="pl-s1">df</span>.<span class="pl-c1">keys</span>())\n<span class="pl-en">print</span>(<span class="pl-s1">sheet_names</span>)</pre></div>\n<h2 dir="auto">参考资料</h2>\n<ol dir="auto">\n<li>老董，《<a href="https://www.python66.com/pandasshujufenxi/268.html" rel="nofollow">pandas获取excel的行数,列数,表头,sheet,前后行等数据</a>》，<a href="https://www.python66.com/" rel="nofollow">Python编程网</a></li>\n<li>《<a href="https://c.biancheng.net/pandas/excel.html" rel="nofollow">Pandas Excel读写操作详解</a>》，<a href="https://c.biancheng.net/" rel="nofollow">C语言中文网</a></li>\n<li>《<a href="https://pandas.pydata.org/docs/reference/api/pandas.read_excel.html" rel="nofollow">pandas.read_excel — pandas 2.1.4 documentation</a>》，<a href="https://pandas.pydata.org/docs/index.html" rel="nofollow">pandas documentation — pandas 2.1.4 documentation</a></li>\n</ol>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.2-编程'}, 'labels': {'nodes': [{'name': '1.2.3-Python'}]}, 'comments': {'nodes': []}}, {'title': '跳过任意开屏广告和内部弹窗广告', 'number': 39, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/39', 'createdAt': '2023-12-06T03:50:28Z', 'lastEditedAt': '2023-12-08T05:31:46Z', 'updatedAt': '2024-01-04T05:42:23Z', 'body': '今天去用了一下 [gkd](https://github.com/gkd-kit/gkd)—— 点击跳过任意开屏广告/点击关闭应用内部任意弹窗广告的应用，发现真不错，记录一下遇到的一些问题。\r\n\r\n<!-- more -->\r\n\r\n具体使用步骤如下。\r\n\r\n## 1. 开启权限\r\n\r\n应用安装后，**"主页"** 页面的这几个权限都需要开启（尤其是**无障碍权限**），否则应用无法跳过广告，不起作用。   \r\n\r\n<img width=300px src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/gkd-home.jpg" alt="gkd-home">\r\n\r\n华为鸿蒙系统怎么开启无障碍模式（也可以参考：[通过快捷方式启动无障碍功能](https://consumer.huawei.com/cn/support/content/zh-cn15849085/)）： \r\n   \r\n1. 打开辅助功能，进入手机设置界面，点击【辅助功能】。\r\n2. 打开无障碍，点击【无障碍】。\r\n3. 打开已安装的服务，下拉到页面底部，点击【已安装的服务】。\r\n4. 选择服务，选择要设置的服务【GKD】，点击进入。\r\n5. 打开服务开关，点击服务右侧【开关】按钮。\r\n6. 确定打开。\r\n\r\n这里会有一个问题：**鸿蒙手机无障碍打开后，点击清理后台会自动关闭**！参考：[gkd-kit/gkd#201](https://github.com/gkd-kit/gkd/issues/201)\r\n\r\n具体可以参考华为官方给出的解决方法——《[华为手机/平板无障碍中的第三方应用的服务开关自动关闭](https://consumer.huawei.com/cn/support/content/zh-cn00410039/)》。\r\n\r\n\r\n## 2. 更新订阅\r\n\r\n应用安装后，**"订阅"** 页面的本地订阅如果没有规则，则需要下拉执行更新一下即可（参考：[gkd-kit/gkd#100](https://github.com/gkd-kit/gkd/issues/100)）。\r\n\r\n<img width=300px src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/gkd-dy.jpg" alt="GKD-订阅">\r\n\r\n## 3. 设置\r\n\r\n这是个人在使用时候 **"设置"** 页面的一个截图。    \r\n\r\n<img width=300px src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/gkd-setting.jpg" alt="GKD-订阅">\r\n', 'bodyText': '今天去用了一下 gkd—— 点击跳过任意开屏广告/点击关闭应用内部任意弹窗广告的应用，发现真不错，记录一下遇到的一些问题。\n\n具体使用步骤如下。\n1. 开启权限\n应用安装后，"主页" 页面的这几个权限都需要开启（尤其是无障碍权限），否则应用无法跳过广告，不起作用。\n\n华为鸿蒙系统怎么开启无障碍模式（也可以参考：通过快捷方式启动无障碍功能）：\n\n打开辅助功能，进入手机设置界面，点击【辅助功能】。\n打开无障碍，点击【无障碍】。\n打开已安装的服务，下拉到页面底部，点击【已安装的服务】。\n选择服务，选择要设置的服务【GKD】，点击进入。\n打开服务开关，点击服务右侧【开关】按钮。\n确定打开。\n\n这里会有一个问题：鸿蒙手机无障碍打开后，点击清理后台会自动关闭！参考：gkd-kit/gkd#201\n具体可以参考华为官方给出的解决方法——《华为手机/平板无障碍中的第三方应用的服务开关自动关闭》。\n2. 更新订阅\n应用安装后，"订阅" 页面的本地订阅如果没有规则，则需要下拉执行更新一下即可（参考：gkd-kit/gkd#100）。\n\n3. 设置\n这是个人在使用时候 "设置" 页面的一个截图。', 'bodyHTML': '<p dir="auto">今天去用了一下 <a href="https://github.com/gkd-kit/gkd">gkd</a>—— 点击跳过任意开屏广告/点击关闭应用内部任意弹窗广告的应用，发现真不错，记录一下遇到的一些问题。</p>\n\n<p dir="auto">具体使用步骤如下。</p>\n<h2 dir="auto">1. 开启权限</h2>\n<p dir="auto">应用安装后，<strong>"主页"</strong> 页面的这几个权限都需要开启（尤其是<strong>无障碍权限</strong>），否则应用无法跳过广告，不起作用。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/018a42e5ddcd9b9f399887f02013ee437044c6b0568186906826700bce944bdb/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f676b642d686f6d652e6a7067"><img width="300px" src="https://camo.githubusercontent.com/018a42e5ddcd9b9f399887f02013ee437044c6b0568186906826700bce944bdb/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f676b642d686f6d652e6a7067" alt="gkd-home" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/gkd-home.jpg" style="max-width: 100%;"></a></p>\n<p dir="auto">华为鸿蒙系统怎么开启无障碍模式（也可以参考：<a href="https://consumer.huawei.com/cn/support/content/zh-cn15849085/" rel="nofollow">通过快捷方式启动无障碍功能</a>）：</p>\n<ol dir="auto">\n<li>打开辅助功能，进入手机设置界面，点击【辅助功能】。</li>\n<li>打开无障碍，点击【无障碍】。</li>\n<li>打开已安装的服务，下拉到页面底部，点击【已安装的服务】。</li>\n<li>选择服务，选择要设置的服务【GKD】，点击进入。</li>\n<li>打开服务开关，点击服务右侧【开关】按钮。</li>\n<li>确定打开。</li>\n</ol>\n<p dir="auto">这里会有一个问题：<strong>鸿蒙手机无障碍打开后，点击清理后台会自动关闭</strong>！参考：<a href="https://github.com/gkd-kit/gkd/issues/201" data-hovercard-type="issue" data-hovercard-url="/gkd-kit/gkd/issues/201/hovercard">gkd-kit/gkd#201</a></p>\n<p dir="auto">具体可以参考华为官方给出的解决方法——《<a href="https://consumer.huawei.com/cn/support/content/zh-cn00410039/" rel="nofollow">华为手机/平板无障碍中的第三方应用的服务开关自动关闭</a>》。</p>\n<h2 dir="auto">2. 更新订阅</h2>\n<p dir="auto">应用安装后，<strong>"订阅"</strong> 页面的本地订阅如果没有规则，则需要下拉执行更新一下即可（参考：<a href="https://github.com/gkd-kit/gkd/issues/100" data-hovercard-type="issue" data-hovercard-url="/gkd-kit/gkd/issues/100/hovercard">gkd-kit/gkd#100</a>）。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/7aaa86a571ae772a8d50332bdd9bb6799b1658f60a5dac5f9b790f0334dd44dc/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f676b642d64792e6a7067"><img width="300px" src="https://camo.githubusercontent.com/7aaa86a571ae772a8d50332bdd9bb6799b1658f60a5dac5f9b790f0334dd44dc/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f676b642d64792e6a7067" alt="GKD-订阅" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/gkd-dy.jpg" style="max-width: 100%;"></a></p>\n<h2 dir="auto">3. 设置</h2>\n<p dir="auto">这是个人在使用时候 <strong>"设置"</strong> 页面的一个截图。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/16a04a7d3e6dbc5ab492924b01b2ad5ec07631ef4246e18e6c2c2b676d59f36c/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f676b642d73657474696e672e6a7067"><img width="300px" src="https://camo.githubusercontent.com/16a04a7d3e6dbc5ab492924b01b2ad5ec07631ef4246e18e6c2c2b676d59f36c/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f676b642d73657474696e672e6a7067" alt="GKD-订阅" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/gkd-setting.jpg" style="max-width: 100%;"></a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': []}, 'comments': {'nodes': [{'body': '首页的那个猫咪有意思～～', 'author': {'login': 'obaby'}}]}}, {'title': 'GitHub Discussions 使用与思考', 'number': 38, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/38', 'createdAt': '2023-12-06T01:55:19Z', 'lastEditedAt': '2024-03-18T06:25:33Z', 'updatedAt': '2024-03-18T06:25:33Z', 'body': '从2023年7月起我所有可公开的文档都保存在了 [GitHub Discussions](https://github.com/shenweiyan/Knowledge-Garden/discussions) 上，作为博客、IED 编辑器，以及评论使用，GitHub Discussions 是完全没问题的。\r\n\r\n<!-- more -->\r\n\r\n## 开源的代名词\r\n\r\n开源已成为 GitHub 的代名词。\r\n\r\n> 当开发者谈论开源时，通常会想到 GitHub，它不仅仅是一个代码托管平台，更是一个汇聚了全球开发者的社交中心。过去，开发者发布一款软件后，都是在自己的小圈子里默默努力和交流，现在通过 GitHub 平台可以方便地与全球的开发者分享、交流和协作。贡献者在这里展示自己的才华，追随者在这里寻找强者的脚印，等待着被世人认可的时刻。\r\n\r\n## 体验与感受\r\n\r\n由于 GitHub 是直接 markdown 源码进行书写，正常的导出基本不会有格式错乱的问题，这一点非常好。不像有一些富文本的编辑器，动不动就给你增加几个换行或者空格什么的额外字符。\r\n\r\n借助 GitHub GraphQL API + Python + GitHub Actions 进行每天定时导出非常顺滑，导出来的文档可以随意折腾，自由度非常大。\r\n\r\n## 专业书籍文档\r\n\r\n今天忽然想到的一个问题，即如果作为专业性比较强的系列文档写作，如《[Hello 算法](https://www.hello-algo.com/)》 这样专业性和逻辑性非常明确的专业书籍，使用 GitHub Discussions 写作应该是有点不太合适。\r\n\r\n但又仔细想了一下，如果**只是写作**应该是没问题的 —— 我们可以用 sections 或者 categories，甚至是 tags 进行书籍分类，最后在导出的时候借助这些标签把相关的文档整合到一块，再借助 nav 梳理成大纲展现给读者阅读就可以。所以，总的来说可以用于专业书籍**写作(编辑)**，但**不太适合用于专业书籍的呈现和阅读** —— 主要是大纲和逻辑性会变得不明显。\r\n\r\n## 目录和分类标签\r\n\r\nGitHub Discussions 目前[最多支持 25 个 categories](https://github.com/orgs/community/discussions/7960)，这是一个限制。因此，通过 section+category 我们在 Discussions 上最多只能实现两级的目录结构，所以对于三级和三级以上的目录结构目前暂时无能为力。\r\n\r\n因此，想到一个折中的解决方法：使用 labels 来区分第三级目录结构。\r\n```\r\n1.1-生信\r\n  - 1.1.1-算法\r\n  - 1.1.2-数据\r\n  - 1.1.2-软件\r\n```\r\n\r\n然后，导出 Discussions 的时候需要在本地先在本地建立一个 `section+category: dictory` 一一对应的字典，最后通过这个字典把不同的讨论 md 归档至对应的目录。\r\n```\r\n1.1-生信:\r\n    1.1.1-算法: docs/cookbook/生物信息/算法\r\n    1.1.2-数据: docs/cookbook/生物信息/数据\r\n    1.1.2-软件: docs/cookbook/生物信息/软件\r\n    ...\r\n```\r\n\r\n## GitHub GraphQL API\r\n\r\nGitHub Discussions 的 API 操作主要依赖 [GitHub GraphQL API](https://docs.github.com/zh/graphql/overview/about-the-graphql-api)。\r\n\r\n> ## 概述\r\n> \r\n> GraphQL 是一种用于[应用编程接口（API）](https://www.redhat.com/zh/topics/api/what-are-application-programming-interfaces)的查询语言和服务器端运行时，它可以使客户端准确地获得所需的数据，没有任何冗余。\r\n>    \r\n> ## GraphQL 有什么用？    \r\n> GraphQL 旨在让 API 变得快速、灵活并且为开发人员提供便利。它甚至可以部署在名为 [GraphiQL](https://github.com/graphql/graphiql) 的[集成开发环境（IDE）](https://www.redhat.com/zh/topics/middleware/what-is-ide)中。作为 [REST](https://www.redhat.com/zh/topics/integration/whats-the-difference-between-soap-rest) 的替代方案，GraphQL 允许开发人员构建相应的请求，从而通过单个 API 调用从多个数据源中提取数据。\r\n>    \r\n> 此外，GraphQL 还可让 API 维护人员灵活地添加或弃用字段，而不会影响现有查询。开发人员可以使用自己喜欢的方法来构建 API，并且 GraphQL 规范将确保它们以可预测的方式在客户端发挥作用。\r\n>    \r\n> From：《[什么是 GraphQL？核心概念解析](https://www.redhat.com/zh/topics/api/what-is-graphql)》- 红帽\r\n\r\n- 中文文档：https://docs.github.com/zh/graphql/guides/introduction-to-graphql\r\n- 在线使用：https://docs.github.com/en/graphql/overview/explorer\r\n\r\n### 获取 discussions 主要信息\r\n```\r\n{\r\n  repository(owner: "shenweiyan", name: "Knowledge-Garden") {\r\n    discussions(orderBy: {field: CREATED_AT, direction: DESC}, categoryId: null, first: 5) {\r\n      nodes {\r\n        title\r\n        number\r\n        url\r\n        createdAt\r\n        lastEditedAt\r\n        updatedAt\r\n        body\r\n        bodyText\r\n        bodyHTML\r\n        author {\r\n          login\r\n        }\r\n        category {\r\n          name\r\n        }\r\n        labels(first: 100) {\r\n          nodes {\r\n            name\r\n          }\r\n        }\r\n        comments(first: 10) {\r\n          nodes {\r\n            body\r\n            author {\r\n              login\r\n            }\r\n          }\r\n        }\r\n      }\r\n      pageInfo {\r\n        hasNextPage\r\n        endCursor\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n\r\n### 获取 discussions categoryId\r\n\r\n参考：《[how to get github discussions categoryId](https://qiita.com/shooter/items/d59fbb43d0f118c95092)》\r\n\r\n```\r\n{\r\n  repository(owner: "shenweiyan", name: "Knowledge-Garden") {\r\n    id\r\n    name\r\n    discussionCategories(first: 30) {\r\n      nodes {\r\n        id\r\n        name\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### 其他的一些问题\r\n\r\n目前，通过 GitHub GraphQL API 暂时无法获取 Sections 的信息。\r\n\r\n## 简单的总结\r\n\r\n拥抱 GitHub Discussions 的一个前提是你可以随时登录 GitHub，如果你已经解决了这个问题，也想着像我一样 Using Github discussions as your blog engine，那么你可以参考一下我的 [shenweiyan/Knowledge-Garden](https://github.com/shenweiyan/Knowledge-Garden/) 仓库。', 'bodyText': '从2023年7月起我所有可公开的文档都保存在了 GitHub Discussions 上，作为博客、IED 编辑器，以及评论使用，GitHub Discussions 是完全没问题的。\n\n开源的代名词\n开源已成为 GitHub 的代名词。\n\n当开发者谈论开源时，通常会想到 GitHub，它不仅仅是一个代码托管平台，更是一个汇聚了全球开发者的社交中心。过去，开发者发布一款软件后，都是在自己的小圈子里默默努力和交流，现在通过 GitHub 平台可以方便地与全球的开发者分享、交流和协作。贡献者在这里展示自己的才华，追随者在这里寻找强者的脚印，等待着被世人认可的时刻。\n\n体验与感受\n由于 GitHub 是直接 markdown 源码进行书写，正常的导出基本不会有格式错乱的问题，这一点非常好。不像有一些富文本的编辑器，动不动就给你增加几个换行或者空格什么的额外字符。\n借助 GitHub GraphQL API + Python + GitHub Actions 进行每天定时导出非常顺滑，导出来的文档可以随意折腾，自由度非常大。\n专业书籍文档\n今天忽然想到的一个问题，即如果作为专业性比较强的系列文档写作，如《Hello 算法》 这样专业性和逻辑性非常明确的专业书籍，使用 GitHub Discussions 写作应该是有点不太合适。\n但又仔细想了一下，如果只是写作应该是没问题的 —— 我们可以用 sections 或者 categories，甚至是 tags 进行书籍分类，最后在导出的时候借助这些标签把相关的文档整合到一块，再借助 nav 梳理成大纲展现给读者阅读就可以。所以，总的来说可以用于专业书籍写作(编辑)，但不太适合用于专业书籍的呈现和阅读 —— 主要是大纲和逻辑性会变得不明显。\n目录和分类标签\nGitHub Discussions 目前最多支持 25 个 categories，这是一个限制。因此，通过 section+category 我们在 Discussions 上最多只能实现两级的目录结构，所以对于三级和三级以上的目录结构目前暂时无能为力。\n因此，想到一个折中的解决方法：使用 labels 来区分第三级目录结构。\n1.1-生信\n  - 1.1.1-算法\n  - 1.1.2-数据\n  - 1.1.2-软件\n\n然后，导出 Discussions 的时候需要在本地先在本地建立一个 section+category: dictory 一一对应的字典，最后通过这个字典把不同的讨论 md 归档至对应的目录。\n1.1-生信:\n    1.1.1-算法: docs/cookbook/生物信息/算法\n    1.1.2-数据: docs/cookbook/生物信息/数据\n    1.1.2-软件: docs/cookbook/生物信息/软件\n    ...\n\nGitHub GraphQL API\nGitHub Discussions 的 API 操作主要依赖 GitHub GraphQL API。\n\n概述\nGraphQL 是一种用于应用编程接口（API）的查询语言和服务器端运行时，它可以使客户端准确地获得所需的数据，没有任何冗余。\nGraphQL 有什么用？\nGraphQL 旨在让 API 变得快速、灵活并且为开发人员提供便利。它甚至可以部署在名为 GraphiQL 的集成开发环境（IDE）中。作为 REST 的替代方案，GraphQL 允许开发人员构建相应的请求，从而通过单个 API 调用从多个数据源中提取数据。\n此外，GraphQL 还可让 API 维护人员灵活地添加或弃用字段，而不会影响现有查询。开发人员可以使用自己喜欢的方法来构建 API，并且 GraphQL 规范将确保它们以可预测的方式在客户端发挥作用。\nFrom：《什么是 GraphQL？核心概念解析》- 红帽\n\n\n中文文档：https://docs.github.com/zh/graphql/guides/introduction-to-graphql\n在线使用：https://docs.github.com/en/graphql/overview/explorer\n\n获取 discussions 主要信息\n{\n  repository(owner: "shenweiyan", name: "Knowledge-Garden") {\n    discussions(orderBy: {field: CREATED_AT, direction: DESC}, categoryId: null, first: 5) {\n      nodes {\n        title\n        number\n        url\n        createdAt\n        lastEditedAt\n        updatedAt\n        body\n        bodyText\n        bodyHTML\n        author {\n          login\n        }\n        category {\n          name\n        }\n        labels(first: 100) {\n          nodes {\n            name\n          }\n        }\n        comments(first: 10) {\n          nodes {\n            body\n            author {\n              login\n            }\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n}\n\n获取 discussions categoryId\n参考：《how to get github discussions categoryId》\n{\n  repository(owner: "shenweiyan", name: "Knowledge-Garden") {\n    id\n    name\n    discussionCategories(first: 30) {\n      nodes {\n        id\n        name\n      }\n    }\n  }\n}\n\n其他的一些问题\n目前，通过 GitHub GraphQL API 暂时无法获取 Sections 的信息。\n简单的总结\n拥抱 GitHub Discussions 的一个前提是你可以随时登录 GitHub，如果你已经解决了这个问题，也想着像我一样 Using Github discussions as your blog engine，那么你可以参考一下我的 shenweiyan/Knowledge-Garden 仓库。', 'bodyHTML': '<p dir="auto">从2023年7月起我所有可公开的文档都保存在了 <a href="https://github.com/shenweiyan/Knowledge-Garden/discussions">GitHub Discussions</a> 上，作为博客、IED 编辑器，以及评论使用，GitHub Discussions 是完全没问题的。</p>\n\n<h2 dir="auto">开源的代名词</h2>\n<p dir="auto">开源已成为 GitHub 的代名词。</p>\n<blockquote>\n<p dir="auto">当开发者谈论开源时，通常会想到 GitHub，它不仅仅是一个代码托管平台，更是一个汇聚了全球开发者的社交中心。过去，开发者发布一款软件后，都是在自己的小圈子里默默努力和交流，现在通过 GitHub 平台可以方便地与全球的开发者分享、交流和协作。贡献者在这里展示自己的才华，追随者在这里寻找强者的脚印，等待着被世人认可的时刻。</p>\n</blockquote>\n<h2 dir="auto">体验与感受</h2>\n<p dir="auto">由于 GitHub 是直接 markdown 源码进行书写，正常的导出基本不会有格式错乱的问题，这一点非常好。不像有一些富文本的编辑器，动不动就给你增加几个换行或者空格什么的额外字符。</p>\n<p dir="auto">借助 GitHub GraphQL API + Python + GitHub Actions 进行每天定时导出非常顺滑，导出来的文档可以随意折腾，自由度非常大。</p>\n<h2 dir="auto">专业书籍文档</h2>\n<p dir="auto">今天忽然想到的一个问题，即如果作为专业性比较强的系列文档写作，如《<a href="https://www.hello-algo.com/" rel="nofollow">Hello 算法</a>》 这样专业性和逻辑性非常明确的专业书籍，使用 GitHub Discussions 写作应该是有点不太合适。</p>\n<p dir="auto">但又仔细想了一下，如果<strong>只是写作</strong>应该是没问题的 —— 我们可以用 sections 或者 categories，甚至是 tags 进行书籍分类，最后在导出的时候借助这些标签把相关的文档整合到一块，再借助 nav 梳理成大纲展现给读者阅读就可以。所以，总的来说可以用于专业书籍<strong>写作(编辑)</strong>，但<strong>不太适合用于专业书籍的呈现和阅读</strong> —— 主要是大纲和逻辑性会变得不明显。</p>\n<h2 dir="auto">目录和分类标签</h2>\n<p dir="auto">GitHub Discussions 目前<a href="https://github.com/orgs/community/discussions/7960">最多支持 25 个 categories</a>，这是一个限制。因此，通过 section+category 我们在 Discussions 上最多只能实现两级的目录结构，所以对于三级和三级以上的目录结构目前暂时无能为力。</p>\n<p dir="auto">因此，想到一个折中的解决方法：使用 labels 来区分第三级目录结构。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="1.1-生信\n  - 1.1.1-算法\n  - 1.1.2-数据\n  - 1.1.2-软件"><pre class="notranslate"><code class="notranslate">1.1-生信\n  - 1.1.1-算法\n  - 1.1.2-数据\n  - 1.1.2-软件\n</code></pre></div>\n<p dir="auto">然后，导出 Discussions 的时候需要在本地先在本地建立一个 <code class="notranslate">section+category: dictory</code> 一一对应的字典，最后通过这个字典把不同的讨论 md 归档至对应的目录。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="1.1-生信:\n    1.1.1-算法: docs/cookbook/生物信息/算法\n    1.1.2-数据: docs/cookbook/生物信息/数据\n    1.1.2-软件: docs/cookbook/生物信息/软件\n    ..."><pre class="notranslate"><code class="notranslate">1.1-生信:\n    1.1.1-算法: docs/cookbook/生物信息/算法\n    1.1.2-数据: docs/cookbook/生物信息/数据\n    1.1.2-软件: docs/cookbook/生物信息/软件\n    ...\n</code></pre></div>\n<h2 dir="auto">GitHub GraphQL API</h2>\n<p dir="auto">GitHub Discussions 的 API 操作主要依赖 <a href="https://docs.github.com/zh/graphql/overview/about-the-graphql-api">GitHub GraphQL API</a>。</p>\n<blockquote>\n<h2 dir="auto">概述</h2>\n<p dir="auto">GraphQL 是一种用于<a href="https://www.redhat.com/zh/topics/api/what-are-application-programming-interfaces" rel="nofollow">应用编程接口（API）</a>的查询语言和服务器端运行时，它可以使客户端准确地获得所需的数据，没有任何冗余。</p>\n<h2 dir="auto">GraphQL 有什么用？</h2>\n<p dir="auto">GraphQL 旨在让 API 变得快速、灵活并且为开发人员提供便利。它甚至可以部署在名为 <a href="https://github.com/graphql/graphiql">GraphiQL</a> 的<a href="https://www.redhat.com/zh/topics/middleware/what-is-ide" rel="nofollow">集成开发环境（IDE）</a>中。作为 <a href="https://www.redhat.com/zh/topics/integration/whats-the-difference-between-soap-rest" rel="nofollow">REST</a> 的替代方案，GraphQL 允许开发人员构建相应的请求，从而通过单个 API 调用从多个数据源中提取数据。</p>\n<p dir="auto">此外，GraphQL 还可让 API 维护人员灵活地添加或弃用字段，而不会影响现有查询。开发人员可以使用自己喜欢的方法来构建 API，并且 GraphQL 规范将确保它们以可预测的方式在客户端发挥作用。</p>\n<p dir="auto">From：《<a href="https://www.redhat.com/zh/topics/api/what-is-graphql" rel="nofollow">什么是 GraphQL？核心概念解析</a>》- 红帽</p>\n</blockquote>\n<ul dir="auto">\n<li>中文文档：<a href="https://docs.github.com/zh/graphql/guides/introduction-to-graphql">https://docs.github.com/zh/graphql/guides/introduction-to-graphql</a></li>\n<li>在线使用：<a href="https://docs.github.com/en/graphql/overview/explorer">https://docs.github.com/en/graphql/overview/explorer</a></li>\n</ul>\n<h3 dir="auto">获取 discussions 主要信息</h3>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="{\n  repository(owner: &quot;shenweiyan&quot;, name: &quot;Knowledge-Garden&quot;) {\n    discussions(orderBy: {field: CREATED_AT, direction: DESC}, categoryId: null, first: 5) {\n      nodes {\n        title\n        number\n        url\n        createdAt\n        lastEditedAt\n        updatedAt\n        body\n        bodyText\n        bodyHTML\n        author {\n          login\n        }\n        category {\n          name\n        }\n        labels(first: 100) {\n          nodes {\n            name\n          }\n        }\n        comments(first: 10) {\n          nodes {\n            body\n            author {\n              login\n            }\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n}"><pre class="notranslate"><code class="notranslate">{\n  repository(owner: "shenweiyan", name: "Knowledge-Garden") {\n    discussions(orderBy: {field: CREATED_AT, direction: DESC}, categoryId: null, first: 5) {\n      nodes {\n        title\n        number\n        url\n        createdAt\n        lastEditedAt\n        updatedAt\n        body\n        bodyText\n        bodyHTML\n        author {\n          login\n        }\n        category {\n          name\n        }\n        labels(first: 100) {\n          nodes {\n            name\n          }\n        }\n        comments(first: 10) {\n          nodes {\n            body\n            author {\n              login\n            }\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n}\n</code></pre></div>\n<h3 dir="auto">获取 discussions categoryId</h3>\n<p dir="auto">参考：《<a href="https://qiita.com/shooter/items/d59fbb43d0f118c95092" rel="nofollow">how to get github discussions categoryId</a>》</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="{\n  repository(owner: &quot;shenweiyan&quot;, name: &quot;Knowledge-Garden&quot;) {\n    id\n    name\n    discussionCategories(first: 30) {\n      nodes {\n        id\n        name\n      }\n    }\n  }\n}"><pre class="notranslate"><code class="notranslate">{\n  repository(owner: "shenweiyan", name: "Knowledge-Garden") {\n    id\n    name\n    discussionCategories(first: 30) {\n      nodes {\n        id\n        name\n      }\n    }\n  }\n}\n</code></pre></div>\n<h3 dir="auto">其他的一些问题</h3>\n<p dir="auto">目前，通过 GitHub GraphQL API 暂时无法获取 Sections 的信息。</p>\n<h2 dir="auto">简单的总结</h2>\n<p dir="auto">拥抱 GitHub Discussions 的一个前提是你可以随时登录 GitHub，如果你已经解决了这个问题，也想着像我一样 Using Github discussions as your blog engine，那么你可以参考一下我的 <a href="https://github.com/shenweiyan/Knowledge-Garden/">shenweiyan/Knowledge-Garden</a> 仓库。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': [{'name': '公众号'}]}, 'comments': {'nodes': []}}, {'title': 'MkDocs Material 安装部署和使用', 'number': 37, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/37', 'createdAt': '2023-12-06T01:28:00Z', 'lastEditedAt': '2023-12-11T02:08:45Z', 'updatedAt': '2024-01-04T05:42:38Z', 'body': 'MkDocs 是一个快速、简单、华丽的静态网站生成器，适用于构建项目文档。文档源文件以 Markdown 编写，并使用一个 YAML 文件来进行配置。[Material for MkDocs](https://squidfunk.github.io/mkdocs-material/) 是 [MkDocs](https://www.mkdocs.org/) 的一个主题配置，更加简洁美观，更新和维护也更加及时和频繁，且社区也更加活跃。\r\n\r\n<!-- more -->\r\n\r\n## 安装\r\n\r\n主要使用的一些软件包以及模块 (requirements.txt) 如下：\r\n```\r\nmkdocs==1.5.3\r\nmkdocs-material\r\nmkdocs-rss-plugin\r\nmkdocs-git-revision-date-plugin\r\nmkdocs-include-dir-to-nav==1.2.0\r\nmkdocs-glightbox\r\njieba\r\n```\r\n\r\n```\r\npip3 install -r requirements.txt\r\n```\r\n\r\n查看 `mkdocs-material`, `mkdocs` 的版本：\r\n```python\r\n$ mkdocs --version\r\nmkdocs, version 1.5.3 from /usr/local/software/python-3.9.18/lib/python3.9/site-packages/mkdocs (Python 3.9)\r\n\r\n$ pip3 show mkdocs-material\r\nName: mkdocs-material\r\nVersion: 9.4.4\r\nSummary: Documentation that simply works\r\nHome-page: \r\nAuthor: \r\nAuthor-email: Martin Donath <martin.donath@squidfunk.com>\r\nLicense: \r\nLocation: /usr/local/software/python-3.9.18/lib/python3.9/site-packages\r\nRequires: babel, colorama, jinja2, markdown, mkdocs, mkdocs-material-extensions, paginate, pygments, pymdown-extensions, regex, requests\r\nRequired-by:\r\n```\r\n\r\n## 使用\r\n\r\n本地预览：\r\n```\r\n$ mkdocs serve -a 0.0.0.0:8000\r\n```\r\n\r\n## 问题与解决\r\n\r\n1. Pagination 分页与 `git-revision-date` 冲突，导致无法构建 - 参考 [mkdocs-material/discussions/6156](https://github.com/squidfunk/mkdocs-material/discussions/6156)\r\n2. [Support Markdown in the copyright string #5134](https://github.com/squidfunk/mkdocs-material/issues/5134)\r\n3. [如何在 MkDocs 的版权部分自动添加年份 - squidfunk/mkdocs-material#4969](https://github.com/squidfunk/mkdocs-material/discussions/4969)\r\n4. [如何定制博客插件的归档页面 - squidfunk/mkdocs-material#6324](https://github.com/squidfunk/mkdocs-material/discussions/6324)\r\n\r\n## 期待的功能\r\n\r\n这是一个个人非常期待的功能，大部分目前已经可以在 [Insiders](https://squidfunk.github.io/mkdocs-material/insiders/) 版本中使用，社区公开的版本尚无法使用。\r\n\r\n- 博客插件的自定义归档、目录页面每页文档数 - [squidfunk/mkdocs-material#6383](https://github.com/squidfunk/mkdocs-material/issues/6383)\r\n- 内置隐私插件（方便内网/国内部署加速访问）- [Built-in privacy plugin - Material for MkDocs](https://squidfunk.github.io/mkdocs-material/plugins/privacy/)    \r\n    内置隐私插件(privacy plugin) 在 [9.5.0](https://github.com/squidfunk/mkdocs-material/releases/tag/9.5.0) 中已经k可以正常使用了，下一个值得期待的就是该插件的 [`assets_exclude`](https://squidfunk.github.io/mkdocs-material/plugins/privacy/#config.assets_exclude) 功能！', 'bodyText': 'MkDocs 是一个快速、简单、华丽的静态网站生成器，适用于构建项目文档。文档源文件以 Markdown 编写，并使用一个 YAML 文件来进行配置。Material for MkDocs 是 MkDocs 的一个主题配置，更加简洁美观，更新和维护也更加及时和频繁，且社区也更加活跃。\n\n安装\n主要使用的一些软件包以及模块 (requirements.txt) 如下：\nmkdocs==1.5.3\nmkdocs-material\nmkdocs-rss-plugin\nmkdocs-git-revision-date-plugin\nmkdocs-include-dir-to-nav==1.2.0\nmkdocs-glightbox\njieba\n\npip3 install -r requirements.txt\n\n查看 mkdocs-material, mkdocs 的版本：\n$ mkdocs --version\nmkdocs, version 1.5.3 from /usr/local/software/python-3.9.18/lib/python3.9/site-packages/mkdocs (Python 3.9)\n\n$ pip3 show mkdocs-material\nName: mkdocs-material\nVersion: 9.4.4\nSummary: Documentation that simply works\nHome-page: \nAuthor: \nAuthor-email: Martin Donath <martin.donath@squidfunk.com>\nLicense: \nLocation: /usr/local/software/python-3.9.18/lib/python3.9/site-packages\nRequires: babel, colorama, jinja2, markdown, mkdocs, mkdocs-material-extensions, paginate, pygments, pymdown-extensions, regex, requests\nRequired-by:\n使用\n本地预览：\n$ mkdocs serve -a 0.0.0.0:8000\n\n问题与解决\n\nPagination 分页与 git-revision-date 冲突，导致无法构建 - 参考 mkdocs-material/discussions/6156\nSupport Markdown in the copyright string #5134\n如何在 MkDocs 的版权部分自动添加年份 - squidfunk/mkdocs-material#4969\n如何定制博客插件的归档页面 - squidfunk/mkdocs-material#6324\n\n期待的功能\n这是一个个人非常期待的功能，大部分目前已经可以在 Insiders 版本中使用，社区公开的版本尚无法使用。\n\n博客插件的自定义归档、目录页面每页文档数 - squidfunk/mkdocs-material#6383\n内置隐私插件（方便内网/国内部署加速访问）- Built-in privacy plugin - Material for MkDocs\n内置隐私插件(privacy plugin) 在 9.5.0 中已经k可以正常使用了，下一个值得期待的就是该插件的 assets_exclude 功能！', 'bodyHTML': '<p dir="auto">MkDocs 是一个快速、简单、华丽的静态网站生成器，适用于构建项目文档。文档源文件以 Markdown 编写，并使用一个 YAML 文件来进行配置。<a href="https://squidfunk.github.io/mkdocs-material/" rel="nofollow">Material for MkDocs</a> 是 <a href="https://www.mkdocs.org/" rel="nofollow">MkDocs</a> 的一个主题配置，更加简洁美观，更新和维护也更加及时和频繁，且社区也更加活跃。</p>\n\n<h2 dir="auto">安装</h2>\n<p dir="auto">主要使用的一些软件包以及模块 (requirements.txt) 如下：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="mkdocs==1.5.3\nmkdocs-material\nmkdocs-rss-plugin\nmkdocs-git-revision-date-plugin\nmkdocs-include-dir-to-nav==1.2.0\nmkdocs-glightbox\njieba"><pre class="notranslate"><code class="notranslate">mkdocs==1.5.3\nmkdocs-material\nmkdocs-rss-plugin\nmkdocs-git-revision-date-plugin\nmkdocs-include-dir-to-nav==1.2.0\nmkdocs-glightbox\njieba\n</code></pre></div>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pip3 install -r requirements.txt"><pre class="notranslate"><code class="notranslate">pip3 install -r requirements.txt\n</code></pre></div>\n<p dir="auto">查看 <code class="notranslate">mkdocs-material</code>, <code class="notranslate">mkdocs</code> 的版本：</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ mkdocs --version\nmkdocs, version 1.5.3 from /usr/local/software/python-3.9.18/lib/python3.9/site-packages/mkdocs (Python 3.9)\n\n$ pip3 show mkdocs-material\nName: mkdocs-material\nVersion: 9.4.4\nSummary: Documentation that simply works\nHome-page: \nAuthor: \nAuthor-email: Martin Donath &lt;martin.donath@squidfunk.com&gt;\nLicense: \nLocation: /usr/local/software/python-3.9.18/lib/python3.9/site-packages\nRequires: babel, colorama, jinja2, markdown, mkdocs, mkdocs-material-extensions, paginate, pygments, pymdown-extensions, regex, requests\nRequired-by:"><pre class="notranslate">$ <span class="pl-s1">mkdocs</span> <span class="pl-c1">-</span><span class="pl-c1">-</span><span class="pl-s1">version</span>\n<span class="pl-s1">mkdocs</span>, <span class="pl-s1">version</span> <span class="pl-c1">1.5</span><span class="pl-c1">.3</span> <span class="pl-k">from</span> <span class="pl-c1">/</span><span class="pl-s1">usr</span><span class="pl-c1">/</span><span class="pl-s1">local</span><span class="pl-c1">/</span><span class="pl-s1">software</span><span class="pl-c1">/</span><span class="pl-s1">python</span><span class="pl-c1">-</span><span class="pl-c1">3.9</span>.<span class="pl-c1">18</span><span class="pl-c1">/</span><span class="pl-s1">lib</span><span class="pl-c1">/</span><span class="pl-s1">python3</span>.<span class="pl-c1">9</span><span class="pl-c1">/</span><span class="pl-s1">site</span><span class="pl-c1">-</span><span class="pl-s1">packages</span><span class="pl-c1">/</span><span class="pl-en">mkdocs</span> (<span class="pl-v">Python</span> <span class="pl-c1">3.9</span>)\n\n$ <span class="pl-s1">pip3</span> <span class="pl-s1">show</span> <span class="pl-s1">mkdocs</span><span class="pl-c1">-</span><span class="pl-s1">material</span>\n<span class="pl-v">Name</span>: <span class="pl-s1">mkdocs</span><span class="pl-c1">-</span><span class="pl-s1">material</span>\n<span class="pl-v">Version</span>: <span class="pl-c1">9.4</span>.<span class="pl-c1">4</span>\n<span class="pl-c1">Summary</span>: <span class="pl-v">Documentation</span> <span class="pl-s1">that</span> <span class="pl-s1">simply</span> <span class="pl-smi">works</span>\n<span class="pl-v">Home</span><span class="pl-c1">-</span><span class="pl-s1">page</span>: \n<span class="pl-v">Author</span>: \n<span class="pl-v">Author</span><span class="pl-c1">-</span><span class="pl-s1">email</span>: <span class="pl-v">Martin</span> <span class="pl-v">Donath</span> <span class="pl-c1">&lt;</span><span class="pl-s1">martin</span>.<span class="pl-c1">donath</span>@<span class="pl-s1">squidfunk</span>.<span class="pl-c1">com</span><span class="pl-c1">&gt;</span>\n<span class="pl-v">License</span>: \n<span class="pl-smi">Location</span>: <span class="pl-c1">/</span><span class="pl-s1">usr</span><span class="pl-c1">/</span><span class="pl-s1">local</span><span class="pl-c1">/</span><span class="pl-s1">software</span><span class="pl-c1">/</span><span class="pl-s1">python</span><span class="pl-c1">-</span><span class="pl-c1">3.9</span>.<span class="pl-c1">18</span><span class="pl-c1">/</span><span class="pl-s1">lib</span><span class="pl-c1">/</span><span class="pl-s1">python3</span>.<span class="pl-c1">9</span><span class="pl-c1">/</span><span class="pl-s1">site</span><span class="pl-c1">-</span><span class="pl-s1">packages</span>\n<span class="pl-v">Requires</span>: <span class="pl-s1">babel</span>, <span class="pl-s1">colorama</span>, <span class="pl-s1">jinja2</span>, <span class="pl-s1">markdown</span>, <span class="pl-s1">mkdocs</span>, <span class="pl-s1">mkdocs</span><span class="pl-c1">-</span><span class="pl-s1">material</span><span class="pl-c1">-</span><span class="pl-s1">extensions</span>, <span class="pl-s1">paginate</span>, <span class="pl-s1">pygments</span>, <span class="pl-s1">pymdown</span><span class="pl-c1">-</span><span class="pl-s1">extensions</span>, <span class="pl-s1">regex</span>, <span class="pl-s1">requests</span>\n<span class="pl-v">Required</span><span class="pl-c1">-</span><span class="pl-s1">by</span>:</pre></div>\n<h2 dir="auto">使用</h2>\n<p dir="auto">本地预览：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ mkdocs serve -a 0.0.0.0:8000"><pre class="notranslate"><code class="notranslate">$ mkdocs serve -a 0.0.0.0:8000\n</code></pre></div>\n<h2 dir="auto">问题与解决</h2>\n<ol dir="auto">\n<li>Pagination 分页与 <code class="notranslate">git-revision-date</code> 冲突，导致无法构建 - 参考 <a href="https://github.com/squidfunk/mkdocs-material/discussions/6156" data-hovercard-type="discussion" data-hovercard-url="/squidfunk/mkdocs-material/discussions/6156/hovercard">mkdocs-material/discussions/6156</a></li>\n<li><a href="https://github.com/squidfunk/mkdocs-material/issues/5134" data-hovercard-type="issue" data-hovercard-url="/squidfunk/mkdocs-material/issues/5134/hovercard">Support Markdown in the copyright string #5134</a></li>\n<li><a href="https://github.com/squidfunk/mkdocs-material/discussions/4969" data-hovercard-type="discussion" data-hovercard-url="/squidfunk/mkdocs-material/discussions/4969/hovercard">如何在 MkDocs 的版权部分自动添加年份 - squidfunk/mkdocs-material#4969</a></li>\n<li><a href="https://github.com/squidfunk/mkdocs-material/discussions/6324" data-hovercard-type="discussion" data-hovercard-url="/squidfunk/mkdocs-material/discussions/6324/hovercard">如何定制博客插件的归档页面 - squidfunk/mkdocs-material#6324</a></li>\n</ol>\n<h2 dir="auto">期待的功能</h2>\n<p dir="auto">这是一个个人非常期待的功能，大部分目前已经可以在 <a href="https://squidfunk.github.io/mkdocs-material/insiders/" rel="nofollow">Insiders</a> 版本中使用，社区公开的版本尚无法使用。</p>\n<ul dir="auto">\n<li>博客插件的自定义归档、目录页面每页文档数 - <a href="https://github.com/squidfunk/mkdocs-material/issues/6383" data-hovercard-type="issue" data-hovercard-url="/squidfunk/mkdocs-material/issues/6383/hovercard">squidfunk/mkdocs-material#6383</a></li>\n<li>内置隐私插件（方便内网/国内部署加速访问）- <a href="https://squidfunk.github.io/mkdocs-material/plugins/privacy/" rel="nofollow">Built-in privacy plugin - Material for MkDocs</a><br>\n内置隐私插件(privacy plugin) 在 <a href="https://github.com/squidfunk/mkdocs-material/releases/tag/9.5.0">9.5.0</a> 中已经k可以正常使用了，下一个值得期待的就是该插件的 <a href="https://squidfunk.github.io/mkdocs-material/plugins/privacy/#config.assets_exclude" rel="nofollow"><code class="notranslate">assets_exclude</code></a> 功能！</li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '为 Material for MkDocs 增加博客插件', 'number': 36, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/36', 'createdAt': '2023-12-06T01:26:26Z', 'lastEditedAt': None, 'updatedAt': '2024-01-04T05:43:47Z', 'body': 'Material for MkDocs 从 9.2.0 开始内置博客插件，内置博客插件添加了对从帖子文件夹构建博客的支持，这些帖子带有日期和其他结构化数据注释。\r\n\r\n<!-- more -->\r\n\r\nMaterial for MkDocs makes it very easy to build a blog, either as a sidecar to your documentation or standalone. Focus on your content while the engine does all the heavy lifting, automatically generating archive and category indexes, post slugs, configurable pagination and more.\r\n\r\nMaterial for MkDocs 使构建博客变得非常容易，无论是作为文档的附属工具还是独立的博客。专注于您的内容，而引擎会完成所有繁重的工作，自动生成存档和类别索引、帖子段、可配置的分页等等。\r\n\r\n存在的一些问题和使用体验：\r\n\r\n1. 在 Markdown 中使用 `<!-- more -->` 的写法分割 description 和全文，总感觉有点别扭；\r\n2. Pagination 分页与 `git-revision-date` 冲突，会引发构建错误 - 参考 [mkdocs-material/discussions#6156](https://github.com/squidfunk/mkdocs-material/discussions/6156)\r\n\r\n## 写博客\r\n\r\n有感于 Material for MkDocs 的博客结构，现在基本上可以实现使用 Discussions 进行 MkDocs blog 编辑与写作 —— 在 Discussions 上写完文章，借助第三方工具或者 GitHub Actions 导出为 Markdown 文件，保存到 `docs/blog/posts` 就可以啦！\r\n\r\n## 加评论\r\n\r\n借助 [giscus](https://giscus.app/zh-CN)，可以非常方便在文章页中插入指定的 discussions —— 在导出 discussions 的时候，在文章尾部增加类似以下 JavaScript 即可：\r\n```javascript\r\n<script src="https://giscus.app/client.js"\r\n        data-repo="shenweiyan/Knowledge-Garden"\r\n        data-repo-id="R_kgDOKgxWlg"\r\n        data-mapping="number"\r\n        data-term="4"\r\n        data-reactions-enabled="1"\r\n        data-emit-metadata="0"\r\n        data-input-position="bottom"\r\n        data-theme="light"\r\n        data-lang="zh-CN"\r\n        crossorigin="anonymous"\r\n        async>\r\n</script>\r\n```\r\n\r\n## 自定义归档页面\r\n\r\n[mkdocs-material](https://github.com/squidfunk/mkdocs-material) 的归档页面跟博客 index 主页面基本是一个样，如果想要列表式的自定义，可以参考 [squidfunk/mkdocs-material#6324](https://github.com/squidfunk/mkdocs-material/discussions/6324) 和 [squidfunk/mkdocs-material#6383](https://github.com/squidfunk/mkdocs-material/issues/6383)。\r\n\r\n官方在 [8ecee7b](https://github.com/squidfunk/mkdocs-material-insiders/commit/8ecee7b9dbdc5b2a0befd043a048ad25d56c784f) (Insiders) 中增加了几个个性化的新设置参数：  \r\n  \r\n- [`archive_pagination`](https://squidfunk.github.io/mkdocs-material/plugins/blog/#config.archive_pagination)\r\n- [`archive_pagination_per_page`](https://squidfunk.github.io/mkdocs-material/plugins/blog/#config.archive_pagination_per_page)\r\n- [`categories_pagination`](https://squidfunk.github.io/mkdocs-material/plugins/blog/#config.categories_pagination)\r\n- [`categories_pagination_per_page`](https://squidfunk.github.io/mkdocs-material/plugins/blog/#config.categories_pagination_per_page)\r\n\r\n所以，等开放给公用版本使用后，可以再好好折腾一下。\r\n', 'bodyText': 'Material for MkDocs 从 9.2.0 开始内置博客插件，内置博客插件添加了对从帖子文件夹构建博客的支持，这些帖子带有日期和其他结构化数据注释。\n\nMaterial for MkDocs makes it very easy to build a blog, either as a sidecar to your documentation or standalone. Focus on your content while the engine does all the heavy lifting, automatically generating archive and category indexes, post slugs, configurable pagination and more.\nMaterial for MkDocs 使构建博客变得非常容易，无论是作为文档的附属工具还是独立的博客。专注于您的内容，而引擎会完成所有繁重的工作，自动生成存档和类别索引、帖子段、可配置的分页等等。\n存在的一些问题和使用体验：\n\n在 Markdown 中使用 <!-- more --> 的写法分割 description 和全文，总感觉有点别扭；\nPagination 分页与 git-revision-date 冲突，会引发构建错误 - 参考 mkdocs-material/discussions#6156\n\n写博客\n有感于 Material for MkDocs 的博客结构，现在基本上可以实现使用 Discussions 进行 MkDocs blog 编辑与写作 —— 在 Discussions 上写完文章，借助第三方工具或者 GitHub Actions 导出为 Markdown 文件，保存到 docs/blog/posts 就可以啦！\n加评论\n借助 giscus，可以非常方便在文章页中插入指定的 discussions —— 在导出 discussions 的时候，在文章尾部增加类似以下 JavaScript 即可：\n<script src="https://giscus.app/client.js"\n        data-repo="shenweiyan/Knowledge-Garden"\n        data-repo-id="R_kgDOKgxWlg"\n        data-mapping="number"\n        data-term="4"\n        data-reactions-enabled="1"\n        data-emit-metadata="0"\n        data-input-position="bottom"\n        data-theme="light"\n        data-lang="zh-CN"\n        crossorigin="anonymous"\n        async>\n</script>\n自定义归档页面\nmkdocs-material 的归档页面跟博客 index 主页面基本是一个样，如果想要列表式的自定义，可以参考 squidfunk/mkdocs-material#6324 和 squidfunk/mkdocs-material#6383。\n官方在 8ecee7b (Insiders) 中增加了几个个性化的新设置参数：\n\narchive_pagination\narchive_pagination_per_page\ncategories_pagination\ncategories_pagination_per_page\n\n所以，等开放给公用版本使用后，可以再好好折腾一下。', 'bodyHTML': '<p dir="auto">Material for MkDocs 从 9.2.0 开始内置博客插件，内置博客插件添加了对从帖子文件夹构建博客的支持，这些帖子带有日期和其他结构化数据注释。</p>\n\n<p dir="auto">Material for MkDocs makes it very easy to build a blog, either as a sidecar to your documentation or standalone. Focus on your content while the engine does all the heavy lifting, automatically generating archive and category indexes, post slugs, configurable pagination and more.</p>\n<p dir="auto">Material for MkDocs 使构建博客变得非常容易，无论是作为文档的附属工具还是独立的博客。专注于您的内容，而引擎会完成所有繁重的工作，自动生成存档和类别索引、帖子段、可配置的分页等等。</p>\n<p dir="auto">存在的一些问题和使用体验：</p>\n<ol dir="auto">\n<li>在 Markdown 中使用 <code class="notranslate">&lt;!-- more --&gt;</code> 的写法分割 description 和全文，总感觉有点别扭；</li>\n<li>Pagination 分页与 <code class="notranslate">git-revision-date</code> 冲突，会引发构建错误 - 参考 <a href="https://github.com/squidfunk/mkdocs-material/discussions/6156" data-hovercard-type="discussion" data-hovercard-url="/squidfunk/mkdocs-material/discussions/6156/hovercard">mkdocs-material/discussions#6156</a></li>\n</ol>\n<h2 dir="auto">写博客</h2>\n<p dir="auto">有感于 Material for MkDocs 的博客结构，现在基本上可以实现使用 Discussions 进行 MkDocs blog 编辑与写作 —— 在 Discussions 上写完文章，借助第三方工具或者 GitHub Actions 导出为 Markdown 文件，保存到 <code class="notranslate">docs/blog/posts</code> 就可以啦！</p>\n<h2 dir="auto">加评论</h2>\n<p dir="auto">借助 <a href="https://giscus.app/zh-CN" rel="nofollow">giscus</a>，可以非常方便在文章页中插入指定的 discussions —— 在导出 discussions 的时候，在文章尾部增加类似以下 JavaScript 即可：</p>\n<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;script src=&quot;https://giscus.app/client.js&quot;\n        data-repo=&quot;shenweiyan/Knowledge-Garden&quot;\n        data-repo-id=&quot;R_kgDOKgxWlg&quot;\n        data-mapping=&quot;number&quot;\n        data-term=&quot;4&quot;\n        data-reactions-enabled=&quot;1&quot;\n        data-emit-metadata=&quot;0&quot;\n        data-input-position=&quot;bottom&quot;\n        data-theme=&quot;light&quot;\n        data-lang=&quot;zh-CN&quot;\n        crossorigin=&quot;anonymous&quot;\n        async&gt;\n&lt;/script&gt;"><pre class="notranslate"><span class="pl-c1">&lt;</span><span class="pl-s1">script</span> <span class="pl-c1">src</span><span class="pl-c1">=</span><span class="pl-s">"https://giscus.app/client.js"</span>\n        <span class="pl-c1">data-repo</span><span class="pl-c1">=</span><span class="pl-s">"shenweiyan/Knowledge-Garden"</span>\n        <span class="pl-c1">data-repo-id</span><span class="pl-c1">=</span><span class="pl-s">"R_kgDOKgxWlg"</span>\n        <span class="pl-c1">data-mapping</span><span class="pl-c1">=</span><span class="pl-s">"number"</span>\n        <span class="pl-c1">data-term</span><span class="pl-c1">=</span><span class="pl-s">"4"</span>\n        <span class="pl-c1">data-reactions-enabled</span><span class="pl-c1">=</span><span class="pl-s">"1"</span>\n        <span class="pl-c1">data-emit-metadata</span><span class="pl-c1">=</span><span class="pl-s">"0"</span>\n        <span class="pl-c1">data-input-position</span><span class="pl-c1">=</span><span class="pl-s">"bottom"</span>\n        <span class="pl-c1">data-theme</span><span class="pl-c1">=</span><span class="pl-s">"light"</span>\n        <span class="pl-c1">data-lang</span><span class="pl-c1">=</span><span class="pl-s">"zh-CN"</span>\n        <span class="pl-c1">crossorigin</span><span class="pl-c1">=</span><span class="pl-s">"anonymous"</span>\n        <span class="pl-c1">async</span><span class="pl-c1">&gt;</span>\n<span class="pl-kos">&lt;/</span><span class="pl-s1">script</span><span class="pl-c1">&gt;</span></pre></div>\n<h2 dir="auto">自定义归档页面</h2>\n<p dir="auto"><a href="https://github.com/squidfunk/mkdocs-material">mkdocs-material</a> 的归档页面跟博客 index 主页面基本是一个样，如果想要列表式的自定义，可以参考 <a href="https://github.com/squidfunk/mkdocs-material/discussions/6324" data-hovercard-type="discussion" data-hovercard-url="/squidfunk/mkdocs-material/discussions/6324/hovercard">squidfunk/mkdocs-material#6324</a> 和 <a href="https://github.com/squidfunk/mkdocs-material/issues/6383" data-hovercard-type="issue" data-hovercard-url="/squidfunk/mkdocs-material/issues/6383/hovercard">squidfunk/mkdocs-material#6383</a>。</p>\n<p dir="auto">官方在 <a href="https://github.com/squidfunk/mkdocs-material-insiders/commit/8ecee7b9dbdc5b2a0befd043a048ad25d56c784f">8ecee7b</a> (Insiders) 中增加了几个个性化的新设置参数：</p>\n<ul dir="auto">\n<li><a href="https://squidfunk.github.io/mkdocs-material/plugins/blog/#config.archive_pagination" rel="nofollow"><code class="notranslate">archive_pagination</code></a></li>\n<li><a href="https://squidfunk.github.io/mkdocs-material/plugins/blog/#config.archive_pagination_per_page" rel="nofollow"><code class="notranslate">archive_pagination_per_page</code></a></li>\n<li><a href="https://squidfunk.github.io/mkdocs-material/plugins/blog/#config.categories_pagination" rel="nofollow"><code class="notranslate">categories_pagination</code></a></li>\n<li><a href="https://squidfunk.github.io/mkdocs-material/plugins/blog/#config.categories_pagination_per_page" rel="nofollow"><code class="notranslate">categories_pagination_per_page</code></a></li>\n</ul>\n<p dir="auto">所以，等开放给公用版本使用后，可以再好好折腾一下。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '备用讨论', 'number': 35, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/35', 'createdAt': '2023-12-06T01:22:49Z', 'lastEditedAt': '2024-03-21T03:19:44Z', 'updatedAt': '2024-03-21T03:19:46Z', 'body': '备用讨论', 'bodyText': '备用讨论', 'bodyHTML': '<p dir="auto">备用讨论</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '0.1-站点'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '博客与写作的一些思考', 'number': 34, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/34', 'createdAt': '2023-12-05T06:32:32Z', 'lastEditedAt': '2023-12-08T05:32:46Z', 'updatedAt': '2023-12-11T08:30:56Z', 'body': '关于写作原本的想法，只是想写点自己在学习、工作、生活上的一些心得和体会，把一些知识点记录下来。\r\n\r\n留言的初衷是，希望自己写下来的东西能够有人一起探讨。哪怕你把我的观点批评得一无是处也可以，哪怕你说我的句子狗屁不通也没关系，只要有评判，我相信总有一天我会变得更好。\r\n\r\n<!-- more -->\r\n\r\n写作也好留言也罢，博客也只是一种实现的载体，语雀、博客园也是同样的道理，平台的选择虽然重要，但根本还是在于内容。\r\n\r\n每次看到人家一些内容翔实，界面优雅的博客，总要跟自己说，要忍住再去折腾博客的冲动，什么 UI，什么 CSS/HTML，都是浮云，内容才是核心，老老实实回归最简单的 Issues 和 Discussions 已经足够了。另外，需要知道的是，博客其实就是写给自己看的，什么 SEO 流量、关注度、知名度还是需要一颗随缘的心态。\r\n\r\n使用 Issues 当作博客也是挺不错的~\r\n\r\n- <https://github.com/Meekdai/Gmeek>\r\n- <https://github.com/yihong0618/gitblog>\r\n- <https://github.com/yutingzhao1991/github-blogs-collector>\r\n\r\n关于部分平台商业化的写作，有两点自认为讲的挺好：    \r\n\r\n- 商业化已经改变了写作的初衷。    \r\n- 当写文章变成盈利的手段，那么，写出来的东西是没有灵魂的。', 'bodyText': '关于写作原本的想法，只是想写点自己在学习、工作、生活上的一些心得和体会，把一些知识点记录下来。\n留言的初衷是，希望自己写下来的东西能够有人一起探讨。哪怕你把我的观点批评得一无是处也可以，哪怕你说我的句子狗屁不通也没关系，只要有评判，我相信总有一天我会变得更好。\n\n写作也好留言也罢，博客也只是一种实现的载体，语雀、博客园也是同样的道理，平台的选择虽然重要，但根本还是在于内容。\n每次看到人家一些内容翔实，界面优雅的博客，总要跟自己说，要忍住再去折腾博客的冲动，什么 UI，什么 CSS/HTML，都是浮云，内容才是核心，老老实实回归最简单的 Issues 和 Discussions 已经足够了。另外，需要知道的是，博客其实就是写给自己看的，什么 SEO 流量、关注度、知名度还是需要一颗随缘的心态。\n使用 Issues 当作博客也是挺不错的~\n\nhttps://github.com/Meekdai/Gmeek\nhttps://github.com/yihong0618/gitblog\nhttps://github.com/yutingzhao1991/github-blogs-collector\n\n关于部分平台商业化的写作，有两点自认为讲的挺好：\n\n商业化已经改变了写作的初衷。\n当写文章变成盈利的手段，那么，写出来的东西是没有灵魂的。', 'bodyHTML': '<p dir="auto">关于写作原本的想法，只是想写点自己在学习、工作、生活上的一些心得和体会，把一些知识点记录下来。</p>\n<p dir="auto">留言的初衷是，希望自己写下来的东西能够有人一起探讨。哪怕你把我的观点批评得一无是处也可以，哪怕你说我的句子狗屁不通也没关系，只要有评判，我相信总有一天我会变得更好。</p>\n\n<p dir="auto">写作也好留言也罢，博客也只是一种实现的载体，语雀、博客园也是同样的道理，平台的选择虽然重要，但根本还是在于内容。</p>\n<p dir="auto">每次看到人家一些内容翔实，界面优雅的博客，总要跟自己说，要忍住再去折腾博客的冲动，什么 UI，什么 CSS/HTML，都是浮云，内容才是核心，老老实实回归最简单的 Issues 和 Discussions 已经足够了。另外，需要知道的是，博客其实就是写给自己看的，什么 SEO 流量、关注度、知名度还是需要一颗随缘的心态。</p>\n<p dir="auto">使用 Issues 当作博客也是挺不错的~</p>\n<ul dir="auto">\n<li><a href="https://github.com/Meekdai/Gmeek">https://github.com/Meekdai/Gmeek</a></li>\n<li><a href="https://github.com/yihong0618/gitblog">https://github.com/yihong0618/gitblog</a></li>\n<li><a href="https://github.com/yutingzhao1991/github-blogs-collector">https://github.com/yutingzhao1991/github-blogs-collector</a></li>\n</ul>\n<p dir="auto">关于部分平台商业化的写作，有两点自认为讲的挺好：</p>\n<ul dir="auto">\n<li>商业化已经改变了写作的初衷。</li>\n<li>当写文章变成盈利的手段，那么，写出来的东西是没有灵魂的。</li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': [{'name': '博客'}]}, 'comments': {'nodes': [{'body': '自娱自乐的小树洞，我也是', 'author': {'login': 'obaby'}}]}}, {'title': '使用 meta 实现页面的定时刷新或跳转', 'number': 33, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/33', 'createdAt': '2023-12-05T03:25:01Z', 'lastEditedAt': '2024-02-29T01:26:02Z', 'updatedAt': '2024-02-29T01:26:02Z', 'body': '这个方法最开始是在 [Linlin Yan (颜林林)](https://github.com/yanlinlin82) 的 GitHub Pages 上第一次看到。后来，随着自己也用上了，就开始有了更深一些的认识。\r\n\r\n<!-- more -->\r\n\r\n## 跳转域名\r\n\r\n在 [yanlinlin82/yanlinlin82.github.io](https://github.com/yanlinlin82/yanlinlin82.github.io/tree/master) 看到一个通过 <https://yanlinlin82.github.io> 可以直接重定向到 <https://yanlinlin.cn/> 的用法 —— 只需要把 `index.html` 写成这样就可以：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n  <head><meta http-equiv="refresh" content="0; url=https://yanlinlin.cn/"></head>\r\n  <body></body>\r\n</html>\r\n```\r\n\r\n## 页面定时跳转与刷新\r\n\r\n这部分的内容主要来源自：《[小tip: 使用meta实现页面的定时刷新或跳转](https://www.zhangxinxu.com/wordpress/2015/03/meta-http-equiv-refresh-content/)》。\r\n\r\n> ### meta 源信息功能之页面定时跳转与刷新\r\n> \r\n> 几乎所有的网页头部都有`<meta>`源信息。除了我们常用的定义编码、关键字(name=”keywords”)、描述(name=”description”)(for SEO)，还可以定义视区大小、缩放比例等(for 移动端)，如下：\r\n> \r\n> ```\r\n> <meta name="viewport" content="width=device-width,initial-scale=1.0">\r\n> ```\r\n> \r\n> 以及，定义网页的过期时间，Cookie 的过期时间等等。\r\n> \r\n> 文本要介绍的内容，科科，跟上面都没关系。哦，抱歉，都有关系，只是名称我故意没提到。主角嘛，总要最后闪亮登场！\r\n> \r\n> 就是我们网页平时跳转，还可以使用 `<meta>` 实现，下面几个典型代码示例：    \r\n> ```html    \r\n> <meta http-equiv="refresh" content="5">\r\n> ```\r\n> 这个表示当前页面每5秒钟刷一下，刷一下~\r\n> \r\n> ```html\r\n> <meta http-equiv="refresh" content="2; url=\'/\'">\r\n> ```\r\n> 这个表示当前页面2秒后跳到首页~    \r\n> \r\n> ```html\r\n> <meta http-equiv="refresh" content="0; url=\'http://www.qq.com/\'">\r\n> ```\r\n> 页面直接跳转到腾讯网~\r\n> \r\n> 所以，当我们下次遇到“登录成功，正在跳转到您之前访问页面……”的时候，可以使用`<meta>`的这个`refresh`刷新，跳转功能，可以说是成本最低的。    \r\n>   \r\n> 您可以狠狠地点击这里：[meta与当前页面定时刷新Demo](http://www.zhangxinxu.com/study/201503/meta-fresh-content.html)     \r\n> ![meta-refresh](https://shub.weiyan.tech/kgarden/2024/01/meta-refresh.37epe9yaam80.png)\r\n> \r\n> 上面 Demo 效果就是上面第1个示例代码效果。        \r\n> \r\n> 根据我的测试，此特性包括IE7在内的浏览器都是支持的。    \r\n> \r\n> ### 问题来了：为何 meta 跳转不火呢？\r\n> \r\n> 大家可以看到，`meta` 跳转，使用方便，不用写 JS，不用会后台代码，定时跳转刷新什么的玩得照样很溜，而且兼容性好，为啥总感觉不温不火，很少看见有人提及呢？    \r\n> \r\n> 新晋的小伙伴不知有没有听过这么一个词，叫做“万恶的IE6年代”。\r\n> \r\n> 据说，当年，这一批老旧的浏览器，问题很多，其中就有对`meta` 两个小小的不友好。我也是听说，不一定准确。坊间是这么传闻的：    \r\n> \r\n> - 时间设为0的跳转，有时候页面会闪一下；    \r\n> - 跳转到其他页面，浏览器后退按钮是不能用的；     \r\n> \r\n> 但是啊，现在是什么年代啊，监狱风云都拍到第二季了，这些老问题，我觉得就可以忽略不计了。    \r\n> \r\n> 不妨大胆试试 `meta` 跳转，好好利用下浏览器的原生特性，说不定就会发现比什么 JS 跳转之流用得更开心。\r\n\r\n所以，在文章的最后有一个小想法 —— 我们是不是也可以利用这个方法实现无数个链接 301 重定向( URL 转发)，再也不需要担心是否需要主机+Nginx 之类！\r\n', 'bodyText': '这个方法最开始是在 Linlin Yan (颜林林) 的 GitHub Pages 上第一次看到。后来，随着自己也用上了，就开始有了更深一些的认识。\n\n跳转域名\n在 yanlinlin82/yanlinlin82.github.io 看到一个通过 https://yanlinlin82.github.io 可以直接重定向到 https://yanlinlin.cn/ 的用法 —— 只需要把 index.html 写成这样就可以：\n<!DOCTYPE html>\n<html>\n  <head><meta http-equiv="refresh" content="0; url=https://yanlinlin.cn/"></head>\n  <body></body>\n</html>\n页面定时跳转与刷新\n这部分的内容主要来源自：《小tip: 使用meta实现页面的定时刷新或跳转》。\n\nmeta 源信息功能之页面定时跳转与刷新\n几乎所有的网页头部都有<meta>源信息。除了我们常用的定义编码、关键字(name=”keywords”)、描述(name=”description”)(for SEO)，还可以定义视区大小、缩放比例等(for 移动端)，如下：\n<meta name="viewport" content="width=device-width,initial-scale=1.0">\n\n以及，定义网页的过期时间，Cookie 的过期时间等等。\n文本要介绍的内容，科科，跟上面都没关系。哦，抱歉，都有关系，只是名称我故意没提到。主角嘛，总要最后闪亮登场！\n就是我们网页平时跳转，还可以使用 <meta> 实现，下面几个典型代码示例：\n<meta http-equiv="refresh" content="5">\n这个表示当前页面每5秒钟刷一下，刷一下~\n<meta http-equiv="refresh" content="2; url=\'/\'">\n这个表示当前页面2秒后跳到首页~\n<meta http-equiv="refresh" content="0; url=\'http://www.qq.com/\'">\n页面直接跳转到腾讯网~\n所以，当我们下次遇到“登录成功，正在跳转到您之前访问页面……”的时候，可以使用<meta>的这个refresh刷新，跳转功能，可以说是成本最低的。\n您可以狠狠地点击这里：meta与当前页面定时刷新Demo\n\n上面 Demo 效果就是上面第1个示例代码效果。\n根据我的测试，此特性包括IE7在内的浏览器都是支持的。\n问题来了：为何 meta 跳转不火呢？\n大家可以看到，meta 跳转，使用方便，不用写 JS，不用会后台代码，定时跳转刷新什么的玩得照样很溜，而且兼容性好，为啥总感觉不温不火，很少看见有人提及呢？\n新晋的小伙伴不知有没有听过这么一个词，叫做“万恶的IE6年代”。\n据说，当年，这一批老旧的浏览器，问题很多，其中就有对meta 两个小小的不友好。我也是听说，不一定准确。坊间是这么传闻的：\n\n时间设为0的跳转，有时候页面会闪一下；\n跳转到其他页面，浏览器后退按钮是不能用的；\n\n但是啊，现在是什么年代啊，监狱风云都拍到第二季了，这些老问题，我觉得就可以忽略不计了。\n不妨大胆试试 meta 跳转，好好利用下浏览器的原生特性，说不定就会发现比什么 JS 跳转之流用得更开心。\n\n所以，在文章的最后有一个小想法 —— 我们是不是也可以利用这个方法实现无数个链接 301 重定向( URL 转发)，再也不需要担心是否需要主机+Nginx 之类！', 'bodyHTML': '<p dir="auto">这个方法最开始是在 <a href="https://github.com/yanlinlin82">Linlin Yan (颜林林)</a> 的 GitHub Pages 上第一次看到。后来，随着自己也用上了，就开始有了更深一些的认识。</p>\n\n<h2 dir="auto">跳转域名</h2>\n<p dir="auto">在 <a href="https://github.com/yanlinlin82/yanlinlin82.github.io/tree/master">yanlinlin82/yanlinlin82.github.io</a> 看到一个通过 <a href="https://yanlinlin82.github.io" rel="nofollow">https://yanlinlin82.github.io</a> 可以直接重定向到 <a href="https://yanlinlin.cn/" rel="nofollow">https://yanlinlin.cn/</a> 的用法 —— 只需要把 <code class="notranslate">index.html</code> 写成这样就可以：</p>\n<div class="highlight highlight-text-html-basic notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=https://yanlinlin.cn/&quot;&gt;&lt;/head&gt;\n  &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;"><pre class="notranslate"><span class="pl-c1">&lt;!DOCTYPE html<span class="pl-kos">&gt;</span></span>\n<span class="pl-kos">&lt;</span><span class="pl-ent">html</span><span class="pl-kos">&gt;</span>\n  <span class="pl-kos">&lt;</span><span class="pl-ent">head</span><span class="pl-kos">&gt;</span><span class="pl-kos">&lt;</span><span class="pl-ent">meta</span> <span class="pl-c1">http-equiv</span>="<span class="pl-s">refresh</span>" <span class="pl-c1">content</span>="<span class="pl-s">0; url=https://yanlinlin.cn/</span>"<span class="pl-kos">&gt;</span><span class="pl-kos">&lt;/</span><span class="pl-ent">head</span><span class="pl-kos">&gt;</span>\n  <span class="pl-kos">&lt;</span><span class="pl-ent">body</span><span class="pl-kos">&gt;</span><span class="pl-kos">&lt;/</span><span class="pl-ent">body</span><span class="pl-kos">&gt;</span>\n<span class="pl-kos">&lt;/</span><span class="pl-ent">html</span><span class="pl-kos">&gt;</span></pre></div>\n<h2 dir="auto">页面定时跳转与刷新</h2>\n<p dir="auto">这部分的内容主要来源自：《<a href="https://www.zhangxinxu.com/wordpress/2015/03/meta-http-equiv-refresh-content/" rel="nofollow">小tip: 使用meta实现页面的定时刷新或跳转</a>》。</p>\n<blockquote>\n<h3 dir="auto">meta 源信息功能之页面定时跳转与刷新</h3>\n<p dir="auto">几乎所有的网页头部都有<code class="notranslate">&lt;meta&gt;</code>源信息。除了我们常用的定义编码、关键字(name=”keywords”)、描述(name=”description”)(for SEO)，还可以定义视区大小、缩放比例等(for 移动端)，如下：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0&quot;&gt;"><pre class="notranslate"><code class="notranslate">&lt;meta name="viewport" content="width=device-width,initial-scale=1.0"&gt;\n</code></pre></div>\n<p dir="auto">以及，定义网页的过期时间，Cookie 的过期时间等等。</p>\n<p dir="auto">文本要介绍的内容，科科，跟上面都没关系。哦，抱歉，都有关系，只是名称我故意没提到。主角嘛，总要最后闪亮登场！</p>\n<p dir="auto">就是我们网页平时跳转，还可以使用 <code class="notranslate">&lt;meta&gt;</code> 实现，下面几个典型代码示例：</p>\n<div class="highlight highlight-text-html-basic notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;meta http-equiv=&quot;refresh&quot; content=&quot;5&quot;&gt;"><pre class="notranslate"><span class="pl-kos">&lt;</span><span class="pl-ent">meta</span> <span class="pl-c1">http-equiv</span>="<span class="pl-s">refresh</span>" <span class="pl-c1">content</span>="<span class="pl-s">5</span>"<span class="pl-kos">&gt;</span></pre></div>\n<p dir="auto">这个表示当前页面每5秒钟刷一下，刷一下~</p>\n<div class="highlight highlight-text-html-basic notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;meta http-equiv=&quot;refresh&quot; content=&quot;2; url=\'/\'&quot;&gt;"><pre class="notranslate"><span class="pl-kos">&lt;</span><span class="pl-ent">meta</span> <span class="pl-c1">http-equiv</span>="<span class="pl-s">refresh</span>" <span class="pl-c1">content</span>="<span class="pl-s">2; url=\'/\'</span>"<span class="pl-kos">&gt;</span></pre></div>\n<p dir="auto">这个表示当前页面2秒后跳到首页~</p>\n<div class="highlight highlight-text-html-basic notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=\'http://www.qq.com/\'&quot;&gt;"><pre class="notranslate"><span class="pl-kos">&lt;</span><span class="pl-ent">meta</span> <span class="pl-c1">http-equiv</span>="<span class="pl-s">refresh</span>" <span class="pl-c1">content</span>="<span class="pl-s">0; url=\'http://www.qq.com/\'</span>"<span class="pl-kos">&gt;</span></pre></div>\n<p dir="auto">页面直接跳转到腾讯网~</p>\n<p dir="auto">所以，当我们下次遇到“登录成功，正在跳转到您之前访问页面……”的时候，可以使用<code class="notranslate">&lt;meta&gt;</code>的这个<code class="notranslate">refresh</code>刷新，跳转功能，可以说是成本最低的。</p>\n<p dir="auto">您可以狠狠地点击这里：<a href="http://www.zhangxinxu.com/study/201503/meta-fresh-content.html" rel="nofollow">meta与当前页面定时刷新Demo</a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/ca578ed6ee816053bc26166f4a94b040d20278596fd4c470e0a9b122b700b61c/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f6d6574612d726566726573682e3337657065397961616d38302e706e67"><img src="https://camo.githubusercontent.com/ca578ed6ee816053bc26166f4a94b040d20278596fd4c470e0a9b122b700b61c/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f6d6574612d726566726573682e3337657065397961616d38302e706e67" alt="meta-refresh" data-canonical-src="https://shub.weiyan.tech/kgarden/2024/01/meta-refresh.37epe9yaam80.png" style="max-width: 100%;"></a></p>\n<p dir="auto">上面 Demo 效果就是上面第1个示例代码效果。</p>\n<p dir="auto">根据我的测试，此特性包括IE7在内的浏览器都是支持的。</p>\n<h3 dir="auto">问题来了：为何 meta 跳转不火呢？</h3>\n<p dir="auto">大家可以看到，<code class="notranslate">meta</code> 跳转，使用方便，不用写 JS，不用会后台代码，定时跳转刷新什么的玩得照样很溜，而且兼容性好，为啥总感觉不温不火，很少看见有人提及呢？</p>\n<p dir="auto">新晋的小伙伴不知有没有听过这么一个词，叫做“万恶的IE6年代”。</p>\n<p dir="auto">据说，当年，这一批老旧的浏览器，问题很多，其中就有对<code class="notranslate">meta</code> 两个小小的不友好。我也是听说，不一定准确。坊间是这么传闻的：</p>\n<ul dir="auto">\n<li>时间设为0的跳转，有时候页面会闪一下；</li>\n<li>跳转到其他页面，浏览器后退按钮是不能用的；</li>\n</ul>\n<p dir="auto">但是啊，现在是什么年代啊，监狱风云都拍到第二季了，这些老问题，我觉得就可以忽略不计了。</p>\n<p dir="auto">不妨大胆试试 <code class="notranslate">meta</code> 跳转，好好利用下浏览器的原生特性，说不定就会发现比什么 JS 跳转之流用得更开心。</p>\n</blockquote>\n<p dir="auto">所以，在文章的最后有一个小想法 —— 我们是不是也可以利用这个方法实现无数个链接 301 重定向( URL 转发)，再也不需要担心是否需要主机+Nginx 之类！</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': [{'name': '公众号'}]}, 'comments': {'nodes': []}}, {'title': '2022 年的十大生物学突破', 'number': 32, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/32', 'createdAt': '2023-12-01T03:39:00Z', 'lastEditedAt': None, 'updatedAt': '2024-01-04T05:45:16Z', 'body': '> **作者 |** [Niko McCarty](https://substack.com/profile/11154869-niko-mccarty)    \r\n> **翻译 |** [章鱼猫先生](https://www.yuque.com/shenweiyan)    \r\n> **日期 |** 原文发表于 2022.12.10    \r\n> **来源 |** [Biology Breakthroughs of 2022](https://cell.substack.com/p/biology-breakthroughs-2022) - Codon    \r\n\r\n> 您正在阅读 Codon，这是一份关于生物 + 技术进步和为人类创造更光明未来的想法的时事通讯。    \r\n> 这是今年的最后一部作品。几周后我会在这里见到你！    \r\n\r\n<!-- more -->\r\n\r\n<p align="center">\r\n    <img src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-1.webp" alt><br>\r\n    <em>大约 1950 年代，戴着加压氧气面罩的男子</em>\r\n</p>\r\n\r\n> "当你经历历史时，历史永远不会像历史。它总是看起来很混乱和凌乱，而且总是让人感觉不舒服。"    \r\n> —— 约翰·W·加德纳\r\n\r\n许多我非常敬佩的作家都对“进步的停滞”写出了令人信服的论战。科学越来越难，发现越来越小（平均而言），这两件事都很糟糕。\r\n\r\n如果你召集来自世界顶级院系的 93 位物理学家，让他们将 1910 年代获得诺贝尔奖的发现与 80 年代的另一个发现进行比较，他们通常会说更早的发现更重要。\r\n\r\n与五十年前相比，今天实现技术飞跃也更加困难。将计算机芯片上的晶体管数量增加一倍（又名摩尔定律）需要的研究人员数量是 1970 年代初期的 [18 倍](https://www.aeaweb.org/articles?id=10.1257/aer.20180338)。今天发表的学术论文被美国专利引用的可能性不到 30 年前发表的论文的[一半](https://mattsclancy.substack.com/p/science-is-getting-harder)。\r\n\r\n这些不断缩减的回报正处于历史高位之中。\r\n\r\n美国每年授予超过 50,000 个科学和工程博士学位；这个数字在 1960 年还不到 10,000。联邦对科学的资助也（基本上）处于历史最高水平。科学论文的总数呈指数级增长，但每篇论文的平均作者人数在过去一百年里大约翻了两番。\r\n<p align="center">\r\n    <img src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-2.jpeg" alt><br>\r\n    <em>From "The Science of Science" by <a href="https://www.dashunwang.com/book/the-science-of-science">Wang and Barabási</a>.</em>\r\n</p>\r\n\r\n出于某种原因，这些都是生物学进步的不完美指标。但是有很多零散的证据表明，科学正在变得越来越不划算，即使感觉进步从未像现在这样快。我相信——基于轶事证据，真的——如果以每年获得诺贝尔奖的发现为基准，生物技术不会停滞不前。只是诺贝尔奖每年都会颁发一次，而且不乏令人惊叹的论文在排队等待获得最高奖项。所以，当然，并不是每个有价值的人都会赢。\r\n\r\n哦，如果你拿我之前提到的物理学调查结果，对医学和化学做同样的实验，结果就会颠倒过来——20 世纪下半叶发现的相对重要性超过了上半叶。\r\n\r\n不管停滞与否，生物学都存在巨大的低效率。它可以——应该！- 移动得更快。\r\n\r\n许多论文需要一年多的时间才能发表，在期刊官僚的严密监视下，被搁置在数字化的边缘。漫长的等待可能也不值得——同行评审通常是无用的，而且很多糟糕的科学无论如何都能通过。许多伟大的想法也从来没有发表在论文上，因为，好吧，他们从来没有得到资助。NIH 拨款审查非常不一致。如果您向 43 位不同的审稿人提供 25 份拨款建议，他们的评定者间可靠性（衡量分数一致性的指标）基本上为零，即使拨款已经获得资金和先前评审小组的高分！给予相同审稿人的无资金资助与有资金资助的资助得分一样。\r\n\r\n那么生物学文献呢？那也是一团糟。山姆·罗德里克斯 ([Sam Rodriques](https://www.sam-rodriques.com/post/why-is-progress-in-biology-so-slow)) 在最近的一篇文章中写道，科学论文“因委托而变得不可靠”，并且“因遗漏而变得不可靠”。换句话说，一些研究（一小部分）只是编造的。教授或学生为了发表论文而捏造数字，如果有人说他们在胡说八道，编辑可能要过[好几年](https://newscience.substack.com/p/laws-of-science)才会撤稿。\r\n\r\n不过，更大的问题可能是疏忽。科学期刊喜欢发表积极的结果，所以大多数消极的发现永远不会出现在光鲜的期刊上。如果有人进行的实验表明药物 A 与受体 B 结合，他们会发表它——但忽略提及药物 A 不会通过 Z 与受体 C 结合。无效结果很少传给科学家，他们中的许多人已经几个月来一次又一次尝试实验的痛苦经历，后来才发现 1970 年代的一篇不起眼的论文使他们所有的努力都变得毫无意义。\r\n\r\n我告诉你这些悲伤的事情——停滞不前的科学和可怕的低效率的故事——是为了说明一个观点：**生物学在去年取得了如此大的进步，真是令人惊讶**。生物学的进步证明了人类渴望探索、失败，然后继续前进的愿望。这份时事通讯庆祝人类的成就，并重点介绍了过去 12 个月**生物学领域的十大进步**。\r\n\r\n此列表中的所有内容均来自 Codon 的上一期，因此希望您能在评论中指出我的错误和遗漏。我的入选标准很简单：该列表仅包括 2022 年期间发布到 bioRxiv 或发表在期刊上的论文。我不包括公司成就——这实际上可能是它自己的列表——除非他们发布了数据。(入选)列表中的一些项目包括了多篇论文，因为整个子领域发展得非常快。\r\n\r\n汇总“十佳排名”最大的危险是完全主观的，有很多优秀的东西没有入选，而且很多其他作家已经做到了(虽然我还没有看到专门针对生物学的清单)。诺亚·史密斯 (Noah Smith) 发布了他 2023 年的技术乐观主义清单 ([techno-optimism list](https://noahpinion.substack.com/p/techno-optimism-for-2023))，其中包括对生物技术的简要提及，而《大西洋月刊》(The Atlantic) 发表了他们的 "年度突破 ([breakthroughs of the year](https://www.theatlantic.com/newsletters/archive/2022/12/technology-medicine-law-ai-10-breakthroughs-2022/672390/))"，然后立即将该文章设置为付费文章。\r\n\r\n然而，有必要专门为生物学列出一份完整的榜单，因为很多伟大的事情在人工智能的阴影下被忽略了。人类基因组计划（始于 1990 年）终于在[今年完成了](https://www.science.org/toc/science/376/6588)，一个庞大的科学家团队填补了最后 8% 的序列空白。科学家们还使用 mirror-image DNA 聚合酶制作了镜像 DNA ([mirror-image DNA](https://www.nature.com/articles/s41587-022-01337-8))，并发现了一类新的 CRISPR 蛋白质，它们可以[剪切蛋白质](https://cell.substack.com/p/crispr-can-cut-proteins-too-index)而不是基因。机器学习正在蛋白质工程中掀起波澜，例如有一种基于算法被设计出来的酶，这种酶可以比自然界中发现的任何酶更快地[分解 PET 塑料](https://cell.substack.com/p/ai-designed-enzyme-eats-plastic)。\r\n\r\n我不确定今年的进展是否与生物进展是否整体停滞不前有关。但有一件事是不变的：生物学变得越来越奇怪，而我会一直关注它。\r\n\r\n### 10. 走向合成细胞\r\n\r\n从纯化学成分构建合成细胞是生物学的圣杯。如果实现了这一壮举，将证明我们已足够详细地理解生命运作的大体轮廓，并有足够的细节可以在实验室中重现它。这也将成为定制细胞的起点，这些细胞可以检测有毒污染或制造药物，同时又不会成为生物安全风险或存在感染风险。\r\n\r\n今年有几篇论文推动了合成细胞的发展，但其中有两篇让人印象深刻。第一篇是在 bioRxiv 上发表的预印本，据称是**首次证明核糖体**（大分子蛋白质，负责合成其他蛋白质）**可以在活细胞之外制造**。这是在合成细胞内从头生产蛋白质的重要起点。\r\n\r\n我们还在合成细胞分裂方面取得了重要进展。一项研究报告说，仅使用五种蛋白质就可以在脂肪泡中制造合成分裂环！当这些蛋白质聚集在一起时，它们会收缩并向气泡施加力（下面的 GIF）。    \r\n<p align="center">\r\n    <img src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-3.webp" alt><br>\r\n    <em>合成分裂环在气泡内形成的延时摄影</em>\r\n</p>\r\n\r\n### 9. 更好的碱基编辑器\r\n\r\n早在 2016 年，《自然》杂志的一篇论文就报道了第一个碱基编辑蛋白，它可以将 DNA 中的 "C" 替换为 "T"，而无需将基因组一分为二。它的重要性立即显而易见——许多严重的遗传疾病是由 DNA 中的单个碱基交换引起的，现在这些突变可以被修复。\r\n\r\n碱基编辑器已经成熟。这些基因编辑蛋白在发明后仅仅五年就以创纪录的速度进入临床试验，目前 Verve、Beam 和其他公司正在进行针对镰状细胞病、高胆固醇和 Stargardt 病的[试验](https://www.nature.com/articles/d41573-022-00124-z)。\r\n\r\n然而，碱基编辑的主要挑战之一是编辑线粒体基因组很棘手，[许多遗传疾病](https://www.chop.edu/conditions-diseases/mitochondrial-dna-common-mutation-syndromes)都源于此。早在 2020 年，[一篇论文](https://www.nature.com/articles/s41586-020-2477-4)就表明碱基编辑器可以成功进入线粒体并使 "C" 变为 "T"，但其前景并不乐观。今年 5 月，[一篇后续论文](https://www.nature.com/articles/s41586-022-04836-5)称，实际上，这些线粒体基因编辑器诱发了 "大量" 脱靶突变，这意味着它们编辑的位置比预期的要多，弊大于利。\r\n\r\n但创新不会因失败而受阻。仅今年一年就至少发表了**三篇论文**，使线粒体碱基编辑器变得[更小](https://www.nature.com/articles/s41467-022-34784-7)或[更准确](https://doi.org/10.1016/j.cell.2022.03.039)。让碱基编辑酶进入线粒体或编辑其 DNA 从未如此简单。我相信我们很快就会看到一些针对线粒体相关疾病的临床试验。\r\n\r\n### 8. 噬菌体传播病毒\r\n\r\n今年对噬菌体来说是个好年头。这真的很合适，因为它也是 Felix d\'Herelle 著名实验 **100 周年纪念日**。1922 年，这位巴黎微生物学家证明噬菌体（感染细菌的小病毒）[可以根除](https://jamanetwork.com/journals/jamapediatrics/article-abstract/1173780)兔子和小动物体内的 "痢疾杆菌和其他杆菌"。\r\n\r\n我们现在正经历着临床疗法的准复兴时期，噬菌体经常被用来消除抗生素无效的感染（尤其是在欧洲医院）。几周前，一个欧洲科学家团队使用实验性噬菌体疗法[挽救了一名幼儿的生命](https://www.nature.com/articles/s41467-022-33294-w)。器官移植后，这个小男孩感染了抗生素无法清除的耐药性感染。在用定制的噬菌体鸡尾酒 (a custom-made phage cocktail) 治疗两年多后，孩子在家中恢复了健康。\r\n\r\n5 月，丹佛的一个团队使用噬菌体治疗一名患有严重囊性纤维化的男孩的脓肿分枝杆菌感染。噬菌体将感染控制了一年多，直到获得供体肺。我相信我们会在 2023 年看到定制噬菌体疗法进入临床。    \r\n<p align="center">\r\n    <img src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-4.png" alt><br>\r\n</p>\r\n\r\n\r\n### 7. 血友病基因疗法\r\n\r\n[Hemgenix](https://www.fda.gov/vaccines-blood-biologics/vaccines/hemgenix) 是一种治疗 B 型血友病的基因疗法，几个月前获得了 FDA 的批准。它的价格达到了 350 万美元，使其成为有史以来最昂贵的药物（这并不好）。根据 III 期临床试验数据，它在患者的是安全有效期[至少两年](https://hemophilianewstoday.com/news/hemgenix-gene-therapy-benefits-sustained-2-years-phase-3-hope-b/)。\r\n\r\n血友病 A 的基因治疗进展缓慢，该病由一种名为 VIII 的不同凝血蛋白突变引起。5 月的一项研究表明，针对肝脏的基因疗法在非人类灵长类动物中效果很好，可以导致 "总凝血因子 VIII 输出增加 10 倍以上"。3 月份发表的一项有 134 名参与者参与的 I/II 期临床试验表明，使用腺相关病毒进行的基因疗法，也用于肝脏，可减少血友病患者的出血事件。但是，它带来了很多副作用；每个试验参与者至少有一次不良事件。尽管如此，血友病仍是基因治疗的 "低悬" 目标之一，这些试验是其他正在进行中的目标的有用酸性测试。\r\n\r\n### 6. 合成胚胎\r\n\r\n今年，从老鼠身上采集的干细胞被用来制造 "类胚胎结构"，其中包含工作的肠道、跳动的心脏和头脑的雏形，而不需要精子或卵子。\r\n\r\n以色列的 Jacob Hanna 团队发表了一篇最初的论文，于 8 月[在 Cell 上发表](https://doi.org/10.1016/j.cell.2022.07.028)。据《卫报》报道，这些作者后来成立了一家名为 Renewal Bio 的[公司](https://www.theguardian.com/science/2022/aug/03/scientists-create-worlds-first-synthetic-embryos)，"旨在培养人类合成胚胎，为医疗条件提供组织和细胞"。剑桥大学和加州理工学院的一个团队也在 8 月 2 日发布了一份[预印本](https://doi.org/10.1101/2022.08.01.502371)，表明这些 "合成胚胎"准确地概括了 "从胚胎第 5.5 天到第 8.5 天的发育事件，包括原肠胚形成、前后轴的形成、大脑，跳动的心脏结构，以及胚胎外组织（包括卵黄囊和绒毛膜）的发育。"\r\n\r\n合成胚胎——正确形成的概率只有 0.5% 左右——有几个潜在的用途。例如，这些结构可以用于研究器官在发育过程中的形成，也可用于在不使用真实胚胎的情况下测试药物。    \r\n<p align="center">\r\n    <img src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-5.png" alt><br>\r\n    <em>Embryoids after six days. From Kasey Lau et al. on bioRxiv. <a href="https://www.biorxiv.org/content/10.1101/2022.08.01.502371v1.full.pdf">Link</a></em>\r\n</p>\r\n\r\n### 5. 细胞重编程\r\n\r\n今年的一大亮点：首次证明仅靠化学物质就能将人体细胞[重新编程为干细胞](https://www.nature.com/articles/s41586-022-04593-5)。这一突破需要十多年的时间，并需使用 11 种不同的化学物质，以及一到两个月的工作时间，所以仍需要一些微调。早在 2013 年，同一个小组就已使用这种方法实现了[小鼠细胞](https://www.science.org/doi/10.1126/science.1239278)的转化，但人类细胞的转化过程要困难得多。\r\n\r\n这也不是第一项重新编程人类细胞的研究。这一荣誉属于山中伸弥 (Shinya Yamanaka)，他在 2006 年通过表达四种蛋白质（现在著名的 "Yamanaka 因子"）对 iPS 细胞进行了重编程。在随后的几十年中，其他研究小组使用病毒或 mRNA 对细胞进行重编程。但这种仅使用化学物质的方法脱颖而出，因为它在体外使用简单，而且化学混合物可以通过静脉注射输送到体内——不需要基因编辑。该方法提供了一种相对简单的工具来生成可用于再生医学的人类多能干细胞。\r\n\r\n### 4. 植物更容易设计\r\n\r\n我们生活在人类世，这是人类历史上一个可怕的时刻，**人造材料的重量超过地球上所有的生物量**，而且重量每年都在继续增加一倍。    \r\n<p align="center">\r\n    <img src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-6.webp" alt><br>\r\n    <em>"Global human-made mass exceeds all living biomass," by Elhacham E et al. in Nature. <a href="https://www.nature.com/articles/s41586-020-3010-5">Link</a></em>\r\n</p>\r\n\r\n在我们现有的生物质中，据估计有 83% 由植物持有。如果我们想要走出这场行星垃圾场的困境，那么，那么我们可能不得不对植物进行工程改造：让它们捕获更多的碳，[增强它们的光合作用](https://cell.substack.com/p/hacking-photosynthesis)，种植生产更多的食物，等等！\r\n\r\n幸运的是，做到这一点从未如此简单。几十年来，合成生物学家已经对细菌和哺乳动物细胞进行了改造，使其具有越来越复杂的遗传回路，即使植物在很大程度上被忽视了。今年，两项重要进展改变了平衡。\r\n\r\n先是基因编辑技术，如 CRISPR，现在已经过优化，可以在植物中更好地发挥作用。例如，Prime 编辑器是可以插入、删除或交换 DNA 的 "搜索和替换" 基因编辑器。与其他 Prime 编辑器相比，新的 Plant Prime Editor 在植物细胞中的效率提高了 [3.4 倍](https://www.nature.com/articles/s41587-022-01254-w)，并被用于在实验室中迅速使水稻植物对除草剂产生耐受性。\r\n\r\n但更大的进步是：斯坦福大学的一个团队发布了[一个完整的基因工具包](https://www.science.org/doi/10.1126/science.abo4326)，可以像我们对细菌进行编程一样对植物进行 "编程"。新工具包包括大量合成启动子和转录因子，可用于控制植物中的基因表达。这些遗传部分被用于构建能够在本塞姆氏烟草和拟南芥中进行布尔逻辑运算的基因回路。作者还建立了逻辑门，可以控制植物根部的基因表达水平，从而控制它们的侧向密度。\r\n\r\n<p align="center">\r\n    <img src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-7.jpeg" alt><br>\r\n    <em>A genetic circuit controls how many lateral roots shoot out from a plant’s roots. Lateral density increases from left to right, with a wildtype plant shown on the far right. From <a href="https://www.biorxiv.org/content/10.1101/2022.02.02.478917v1">Brophy et al. on bioRxiv</a>.</em>\r\n</p>\r\n\r\n### 3. 走向负碳\r\n\r\n生物学的一个众所周知的困难部分是难以扩展（进行大规模的研究）。在试管中改造一个能将糖转化为抗癌药物的细胞是一回事，但在一个千升生物反应器中做同样的事却是完全不同的挑战。\r\n\r\n这就是像 [LanzaTech](https://lanzatech.com/) 这样的公司令人兴奋的原因。他们实际上已经在工业工厂扩大了生物学规模。他们有试点设施，将工厂的废碳回收成燃料和化学品。这些工厂每年可以生产数千亿加仑的燃料，并且已经达到相当于每年减少数千辆汽车上路的排放量。\r\n\r\n几个月前，来自 LanzaTech 和西北大学的科学家们达到了[另一个里程碑](https://www.nature.com/articles/s41587-021-01195-w)：使用一种名为 Clostridium autoethanogenum 的工程自养生物，他们在具有负碳足迹的过程中以工业规模生产丙酮和异丙醇。 "与导致温室气体释放的传统生产过程不同，我们的过程可以固定碳，" 他们在发表的论文中写道。这是大规模生物学向前迈出的一大步。经过改造的微生物可以在不拖累大气的情况下改善污染物并产生化学物质。\r\n\r\n### 2. 异种移植成为现实\r\n\r\n这将作为 "异种移植年" 载入人类史册。异种移植的历史可以追溯到 20 世纪 60 年代中期——法国外科医生勒内·库斯 (Renè Kuss) 将猪肾移植到人体中，结果很快被患者的身体排斥——异种移植一直是一个失败的领域。最著名的例子可能是 80 年代 Stephanie Beauclair 或 Baby Fae 的手术，她从狒狒那里接受了一颗心脏，但不久后就去世了。\r\n\r\n不过，在过去四十年里，我们在从猪身上提取心脏并将其植入人体方面做得更好，因为基因编辑技术正在改进。现在比以往任何时候都更容易在猪的细胞中找到所有导致我们的身体排斥该器官的有害蛋白质，并从基因组中[系统地消除](https://www.science.org/doi/10.1126/science.aad1191)这些蛋白质编码基因。但进步从来都不是没有陷阱的。\r\n\r\n今年 1 月 7 日，马里兰大学的一组外科医生将[一颗猪的心脏移植](https://www.technologyreview.com/2022/01/11/1043374/gene-edited-pigs-heart-transplant/)到 57 岁的老大卫贝内特体内，[两个月后](https://www.technologyreview.com/2022/05/04/1051725/xenotransplant-patient-died-received-heart-infected-with-pig-virus/)他去世了。\r\n\r\n5 月，两只猪的肾脏被移植到脑死亡患者体内，并进行了 54 小时的监测，这让沮丧过后变得乐观起来。两个肾脏都产生了尿液，活组织检查没有显示出任何器官排斥的迹象。\r\n\r\n心脏移植可能因为器官感染了猪病毒而失败，但肾移植研究的作者没有检测到这种病毒。猪肾可能很快就会进入人们的生活。\r\n\r\n### 1. 我们离终结疟疾从未如此近\r\n\r\n如果您相信约翰·惠特菲尔德 (John Whitfield) 2002 年在《[自然](https://www.nature.com/articles/news021001-6)》杂志发表的这篇文章（该说法未被引用），"疟疾已经杀死了所有曾经生活过的人的一半"。即使该说法是错误的，在整个人类历史上，蚊子也已经集体杀死了数十亿人。昆虫混蛋干掉了亚历山大大帝、哥特人阿拉里克和但丁。而且，在 2021 年，疟疾仍导致约 620,000 人死亡。这是令人震惊、悲伤和可以预防的。但今年是取得惊人进步的一年。\r\n\r\n一种称为 R21/Matrix-M 的疟疾疫苗在四个非洲国家进行了 III 期试验。它在幼儿中的总体疗效为 [75%](https://www.medpagetoday.com/meetingcoverage/astmh/101561)。这是个好消息。在马里进行的一项 II 期试验还测试了一种名为 CIS43LS 的抗体，用于对抗健康成人中的恶性疟原虫感染。在六个月的时间里，单次注射的疗效为 [88.2%](https://www.nejm.org/doi/full/10.1056/NEJMoa2206966)。\r\n\r\n不过，唯一能有效预防疟疾 90% 以上的免疫原是子孢子，这是一种在蚊子生命周期中形成的类孢子部分。这些子孢子被注射到手臂中并[用作疫苗](https://www.science.org/doi/10.1126/scitranslmed.abj3776)，但显然很难从真正的蚊子身上收集到这些东西。\r\n\r\n本月早些时候，研究人员在实验室中创造了 "[数亿](https://www.nature.com/articles/s41586-022-05466-7)" 子孢子，而不需要蚊子。他们基本上重新创建了整个"疟原虫从传染性配子体到传染性配子体的全部生命周期，而不需要蚊子。" 这项新技术将有助于更快、更便宜地研制出抗疟疾疫苗。\r\n\r\n<p align="center">\r\n    <img src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-8.webp" alt><br>\r\n</p>', 'bodyText': '作者 | Niko McCarty\n翻译 | 章鱼猫先生\n日期 | 原文发表于 2022.12.10\n来源 | Biology Breakthroughs of 2022 - Codon\n\n\n您正在阅读 Codon，这是一份关于生物 + 技术进步和为人类创造更光明未来的想法的时事通讯。\n这是今年的最后一部作品。几周后我会在这里见到你！\n\n\n\n    \n    大约 1950 年代，戴着加压氧气面罩的男子\n\n\n"当你经历历史时，历史永远不会像历史。它总是看起来很混乱和凌乱，而且总是让人感觉不舒服。"\n—— 约翰·W·加德纳\n\n许多我非常敬佩的作家都对“进步的停滞”写出了令人信服的论战。科学越来越难，发现越来越小（平均而言），这两件事都很糟糕。\n如果你召集来自世界顶级院系的 93 位物理学家，让他们将 1910 年代获得诺贝尔奖的发现与 80 年代的另一个发现进行比较，他们通常会说更早的发现更重要。\n与五十年前相比，今天实现技术飞跃也更加困难。将计算机芯片上的晶体管数量增加一倍（又名摩尔定律）需要的研究人员数量是 1970 年代初期的 18 倍。今天发表的学术论文被美国专利引用的可能性不到 30 年前发表的论文的一半。\n这些不断缩减的回报正处于历史高位之中。\n美国每年授予超过 50,000 个科学和工程博士学位；这个数字在 1960 年还不到 10,000。联邦对科学的资助也（基本上）处于历史最高水平。科学论文的总数呈指数级增长，但每篇论文的平均作者人数在过去一百年里大约翻了两番。\n\n    \n    From "The Science of Science" by Wang and Barabási.\n\n出于某种原因，这些都是生物学进步的不完美指标。但是有很多零散的证据表明，科学正在变得越来越不划算，即使感觉进步从未像现在这样快。我相信——基于轶事证据，真的——如果以每年获得诺贝尔奖的发现为基准，生物技术不会停滞不前。只是诺贝尔奖每年都会颁发一次，而且不乏令人惊叹的论文在排队等待获得最高奖项。所以，当然，并不是每个有价值的人都会赢。\n哦，如果你拿我之前提到的物理学调查结果，对医学和化学做同样的实验，结果就会颠倒过来——20 世纪下半叶发现的相对重要性超过了上半叶。\n不管停滞与否，生物学都存在巨大的低效率。它可以——应该！- 移动得更快。\n许多论文需要一年多的时间才能发表，在期刊官僚的严密监视下，被搁置在数字化的边缘。漫长的等待可能也不值得——同行评审通常是无用的，而且很多糟糕的科学无论如何都能通过。许多伟大的想法也从来没有发表在论文上，因为，好吧，他们从来没有得到资助。NIH 拨款审查非常不一致。如果您向 43 位不同的审稿人提供 25 份拨款建议，他们的评定者间可靠性（衡量分数一致性的指标）基本上为零，即使拨款已经获得资金和先前评审小组的高分！给予相同审稿人的无资金资助与有资金资助的资助得分一样。\n那么生物学文献呢？那也是一团糟。山姆·罗德里克斯 (Sam Rodriques) 在最近的一篇文章中写道，科学论文“因委托而变得不可靠”，并且“因遗漏而变得不可靠”。换句话说，一些研究（一小部分）只是编造的。教授或学生为了发表论文而捏造数字，如果有人说他们在胡说八道，编辑可能要过好几年才会撤稿。\n不过，更大的问题可能是疏忽。科学期刊喜欢发表积极的结果，所以大多数消极的发现永远不会出现在光鲜的期刊上。如果有人进行的实验表明药物 A 与受体 B 结合，他们会发表它——但忽略提及药物 A 不会通过 Z 与受体 C 结合。无效结果很少传给科学家，他们中的许多人已经几个月来一次又一次尝试实验的痛苦经历，后来才发现 1970 年代的一篇不起眼的论文使他们所有的努力都变得毫无意义。\n我告诉你这些悲伤的事情——停滞不前的科学和可怕的低效率的故事——是为了说明一个观点：生物学在去年取得了如此大的进步，真是令人惊讶。生物学的进步证明了人类渴望探索、失败，然后继续前进的愿望。这份时事通讯庆祝人类的成就，并重点介绍了过去 12 个月生物学领域的十大进步。\n此列表中的所有内容均来自 Codon 的上一期，因此希望您能在评论中指出我的错误和遗漏。我的入选标准很简单：该列表仅包括 2022 年期间发布到 bioRxiv 或发表在期刊上的论文。我不包括公司成就——这实际上可能是它自己的列表——除非他们发布了数据。(入选)列表中的一些项目包括了多篇论文，因为整个子领域发展得非常快。\n汇总“十佳排名”最大的危险是完全主观的，有很多优秀的东西没有入选，而且很多其他作家已经做到了(虽然我还没有看到专门针对生物学的清单)。诺亚·史密斯 (Noah Smith) 发布了他 2023 年的技术乐观主义清单 (techno-optimism list)，其中包括对生物技术的简要提及，而《大西洋月刊》(The Atlantic) 发表了他们的 "年度突破 (breakthroughs of the year)"，然后立即将该文章设置为付费文章。\n然而，有必要专门为生物学列出一份完整的榜单，因为很多伟大的事情在人工智能的阴影下被忽略了。人类基因组计划（始于 1990 年）终于在今年完成了，一个庞大的科学家团队填补了最后 8% 的序列空白。科学家们还使用 mirror-image DNA 聚合酶制作了镜像 DNA (mirror-image DNA)，并发现了一类新的 CRISPR 蛋白质，它们可以剪切蛋白质而不是基因。机器学习正在蛋白质工程中掀起波澜，例如有一种基于算法被设计出来的酶，这种酶可以比自然界中发现的任何酶更快地分解 PET 塑料。\n我不确定今年的进展是否与生物进展是否整体停滞不前有关。但有一件事是不变的：生物学变得越来越奇怪，而我会一直关注它。\n10. 走向合成细胞\n从纯化学成分构建合成细胞是生物学的圣杯。如果实现了这一壮举，将证明我们已足够详细地理解生命运作的大体轮廓，并有足够的细节可以在实验室中重现它。这也将成为定制细胞的起点，这些细胞可以检测有毒污染或制造药物，同时又不会成为生物安全风险或存在感染风险。\n今年有几篇论文推动了合成细胞的发展，但其中有两篇让人印象深刻。第一篇是在 bioRxiv 上发表的预印本，据称是首次证明核糖体（大分子蛋白质，负责合成其他蛋白质）可以在活细胞之外制造。这是在合成细胞内从头生产蛋白质的重要起点。\n我们还在合成细胞分裂方面取得了重要进展。一项研究报告说，仅使用五种蛋白质就可以在脂肪泡中制造合成分裂环！当这些蛋白质聚集在一起时，它们会收缩并向气泡施加力（下面的 GIF）。\n\n    \n    合成分裂环在气泡内形成的延时摄影\n\n9. 更好的碱基编辑器\n早在 2016 年，《自然》杂志的一篇论文就报道了第一个碱基编辑蛋白，它可以将 DNA 中的 "C" 替换为 "T"，而无需将基因组一分为二。它的重要性立即显而易见——许多严重的遗传疾病是由 DNA 中的单个碱基交换引起的，现在这些突变可以被修复。\n碱基编辑器已经成熟。这些基因编辑蛋白在发明后仅仅五年就以创纪录的速度进入临床试验，目前 Verve、Beam 和其他公司正在进行针对镰状细胞病、高胆固醇和 Stargardt 病的试验。\n然而，碱基编辑的主要挑战之一是编辑线粒体基因组很棘手，许多遗传疾病都源于此。早在 2020 年，一篇论文就表明碱基编辑器可以成功进入线粒体并使 "C" 变为 "T"，但其前景并不乐观。今年 5 月，一篇后续论文称，实际上，这些线粒体基因编辑器诱发了 "大量" 脱靶突变，这意味着它们编辑的位置比预期的要多，弊大于利。\n但创新不会因失败而受阻。仅今年一年就至少发表了三篇论文，使线粒体碱基编辑器变得更小或更准确。让碱基编辑酶进入线粒体或编辑其 DNA 从未如此简单。我相信我们很快就会看到一些针对线粒体相关疾病的临床试验。\n8. 噬菌体传播病毒\n今年对噬菌体来说是个好年头。这真的很合适，因为它也是 Felix d\'Herelle 著名实验 100 周年纪念日。1922 年，这位巴黎微生物学家证明噬菌体（感染细菌的小病毒）可以根除兔子和小动物体内的 "痢疾杆菌和其他杆菌"。\n我们现在正经历着临床疗法的准复兴时期，噬菌体经常被用来消除抗生素无效的感染（尤其是在欧洲医院）。几周前，一个欧洲科学家团队使用实验性噬菌体疗法挽救了一名幼儿的生命。器官移植后，这个小男孩感染了抗生素无法清除的耐药性感染。在用定制的噬菌体鸡尾酒 (a custom-made phage cocktail) 治疗两年多后，孩子在家中恢复了健康。\n5 月，丹佛的一个团队使用噬菌体治疗一名患有严重囊性纤维化的男孩的脓肿分枝杆菌感染。噬菌体将感染控制了一年多，直到获得供体肺。我相信我们会在 2023 年看到定制噬菌体疗法进入临床。\n\n    \n\n7. 血友病基因疗法\nHemgenix 是一种治疗 B 型血友病的基因疗法，几个月前获得了 FDA 的批准。它的价格达到了 350 万美元，使其成为有史以来最昂贵的药物（这并不好）。根据 III 期临床试验数据，它在患者的是安全有效期至少两年。\n血友病 A 的基因治疗进展缓慢，该病由一种名为 VIII 的不同凝血蛋白突变引起。5 月的一项研究表明，针对肝脏的基因疗法在非人类灵长类动物中效果很好，可以导致 "总凝血因子 VIII 输出增加 10 倍以上"。3 月份发表的一项有 134 名参与者参与的 I/II 期临床试验表明，使用腺相关病毒进行的基因疗法，也用于肝脏，可减少血友病患者的出血事件。但是，它带来了很多副作用；每个试验参与者至少有一次不良事件。尽管如此，血友病仍是基因治疗的 "低悬" 目标之一，这些试验是其他正在进行中的目标的有用酸性测试。\n6. 合成胚胎\n今年，从老鼠身上采集的干细胞被用来制造 "类胚胎结构"，其中包含工作的肠道、跳动的心脏和头脑的雏形，而不需要精子或卵子。\n以色列的 Jacob Hanna 团队发表了一篇最初的论文，于 8 月在 Cell 上发表。据《卫报》报道，这些作者后来成立了一家名为 Renewal Bio 的公司，"旨在培养人类合成胚胎，为医疗条件提供组织和细胞"。剑桥大学和加州理工学院的一个团队也在 8 月 2 日发布了一份预印本，表明这些 "合成胚胎"准确地概括了 "从胚胎第 5.5 天到第 8.5 天的发育事件，包括原肠胚形成、前后轴的形成、大脑，跳动的心脏结构，以及胚胎外组织（包括卵黄囊和绒毛膜）的发育。"\n合成胚胎——正确形成的概率只有 0.5% 左右——有几个潜在的用途。例如，这些结构可以用于研究器官在发育过程中的形成，也可用于在不使用真实胚胎的情况下测试药物。\n\n    \n    Embryoids after six days. From Kasey Lau et al. on bioRxiv. Link\n\n5. 细胞重编程\n今年的一大亮点：首次证明仅靠化学物质就能将人体细胞重新编程为干细胞。这一突破需要十多年的时间，并需使用 11 种不同的化学物质，以及一到两个月的工作时间，所以仍需要一些微调。早在 2013 年，同一个小组就已使用这种方法实现了小鼠细胞的转化，但人类细胞的转化过程要困难得多。\n这也不是第一项重新编程人类细胞的研究。这一荣誉属于山中伸弥 (Shinya Yamanaka)，他在 2006 年通过表达四种蛋白质（现在著名的 "Yamanaka 因子"）对 iPS 细胞进行了重编程。在随后的几十年中，其他研究小组使用病毒或 mRNA 对细胞进行重编程。但这种仅使用化学物质的方法脱颖而出，因为它在体外使用简单，而且化学混合物可以通过静脉注射输送到体内——不需要基因编辑。该方法提供了一种相对简单的工具来生成可用于再生医学的人类多能干细胞。\n4. 植物更容易设计\n我们生活在人类世，这是人类历史上一个可怕的时刻，人造材料的重量超过地球上所有的生物量，而且重量每年都在继续增加一倍。\n\n    \n    "Global human-made mass exceeds all living biomass," by Elhacham E et al. in Nature. Link\n\n在我们现有的生物质中，据估计有 83% 由植物持有。如果我们想要走出这场行星垃圾场的困境，那么，那么我们可能不得不对植物进行工程改造：让它们捕获更多的碳，增强它们的光合作用，种植生产更多的食物，等等！\n幸运的是，做到这一点从未如此简单。几十年来，合成生物学家已经对细菌和哺乳动物细胞进行了改造，使其具有越来越复杂的遗传回路，即使植物在很大程度上被忽视了。今年，两项重要进展改变了平衡。\n先是基因编辑技术，如 CRISPR，现在已经过优化，可以在植物中更好地发挥作用。例如，Prime 编辑器是可以插入、删除或交换 DNA 的 "搜索和替换" 基因编辑器。与其他 Prime 编辑器相比，新的 Plant Prime Editor 在植物细胞中的效率提高了 3.4 倍，并被用于在实验室中迅速使水稻植物对除草剂产生耐受性。\n但更大的进步是：斯坦福大学的一个团队发布了一个完整的基因工具包，可以像我们对细菌进行编程一样对植物进行 "编程"。新工具包包括大量合成启动子和转录因子，可用于控制植物中的基因表达。这些遗传部分被用于构建能够在本塞姆氏烟草和拟南芥中进行布尔逻辑运算的基因回路。作者还建立了逻辑门，可以控制植物根部的基因表达水平，从而控制它们的侧向密度。\n\n    \n    A genetic circuit controls how many lateral roots shoot out from a plant’s roots. Lateral density increases from left to right, with a wildtype plant shown on the far right. From Brophy et al. on bioRxiv.\n\n3. 走向负碳\n生物学的一个众所周知的困难部分是难以扩展（进行大规模的研究）。在试管中改造一个能将糖转化为抗癌药物的细胞是一回事，但在一个千升生物反应器中做同样的事却是完全不同的挑战。\n这就是像 LanzaTech 这样的公司令人兴奋的原因。他们实际上已经在工业工厂扩大了生物学规模。他们有试点设施，将工厂的废碳回收成燃料和化学品。这些工厂每年可以生产数千亿加仑的燃料，并且已经达到相当于每年减少数千辆汽车上路的排放量。\n几个月前，来自 LanzaTech 和西北大学的科学家们达到了另一个里程碑：使用一种名为 Clostridium autoethanogenum 的工程自养生物，他们在具有负碳足迹的过程中以工业规模生产丙酮和异丙醇。 "与导致温室气体释放的传统生产过程不同，我们的过程可以固定碳，" 他们在发表的论文中写道。这是大规模生物学向前迈出的一大步。经过改造的微生物可以在不拖累大气的情况下改善污染物并产生化学物质。\n2. 异种移植成为现实\n这将作为 "异种移植年" 载入人类史册。异种移植的历史可以追溯到 20 世纪 60 年代中期——法国外科医生勒内·库斯 (Renè Kuss) 将猪肾移植到人体中，结果很快被患者的身体排斥——异种移植一直是一个失败的领域。最著名的例子可能是 80 年代 Stephanie Beauclair 或 Baby Fae 的手术，她从狒狒那里接受了一颗心脏，但不久后就去世了。\n不过，在过去四十年里，我们在从猪身上提取心脏并将其植入人体方面做得更好，因为基因编辑技术正在改进。现在比以往任何时候都更容易在猪的细胞中找到所有导致我们的身体排斥该器官的有害蛋白质，并从基因组中系统地消除这些蛋白质编码基因。但进步从来都不是没有陷阱的。\n今年 1 月 7 日，马里兰大学的一组外科医生将一颗猪的心脏移植到 57 岁的老大卫贝内特体内，两个月后他去世了。\n5 月，两只猪的肾脏被移植到脑死亡患者体内，并进行了 54 小时的监测，这让沮丧过后变得乐观起来。两个肾脏都产生了尿液，活组织检查没有显示出任何器官排斥的迹象。\n心脏移植可能因为器官感染了猪病毒而失败，但肾移植研究的作者没有检测到这种病毒。猪肾可能很快就会进入人们的生活。\n1. 我们离终结疟疾从未如此近\n如果您相信约翰·惠特菲尔德 (John Whitfield) 2002 年在《自然》杂志发表的这篇文章（该说法未被引用），"疟疾已经杀死了所有曾经生活过的人的一半"。即使该说法是错误的，在整个人类历史上，蚊子也已经集体杀死了数十亿人。昆虫混蛋干掉了亚历山大大帝、哥特人阿拉里克和但丁。而且，在 2021 年，疟疾仍导致约 620,000 人死亡。这是令人震惊、悲伤和可以预防的。但今年是取得惊人进步的一年。\n一种称为 R21/Matrix-M 的疟疾疫苗在四个非洲国家进行了 III 期试验。它在幼儿中的总体疗效为 75%。这是个好消息。在马里进行的一项 II 期试验还测试了一种名为 CIS43LS 的抗体，用于对抗健康成人中的恶性疟原虫感染。在六个月的时间里，单次注射的疗效为 88.2%。\n不过，唯一能有效预防疟疾 90% 以上的免疫原是子孢子，这是一种在蚊子生命周期中形成的类孢子部分。这些子孢子被注射到手臂中并用作疫苗，但显然很难从真正的蚊子身上收集到这些东西。\n本月早些时候，研究人员在实验室中创造了 "数亿" 子孢子，而不需要蚊子。他们基本上重新创建了整个"疟原虫从传染性配子体到传染性配子体的全部生命周期，而不需要蚊子。" 这项新技术将有助于更快、更便宜地研制出抗疟疾疫苗。', 'bodyHTML': '<blockquote>\n<p dir="auto"><strong>作者 |</strong> <a href="https://substack.com/profile/11154869-niko-mccarty" rel="nofollow">Niko McCarty</a><br>\n<strong>翻译 |</strong> <a href="https://www.yuque.com/shenweiyan" rel="nofollow">章鱼猫先生</a><br>\n<strong>日期 |</strong> 原文发表于 2022.12.10<br>\n<strong>来源 |</strong> <a href="https://cell.substack.com/p/biology-breakthroughs-2022" rel="nofollow">Biology Breakthroughs of 2022</a> - Codon</p>\n</blockquote>\n<blockquote>\n<p dir="auto">您正在阅读 Codon，这是一份关于生物 + 技术进步和为人类创造更光明未来的想法的时事通讯。<br>\n这是今年的最后一部作品。几周后我会在这里见到你！</p>\n</blockquote>\n\n<p align="center" dir="auto">\n    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/63725aae9be5aea67e7537bef60bcd8f6e5e22d0b958d888b7e15f9f529544ef/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d312e77656270"><img src="https://camo.githubusercontent.com/63725aae9be5aea67e7537bef60bcd8f6e5e22d0b958d888b7e15f9f529544ef/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d312e77656270" alt="" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-1.webp" style="max-width: 100%;"></a><br>\n    <em>大约 1950 年代，戴着加压氧气面罩的男子</em>\n</p>\n<blockquote>\n<p dir="auto">"当你经历历史时，历史永远不会像历史。它总是看起来很混乱和凌乱，而且总是让人感觉不舒服。"<br>\n—— 约翰·W·加德纳</p>\n</blockquote>\n<p dir="auto">许多我非常敬佩的作家都对“进步的停滞”写出了令人信服的论战。科学越来越难，发现越来越小（平均而言），这两件事都很糟糕。</p>\n<p dir="auto">如果你召集来自世界顶级院系的 93 位物理学家，让他们将 1910 年代获得诺贝尔奖的发现与 80 年代的另一个发现进行比较，他们通常会说更早的发现更重要。</p>\n<p dir="auto">与五十年前相比，今天实现技术飞跃也更加困难。将计算机芯片上的晶体管数量增加一倍（又名摩尔定律）需要的研究人员数量是 1970 年代初期的 <a href="https://www.aeaweb.org/articles?id=10.1257/aer.20180338" rel="nofollow">18 倍</a>。今天发表的学术论文被美国专利引用的可能性不到 30 年前发表的论文的<a href="https://mattsclancy.substack.com/p/science-is-getting-harder" rel="nofollow">一半</a>。</p>\n<p dir="auto">这些不断缩减的回报正处于历史高位之中。</p>\n<p dir="auto">美国每年授予超过 50,000 个科学和工程博士学位；这个数字在 1960 年还不到 10,000。联邦对科学的资助也（基本上）处于历史最高水平。科学论文的总数呈指数级增长，但每篇论文的平均作者人数在过去一百年里大约翻了两番。</p>\n<p align="center" dir="auto">\n    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/e82cb79526651b5cdf693f638ac31cba3e5a806d6cb8597b30d7424b83b5971a/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d322e6a706567"><img src="https://camo.githubusercontent.com/e82cb79526651b5cdf693f638ac31cba3e5a806d6cb8597b30d7424b83b5971a/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d322e6a706567" alt="" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-2.jpeg" style="max-width: 100%;"></a><br>\n    <em>From "The Science of Science" by <a href="https://www.dashunwang.com/book/the-science-of-science" rel="nofollow">Wang and Barabási</a>.</em>\n</p>\n<p dir="auto">出于某种原因，这些都是生物学进步的不完美指标。但是有很多零散的证据表明，科学正在变得越来越不划算，即使感觉进步从未像现在这样快。我相信——基于轶事证据，真的——如果以每年获得诺贝尔奖的发现为基准，生物技术不会停滞不前。只是诺贝尔奖每年都会颁发一次，而且不乏令人惊叹的论文在排队等待获得最高奖项。所以，当然，并不是每个有价值的人都会赢。</p>\n<p dir="auto">哦，如果你拿我之前提到的物理学调查结果，对医学和化学做同样的实验，结果就会颠倒过来——20 世纪下半叶发现的相对重要性超过了上半叶。</p>\n<p dir="auto">不管停滞与否，生物学都存在巨大的低效率。它可以——应该！- 移动得更快。</p>\n<p dir="auto">许多论文需要一年多的时间才能发表，在期刊官僚的严密监视下，被搁置在数字化的边缘。漫长的等待可能也不值得——同行评审通常是无用的，而且很多糟糕的科学无论如何都能通过。许多伟大的想法也从来没有发表在论文上，因为，好吧，他们从来没有得到资助。NIH 拨款审查非常不一致。如果您向 43 位不同的审稿人提供 25 份拨款建议，他们的评定者间可靠性（衡量分数一致性的指标）基本上为零，即使拨款已经获得资金和先前评审小组的高分！给予相同审稿人的无资金资助与有资金资助的资助得分一样。</p>\n<p dir="auto">那么生物学文献呢？那也是一团糟。山姆·罗德里克斯 (<a href="https://www.sam-rodriques.com/post/why-is-progress-in-biology-so-slow" rel="nofollow">Sam Rodriques</a>) 在最近的一篇文章中写道，科学论文“因委托而变得不可靠”，并且“因遗漏而变得不可靠”。换句话说，一些研究（一小部分）只是编造的。教授或学生为了发表论文而捏造数字，如果有人说他们在胡说八道，编辑可能要过<a href="https://newscience.substack.com/p/laws-of-science" rel="nofollow">好几年</a>才会撤稿。</p>\n<p dir="auto">不过，更大的问题可能是疏忽。科学期刊喜欢发表积极的结果，所以大多数消极的发现永远不会出现在光鲜的期刊上。如果有人进行的实验表明药物 A 与受体 B 结合，他们会发表它——但忽略提及药物 A 不会通过 Z 与受体 C 结合。无效结果很少传给科学家，他们中的许多人已经几个月来一次又一次尝试实验的痛苦经历，后来才发现 1970 年代的一篇不起眼的论文使他们所有的努力都变得毫无意义。</p>\n<p dir="auto">我告诉你这些悲伤的事情——停滞不前的科学和可怕的低效率的故事——是为了说明一个观点：<strong>生物学在去年取得了如此大的进步，真是令人惊讶</strong>。生物学的进步证明了人类渴望探索、失败，然后继续前进的愿望。这份时事通讯庆祝人类的成就，并重点介绍了过去 12 个月<strong>生物学领域的十大进步</strong>。</p>\n<p dir="auto">此列表中的所有内容均来自 Codon 的上一期，因此希望您能在评论中指出我的错误和遗漏。我的入选标准很简单：该列表仅包括 2022 年期间发布到 bioRxiv 或发表在期刊上的论文。我不包括公司成就——这实际上可能是它自己的列表——除非他们发布了数据。(入选)列表中的一些项目包括了多篇论文，因为整个子领域发展得非常快。</p>\n<p dir="auto">汇总“十佳排名”最大的危险是完全主观的，有很多优秀的东西没有入选，而且很多其他作家已经做到了(虽然我还没有看到专门针对生物学的清单)。诺亚·史密斯 (Noah Smith) 发布了他 2023 年的技术乐观主义清单 (<a href="https://noahpinion.substack.com/p/techno-optimism-for-2023" rel="nofollow">techno-optimism list</a>)，其中包括对生物技术的简要提及，而《大西洋月刊》(The Atlantic) 发表了他们的 "年度突破 (<a href="https://www.theatlantic.com/newsletters/archive/2022/12/technology-medicine-law-ai-10-breakthroughs-2022/672390/" rel="nofollow">breakthroughs of the year</a>)"，然后立即将该文章设置为付费文章。</p>\n<p dir="auto">然而，有必要专门为生物学列出一份完整的榜单，因为很多伟大的事情在人工智能的阴影下被忽略了。人类基因组计划（始于 1990 年）终于在<a href="https://www.science.org/toc/science/376/6588" rel="nofollow">今年完成了</a>，一个庞大的科学家团队填补了最后 8% 的序列空白。科学家们还使用 mirror-image DNA 聚合酶制作了镜像 DNA (<a href="https://www.nature.com/articles/s41587-022-01337-8" rel="nofollow">mirror-image DNA</a>)，并发现了一类新的 CRISPR 蛋白质，它们可以<a href="https://cell.substack.com/p/crispr-can-cut-proteins-too-index" rel="nofollow">剪切蛋白质</a>而不是基因。机器学习正在蛋白质工程中掀起波澜，例如有一种基于算法被设计出来的酶，这种酶可以比自然界中发现的任何酶更快地<a href="https://cell.substack.com/p/ai-designed-enzyme-eats-plastic" rel="nofollow">分解 PET 塑料</a>。</p>\n<p dir="auto">我不确定今年的进展是否与生物进展是否整体停滞不前有关。但有一件事是不变的：生物学变得越来越奇怪，而我会一直关注它。</p>\n<h3 dir="auto">10. 走向合成细胞</h3>\n<p dir="auto">从纯化学成分构建合成细胞是生物学的圣杯。如果实现了这一壮举，将证明我们已足够详细地理解生命运作的大体轮廓，并有足够的细节可以在实验室中重现它。这也将成为定制细胞的起点，这些细胞可以检测有毒污染或制造药物，同时又不会成为生物安全风险或存在感染风险。</p>\n<p dir="auto">今年有几篇论文推动了合成细胞的发展，但其中有两篇让人印象深刻。第一篇是在 bioRxiv 上发表的预印本，据称是<strong>首次证明核糖体</strong>（大分子蛋白质，负责合成其他蛋白质）<strong>可以在活细胞之外制造</strong>。这是在合成细胞内从头生产蛋白质的重要起点。</p>\n<p dir="auto">我们还在合成细胞分裂方面取得了重要进展。一项研究报告说，仅使用五种蛋白质就可以在脂肪泡中制造合成分裂环！当这些蛋白质聚集在一起时，它们会收缩并向气泡施加力（下面的 GIF）。</p>\n<p align="center" dir="auto">\n    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/0bc8a0a2f6f6161addfd43549d8aeed05900fbd92164a18ac243f641eb75cb72/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d332e77656270"><img src="https://camo.githubusercontent.com/0bc8a0a2f6f6161addfd43549d8aeed05900fbd92164a18ac243f641eb75cb72/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d332e77656270" alt="" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-3.webp" style="max-width: 100%;"></a><br>\n    <em>合成分裂环在气泡内形成的延时摄影</em>\n</p>\n<h3 dir="auto">9. 更好的碱基编辑器</h3>\n<p dir="auto">早在 2016 年，《自然》杂志的一篇论文就报道了第一个碱基编辑蛋白，它可以将 DNA 中的 "C" 替换为 "T"，而无需将基因组一分为二。它的重要性立即显而易见——许多严重的遗传疾病是由 DNA 中的单个碱基交换引起的，现在这些突变可以被修复。</p>\n<p dir="auto">碱基编辑器已经成熟。这些基因编辑蛋白在发明后仅仅五年就以创纪录的速度进入临床试验，目前 Verve、Beam 和其他公司正在进行针对镰状细胞病、高胆固醇和 Stargardt 病的<a href="https://www.nature.com/articles/d41573-022-00124-z" rel="nofollow">试验</a>。</p>\n<p dir="auto">然而，碱基编辑的主要挑战之一是编辑线粒体基因组很棘手，<a href="https://www.chop.edu/conditions-diseases/mitochondrial-dna-common-mutation-syndromes" rel="nofollow">许多遗传疾病</a>都源于此。早在 2020 年，<a href="https://www.nature.com/articles/s41586-020-2477-4" rel="nofollow">一篇论文</a>就表明碱基编辑器可以成功进入线粒体并使 "C" 变为 "T"，但其前景并不乐观。今年 5 月，<a href="https://www.nature.com/articles/s41586-022-04836-5" rel="nofollow">一篇后续论文</a>称，实际上，这些线粒体基因编辑器诱发了 "大量" 脱靶突变，这意味着它们编辑的位置比预期的要多，弊大于利。</p>\n<p dir="auto">但创新不会因失败而受阻。仅今年一年就至少发表了<strong>三篇论文</strong>，使线粒体碱基编辑器变得<a href="https://www.nature.com/articles/s41467-022-34784-7" rel="nofollow">更小</a>或<a href="https://doi.org/10.1016/j.cell.2022.03.039" rel="nofollow">更准确</a>。让碱基编辑酶进入线粒体或编辑其 DNA 从未如此简单。我相信我们很快就会看到一些针对线粒体相关疾病的临床试验。</p>\n<h3 dir="auto">8. 噬菌体传播病毒</h3>\n<p dir="auto">今年对噬菌体来说是个好年头。这真的很合适，因为它也是 Felix d\'Herelle 著名实验 <strong>100 周年纪念日</strong>。1922 年，这位巴黎微生物学家证明噬菌体（感染细菌的小病毒）<a href="https://jamanetwork.com/journals/jamapediatrics/article-abstract/1173780" rel="nofollow">可以根除</a>兔子和小动物体内的 "痢疾杆菌和其他杆菌"。</p>\n<p dir="auto">我们现在正经历着临床疗法的准复兴时期，噬菌体经常被用来消除抗生素无效的感染（尤其是在欧洲医院）。几周前，一个欧洲科学家团队使用实验性噬菌体疗法<a href="https://www.nature.com/articles/s41467-022-33294-w" rel="nofollow">挽救了一名幼儿的生命</a>。器官移植后，这个小男孩感染了抗生素无法清除的耐药性感染。在用定制的噬菌体鸡尾酒 (a custom-made phage cocktail) 治疗两年多后，孩子在家中恢复了健康。</p>\n<p dir="auto">5 月，丹佛的一个团队使用噬菌体治疗一名患有严重囊性纤维化的男孩的脓肿分枝杆菌感染。噬菌体将感染控制了一年多，直到获得供体肺。我相信我们会在 2023 年看到定制噬菌体疗法进入临床。</p>\n<p align="center" dir="auto">\n    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/8d2423355758c445e13f5bd1c80c7af6440ecd482a7369cafaebf96d14255a86/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d342e706e67"><img src="https://camo.githubusercontent.com/8d2423355758c445e13f5bd1c80c7af6440ecd482a7369cafaebf96d14255a86/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d342e706e67" alt="" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-4.png" style="max-width: 100%;"></a><br>\n</p>\n<h3 dir="auto">7. 血友病基因疗法</h3>\n<p dir="auto"><a href="https://www.fda.gov/vaccines-blood-biologics/vaccines/hemgenix" rel="nofollow">Hemgenix</a> 是一种治疗 B 型血友病的基因疗法，几个月前获得了 FDA 的批准。它的价格达到了 350 万美元，使其成为有史以来最昂贵的药物（这并不好）。根据 III 期临床试验数据，它在患者的是安全有效期<a href="https://hemophilianewstoday.com/news/hemgenix-gene-therapy-benefits-sustained-2-years-phase-3-hope-b/" rel="nofollow">至少两年</a>。</p>\n<p dir="auto">血友病 A 的基因治疗进展缓慢，该病由一种名为 VIII 的不同凝血蛋白突变引起。5 月的一项研究表明，针对肝脏的基因疗法在非人类灵长类动物中效果很好，可以导致 "总凝血因子 VIII 输出增加 10 倍以上"。3 月份发表的一项有 134 名参与者参与的 I/II 期临床试验表明，使用腺相关病毒进行的基因疗法，也用于肝脏，可减少血友病患者的出血事件。但是，它带来了很多副作用；每个试验参与者至少有一次不良事件。尽管如此，血友病仍是基因治疗的 "低悬" 目标之一，这些试验是其他正在进行中的目标的有用酸性测试。</p>\n<h3 dir="auto">6. 合成胚胎</h3>\n<p dir="auto">今年，从老鼠身上采集的干细胞被用来制造 "类胚胎结构"，其中包含工作的肠道、跳动的心脏和头脑的雏形，而不需要精子或卵子。</p>\n<p dir="auto">以色列的 Jacob Hanna 团队发表了一篇最初的论文，于 8 月<a href="https://doi.org/10.1016/j.cell.2022.07.028" rel="nofollow">在 Cell 上发表</a>。据《卫报》报道，这些作者后来成立了一家名为 Renewal Bio 的<a href="https://www.theguardian.com/science/2022/aug/03/scientists-create-worlds-first-synthetic-embryos" rel="nofollow">公司</a>，"旨在培养人类合成胚胎，为医疗条件提供组织和细胞"。剑桥大学和加州理工学院的一个团队也在 8 月 2 日发布了一份<a href="https://doi.org/10.1101/2022.08.01.502371" rel="nofollow">预印本</a>，表明这些 "合成胚胎"准确地概括了 "从胚胎第 5.5 天到第 8.5 天的发育事件，包括原肠胚形成、前后轴的形成、大脑，跳动的心脏结构，以及胚胎外组织（包括卵黄囊和绒毛膜）的发育。"</p>\n<p dir="auto">合成胚胎——正确形成的概率只有 0.5% 左右——有几个潜在的用途。例如，这些结构可以用于研究器官在发育过程中的形成，也可用于在不使用真实胚胎的情况下测试药物。</p>\n<p align="center" dir="auto">\n    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/82b3f3801f6059a043d0b459730e1801d2147f762763da5a256bfdf845f26950/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d352e706e67"><img src="https://camo.githubusercontent.com/82b3f3801f6059a043d0b459730e1801d2147f762763da5a256bfdf845f26950/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d352e706e67" alt="" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-5.png" style="max-width: 100%;"></a><br>\n    <em>Embryoids after six days. From Kasey Lau et al. on bioRxiv. <a href="https://www.biorxiv.org/content/10.1101/2022.08.01.502371v1.full.pdf" rel="nofollow">Link</a></em>\n</p>\n<h3 dir="auto">5. 细胞重编程</h3>\n<p dir="auto">今年的一大亮点：首次证明仅靠化学物质就能将人体细胞<a href="https://www.nature.com/articles/s41586-022-04593-5" rel="nofollow">重新编程为干细胞</a>。这一突破需要十多年的时间，并需使用 11 种不同的化学物质，以及一到两个月的工作时间，所以仍需要一些微调。早在 2013 年，同一个小组就已使用这种方法实现了<a href="https://www.science.org/doi/10.1126/science.1239278" rel="nofollow">小鼠细胞</a>的转化，但人类细胞的转化过程要困难得多。</p>\n<p dir="auto">这也不是第一项重新编程人类细胞的研究。这一荣誉属于山中伸弥 (Shinya Yamanaka)，他在 2006 年通过表达四种蛋白质（现在著名的 "Yamanaka 因子"）对 iPS 细胞进行了重编程。在随后的几十年中，其他研究小组使用病毒或 mRNA 对细胞进行重编程。但这种仅使用化学物质的方法脱颖而出，因为它在体外使用简单，而且化学混合物可以通过静脉注射输送到体内——不需要基因编辑。该方法提供了一种相对简单的工具来生成可用于再生医学的人类多能干细胞。</p>\n<h3 dir="auto">4. 植物更容易设计</h3>\n<p dir="auto">我们生活在人类世，这是人类历史上一个可怕的时刻，<strong>人造材料的重量超过地球上所有的生物量</strong>，而且重量每年都在继续增加一倍。</p>\n<p align="center" dir="auto">\n    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/5bccec258027a907071c8993f4564681c4b6d2437572f3ffa6f1ff8eec0b7076/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d362e77656270"><img src="https://camo.githubusercontent.com/5bccec258027a907071c8993f4564681c4b6d2437572f3ffa6f1ff8eec0b7076/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d362e77656270" alt="" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-6.webp" style="max-width: 100%;"></a><br>\n    <em>"Global human-made mass exceeds all living biomass," by Elhacham E et al. in Nature. <a href="https://www.nature.com/articles/s41586-020-3010-5" rel="nofollow">Link</a></em>\n</p>\n<p dir="auto">在我们现有的生物质中，据估计有 83% 由植物持有。如果我们想要走出这场行星垃圾场的困境，那么，那么我们可能不得不对植物进行工程改造：让它们捕获更多的碳，<a href="https://cell.substack.com/p/hacking-photosynthesis" rel="nofollow">增强它们的光合作用</a>，种植生产更多的食物，等等！</p>\n<p dir="auto">幸运的是，做到这一点从未如此简单。几十年来，合成生物学家已经对细菌和哺乳动物细胞进行了改造，使其具有越来越复杂的遗传回路，即使植物在很大程度上被忽视了。今年，两项重要进展改变了平衡。</p>\n<p dir="auto">先是基因编辑技术，如 CRISPR，现在已经过优化，可以在植物中更好地发挥作用。例如，Prime 编辑器是可以插入、删除或交换 DNA 的 "搜索和替换" 基因编辑器。与其他 Prime 编辑器相比，新的 Plant Prime Editor 在植物细胞中的效率提高了 <a href="https://www.nature.com/articles/s41587-022-01254-w" rel="nofollow">3.4 倍</a>，并被用于在实验室中迅速使水稻植物对除草剂产生耐受性。</p>\n<p dir="auto">但更大的进步是：斯坦福大学的一个团队发布了<a href="https://www.science.org/doi/10.1126/science.abo4326" rel="nofollow">一个完整的基因工具包</a>，可以像我们对细菌进行编程一样对植物进行 "编程"。新工具包包括大量合成启动子和转录因子，可用于控制植物中的基因表达。这些遗传部分被用于构建能够在本塞姆氏烟草和拟南芥中进行布尔逻辑运算的基因回路。作者还建立了逻辑门，可以控制植物根部的基因表达水平，从而控制它们的侧向密度。</p>\n<p align="center" dir="auto">\n    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/d6bfee2e1babfc47e36f6c8d545a9346f15487918f7fe1503f023b3f03243d51/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d372e6a706567"><img src="https://camo.githubusercontent.com/d6bfee2e1babfc47e36f6c8d545a9346f15487918f7fe1503f023b3f03243d51/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d372e6a706567" alt="" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-7.jpeg" style="max-width: 100%;"></a><br>\n    <em>A genetic circuit controls how many lateral roots shoot out from a plant’s roots. Lateral density increases from left to right, with a wildtype plant shown on the far right. From <a href="https://www.biorxiv.org/content/10.1101/2022.02.02.478917v1" rel="nofollow">Brophy et al. on bioRxiv</a>.</em>\n</p>\n<h3 dir="auto">3. 走向负碳</h3>\n<p dir="auto">生物学的一个众所周知的困难部分是难以扩展（进行大规模的研究）。在试管中改造一个能将糖转化为抗癌药物的细胞是一回事，但在一个千升生物反应器中做同样的事却是完全不同的挑战。</p>\n<p dir="auto">这就是像 <a href="https://lanzatech.com/" rel="nofollow">LanzaTech</a> 这样的公司令人兴奋的原因。他们实际上已经在工业工厂扩大了生物学规模。他们有试点设施，将工厂的废碳回收成燃料和化学品。这些工厂每年可以生产数千亿加仑的燃料，并且已经达到相当于每年减少数千辆汽车上路的排放量。</p>\n<p dir="auto">几个月前，来自 LanzaTech 和西北大学的科学家们达到了<a href="https://www.nature.com/articles/s41587-021-01195-w" rel="nofollow">另一个里程碑</a>：使用一种名为 Clostridium autoethanogenum 的工程自养生物，他们在具有负碳足迹的过程中以工业规模生产丙酮和异丙醇。 "与导致温室气体释放的传统生产过程不同，我们的过程可以固定碳，" 他们在发表的论文中写道。这是大规模生物学向前迈出的一大步。经过改造的微生物可以在不拖累大气的情况下改善污染物并产生化学物质。</p>\n<h3 dir="auto">2. 异种移植成为现实</h3>\n<p dir="auto">这将作为 "异种移植年" 载入人类史册。异种移植的历史可以追溯到 20 世纪 60 年代中期——法国外科医生勒内·库斯 (Renè Kuss) 将猪肾移植到人体中，结果很快被患者的身体排斥——异种移植一直是一个失败的领域。最著名的例子可能是 80 年代 Stephanie Beauclair 或 Baby Fae 的手术，她从狒狒那里接受了一颗心脏，但不久后就去世了。</p>\n<p dir="auto">不过，在过去四十年里，我们在从猪身上提取心脏并将其植入人体方面做得更好，因为基因编辑技术正在改进。现在比以往任何时候都更容易在猪的细胞中找到所有导致我们的身体排斥该器官的有害蛋白质，并从基因组中<a href="https://www.science.org/doi/10.1126/science.aad1191" rel="nofollow">系统地消除</a>这些蛋白质编码基因。但进步从来都不是没有陷阱的。</p>\n<p dir="auto">今年 1 月 7 日，马里兰大学的一组外科医生将<a href="https://www.technologyreview.com/2022/01/11/1043374/gene-edited-pigs-heart-transplant/" rel="nofollow">一颗猪的心脏移植</a>到 57 岁的老大卫贝内特体内，<a href="https://www.technologyreview.com/2022/05/04/1051725/xenotransplant-patient-died-received-heart-infected-with-pig-virus/" rel="nofollow">两个月后</a>他去世了。</p>\n<p dir="auto">5 月，两只猪的肾脏被移植到脑死亡患者体内，并进行了 54 小时的监测，这让沮丧过后变得乐观起来。两个肾脏都产生了尿液，活组织检查没有显示出任何器官排斥的迹象。</p>\n<p dir="auto">心脏移植可能因为器官感染了猪病毒而失败，但肾移植研究的作者没有检测到这种病毒。猪肾可能很快就会进入人们的生活。</p>\n<h3 dir="auto">1. 我们离终结疟疾从未如此近</h3>\n<p dir="auto">如果您相信约翰·惠特菲尔德 (John Whitfield) 2002 年在《<a href="https://www.nature.com/articles/news021001-6" rel="nofollow">自然</a>》杂志发表的这篇文章（该说法未被引用），"疟疾已经杀死了所有曾经生活过的人的一半"。即使该说法是错误的，在整个人类历史上，蚊子也已经集体杀死了数十亿人。昆虫混蛋干掉了亚历山大大帝、哥特人阿拉里克和但丁。而且，在 2021 年，疟疾仍导致约 620,000 人死亡。这是令人震惊、悲伤和可以预防的。但今年是取得惊人进步的一年。</p>\n<p dir="auto">一种称为 R21/Matrix-M 的疟疾疫苗在四个非洲国家进行了 III 期试验。它在幼儿中的总体疗效为 <a href="https://www.medpagetoday.com/meetingcoverage/astmh/101561" rel="nofollow">75%</a>。这是个好消息。在马里进行的一项 II 期试验还测试了一种名为 CIS43LS 的抗体，用于对抗健康成人中的恶性疟原虫感染。在六个月的时间里，单次注射的疗效为 <a href="https://www.nejm.org/doi/full/10.1056/NEJMoa2206966" rel="nofollow">88.2%</a>。</p>\n<p dir="auto">不过，唯一能有效预防疟疾 90% 以上的免疫原是子孢子，这是一种在蚊子生命周期中形成的类孢子部分。这些子孢子被注射到手臂中并<a href="https://www.science.org/doi/10.1126/scitranslmed.abj3776" rel="nofollow">用作疫苗</a>，但显然很难从真正的蚊子身上收集到这些东西。</p>\n<p dir="auto">本月早些时候，研究人员在实验室中创造了 "<a href="https://www.nature.com/articles/s41586-022-05466-7" rel="nofollow">数亿</a>" 子孢子，而不需要蚊子。他们基本上重新创建了整个"疟原虫从传染性配子体到传染性配子体的全部生命周期，而不需要蚊子。" 这项新技术将有助于更快、更便宜地研制出抗疟疾疫苗。</p>\n<p align="center" dir="auto">\n    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/32186c5730120230dfac235e01a7afe1b55001f77069b7543f9e4b719ffb94a7/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d382e77656270"><img src="https://camo.githubusercontent.com/32186c5730120230dfac235e01a7afe1b55001f77069b7543f9e4b719ffb94a7/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d382e77656270" alt="" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-8.webp" style="max-width: 100%;"></a><br>\n</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.3-资讯'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '那些年，和微信公众号编辑器战斗的日子', 'number': 31, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/31', 'createdAt': '2023-12-01T03:10:07Z', 'lastEditedAt': '2023-12-01T05:35:04Z', 'updatedAt': '2024-01-04T05:44:14Z', 'body': "看到 HelloGitHub 公众号在 2019-09-25 发表的这篇文章《[和微信公众号编辑器战斗的日子](https://mp.weixin.qq.com/s/3-A_iSZYD88Cy467qOnNOw)》，结合自己最近折腾的 React 版本应用 [Markdown2Html](https://github.com/shenweiyan/Markdown2Html)，也想着来聊几句。\r\n\r\n<!-- more -->\r\n\r\n## Md2All\r\n\r\n在使用 Mdnice 前，一直在用 [Md2All](https://md.aclickall.com) 的自搭建版本 [Md2XEditor](https://github.com/shenweiyan/Md2XEditor)，这是一个源自 [barretlee](https://github.com/barretlee) 最早在 2017 年的 [online-markdown](https://github.com/barretlee/online-markdown) 项目，经过二次开发而来的 Markdown 在线转换工具。\r\n\r\n个人在 2021 年的时候，浏览 GitHub 无意中发现了 [Md2All](https://md.aclickall.com) 托管在 GitHub 的源码仓库 [github.com/aclickall/aclickall.github.io](https://github.com/aclickall/aclickall.github.io>)，Fork 过来，利用自己微薄的前端知识做了一点点修改，才形成了一直使用到今天的 [Md2XEditor](https://github.com/shenweiyan/Md2XEditor)。    \r\n![Md2XEditor v-2.8.5](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/md2xeditor-v2.8.5.png)\r\n\r\n虽然说，Md2All 已经把 Markdown2Html 或者说把 Markdown2WeChat 的大部分功能实现了，但由于它目前能找到的源码都是 **经过 build 构建后可以在生产环境中使用的最终版本的代码**（诸如压缩和优化代码、打包文件、生成静态文件等），功能调整实在太费劲，而且自己对 Node/React 的开发基本是零基础。在没有找到好的替代品前，也只能将就着用，一直用到了 2023 年。\r\n\r\n## markdown-nice\r\n\r\n[Mdnice](https://github.com/mdnice/markdown-nice/) 的项目虽然很早就听说，也曾经试用过一段时间，但是由于收费，加上同样存在 **超链接文字复制到公众号颜色失效** 的问题，所以一直没有深入了解和使用。直到 2023 年下半年看到不少在关注的公众号推文都变换了风格，才知道原来都在用着 Mdnice，于是重新回来一看，发现这个应用原来还是**开源的**，还可以**自己搭建和部署**！\r\n\r\n回来搜了一波 Mdnice，发现 UI 都大同小异，但也发现了 <https://wechat.bmpi.dev/> 这一个长得很像 Mdnice 又不完全像的平台，从功能和 UI 上它似乎更符合个人的需求和审美，于是去搜源码，果然在 [github.com/TaleAi/markdown2html](https://github.com/TaleAi/markdown2html) 上找到了（虽然这个仓库里面包括 README 在内提供的链接已经失效），但还是果断 Fork 过来，开始了自己部署和折腾之旅。     \r\n![wechat-bmpi-dev](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/wechat-bmpi-dev.png)\r\n\r\n## 一点折腾\r\n\r\n把自己的 Markdown2Html 站点部署起来后，一切看起来都很顺利，但在使用过程中就发现了这个一直存在的问题：**超链接文字复制到公众号颜色失效**！\r\n\r\n于是开始去尝试看看 Mdnice 的源码，从最开始的一头雾水开始到慢慢摸到一点点头绪，也第一次知道了 [markdown-it](https://github.com/markdown-it/markdown-it) 这个目前使用最广泛的 markdown 解析器工具。但功夫不负有心人，借助 ChatGPT 的帮助，最后终于勉勉强强把 **超链接文字复制到公众号颜色失效** 给解决了。\r\n\r\n后面还陆陆续续增加了一些自己喜欢的文章主题，增加了一些网格化的背景等等。由于 Mdnice 使用了非常多的开源插件，所以很多东西改动起来都非常方便。 \r\n![markdown2weixin](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/markdown2wechat.png)\r\n\r\n## 继续更新\r\n\r\n个人 (包括本公众号) 很多的文章都是先写在 GitHub [Knowledge-Garden](https://github.com/shenweiyan/Knowledge-Garden) 仓库的 [Discussions](https://github.com/shenweiyan/Knowledge-Garden/discussions) 上，有了 Markdown2Html 后面想要转到公众号也就很方便了。\r\n\r\n到这里，轮子也总算造完了，又该好好搬砖了。\r\n\r\n希望后面能有更多的东西跟大家分享吧，也希望大家在 GitHub 上多多关注我，一起交流。\r\n\r\n## 参考资料\r\n\r\n1. [Markdown-It 解析原理](https://lq782655835.github.io/blogs/project/markdown-it-code.html) - [springleo's blog](https://lq782655835.github.io/blogs/)", 'bodyText': "看到 HelloGitHub 公众号在 2019-09-25 发表的这篇文章《和微信公众号编辑器战斗的日子》，结合自己最近折腾的 React 版本应用 Markdown2Html，也想着来聊几句。\n\nMd2All\n在使用 Mdnice 前，一直在用 Md2All 的自搭建版本 Md2XEditor，这是一个源自 barretlee 最早在 2017 年的 online-markdown 项目，经过二次开发而来的 Markdown 在线转换工具。\n个人在 2021 年的时候，浏览 GitHub 无意中发现了 Md2All 托管在 GitHub 的源码仓库 github.com/aclickall/aclickall.github.io，Fork 过来，利用自己微薄的前端知识做了一点点修改，才形成了一直使用到今天的 Md2XEditor。\n\n虽然说，Md2All 已经把 Markdown2Html 或者说把 Markdown2WeChat 的大部分功能实现了，但由于它目前能找到的源码都是 经过 build 构建后可以在生产环境中使用的最终版本的代码（诸如压缩和优化代码、打包文件、生成静态文件等），功能调整实在太费劲，而且自己对 Node/React 的开发基本是零基础。在没有找到好的替代品前，也只能将就着用，一直用到了 2023 年。\nmarkdown-nice\nMdnice 的项目虽然很早就听说，也曾经试用过一段时间，但是由于收费，加上同样存在 超链接文字复制到公众号颜色失效 的问题，所以一直没有深入了解和使用。直到 2023 年下半年看到不少在关注的公众号推文都变换了风格，才知道原来都在用着 Mdnice，于是重新回来一看，发现这个应用原来还是开源的，还可以自己搭建和部署！\n回来搜了一波 Mdnice，发现 UI 都大同小异，但也发现了 https://wechat.bmpi.dev/ 这一个长得很像 Mdnice 又不完全像的平台，从功能和 UI 上它似乎更符合个人的需求和审美，于是去搜源码，果然在 github.com/TaleAi/markdown2html 上找到了（虽然这个仓库里面包括 README 在内提供的链接已经失效），但还是果断 Fork 过来，开始了自己部署和折腾之旅。\n\n一点折腾\n把自己的 Markdown2Html 站点部署起来后，一切看起来都很顺利，但在使用过程中就发现了这个一直存在的问题：超链接文字复制到公众号颜色失效！\n于是开始去尝试看看 Mdnice 的源码，从最开始的一头雾水开始到慢慢摸到一点点头绪，也第一次知道了 markdown-it 这个目前使用最广泛的 markdown 解析器工具。但功夫不负有心人，借助 ChatGPT 的帮助，最后终于勉勉强强把 超链接文字复制到公众号颜色失效 给解决了。\n后面还陆陆续续增加了一些自己喜欢的文章主题，增加了一些网格化的背景等等。由于 Mdnice 使用了非常多的开源插件，所以很多东西改动起来都非常方便。\n\n继续更新\n个人 (包括本公众号) 很多的文章都是先写在 GitHub Knowledge-Garden 仓库的 Discussions 上，有了 Markdown2Html 后面想要转到公众号也就很方便了。\n到这里，轮子也总算造完了，又该好好搬砖了。\n希望后面能有更多的东西跟大家分享吧，也希望大家在 GitHub 上多多关注我，一起交流。\n参考资料\n\nMarkdown-It 解析原理 - springleo's blog", 'bodyHTML': '<p dir="auto">看到 HelloGitHub 公众号在 2019-09-25 发表的这篇文章《<a href="https://mp.weixin.qq.com/s/3-A_iSZYD88Cy467qOnNOw" rel="nofollow">和微信公众号编辑器战斗的日子</a>》，结合自己最近折腾的 React 版本应用 <a href="https://github.com/shenweiyan/Markdown2Html">Markdown2Html</a>，也想着来聊几句。</p>\n\n<h2 dir="auto">Md2All</h2>\n<p dir="auto">在使用 Mdnice 前，一直在用 <a href="https://md.aclickall.com" rel="nofollow">Md2All</a> 的自搭建版本 <a href="https://github.com/shenweiyan/Md2XEditor">Md2XEditor</a>，这是一个源自 <a href="https://github.com/barretlee">barretlee</a> 最早在 2017 年的 <a href="https://github.com/barretlee/online-markdown">online-markdown</a> 项目，经过二次开发而来的 Markdown 在线转换工具。</p>\n<p dir="auto">个人在 2021 年的时候，浏览 GitHub 无意中发现了 <a href="https://md.aclickall.com" rel="nofollow">Md2All</a> 托管在 GitHub 的源码仓库 <a href="https://github.com/aclickall/aclickall.github.io%3E">github.com/aclickall/aclickall.github.io</a>，Fork 过来，利用自己微薄的前端知识做了一点点修改，才形成了一直使用到今天的 <a href="https://github.com/shenweiyan/Md2XEditor">Md2XEditor</a>。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/53b96af6bf8c29325ba20e0be8ac94217d75ad05355637b0355e171ca38d8025/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6d643278656469746f722d76322e382e352e706e67"><img src="https://camo.githubusercontent.com/53b96af6bf8c29325ba20e0be8ac94217d75ad05355637b0355e171ca38d8025/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6d643278656469746f722d76322e382e352e706e67" alt="Md2XEditor v-2.8.5" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/md2xeditor-v2.8.5.png" style="max-width: 100%;"></a></p>\n<p dir="auto">虽然说，Md2All 已经把 Markdown2Html 或者说把 Markdown2WeChat 的大部分功能实现了，但由于它目前能找到的源码都是 <strong>经过 build 构建后可以在生产环境中使用的最终版本的代码</strong>（诸如压缩和优化代码、打包文件、生成静态文件等），功能调整实在太费劲，而且自己对 Node/React 的开发基本是零基础。在没有找到好的替代品前，也只能将就着用，一直用到了 2023 年。</p>\n<h2 dir="auto">markdown-nice</h2>\n<p dir="auto"><a href="https://github.com/mdnice/markdown-nice/">Mdnice</a> 的项目虽然很早就听说，也曾经试用过一段时间，但是由于收费，加上同样存在 <strong>超链接文字复制到公众号颜色失效</strong> 的问题，所以一直没有深入了解和使用。直到 2023 年下半年看到不少在关注的公众号推文都变换了风格，才知道原来都在用着 Mdnice，于是重新回来一看，发现这个应用原来还是<strong>开源的</strong>，还可以<strong>自己搭建和部署</strong>！</p>\n<p dir="auto">回来搜了一波 Mdnice，发现 UI 都大同小异，但也发现了 <a href="https://wechat.bmpi.dev/" rel="nofollow">https://wechat.bmpi.dev/</a> 这一个长得很像 Mdnice 又不完全像的平台，从功能和 UI 上它似乎更符合个人的需求和审美，于是去搜源码，果然在 <a href="https://github.com/TaleAi/markdown2html">github.com/TaleAi/markdown2html</a> 上找到了（虽然这个仓库里面包括 README 在内提供的链接已经失效），但还是果断 Fork 过来，开始了自己部署和折腾之旅。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/6eb523b2bf8360ae7f088da16f6fcc7d119dca7d6b8c10ca01893fd24a074523/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f7765636861742d626d70692d6465762e706e67"><img src="https://camo.githubusercontent.com/6eb523b2bf8360ae7f088da16f6fcc7d119dca7d6b8c10ca01893fd24a074523/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f7765636861742d626d70692d6465762e706e67" alt="wechat-bmpi-dev" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/wechat-bmpi-dev.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">一点折腾</h2>\n<p dir="auto">把自己的 Markdown2Html 站点部署起来后，一切看起来都很顺利，但在使用过程中就发现了这个一直存在的问题：<strong>超链接文字复制到公众号颜色失效</strong>！</p>\n<p dir="auto">于是开始去尝试看看 Mdnice 的源码，从最开始的一头雾水开始到慢慢摸到一点点头绪，也第一次知道了 <a href="https://github.com/markdown-it/markdown-it">markdown-it</a> 这个目前使用最广泛的 markdown 解析器工具。但功夫不负有心人，借助 ChatGPT 的帮助，最后终于勉勉强强把 <strong>超链接文字复制到公众号颜色失效</strong> 给解决了。</p>\n<p dir="auto">后面还陆陆续续增加了一些自己喜欢的文章主题，增加了一些网格化的背景等等。由于 Mdnice 使用了非常多的开源插件，所以很多东西改动起来都非常方便。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/dd25677c14180b070e89f04222cf0fbda8abb01d005935c2eebb4bee470261dd/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6d61726b646f776e327765636861742e706e67"><img src="https://camo.githubusercontent.com/dd25677c14180b070e89f04222cf0fbda8abb01d005935c2eebb4bee470261dd/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6d61726b646f776e327765636861742e706e67" alt="markdown2weixin" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/markdown2wechat.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">继续更新</h2>\n<p dir="auto">个人 (包括本公众号) 很多的文章都是先写在 GitHub <a href="https://github.com/shenweiyan/Knowledge-Garden">Knowledge-Garden</a> 仓库的 <a href="https://github.com/shenweiyan/Knowledge-Garden/discussions">Discussions</a> 上，有了 Markdown2Html 后面想要转到公众号也就很方便了。</p>\n<p dir="auto">到这里，轮子也总算造完了，又该好好搬砖了。</p>\n<p dir="auto">希望后面能有更多的东西跟大家分享吧，也希望大家在 GitHub 上多多关注我，一起交流。</p>\n<h2 dir="auto">参考资料</h2>\n<ol dir="auto">\n<li><a href="https://lq782655835.github.io/blogs/project/markdown-it-code.html" rel="nofollow">Markdown-It 解析原理</a> - <a href="https://lq782655835.github.io/blogs/" rel="nofollow">springleo\'s blog</a></li>\n</ol>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '单行 Python 代码片段', 'number': 30, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/30', 'createdAt': '2023-12-01T03:05:46Z', 'lastEditedAt': None, 'updatedAt': '2024-01-03T07:56:51Z', 'body': '> Via：https://muhammadraza.me/2023/python-oneliners\r\n\r\n我已经沉浸在 Python 编程世界大约三年了。在这段时间里，我开始欣赏这种多功能语言的优雅和强大。在这篇既有趣又具有教育意义的文章中，我将展示一系列单行 Python 代码片段。无论您是经验丰富的开发人员还是初学者，这些简洁的代码行都可以让您深入了解 Python 的简单性和有效性，它们展示一行代码如何完成在其他语言中可能需要几行代码才能完成的任务。\r\n\r\n<!-- more -->\r\n\r\n- 反转字符串\r\n```python\r\nreversed_string = "Hello World"[::-1]\r\n```\r\n\r\n- 检查数字是否为偶数\r\n```python\r\nis_even = lambda x: x % 2 == 0\r\nis_even(8)  #True\r\n```\r\n\r\n- 求两个列表的交集\r\n```python\r\nintersection = list(set(list1) & set(list2))\r\n```\r\n\r\n- 从列表中删除重复项\r\n```python\r\nno_duplicates = list(set(my_list))\r\n```\r\n\r\n- 不使用 `len()` 计算字符串的长度\r\n```python\r\nlength = sum(1 for _ in \'Hello World\')\r\n```\r\n\r\n- 检查一个列表是否包含另一个列表的所有元素\r\n```python\r\ncontains_all = all(elem in list1 for elem in list2)\r\n```\r\n\r\n- 生成一串随机字符\r\n```python\r\nimport random; \r\nrandom_str = \'\'.join(random.choices(\'abcdefghijklmnopqrstuvwxyz\', k=10))\r\n```\r\n\r\n- 将整数列表转换为单个数字\r\n```python\r\nnum = int(\'\'.join(map(str, [1, 2, 3, 4, 5])))\r\n```\r\n\r\n- 回文(Palindromic)检查\r\n```python\r\nis_palindrome = lambda s: s == s[::-1]\r\n```\r\n\r\n- 列表展开\r\n```python\r\nflatten_list = sum([[1, 2], [3, 4]], [])\r\n```\r\n\r\n- 在一个列表中找到出现频率最高的元素\r\n```python\r\nmost_frequent = max(set(my_list), key=my_list.count)\r\n```\r\n\r\n- 合并两个字典\r\n```python\r\nmerged_dict = {**dict1, **dict2}\r\n```\r\n\r\n最后，我希望您喜欢阅读本文并有机会学习新东西。如果您有任何反馈，请随时在下面发表评论。如果您不想公开发表评论，可以随时给我发送电子邮件。我也很想看到你最喜欢的 python one liner 代码片段。', 'bodyText': 'Via：https://muhammadraza.me/2023/python-oneliners\n\n我已经沉浸在 Python 编程世界大约三年了。在这段时间里，我开始欣赏这种多功能语言的优雅和强大。在这篇既有趣又具有教育意义的文章中，我将展示一系列单行 Python 代码片段。无论您是经验丰富的开发人员还是初学者，这些简洁的代码行都可以让您深入了解 Python 的简单性和有效性，它们展示一行代码如何完成在其他语言中可能需要几行代码才能完成的任务。\n\n\n反转字符串\n\nreversed_string = "Hello World"[::-1]\n\n检查数字是否为偶数\n\nis_even = lambda x: x % 2 == 0\nis_even(8)  #True\n\n求两个列表的交集\n\nintersection = list(set(list1) & set(list2))\n\n从列表中删除重复项\n\nno_duplicates = list(set(my_list))\n\n不使用 len() 计算字符串的长度\n\nlength = sum(1 for _ in \'Hello World\')\n\n检查一个列表是否包含另一个列表的所有元素\n\ncontains_all = all(elem in list1 for elem in list2)\n\n生成一串随机字符\n\nimport random; \nrandom_str = \'\'.join(random.choices(\'abcdefghijklmnopqrstuvwxyz\', k=10))\n\n将整数列表转换为单个数字\n\nnum = int(\'\'.join(map(str, [1, 2, 3, 4, 5])))\n\n回文(Palindromic)检查\n\nis_palindrome = lambda s: s == s[::-1]\n\n列表展开\n\nflatten_list = sum([[1, 2], [3, 4]], [])\n\n在一个列表中找到出现频率最高的元素\n\nmost_frequent = max(set(my_list), key=my_list.count)\n\n合并两个字典\n\nmerged_dict = {**dict1, **dict2}\n最后，我希望您喜欢阅读本文并有机会学习新东西。如果您有任何反馈，请随时在下面发表评论。如果您不想公开发表评论，可以随时给我发送电子邮件。我也很想看到你最喜欢的 python one liner 代码片段。', 'bodyHTML': '<blockquote>\n<p dir="auto">Via：<a href="https://muhammadraza.me/2023/python-oneliners" rel="nofollow">https://muhammadraza.me/2023/python-oneliners</a></p>\n</blockquote>\n<p dir="auto">我已经沉浸在 Python 编程世界大约三年了。在这段时间里，我开始欣赏这种多功能语言的优雅和强大。在这篇既有趣又具有教育意义的文章中，我将展示一系列单行 Python 代码片段。无论您是经验丰富的开发人员还是初学者，这些简洁的代码行都可以让您深入了解 Python 的简单性和有效性，它们展示一行代码如何完成在其他语言中可能需要几行代码才能完成的任务。</p>\n\n<ul dir="auto">\n<li>反转字符串</li>\n</ul>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="reversed_string = &quot;Hello World&quot;[::-1]"><pre class="notranslate"><span class="pl-s1">reversed_string</span> <span class="pl-c1">=</span> <span class="pl-s">"Hello World"</span>[::<span class="pl-c1">-</span><span class="pl-c1">1</span>]</pre></div>\n<ul dir="auto">\n<li>检查数字是否为偶数</li>\n</ul>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="is_even = lambda x: x % 2 == 0\nis_even(8)  #True"><pre class="notranslate"><span class="pl-s1">is_even</span> <span class="pl-c1">=</span> <span class="pl-k">lambda</span> <span class="pl-s1">x</span>: <span class="pl-s1">x</span> <span class="pl-c1">%</span> <span class="pl-c1">2</span> <span class="pl-c1">==</span> <span class="pl-c1">0</span>\n<span class="pl-en">is_even</span>(<span class="pl-c1">8</span>)  <span class="pl-c">#True</span></pre></div>\n<ul dir="auto">\n<li>求两个列表的交集</li>\n</ul>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="intersection = list(set(list1) &amp; set(list2))"><pre class="notranslate"><span class="pl-s1">intersection</span> <span class="pl-c1">=</span> <span class="pl-en">list</span>(<span class="pl-en">set</span>(<span class="pl-s1">list1</span>) <span class="pl-c1">&amp;</span> <span class="pl-en">set</span>(<span class="pl-s1">list2</span>))</pre></div>\n<ul dir="auto">\n<li>从列表中删除重复项</li>\n</ul>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="no_duplicates = list(set(my_list))"><pre class="notranslate"><span class="pl-s1">no_duplicates</span> <span class="pl-c1">=</span> <span class="pl-en">list</span>(<span class="pl-en">set</span>(<span class="pl-s1">my_list</span>))</pre></div>\n<ul dir="auto">\n<li>不使用 <code class="notranslate">len()</code> 计算字符串的长度</li>\n</ul>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="length = sum(1 for _ in \'Hello World\')"><pre class="notranslate"><span class="pl-s1">length</span> <span class="pl-c1">=</span> <span class="pl-en">sum</span>(<span class="pl-c1">1</span> <span class="pl-k">for</span> <span class="pl-s1">_</span> <span class="pl-c1">in</span> <span class="pl-s">\'Hello World\'</span>)</pre></div>\n<ul dir="auto">\n<li>检查一个列表是否包含另一个列表的所有元素</li>\n</ul>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="contains_all = all(elem in list1 for elem in list2)"><pre class="notranslate"><span class="pl-s1">contains_all</span> <span class="pl-c1">=</span> <span class="pl-en">all</span>(<span class="pl-s1">elem</span> <span class="pl-c1">in</span> <span class="pl-s1">list1</span> <span class="pl-k">for</span> <span class="pl-s1">elem</span> <span class="pl-c1">in</span> <span class="pl-s1">list2</span>)</pre></div>\n<ul dir="auto">\n<li>生成一串随机字符</li>\n</ul>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import random; \nrandom_str = \'\'.join(random.choices(\'abcdefghijklmnopqrstuvwxyz\', k=10))"><pre class="notranslate"><span class="pl-k">import</span> <span class="pl-s1">random</span>; \n<span class="pl-s1">random_str</span> <span class="pl-c1">=</span> <span class="pl-s">\'\'</span>.<span class="pl-c1">join</span>(<span class="pl-s1">random</span>.<span class="pl-c1">choices</span>(<span class="pl-s">\'abcdefghijklmnopqrstuvwxyz\'</span>, <span class="pl-s1">k</span><span class="pl-c1">=</span><span class="pl-c1">10</span>))</pre></div>\n<ul dir="auto">\n<li>将整数列表转换为单个数字</li>\n</ul>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="num = int(\'\'.join(map(str, [1, 2, 3, 4, 5])))"><pre class="notranslate"><span class="pl-s1">num</span> <span class="pl-c1">=</span> <span class="pl-en">int</span>(<span class="pl-s">\'\'</span>.<span class="pl-c1">join</span>(<span class="pl-en">map</span>(<span class="pl-s1">str</span>, [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>])))</pre></div>\n<ul dir="auto">\n<li>回文(Palindromic)检查</li>\n</ul>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="is_palindrome = lambda s: s == s[::-1]"><pre class="notranslate"><span class="pl-s1">is_palindrome</span> <span class="pl-c1">=</span> <span class="pl-k">lambda</span> <span class="pl-s1">s</span>: <span class="pl-s1">s</span> <span class="pl-c1">==</span> <span class="pl-s1">s</span>[::<span class="pl-c1">-</span><span class="pl-c1">1</span>]</pre></div>\n<ul dir="auto">\n<li>列表展开</li>\n</ul>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="flatten_list = sum([[1, 2], [3, 4]], [])"><pre class="notranslate"><span class="pl-s1">flatten_list</span> <span class="pl-c1">=</span> <span class="pl-en">sum</span>([[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], [<span class="pl-c1">3</span>, <span class="pl-c1">4</span>]], [])</pre></div>\n<ul dir="auto">\n<li>在一个列表中找到出现频率最高的元素</li>\n</ul>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="most_frequent = max(set(my_list), key=my_list.count)"><pre class="notranslate"><span class="pl-s1">most_frequent</span> <span class="pl-c1">=</span> <span class="pl-en">max</span>(<span class="pl-en">set</span>(<span class="pl-s1">my_list</span>), <span class="pl-s1">key</span><span class="pl-c1">=</span><span class="pl-s1">my_list</span>.<span class="pl-c1">count</span>)</pre></div>\n<ul dir="auto">\n<li>合并两个字典</li>\n</ul>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="merged_dict = {**dict1, **dict2}"><pre class="notranslate"><span class="pl-s1">merged_dict</span> <span class="pl-c1">=</span> {<span class="pl-c1">**</span><span class="pl-s1">dict1</span>, <span class="pl-c1">**</span><span class="pl-s1">dict2</span>}</pre></div>\n<p dir="auto">最后，我希望您喜欢阅读本文并有机会学习新东西。如果您有任何反馈，请随时在下面发表评论。如果您不想公开发表评论，可以随时给我发送电子邮件。我也很想看到你最喜欢的 python one liner 代码片段。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.2-编程'}, 'labels': {'nodes': [{'name': '翻译'}, {'name': '1.2.3-Python'}]}, 'comments': {'nodes': []}}, {'title': '技术人月刊（第 1 期 2023-12）', 'number': 29, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/29', 'createdAt': '2023-12-01T02:57:46Z', 'lastEditedAt': '2025-03-25T03:38:16Z', 'updatedAt': '2025-03-25T03:38:16Z', 'body': '个人的信息周刊，每月记录我看到的有价值的信息，主要针对生物学和互联网科技领域，内容主题极大程度被我个人喜好主导。这个项目核心目的在于记录让自己有印象的信息做一个留存以及共享。\r\n\r\n## 工具\r\n\r\n1. [通过人工智能将表情符号变成令人惊叹的艺术品](https://github.com/leptonai/tryemoji)\r\n\r\n<p align="left"><img width=600 src="https://kg.weiyan.tech/2023/12/tryemoji.png" alt></p>\r\n\r\nGitHub 上的一个开源项目，包括了完整的前端和后端代码，支持本地和云端部署，可用于商业用途。\r\n\r\n2. [pdf2htmlEX](https://github.com/pdf2htmlEX/pdf2htmlEX)\r\n\r\n<p align="left"><img width=600 src="https://kg.weiyan.tech/2023/12/pdf2htmlex-1.jpg" alt></p>\r\n<p align="left"><img width=600 src="https://kg.weiyan.tech/2023/12/pdf2htmlex-2.jpg" alt></p>\r\n\r\n一个 PDF 转 HTML 程序，生成的结果和原始 PDF 几乎一模一样。其背后是利用的 Chrome Headless，让 Chrome 渲染 PDF，再导出成 HTML，甚至图片都转成了 base64 字符，所以一个网页就可以包含完整的文本、字体和图片等内容。\r\n\r\n3. [Quartz](https://github.com/jackyzha0/quartz)\r\n\r\nQuartz 是一套可帮助您免费将数字花园和笔记发布为网站的工具。Quartz v4 进行了彻底重写，重点关注最终用户的可扩展性和易用性。该工具可直接把 obsidian 笔记部署到线上，可以认为是 Obsidian Publish 功能的替代品，但是是免费的。不仅是 Obsidian 笔记，任何 markdown 双链笔记都可以部署。\r\n\r\n4. [gkd](https://github.com/gkd-kit/gkd)\r\n\r\n李跳跳被禁用后的一个替代品，基于高级选择器 + 订阅规则 + 快照审查，它可以实现点击跳过任意开屏广告/点击关闭应用内部任意弹窗广告, 如关闭百度贴吧帖子广告卡片/知乎回答底部推荐广告卡片。\r\n\r\n5. [Blossom](https://github.com/blossom-editor/blossom)\r\n\r\nBlossom 是一个支持私有部署的云端存储双链笔记软件，你可以将你所有的笔记，图片，个人计划安排保存在自己的服务器中，并在任意设备之间实时同步，且基于MIT协议完全开源。UI 非常漂亮的一款云端双链笔记。    \r\n<img width=400 src="https://kg.weiyan.tech/2023/12/blossom.png">\r\n\r\n6. [MDX Editor](https://editor.runjs.cool/) - 跨平台微信排版Markdown编辑器\r\n\r\nmdx 是 markdown + jsx 的结合，即可以支持 markdown 语法也可以写自定义组件。\r\n\r\n支持一键复制到微信公众号、自定义样式组件，样式、生成二维码、代码 diff 高亮、生成文章，软件还支持本地文件实时保存、文件目录树管理和导出 HTML。    \r\n![mdx-editor](https://shub.weiyan.tech/kgarden/2023/mdx-editor.png)\r\n\r\n## 文章\r\n\r\n1. [Cloudflare 发布了 2023 年度回顾](https://blog.cloudflare.com/radar-2023-year-in-review/)\r\n\r\n2023 年 Cloudflare Radar [#YearInReview](https://twitter.com/hashtag/YearInReview?src=hashtag_click) 是 Cloudflare 对全年在全球和国家/地区层面观察到的各种流量、连接性和速度指标的互联网趋势和模式的第四次年度回顾。\r\n\r\n## 资源\r\n\r\n1. [你用 Python 做过的最酷的事情是什么？](https://www.reddit.com/r/Python/comments/17upt2f/whats_the_coolest_things_youve_done_with_python/)\r\n\r\nreddit 上很火的一个讨论，让人大开眼界。\r\n\r\n3. [Data Hacks](https://data-hacks.com/)\r\n\r\n一个关于如何处理数据的网站，其中包含 1000 个快速 R 和 Python 教程。在这个网站上，您将会找到关于数据科学和统计学领域各种主题的 R 编程和 Python 编程指南。\r\n\r\n4. [哪个是程序员最爱的编程字体？2百万阅读的帖子选出最帅的七种字体](https://vikingz.me/best-font/)\r\n\r\n最后根据评论选出几款最受欢迎的供大家参考：Consolas，最多人推荐；JetBrains Mono 更推荐它的魔改版本 Jetbrains Mono Nerd Font；SF Mono，同样也有魔改版本 SFMono Nerd Font Ligaturized。\r\n\r\n5. [大规模语言模型：从理论到实践](https://intro-llm.github.io/)\r\n\r\n复旦大学张奇教授团队写的一本在线免费的电子书，《大规模语言模型：从理论到实践》，大概有 300 页篇幅，将大模型从理论到实战的每个阶段都描述的较为清楚。\r\n\r\n6. 《[Python 工匠](https://github.com/piglei/one-python-craftsman)》\r\n\r\n它专注于分享 Python 编程中的一些偏「小」的东西，例如变量和注释的使用、编写条件分支的技巧、编写跑的更快扩展性更好的代码，让函数反馈结果的技巧、异常处理的好习惯、装饰器的使用技巧等等。\r\n<p align="left"><img width=600 src="https://shub.weiyan.tech/kgarden/2023/one-python-craftsman.jpg" alt="one-python-craftsman"></p>\r\n\r\n7. 《[Python Cookbook in Chinese](https://python3-cookbook.readthedocs.io/zh-cn/latest/index.html)》 3rd Edition\r\n<p align="left"><img width=600 src="https://shub.weiyan.tech/kgarden/2023/python3-cookbook.jpg"></p>\r\n', 'bodyText': '个人的信息周刊，每月记录我看到的有价值的信息，主要针对生物学和互联网科技领域，内容主题极大程度被我个人喜好主导。这个项目核心目的在于记录让自己有印象的信息做一个留存以及共享。\n工具\n\n通过人工智能将表情符号变成令人惊叹的艺术品\n\n\nGitHub 上的一个开源项目，包括了完整的前端和后端代码，支持本地和云端部署，可用于商业用途。\n\npdf2htmlEX\n\n\n\n一个 PDF 转 HTML 程序，生成的结果和原始 PDF 几乎一模一样。其背后是利用的 Chrome Headless，让 Chrome 渲染 PDF，再导出成 HTML，甚至图片都转成了 base64 字符，所以一个网页就可以包含完整的文本、字体和图片等内容。\n\nQuartz\n\nQuartz 是一套可帮助您免费将数字花园和笔记发布为网站的工具。Quartz v4 进行了彻底重写，重点关注最终用户的可扩展性和易用性。该工具可直接把 obsidian 笔记部署到线上，可以认为是 Obsidian Publish 功能的替代品，但是是免费的。不仅是 Obsidian 笔记，任何 markdown 双链笔记都可以部署。\n\ngkd\n\n李跳跳被禁用后的一个替代品，基于高级选择器 + 订阅规则 + 快照审查，它可以实现点击跳过任意开屏广告/点击关闭应用内部任意弹窗广告, 如关闭百度贴吧帖子广告卡片/知乎回答底部推荐广告卡片。\n\nBlossom\n\nBlossom 是一个支持私有部署的云端存储双链笔记软件，你可以将你所有的笔记，图片，个人计划安排保存在自己的服务器中，并在任意设备之间实时同步，且基于MIT协议完全开源。UI 非常漂亮的一款云端双链笔记。\n\n\nMDX Editor - 跨平台微信排版Markdown编辑器\n\nmdx 是 markdown + jsx 的结合，即可以支持 markdown 语法也可以写自定义组件。\n支持一键复制到微信公众号、自定义样式组件，样式、生成二维码、代码 diff 高亮、生成文章，软件还支持本地文件实时保存、文件目录树管理和导出 HTML。\n\n文章\n\nCloudflare 发布了 2023 年度回顾\n\n2023 年 Cloudflare Radar #YearInReview 是 Cloudflare 对全年在全球和国家/地区层面观察到的各种流量、连接性和速度指标的互联网趋势和模式的第四次年度回顾。\n资源\n\n你用 Python 做过的最酷的事情是什么？\n\nreddit 上很火的一个讨论，让人大开眼界。\n\nData Hacks\n\n一个关于如何处理数据的网站，其中包含 1000 个快速 R 和 Python 教程。在这个网站上，您将会找到关于数据科学和统计学领域各种主题的 R 编程和 Python 编程指南。\n\n哪个是程序员最爱的编程字体？2百万阅读的帖子选出最帅的七种字体\n\n最后根据评论选出几款最受欢迎的供大家参考：Consolas，最多人推荐；JetBrains Mono 更推荐它的魔改版本 Jetbrains Mono Nerd Font；SF Mono，同样也有魔改版本 SFMono Nerd Font Ligaturized。\n\n大规模语言模型：从理论到实践\n\n复旦大学张奇教授团队写的一本在线免费的电子书，《大规模语言模型：从理论到实践》，大概有 300 页篇幅，将大模型从理论到实战的每个阶段都描述的较为清楚。\n\n《Python 工匠》\n\n它专注于分享 Python 编程中的一些偏「小」的东西，例如变量和注释的使用、编写条件分支的技巧、编写跑的更快扩展性更好的代码，让函数反馈结果的技巧、异常处理的好习惯、装饰器的使用技巧等等。\n\n\n《Python Cookbook in Chinese》 3rd Edition', 'bodyHTML': '<p dir="auto">个人的信息周刊，每月记录我看到的有价值的信息，主要针对生物学和互联网科技领域，内容主题极大程度被我个人喜好主导。这个项目核心目的在于记录让自己有印象的信息做一个留存以及共享。</p>\n<h2 dir="auto">工具</h2>\n<ol dir="auto">\n<li><a href="https://github.com/leptonai/tryemoji">通过人工智能将表情符号变成令人惊叹的艺术品</a></li>\n</ol>\n<p align="left" dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/afafcc3e77ebb072e0c6aa15c6aba4a28aa3c0284352c3528498d0561d631155/68747470733a2f2f6b672e77656979616e2e746563682f323032332f31322f747279656d6f6a692e706e67"><img width="600" src="https://camo.githubusercontent.com/afafcc3e77ebb072e0c6aa15c6aba4a28aa3c0284352c3528498d0561d631155/68747470733a2f2f6b672e77656979616e2e746563682f323032332f31322f747279656d6f6a692e706e67" alt="" data-canonical-src="https://kg.weiyan.tech/2023/12/tryemoji.png" style="max-width: 100%;"></a></p>\n<p dir="auto">GitHub 上的一个开源项目，包括了完整的前端和后端代码，支持本地和云端部署，可用于商业用途。</p>\n<ol start="2" dir="auto">\n<li><a href="https://github.com/pdf2htmlEX/pdf2htmlEX">pdf2htmlEX</a></li>\n</ol>\n<p align="left" dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/239f52a2b30d451f1e5337ae5fb9c2f12f4cde67cee22bfb820d4840694be468/68747470733a2f2f6b672e77656979616e2e746563682f323032332f31322f7064663268746d6c65782d312e6a7067"><img width="600" src="https://camo.githubusercontent.com/239f52a2b30d451f1e5337ae5fb9c2f12f4cde67cee22bfb820d4840694be468/68747470733a2f2f6b672e77656979616e2e746563682f323032332f31322f7064663268746d6c65782d312e6a7067" alt="" data-canonical-src="https://kg.weiyan.tech/2023/12/pdf2htmlex-1.jpg" style="max-width: 100%;"></a></p>\n<p align="left" dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/15ef7311fce0035679c6d657bff19ea9839debe63270ae2c84372a147e98e6c4/68747470733a2f2f6b672e77656979616e2e746563682f323032332f31322f7064663268746d6c65782d322e6a7067"><img width="600" src="https://camo.githubusercontent.com/15ef7311fce0035679c6d657bff19ea9839debe63270ae2c84372a147e98e6c4/68747470733a2f2f6b672e77656979616e2e746563682f323032332f31322f7064663268746d6c65782d322e6a7067" alt="" data-canonical-src="https://kg.weiyan.tech/2023/12/pdf2htmlex-2.jpg" style="max-width: 100%;"></a></p>\n<p dir="auto">一个 PDF 转 HTML 程序，生成的结果和原始 PDF 几乎一模一样。其背后是利用的 Chrome Headless，让 Chrome 渲染 PDF，再导出成 HTML，甚至图片都转成了 base64 字符，所以一个网页就可以包含完整的文本、字体和图片等内容。</p>\n<ol start="3" dir="auto">\n<li><a href="https://github.com/jackyzha0/quartz">Quartz</a></li>\n</ol>\n<p dir="auto">Quartz 是一套可帮助您免费将数字花园和笔记发布为网站的工具。Quartz v4 进行了彻底重写，重点关注最终用户的可扩展性和易用性。该工具可直接把 obsidian 笔记部署到线上，可以认为是 Obsidian Publish 功能的替代品，但是是免费的。不仅是 Obsidian 笔记，任何 markdown 双链笔记都可以部署。</p>\n<ol start="4" dir="auto">\n<li><a href="https://github.com/gkd-kit/gkd">gkd</a></li>\n</ol>\n<p dir="auto">李跳跳被禁用后的一个替代品，基于高级选择器 + 订阅规则 + 快照审查，它可以实现点击跳过任意开屏广告/点击关闭应用内部任意弹窗广告, 如关闭百度贴吧帖子广告卡片/知乎回答底部推荐广告卡片。</p>\n<ol start="5" dir="auto">\n<li><a href="https://github.com/blossom-editor/blossom">Blossom</a></li>\n</ol>\n<p dir="auto">Blossom 是一个支持私有部署的云端存储双链笔记软件，你可以将你所有的笔记，图片，个人计划安排保存在自己的服务器中，并在任意设备之间实时同步，且基于MIT协议完全开源。UI 非常漂亮的一款云端双链笔记。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/7969cec337ae3f1e77cd63a9009181567b32017788fca25fa83f6e3892c95b34/68747470733a2f2f6b672e77656979616e2e746563682f323032332f31322f626c6f73736f6d2e706e67"><img width="400" src="https://camo.githubusercontent.com/7969cec337ae3f1e77cd63a9009181567b32017788fca25fa83f6e3892c95b34/68747470733a2f2f6b672e77656979616e2e746563682f323032332f31322f626c6f73736f6d2e706e67" data-canonical-src="https://kg.weiyan.tech/2023/12/blossom.png" style="max-width: 100%;"></a></p>\n<ol start="6" dir="auto">\n<li><a href="https://editor.runjs.cool/" rel="nofollow">MDX Editor</a> - 跨平台微信排版Markdown编辑器</li>\n</ol>\n<p dir="auto">mdx 是 markdown + jsx 的结合，即可以支持 markdown 语法也可以写自定义组件。</p>\n<p dir="auto">支持一键复制到微信公众号、自定义样式组件，样式、生成二维码、代码 diff 高亮、生成文章，软件还支持本地文件实时保存、文件目录树管理和导出 HTML。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/f0689ae68168df0c920a116c45ac73ad7a41c4a08d926555b52039d9424f793e/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032332f6d64782d656469746f722e706e67"><img src="https://camo.githubusercontent.com/f0689ae68168df0c920a116c45ac73ad7a41c4a08d926555b52039d9424f793e/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032332f6d64782d656469746f722e706e67" alt="mdx-editor" data-canonical-src="https://shub.weiyan.tech/kgarden/2023/mdx-editor.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">文章</h2>\n<ol dir="auto">\n<li><a href="https://blog.cloudflare.com/radar-2023-year-in-review/" rel="nofollow">Cloudflare 发布了 2023 年度回顾</a></li>\n</ol>\n<p dir="auto">2023 年 Cloudflare Radar <a href="https://twitter.com/hashtag/YearInReview?src=hashtag_click" rel="nofollow">#YearInReview</a> 是 Cloudflare 对全年在全球和国家/地区层面观察到的各种流量、连接性和速度指标的互联网趋势和模式的第四次年度回顾。</p>\n<h2 dir="auto">资源</h2>\n<ol dir="auto">\n<li><a href="https://www.reddit.com/r/Python/comments/17upt2f/whats_the_coolest_things_youve_done_with_python/" rel="nofollow">你用 Python 做过的最酷的事情是什么？</a></li>\n</ol>\n<p dir="auto">reddit 上很火的一个讨论，让人大开眼界。</p>\n<ol start="3" dir="auto">\n<li><a href="https://data-hacks.com/" rel="nofollow">Data Hacks</a></li>\n</ol>\n<p dir="auto">一个关于如何处理数据的网站，其中包含 1000 个快速 R 和 Python 教程。在这个网站上，您将会找到关于数据科学和统计学领域各种主题的 R 编程和 Python 编程指南。</p>\n<ol start="4" dir="auto">\n<li><a href="https://vikingz.me/best-font/" rel="nofollow">哪个是程序员最爱的编程字体？2百万阅读的帖子选出最帅的七种字体</a></li>\n</ol>\n<p dir="auto">最后根据评论选出几款最受欢迎的供大家参考：Consolas，最多人推荐；JetBrains Mono 更推荐它的魔改版本 Jetbrains Mono Nerd Font；SF Mono，同样也有魔改版本 SFMono Nerd Font Ligaturized。</p>\n<ol start="5" dir="auto">\n<li><a href="https://intro-llm.github.io/" rel="nofollow">大规模语言模型：从理论到实践</a></li>\n</ol>\n<p dir="auto">复旦大学张奇教授团队写的一本在线免费的电子书，《大规模语言模型：从理论到实践》，大概有 300 页篇幅，将大模型从理论到实战的每个阶段都描述的较为清楚。</p>\n<ol start="6" dir="auto">\n<li>《<a href="https://github.com/piglei/one-python-craftsman">Python 工匠</a>》</li>\n</ol>\n<p dir="auto">它专注于分享 Python 编程中的一些偏「小」的东西，例如变量和注释的使用、编写条件分支的技巧、编写跑的更快扩展性更好的代码，让函数反馈结果的技巧、异常处理的好习惯、装饰器的使用技巧等等。</p>\n<p align="left" dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/509d8d2afd0ef6cd8335acdf3c0d3e45f4b8ee56b52246772158c6df3af51610/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032332f6f6e652d707974686f6e2d6372616674736d616e2e6a7067"><img width="600" src="https://camo.githubusercontent.com/509d8d2afd0ef6cd8335acdf3c0d3e45f4b8ee56b52246772158c6df3af51610/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032332f6f6e652d707974686f6e2d6372616674736d616e2e6a7067" alt="one-python-craftsman" data-canonical-src="https://shub.weiyan.tech/kgarden/2023/one-python-craftsman.jpg" style="max-width: 100%;"></a></p>\n<ol start="7" dir="auto">\n<li>《<a href="https://python3-cookbook.readthedocs.io/zh-cn/latest/index.html" rel="nofollow">Python Cookbook in Chinese</a>》 3rd Edition</li>\n</ol>\n<p align="left" dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/98d559b0992e91057c102de276b9dcccd39227afb49ebdd1ebc6cfc5503ce684/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032332f707974686f6e332d636f6f6b626f6f6b2e6a7067"><img width="600" src="https://camo.githubusercontent.com/98d559b0992e91057c102de276b9dcccd39227afb49ebdd1ebc6cfc5503ce684/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032332f707974686f6e332d636f6f6b626f6f6b2e6a7067" data-canonical-src="https://shub.weiyan.tech/kgarden/2023/python3-cookbook.jpg" style="max-width: 100%;"></a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': 'x.2-月刊'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '公众号许久没有更新了', 'number': 28, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/28', 'createdAt': '2023-12-01T02:36:37Z', 'lastEditedAt': '2023-12-08T05:34:13Z', 'updatedAt': '2023-12-08T05:34:13Z', 'body': '大家可能会发现自从 2023 年下半年以来，**"BioIT 爱好者"** 公众号的更新频率越来越低了。\r\n\r\n这里面除了个人私人时间越来越少以外，还有一个原因就是个人把写文章从语雀转移到了 [GitHub](https://github.com/shenweiyan/) 的 Issues 和 Discussions 上。\r\n\r\n<!-- more -->\r\n\r\n虽然在很长一段时间以来，个人一直都在使用 [语雀](https://www.yuque.com/shenweiyan) 来记录个人工作、生活的各种知识，但直到今年的下半年在考虑数据多平台使用+备份+搜索的一些使用场景时才发现语雀无法批量导出的一些弊端，更重要的一个原因是正如在 "[博客与写作的一些思考](https://github.com/shenweiyan/Knowledge-Garden/issues/34)" 里面所提到的 **"博客其实就是写给自己看的"**，**"大部分人写所谓 \'博客\' 到最后都把时间花在装潢 CSS HTML 主题上了"**！几经考虑以后，选择了 [GitHub](https://github.com/shenweiyan/) 的 Issues 和 Discussions，对于其中的优点：\r\n\r\n- 全免费，不需要租用域名和服务器；\r\n- 不需要过多折腾，对不懂技术的人来说非常友好；\r\n- Issues/Discussions 自带评论功能，不需要后期为博客安装评论插件；\r\n- GitHub 有网页版和手机 App，只要有网，我们可以随时随地发布文章，而不仅仅局限于电脑；\r\n- 发布到 GitHub 的内容，在 Google 的搜索结果中有非常高的权重；\r\n- 回归 CommonMark 的编辑，方便各种支持 Markdown 平台间的备份迁移；\r\n- 借助 GitHub REST/GraphQL API 可以很方便实现 Issues/Discussions 的导入导出；\r\n- 借助 GitHub Pages 和 GitHub Actions，可以轻松把 Issues/Discussions 转化成静态博客\r\n\r\n借助一些开源的工具，个人目前大部分文章都已经从语 [语雀](https://www.yuque.com/shenweiyan) 同步到了 [shenweiyan/Knowledge-Garden](https://github.com/shenweiyan/Knowledge-Garden)，并后续会继续在 GitHub 进行更新，由于[公众号的各种限制和封闭性](https://www.yuque.com/shenweiyan/articles/qw325a)，如精力和时间允许后续会同步至公众号。\r\n\r\n![Knowledge-Garden Repo image](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/github-knowledge-garden.png)\r\n\r\n![Knowledge-Garden Discussions image](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/knowledge-garden-discussions.png)\r\n', 'bodyText': '大家可能会发现自从 2023 年下半年以来，"BioIT 爱好者" 公众号的更新频率越来越低了。\n这里面除了个人私人时间越来越少以外，还有一个原因就是个人把写文章从语雀转移到了 GitHub 的 Issues 和 Discussions 上。\n\n虽然在很长一段时间以来，个人一直都在使用 语雀 来记录个人工作、生活的各种知识，但直到今年的下半年在考虑数据多平台使用+备份+搜索的一些使用场景时才发现语雀无法批量导出的一些弊端，更重要的一个原因是正如在 "博客与写作的一些思考" 里面所提到的 "博客其实就是写给自己看的"，"大部分人写所谓 \'博客\' 到最后都把时间花在装潢 CSS HTML 主题上了"！几经考虑以后，选择了 GitHub 的 Issues 和 Discussions，对于其中的优点：\n\n全免费，不需要租用域名和服务器；\n不需要过多折腾，对不懂技术的人来说非常友好；\nIssues/Discussions 自带评论功能，不需要后期为博客安装评论插件；\nGitHub 有网页版和手机 App，只要有网，我们可以随时随地发布文章，而不仅仅局限于电脑；\n发布到 GitHub 的内容，在 Google 的搜索结果中有非常高的权重；\n回归 CommonMark 的编辑，方便各种支持 Markdown 平台间的备份迁移；\n借助 GitHub REST/GraphQL API 可以很方便实现 Issues/Discussions 的导入导出；\n借助 GitHub Pages 和 GitHub Actions，可以轻松把 Issues/Discussions 转化成静态博客\n\n借助一些开源的工具，个人目前大部分文章都已经从语 语雀 同步到了 shenweiyan/Knowledge-Garden，并后续会继续在 GitHub 进行更新，由于公众号的各种限制和封闭性，如精力和时间允许后续会同步至公众号。', 'bodyHTML': '<p dir="auto">大家可能会发现自从 2023 年下半年以来，<strong>"BioIT 爱好者"</strong> 公众号的更新频率越来越低了。</p>\n<p dir="auto">这里面除了个人私人时间越来越少以外，还有一个原因就是个人把写文章从语雀转移到了 <a href="https://github.com/shenweiyan/">GitHub</a> 的 Issues 和 Discussions 上。</p>\n\n<p dir="auto">虽然在很长一段时间以来，个人一直都在使用 <a href="https://www.yuque.com/shenweiyan" rel="nofollow">语雀</a> 来记录个人工作、生活的各种知识，但直到今年的下半年在考虑数据多平台使用+备份+搜索的一些使用场景时才发现语雀无法批量导出的一些弊端，更重要的一个原因是正如在 "<a href="https://github.com/shenweiyan/Knowledge-Garden/issues/34" data-hovercard-type="discussion" data-hovercard-url="/shenweiyan/Digital-Garden/discussions/34/hovercard">博客与写作的一些思考</a>" 里面所提到的 <strong>"博客其实就是写给自己看的"</strong>，<strong>"大部分人写所谓 \'博客\' 到最后都把时间花在装潢 CSS HTML 主题上了"</strong>！几经考虑以后，选择了 <a href="https://github.com/shenweiyan/">GitHub</a> 的 Issues 和 Discussions，对于其中的优点：</p>\n<ul dir="auto">\n<li>全免费，不需要租用域名和服务器；</li>\n<li>不需要过多折腾，对不懂技术的人来说非常友好；</li>\n<li>Issues/Discussions 自带评论功能，不需要后期为博客安装评论插件；</li>\n<li>GitHub 有网页版和手机 App，只要有网，我们可以随时随地发布文章，而不仅仅局限于电脑；</li>\n<li>发布到 GitHub 的内容，在 Google 的搜索结果中有非常高的权重；</li>\n<li>回归 CommonMark 的编辑，方便各种支持 Markdown 平台间的备份迁移；</li>\n<li>借助 GitHub REST/GraphQL API 可以很方便实现 Issues/Discussions 的导入导出；</li>\n<li>借助 GitHub Pages 和 GitHub Actions，可以轻松把 Issues/Discussions 转化成静态博客</li>\n</ul>\n<p dir="auto">借助一些开源的工具，个人目前大部分文章都已经从语 <a href="https://www.yuque.com/shenweiyan" rel="nofollow">语雀</a> 同步到了 <a href="https://github.com/shenweiyan/Knowledge-Garden">shenweiyan/Knowledge-Garden</a>，并后续会继续在 GitHub 进行更新，由于<a href="https://www.yuque.com/shenweiyan/articles/qw325a" rel="nofollow">公众号的各种限制和封闭性</a>，如精力和时间允许后续会同步至公众号。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/dadecc03e3e1350c17f933ff677b159d484c26533f593b15ad447be06fac9842/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6769746875622d6b6e6f776c656467652d67617264656e2e706e67"><img src="https://camo.githubusercontent.com/dadecc03e3e1350c17f933ff677b159d484c26533f593b15ad447be06fac9842/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6769746875622d6b6e6f776c656467652d67617264656e2e706e67" alt="Knowledge-Garden Repo image" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/github-knowledge-garden.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/aaf8a81c7a39716d78fbbb2569e8d1d92b91e602454bd7d037a02744c5852943/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6b6e6f776c656467652d67617264656e2d64697363757373696f6e732e706e67"><img src="https://camo.githubusercontent.com/aaf8a81c7a39716d78fbbb2569e8d1d92b91e602454bd7d037a02744c5852943/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6b6e6f776c656467652d67617264656e2d64697363757373696f6e732e706e67" alt="Knowledge-Garden Discussions image" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/knowledge-garden-discussions.png" style="max-width: 100%;"></a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': [{'name': '公众号'}]}, 'comments': {'nodes': []}}, {'title': 'Python3 编译安装 --with-openssl 无效的问题', 'number': 27, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/27', 'createdAt': '2023-12-01T02:32:24Z', 'lastEditedAt': None, 'updatedAt': '2024-01-03T07:57:48Z', 'body': '很多人在使用 Python3 经常会遇到一些 openssl 版本太低从而导致包无法正常使用的问题，尤其是 `urllib3` 这个包。\r\n```python\r\nPython 3.9.18 (main, Sep  7 2023, 14:32:17) \r\n[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)] on linux\r\nType "help", "copyright", "credits" or "license" for more information.\r\n>>> import requests\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\n  File "/usr/local/software/python-3.9.18/lib/python3.9/site-packages/requests/__init__.py", line 43, in <module>\r\n    import urllib3\r\n  File "/usr/local/software/python-3.9.18/lib/python3.9/site-packages/urllib3/__init__.py", line 41, in <module>\r\n    raise ImportError(\r\nImportError: urllib3 v2.0 only supports OpenSSL 1.1.1+, currently the \'ssl\' module is compiled with \'OpenSSL 1.0.2k-fips  26 Jan 2017\'. See: https://github.com/urllib3/urllib3/issues/2168\r\n>>> import ssl\r\n>>> import urllib3\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\n  File "/usr/local/software/python-3.9.18/lib/python3.9/site-packages/urllib3/__init__.py", line 41, in <module>\r\n    raise ImportError(\r\nImportError: urllib3 v2.0 only supports OpenSSL 1.1.1+, currently the \'ssl\' module is compiled with \'OpenSSL 1.0.2k-fips  26 Jan 2017\'. See: https://github.com/urllib3/urllib3/issues/2168\r\n```\r\n\r\n网络上有很多关于这方面的教程，主要解决方案：\r\n\r\n1. 降级 `urllib3` 的版本，例如：`pip install --upgrade urllib3==1.26.15`；\r\n2. 重新安装一个更高版本的 OpenSSL，然后备份并替换系统原来的 openssl，最后重新编译安装 Python。\r\n\r\n个人觉得这两个方法都不够好，尤其是第二个方法 —— \r\n\r\n- 新装了一个更高版本的 OpenSSL，但是又不想替换系统原来的 openssl 以免出现新的问题（或者没有管理员权限）；\r\n- 在编译的时候使用 `--with-openssl` 指定了新装的 OpenSSL 路径，编译安装完成后 Python **仍然使用旧版本的 OpenSSL**；\r\n\r\n很不幸的是，个人在 CentOS 7.3 + Python-3.9.18 就遇到了这个问题。\r\n\r\n1. 新装了 OpenSSL 3.0.10 \r\n```\r\nwget https://www.openssl.org/source/openssl-3.0.10.tar.gz --no-check-certificate\r\ntar zvxf openssl-3.0.10.tar.gz\r\ncd openssl-3.0.10\r\n./config --prefix=/usr/local/software/openssl-3.0.10 shared zlib\r\nmake && make install\r\n```\r\n\r\n2. 添加 `~/.bashrc` 环境变量\r\n```\r\nexport PATH=/usr/local/software/openssl-3.0.10/bin:$PATH\r\nexport LD_LIBRARY_PATH=/usr/local/software/openssl-3.0.10/lib64:$LD_LIBRARY_PATH\r\n```\r\n\r\n3. 重新编译安装 Python-3.9.18\r\n```\r\n./configure --prefix=/usr/local/software/python-3.9.18 --with-openssl=/usr/local/software/openssl-3.0.10/\r\nmake && make install\r\n```\r\n\r\n等编译完成后，你会神奇的发现重新编译安装后 Python 3.9.18 **仍然使用旧版本的 OpenSSL (OpenSSL 1.0.2k-fips  26 Jan 2017)**！\r\n\r\n其实，这还是因为 Python 在重新编译的时候没有识别到新编译的 OpenSSL，因此，我们需要把重新编译的命令调整一下：\r\n```\r\n/configure --prefix=/usr/local/software/python-3.9.18 \\\r\n--with-openssl=/usr/local/software/openssl-3.0.10/ \\\r\nLDFLAGS="-L/usr/local/software/openssl-3.0.10/lib64" \\\r\nCPPFLAGS="-I/usr/local/software/openssl-3.0.10/include" \\\r\nPKG_CONFIG_PATH="/usr/local/software/openssl-3.0.10/lib64/pkgconfig"\r\n```\r\n\r\n这样子一来，问题就迎刃而解了，编译安装完后，你会发现 Python 3.9.18 已经成功用用上了 OpenSSL 3.0.10 1 Aug 2023：\r\n```\r\n$ python3 -c "import ssl; print(ssl.OPENSSL_VERSION)"\r\nOpenSSL 3.0.10 1 Aug 2023\r\n```\r\n![OpenSSL 3.0.10 on Python3.9.18](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/Gitbook/2023/python-3.9.18-openssl-3.0.10.png)\r\n\r\n## 参考资料\r\n\r\n1. [Drop support for OpenSSL<1.1.1 - urllib3/urllib3#2168](https://github.com/urllib3/urllib3/issues/2168)\r\n\r\n', 'bodyText': '很多人在使用 Python3 经常会遇到一些 openssl 版本太低从而导致包无法正常使用的问题，尤其是 urllib3 这个包。\nPython 3.9.18 (main, Sep  7 2023, 14:32:17) \n[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)] on linux\nType "help", "copyright", "credits" or "license" for more information.\n>>> import requests\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\n  File "/usr/local/software/python-3.9.18/lib/python3.9/site-packages/requests/__init__.py", line 43, in <module>\n    import urllib3\n  File "/usr/local/software/python-3.9.18/lib/python3.9/site-packages/urllib3/__init__.py", line 41, in <module>\n    raise ImportError(\nImportError: urllib3 v2.0 only supports OpenSSL 1.1.1+, currently the \'ssl\' module is compiled with \'OpenSSL 1.0.2k-fips  26 Jan 2017\'. See: https://github.com/urllib3/urllib3/issues/2168\n>>> import ssl\n>>> import urllib3\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\n  File "/usr/local/software/python-3.9.18/lib/python3.9/site-packages/urllib3/__init__.py", line 41, in <module>\n    raise ImportError(\nImportError: urllib3 v2.0 only supports OpenSSL 1.1.1+, currently the \'ssl\' module is compiled with \'OpenSSL 1.0.2k-fips  26 Jan 2017\'. See: https://github.com/urllib3/urllib3/issues/2168\n网络上有很多关于这方面的教程，主要解决方案：\n\n降级 urllib3 的版本，例如：pip install --upgrade urllib3==1.26.15；\n重新安装一个更高版本的 OpenSSL，然后备份并替换系统原来的 openssl，最后重新编译安装 Python。\n\n个人觉得这两个方法都不够好，尤其是第二个方法 ——\n\n新装了一个更高版本的 OpenSSL，但是又不想替换系统原来的 openssl 以免出现新的问题（或者没有管理员权限）；\n在编译的时候使用 --with-openssl 指定了新装的 OpenSSL 路径，编译安装完成后 Python 仍然使用旧版本的 OpenSSL；\n\n很不幸的是，个人在 CentOS 7.3 + Python-3.9.18 就遇到了这个问题。\n\n新装了 OpenSSL 3.0.10\n\nwget https://www.openssl.org/source/openssl-3.0.10.tar.gz --no-check-certificate\ntar zvxf openssl-3.0.10.tar.gz\ncd openssl-3.0.10\n./config --prefix=/usr/local/software/openssl-3.0.10 shared zlib\nmake && make install\n\n\n添加 ~/.bashrc 环境变量\n\nexport PATH=/usr/local/software/openssl-3.0.10/bin:$PATH\nexport LD_LIBRARY_PATH=/usr/local/software/openssl-3.0.10/lib64:$LD_LIBRARY_PATH\n\n\n重新编译安装 Python-3.9.18\n\n./configure --prefix=/usr/local/software/python-3.9.18 --with-openssl=/usr/local/software/openssl-3.0.10/\nmake && make install\n\n等编译完成后，你会神奇的发现重新编译安装后 Python 3.9.18 仍然使用旧版本的 OpenSSL (OpenSSL 1.0.2k-fips  26 Jan 2017)！\n其实，这还是因为 Python 在重新编译的时候没有识别到新编译的 OpenSSL，因此，我们需要把重新编译的命令调整一下：\n/configure --prefix=/usr/local/software/python-3.9.18 \\\n--with-openssl=/usr/local/software/openssl-3.0.10/ \\\nLDFLAGS="-L/usr/local/software/openssl-3.0.10/lib64" \\\nCPPFLAGS="-I/usr/local/software/openssl-3.0.10/include" \\\nPKG_CONFIG_PATH="/usr/local/software/openssl-3.0.10/lib64/pkgconfig"\n\n这样子一来，问题就迎刃而解了，编译安装完后，你会发现 Python 3.9.18 已经成功用用上了 OpenSSL 3.0.10 1 Aug 2023：\n$ python3 -c "import ssl; print(ssl.OPENSSL_VERSION)"\nOpenSSL 3.0.10 1 Aug 2023\n\n\n参考资料\n\nDrop support for OpenSSL<1.1.1 - urllib3/urllib3#2168', 'bodyHTML': '<p dir="auto">很多人在使用 Python3 经常会遇到一些 openssl 版本太低从而导致包无法正常使用的问题，尤其是 <code class="notranslate">urllib3</code> 这个包。</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Python 3.9.18 (main, Sep  7 2023, 14:32:17) \n[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)] on linux\nType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\n&gt;&gt;&gt; import requests\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\n  File &quot;/usr/local/software/python-3.9.18/lib/python3.9/site-packages/requests/__init__.py&quot;, line 43, in &lt;module&gt;\n    import urllib3\n  File &quot;/usr/local/software/python-3.9.18/lib/python3.9/site-packages/urllib3/__init__.py&quot;, line 41, in &lt;module&gt;\n    raise ImportError(\nImportError: urllib3 v2.0 only supports OpenSSL 1.1.1+, currently the \'ssl\' module is compiled with \'OpenSSL 1.0.2k-fips  26 Jan 2017\'. See: https://github.com/urllib3/urllib3/issues/2168\n&gt;&gt;&gt; import ssl\n&gt;&gt;&gt; import urllib3\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\n  File &quot;/usr/local/software/python-3.9.18/lib/python3.9/site-packages/urllib3/__init__.py&quot;, line 41, in &lt;module&gt;\n    raise ImportError(\nImportError: urllib3 v2.0 only supports OpenSSL 1.1.1+, currently the \'ssl\' module is compiled with \'OpenSSL 1.0.2k-fips  26 Jan 2017\'. See: https://github.com/urllib3/urllib3/issues/2168"><pre class="notranslate"><span class="pl-en">Python</span> <span class="pl-c1">3.9</span><span class="pl-c1">.18</span> (<span class="pl-s1">main</span>, <span class="pl-v">Sep</span>  <span class="pl-c1">7</span> <span class="pl-c1">2023</span>, <span class="pl-c1">14</span>:<span class="pl-c1">32</span>:<span class="pl-c1">17</span>) \n[<span class="pl-c1">GCC</span> <span class="pl-c1">4.8</span><span class="pl-c1">.5</span> <span class="pl-c1">20150623</span> (<span class="pl-v">Red</span> <span class="pl-v">Hat</span> <span class="pl-c1">4.8</span><span class="pl-c1">.5</span><span class="pl-c1">-</span><span class="pl-c1">44</span>)] <span class="pl-s1">on</span> <span class="pl-s1">linux</span>\n<span class="pl-v">Type</span> <span class="pl-s">"help"</span>, <span class="pl-s">"copyright"</span>, <span class="pl-s">"credits"</span> <span class="pl-c1">or</span> <span class="pl-s">"license"</span> <span class="pl-k">for</span> <span class="pl-s1">more</span> <span class="pl-s1">information</span>.\n<span class="pl-c1">&gt;</span><span class="pl-c1">&gt;&gt;</span> <span class="pl-s1">import</span> <span class="pl-s1">requests</span>\n<span class="pl-en">Traceback</span> (<span class="pl-s1">most</span> <span class="pl-s1">recent</span> <span class="pl-s1">call</span> <span class="pl-s1">last</span>):\n  <span class="pl-v">File</span> <span class="pl-s">"&lt;stdin&gt;"</span>, <span class="pl-s1">line</span> <span class="pl-c1">1</span>, <span class="pl-c1">in</span> <span class="pl-c1">&lt;</span><span class="pl-s1">module</span><span class="pl-c1">&gt;</span>\n  <span class="pl-v">File</span> <span class="pl-s">"/usr/local/software/python-3.9.18/lib/python3.9/site-packages/requests/__init__.py"</span>, <span class="pl-s1">line</span> <span class="pl-c1">43</span>, <span class="pl-s1">in</span> <span class="pl-c1">&lt;</span><span class="pl-s1">module</span><span class="pl-c1">&gt;</span>\n    <span class="pl-s1">import</span> <span class="pl-s1">urllib3</span>\n  <span class="pl-v">File</span> <span class="pl-s">"/usr/local/software/python-3.9.18/lib/python3.9/site-packages/urllib3/__init__.py"</span>, <span class="pl-s1">line</span> <span class="pl-c1">41</span>, <span class="pl-s1">in</span> <span class="pl-c1">&lt;</span><span class="pl-s1">module</span><span class="pl-c1">&gt;</span>\n    <span class="pl-s1">raise</span> <span class="pl-en">ImportError</span>(\n<span class="pl-v">ImportError</span>: <span class="pl-s1">urllib3</span> <span class="pl-s1">v2</span><span class="pl-c1">.0</span> <span class="pl-s1">only</span> <span class="pl-s1">supports</span> <span class="pl-v">OpenSSL</span> <span class="pl-c1">1.1</span>.<span class="pl-c1">1</span><span class="pl-c1">+</span>, <span class="pl-s1">currently</span> <span class="pl-s1">the</span> <span class="pl-s">\'ssl\'</span> <span class="pl-s1">module</span> <span class="pl-c1">is</span> <span class="pl-s1">compiled</span> <span class="pl-k">with</span> <span class="pl-s">\'OpenSSL 1.0.2k-fips  26 Jan 2017\'</span>. <span class="pl-c1">See</span>: <span class="pl-s1">https</span>:<span class="pl-s1"></span><span class="pl-c1">//</span><span class="pl-s1">github</span>.<span class="pl-c1">com</span><span class="pl-c1">/</span><span class="pl-s1">urllib3</span><span class="pl-c1">/</span><span class="pl-s1">urllib3</span><span class="pl-c1">/</span><span class="pl-s1">issues</span><span class="pl-c1">/</span><span class="pl-c1">2168</span>\n<span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-k">import</span> <span class="pl-s1">ssl</span>\n<span class="pl-c1">&gt;</span><span class="pl-c1">&gt;&gt;</span> <span class="pl-k">import</span> <span class="pl-s1">urllib3</span>\n<span class="pl-en">Traceback</span> (<span class="pl-s1">most</span> <span class="pl-s1">recent</span> <span class="pl-s1">call</span> <span class="pl-s1">last</span>):\n  <span class="pl-v">File</span> <span class="pl-s">"&lt;stdin&gt;"</span>, <span class="pl-s1">line</span> <span class="pl-c1">1</span>, <span class="pl-s1">in</span> <span class="pl-c1">&lt;</span><span class="pl-s1">module</span><span class="pl-c1">&gt;</span>\n  <span class="pl-v">File</span> <span class="pl-s">"/usr/local/software/python-3.9.18/lib/python3.9/site-packages/urllib3/__init__.py"</span>, <span class="pl-s1">line</span> <span class="pl-c1">41</span>, <span class="pl-s1">in</span> <span class="pl-c1">&lt;</span><span class="pl-s1">module</span><span class="pl-c1">&gt;</span>\n    <span class="pl-s1">raise</span> <span class="pl-v">ImportError</span>(\n<span class="pl-v">ImportError</span>: <span class="pl-s1">urllib3</span> <span class="pl-s1">v2</span>.<span class="pl-c1">0</span> <span class="pl-c1">only</span> <span class="pl-s1">supports</span> <span class="pl-v">OpenSSL</span> <span class="pl-c1">1.1</span><span class="pl-c1">.1</span><span class="pl-c1">+</span>, <span class="pl-s1">currently</span> <span class="pl-s1">the</span> <span class="pl-s">\'ssl\'</span> <span class="pl-s1">module</span> <span class="pl-c1">is</span> <span class="pl-s1">compiled</span> <span class="pl-s1">with</span> <span class="pl-s">\'OpenSSL 1.0.2k-fips  26 Jan 2017\'</span>. <span class="pl-c1">See</span>: <span class="pl-s1">https</span>:<span class="pl-c1">//</span><span class="pl-s1">github</span>.<span class="pl-c1">com</span><span class="pl-c1">/</span><span class="pl-s1">urllib3</span><span class="pl-c1">/</span><span class="pl-s1">urllib3</span><span class="pl-c1">/</span><span class="pl-s1">issues</span><span class="pl-c1">/</span><span class="pl-c1">2168</span></pre></div>\n<p dir="auto">网络上有很多关于这方面的教程，主要解决方案：</p>\n<ol dir="auto">\n<li>降级 <code class="notranslate">urllib3</code> 的版本，例如：<code class="notranslate">pip install --upgrade urllib3==1.26.15</code>；</li>\n<li>重新安装一个更高版本的 OpenSSL，然后备份并替换系统原来的 openssl，最后重新编译安装 Python。</li>\n</ol>\n<p dir="auto">个人觉得这两个方法都不够好，尤其是第二个方法 ——</p>\n<ul dir="auto">\n<li>新装了一个更高版本的 OpenSSL，但是又不想替换系统原来的 openssl 以免出现新的问题（或者没有管理员权限）；</li>\n<li>在编译的时候使用 <code class="notranslate">--with-openssl</code> 指定了新装的 OpenSSL 路径，编译安装完成后 Python <strong>仍然使用旧版本的 OpenSSL</strong>；</li>\n</ul>\n<p dir="auto">很不幸的是，个人在 CentOS 7.3 + Python-3.9.18 就遇到了这个问题。</p>\n<ol dir="auto">\n<li>新装了 OpenSSL 3.0.10</li>\n</ol>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="wget https://www.openssl.org/source/openssl-3.0.10.tar.gz --no-check-certificate\ntar zvxf openssl-3.0.10.tar.gz\ncd openssl-3.0.10\n./config --prefix=/usr/local/software/openssl-3.0.10 shared zlib\nmake &amp;&amp; make install"><pre class="notranslate"><code class="notranslate">wget https://www.openssl.org/source/openssl-3.0.10.tar.gz --no-check-certificate\ntar zvxf openssl-3.0.10.tar.gz\ncd openssl-3.0.10\n./config --prefix=/usr/local/software/openssl-3.0.10 shared zlib\nmake &amp;&amp; make install\n</code></pre></div>\n<ol start="2" dir="auto">\n<li>添加 <code class="notranslate">~/.bashrc</code> 环境变量</li>\n</ol>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="export PATH=/usr/local/software/openssl-3.0.10/bin:$PATH\nexport LD_LIBRARY_PATH=/usr/local/software/openssl-3.0.10/lib64:$LD_LIBRARY_PATH"><pre class="notranslate"><code class="notranslate">export PATH=/usr/local/software/openssl-3.0.10/bin:$PATH\nexport LD_LIBRARY_PATH=/usr/local/software/openssl-3.0.10/lib64:$LD_LIBRARY_PATH\n</code></pre></div>\n<ol start="3" dir="auto">\n<li>重新编译安装 Python-3.9.18</li>\n</ol>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="./configure --prefix=/usr/local/software/python-3.9.18 --with-openssl=/usr/local/software/openssl-3.0.10/\nmake &amp;&amp; make install"><pre class="notranslate"><code class="notranslate">./configure --prefix=/usr/local/software/python-3.9.18 --with-openssl=/usr/local/software/openssl-3.0.10/\nmake &amp;&amp; make install\n</code></pre></div>\n<p dir="auto">等编译完成后，你会神奇的发现重新编译安装后 Python 3.9.18 <strong>仍然使用旧版本的 OpenSSL (OpenSSL 1.0.2k-fips  26 Jan 2017)</strong>！</p>\n<p dir="auto">其实，这还是因为 Python 在重新编译的时候没有识别到新编译的 OpenSSL，因此，我们需要把重新编译的命令调整一下：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="/configure --prefix=/usr/local/software/python-3.9.18 \\\n--with-openssl=/usr/local/software/openssl-3.0.10/ \\\nLDFLAGS=&quot;-L/usr/local/software/openssl-3.0.10/lib64&quot; \\\nCPPFLAGS=&quot;-I/usr/local/software/openssl-3.0.10/include&quot; \\\nPKG_CONFIG_PATH=&quot;/usr/local/software/openssl-3.0.10/lib64/pkgconfig&quot;"><pre class="notranslate"><code class="notranslate">/configure --prefix=/usr/local/software/python-3.9.18 \\\n--with-openssl=/usr/local/software/openssl-3.0.10/ \\\nLDFLAGS="-L/usr/local/software/openssl-3.0.10/lib64" \\\nCPPFLAGS="-I/usr/local/software/openssl-3.0.10/include" \\\nPKG_CONFIG_PATH="/usr/local/software/openssl-3.0.10/lib64/pkgconfig"\n</code></pre></div>\n<p dir="auto">这样子一来，问题就迎刃而解了，编译安装完后，你会发现 Python 3.9.18 已经成功用用上了 OpenSSL 3.0.10 1 Aug 2023：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ python3 -c &quot;import ssl; print(ssl.OPENSSL_VERSION)&quot;\nOpenSSL 3.0.10 1 Aug 2023"><pre class="notranslate"><code class="notranslate">$ python3 -c "import ssl; print(ssl.OPENSSL_VERSION)"\nOpenSSL 3.0.10 1 Aug 2023\n</code></pre></div>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/40dbd0ae7551564e45271e0b77e4559e9494c8ffd5e7055554f319c4f6948f06/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f476974626f6f6b2f323032332f707974686f6e2d332e392e31382d6f70656e73736c2d332e302e31302e706e67"><img src="https://camo.githubusercontent.com/40dbd0ae7551564e45271e0b77e4559e9494c8ffd5e7055554f319c4f6948f06/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f476974626f6f6b2f323032332f707974686f6e2d332e392e31382d6f70656e73736c2d332e302e31302e706e67" alt="OpenSSL 3.0.10 on Python3.9.18" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/Gitbook/2023/python-3.9.18-openssl-3.0.10.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">参考资料</h2>\n<ol dir="auto">\n<li><a href="https://github.com/urllib3/urllib3/issues/2168" data-hovercard-type="issue" data-hovercard-url="/urllib3/urllib3/issues/2168/hovercard">Drop support for OpenSSL&lt;1.1.1 - urllib3/urllib3#2168</a></li>\n</ol>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.3-折腾'}, 'labels': {'nodes': [{'name': '1.3.5-Python'}]}, 'comments': {'nodes': []}}, {'title': '富文本编辑器与 md 语法的一些困惑', 'number': 26, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/26', 'createdAt': '2023-12-01T02:29:00Z', 'lastEditedAt': '2023-12-01T05:34:04Z', 'updatedAt': '2023-12-01T05:34:04Z', 'body': '在语雀写文档写得多的，会对原始的 Markdown 越来越不敏感。\r\n\r\n语雀的富文本编辑器虽然支持的依然是 markdown，但也有它自身的一些与传统 markdown 不一样的写法，例如 [高亮块](https://www.yuque.com/yuque/gpvawt/rhhxkx)。这样的编辑器把 markdown 的源码给隐藏了——在用户编辑的时候实时进行渲染，这样对于不熟悉 markdown 的用户也极容易上手。\r\n\r\n<!-- more -->\r\n\r\n但带来了一个问题，就是使用 markdown 对文档进行导出的时候，有时候会导致 markdown 格式错乱，尤其是当我们想要把语雀的一些文档导出到其他平台时候，这个问题特别烦人。\r\n\r\n![Markdown 语法异常](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/md-error.png)\r\n\r\n回到 GitHub，重新接触纯 Markdown 格式的写法，才真正感觉到这种模式的好处 —— 方便其他支持 Markdown 语法平台的转移，又可以最大限度解决 Markdown 语法错乱的尴尬。\r\n\r\n但也有不好的地方，就是对于多级有序缩进，插入代码后，有序序列(多级缩进)会被打断。。。。\r\n\r\n## 嵌套列表\r\n\r\n通过增加空格，Github 可以实现在嵌套列表中插入代码块；但是这样的做法在 MkDocs 中是有问题的。关于 MkDocs 的嵌套列表，在 https://github.com/mkdocs/mkdocs/issues/545 有一个讨论。\r\n\r\n参考的一个方法：<https://github.com/mkdocs/mkdocs/issues/2153>，即使用 [superfences](https://facelessuser.github.io/pymdown-extensions/extensions/superfences/) 插件，加上基于 Python 特有的 4 的倍数个空格进行缩进，可以比较好解决这个问题。\r\n', 'bodyText': '在语雀写文档写得多的，会对原始的 Markdown 越来越不敏感。\n语雀的富文本编辑器虽然支持的依然是 markdown，但也有它自身的一些与传统 markdown 不一样的写法，例如 高亮块。这样的编辑器把 markdown 的源码给隐藏了——在用户编辑的时候实时进行渲染，这样对于不熟悉 markdown 的用户也极容易上手。\n\n但带来了一个问题，就是使用 markdown 对文档进行导出的时候，有时候会导致 markdown 格式错乱，尤其是当我们想要把语雀的一些文档导出到其他平台时候，这个问题特别烦人。\n\n回到 GitHub，重新接触纯 Markdown 格式的写法，才真正感觉到这种模式的好处 —— 方便其他支持 Markdown 语法平台的转移，又可以最大限度解决 Markdown 语法错乱的尴尬。\n但也有不好的地方，就是对于多级有序缩进，插入代码后，有序序列(多级缩进)会被打断。。。。\n嵌套列表\n通过增加空格，Github 可以实现在嵌套列表中插入代码块；但是这样的做法在 MkDocs 中是有问题的。关于 MkDocs 的嵌套列表，在 mkdocs/mkdocs#545 有一个讨论。\n参考的一个方法：mkdocs/mkdocs#2153，即使用 superfences 插件，加上基于 Python 特有的 4 的倍数个空格进行缩进，可以比较好解决这个问题。', 'bodyHTML': '<p dir="auto">在语雀写文档写得多的，会对原始的 Markdown 越来越不敏感。</p>\n<p dir="auto">语雀的富文本编辑器虽然支持的依然是 markdown，但也有它自身的一些与传统 markdown 不一样的写法，例如 <a href="https://www.yuque.com/yuque/gpvawt/rhhxkx" rel="nofollow">高亮块</a>。这样的编辑器把 markdown 的源码给隐藏了——在用户编辑的时候实时进行渲染，这样对于不熟悉 markdown 的用户也极容易上手。</p>\n\n<p dir="auto">但带来了一个问题，就是使用 markdown 对文档进行导出的时候，有时候会导致 markdown 格式错乱，尤其是当我们想要把语雀的一些文档导出到其他平台时候，这个问题特别烦人。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/18910056fec08e54a69a5c9dc5936403cd8f2c5b4ff44ac163cb5a545122fda2/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6d642d6572726f722e706e67"><img src="https://camo.githubusercontent.com/18910056fec08e54a69a5c9dc5936403cd8f2c5b4ff44ac163cb5a545122fda2/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6d642d6572726f722e706e67" alt="Markdown 语法异常" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/md-error.png" style="max-width: 100%;"></a></p>\n<p dir="auto">回到 GitHub，重新接触纯 Markdown 格式的写法，才真正感觉到这种模式的好处 —— 方便其他支持 Markdown 语法平台的转移，又可以最大限度解决 Markdown 语法错乱的尴尬。</p>\n<p dir="auto">但也有不好的地方，就是对于多级有序缩进，插入代码后，有序序列(多级缩进)会被打断。。。。</p>\n<h2 dir="auto">嵌套列表</h2>\n<p dir="auto">通过增加空格，Github 可以实现在嵌套列表中插入代码块；但是这样的做法在 MkDocs 中是有问题的。关于 MkDocs 的嵌套列表，在 <a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="79625651" data-permission-text="Title is private" data-url="https://github.com/mkdocs/mkdocs/issues/545" data-hovercard-type="issue" data-hovercard-url="/mkdocs/mkdocs/issues/545/hovercard" href="https://github.com/mkdocs/mkdocs/issues/545">mkdocs/mkdocs#545</a> 有一个讨论。</p>\n<p dir="auto">参考的一个方法：<a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="657050632" data-permission-text="Title is private" data-url="https://github.com/mkdocs/mkdocs/issues/2153" data-hovercard-type="issue" data-hovercard-url="/mkdocs/mkdocs/issues/2153/hovercard" href="https://github.com/mkdocs/mkdocs/issues/2153">mkdocs/mkdocs#2153</a>，即使用 <a href="https://facelessuser.github.io/pymdown-extensions/extensions/superfences/" rel="nofollow">superfences</a> 插件，加上基于 Python 特有的 4 的倍数个空格进行缩进，可以比较好解决这个问题。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '不同版本服务器间 SSH 免密码登录失败', 'number': 25, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/25', 'createdAt': '2023-11-30T05:43:06Z', 'lastEditedAt': '2023-12-01T03:01:45Z', 'updatedAt': '2024-01-03T07:56:12Z', 'body': "今天从服务器 A（CentOS 7.3）配置 SSH 无密码登录服务器 B（CentOS Steam 9），发现执行以下常规操作后无法实现：\r\n```\r\n$ ssh-keygen\r\n$ ssh-copy-id -i ~/.ssh/id_rsa.pub shenweiyan@66.xx.xx.xx  # ssh-copy-id user@rhel-9-server-IP\r\n$ ssh shenweiyan@66.xx.xx.xx\r\n```\r\n![ssh-keygen-need-passwd](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/ssh-keygen-passwd.png)\r\n\r\n后来，更换 ecdsa 算法，问题才解决：\r\n```\r\n$ ssh-keygen -t ecdsa\r\n$ ssh-copy-id -i ~/.ssh/id_ecdsa.pub shenweiyan@66.xx.xx.xx\r\n```\r\n![ssh-keygen-ecdsa](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/ssh-keygen-ecdsa.png)\r\n\r\n根本原因就在于 SHA-1 已经在 RHEL9 中弃用了！\r\n\r\n从 RHEL9 的官网文档《[1.0.2. Crypto-policies, RHEL core cryptographic components, and protocols](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/considerations_in_adopting_rhel_9/index#ref_considerations-security-crypto_changes-to-security)（加密策略、RHEL 核心加密组件和协议）》可以看到 SHA-1 已经在 RHEL9 中弃用了！\r\n> In RHEL 9, SHA-1 usage for signatures is restricted in the DEFAULT system-wide cryptographic policy. Except for HMAC, SHA-1 is no longer allowed in TLS, DTLS, SSH, IKEv2, DNSSEC, and Kerberos protocols. Individual applications not controlled by the RHEL system-wide crypto policies are also moving away from using SHA-1 hashes in RHEL 9.\r\n\r\n在 RHEL 9 中，用于签名的 SHA-1 用法在 DEFAULT 系统范围的加密策略中受到限制。除 HMAC 外，TLS、DTLS、**SSH**、IKEv2、DNSSEC 和 Kerberos 协议中不再允许使用 SHA-1。不受 RHEL 系统范围的加密策略控制的单个应用程序在 RHEL 9 中也不再使用 SHA-1 hashes。\r\n\r\n## 跨用户免密码登录\r\n\r\n从服务器 A（CentOS 7.3）的 root 用户已配置 SSH 无密码登录服务器 B（CentOS Steam 9）的 shenweiyan 用户。\r\n\r\n- 在服务器 A（CentOS 7.3）的 root 用户下执行以下命令，在 `/root/.ssh` 目录会得到两个文件：\r\n  - 私钥文件：**id_ecdsa**\r\n  - 公钥文件：**id_ecdsa.pub**\r\n```\r\nroot@centos-vm-7 11:47:20 ~ \r\n$ ssh-keygen -t ecdsa\r\nGenerating public/private ecdsa key pair.\r\nEnter file in which to save the key (/root/.ssh/id_ecdsa): \r\nEnter passphrase (empty for no passphrase): \r\nEnter same passphrase again: \r\nYour identification has been saved in /root/.ssh/id_ecdsa.\r\nYour public key has been saved in /root/.ssh/id_ecdsa.pub.\r\nThe key fingerprint is:\r\nad:15:01:5c:a9:db:69:64:2b:0c:4c:5f:be:f9:e1:44 root@centos-vm-7\r\nThe key's randomart image is:\r\n+--[ECDSA  256]---+\r\n|       ..oo.     |\r\n|      . . o.     |\r\n|     o . +.      |\r\n|      o o.+.E    |\r\n|       oS=o*     |\r\n|        +oB o    |\r\n|        .o + .   |\r\n|            o    |\r\n|                 |\r\n+-----------------+\r\n```\r\n\r\n- 把服务器 A 下 root 用户的公钥文件拷贝到服务器 B（CentOS Steam 9）的 shenweiyan 用户的 authorized_keys 中；\r\n```\r\nroot@centos-vm-7 11:53:25 ~\r\n$ ssh-copy-id -i ~/.ssh/id_ecdsa.pub shenweiyan@66.xx.xx.xx\r\n```\r\n\r\n- 将公钥拷贝至目标服务器 B 后，在源服务器 A 通过密钥跨用户免密码登录云服务器。\r\n```\r\nroot@centos-vm-7 11:58:47 /root \r\n$ ssh shenweiyan@66.xx.xx.xx  # ssh -i id_ecdsa shenweiyan@66.xx.xx.xx\r\n```\r\n\r\n## 参考资料\r\n- [RHEL6 ssh 到 RHEL9 的 no hostkey alg 错误](https://www.yuque.com/shenweiyan/cookbook/rhel-9-no-hostkey-alg)，语雀\r\n- [How can I use a legacy ssh-rsa key on CentOS 9 Stream?](https://serverfault.com/questions/1095898/how-can-i-use-a-legacy-ssh-rsa-key-on-centos-9-stream)，Server Fault\r\n", 'bodyText': "今天从服务器 A（CentOS 7.3）配置 SSH 无密码登录服务器 B（CentOS Steam 9），发现执行以下常规操作后无法实现：\n$ ssh-keygen\n$ ssh-copy-id -i ~/.ssh/id_rsa.pub shenweiyan@66.xx.xx.xx  # ssh-copy-id user@rhel-9-server-IP\n$ ssh shenweiyan@66.xx.xx.xx\n\n\n后来，更换 ecdsa 算法，问题才解决：\n$ ssh-keygen -t ecdsa\n$ ssh-copy-id -i ~/.ssh/id_ecdsa.pub shenweiyan@66.xx.xx.xx\n\n\n根本原因就在于 SHA-1 已经在 RHEL9 中弃用了！\n从 RHEL9 的官网文档《1.0.2. Crypto-policies, RHEL core cryptographic components, and protocols（加密策略、RHEL 核心加密组件和协议）》可以看到 SHA-1 已经在 RHEL9 中弃用了！\n\nIn RHEL 9, SHA-1 usage for signatures is restricted in the DEFAULT system-wide cryptographic policy. Except for HMAC, SHA-1 is no longer allowed in TLS, DTLS, SSH, IKEv2, DNSSEC, and Kerberos protocols. Individual applications not controlled by the RHEL system-wide crypto policies are also moving away from using SHA-1 hashes in RHEL 9.\n\n在 RHEL 9 中，用于签名的 SHA-1 用法在 DEFAULT 系统范围的加密策略中受到限制。除 HMAC 外，TLS、DTLS、SSH、IKEv2、DNSSEC 和 Kerberos 协议中不再允许使用 SHA-1。不受 RHEL 系统范围的加密策略控制的单个应用程序在 RHEL 9 中也不再使用 SHA-1 hashes。\n跨用户免密码登录\n从服务器 A（CentOS 7.3）的 root 用户已配置 SSH 无密码登录服务器 B（CentOS Steam 9）的 shenweiyan 用户。\n\n在服务器 A（CentOS 7.3）的 root 用户下执行以下命令，在 /root/.ssh 目录会得到两个文件：\n\n私钥文件：id_ecdsa\n公钥文件：id_ecdsa.pub\n\n\n\nroot@centos-vm-7 11:47:20 ~ \n$ ssh-keygen -t ecdsa\nGenerating public/private ecdsa key pair.\nEnter file in which to save the key (/root/.ssh/id_ecdsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /root/.ssh/id_ecdsa.\nYour public key has been saved in /root/.ssh/id_ecdsa.pub.\nThe key fingerprint is:\nad:15:01:5c:a9:db:69:64:2b:0c:4c:5f:be:f9:e1:44 root@centos-vm-7\nThe key's randomart image is:\n+--[ECDSA  256]---+\n|       ..oo.     |\n|      . . o.     |\n|     o . +.      |\n|      o o.+.E    |\n|       oS=o*     |\n|        +oB o    |\n|        .o + .   |\n|            o    |\n|                 |\n+-----------------+\n\n\n把服务器 A 下 root 用户的公钥文件拷贝到服务器 B（CentOS Steam 9）的 shenweiyan 用户的 authorized_keys 中；\n\nroot@centos-vm-7 11:53:25 ~\n$ ssh-copy-id -i ~/.ssh/id_ecdsa.pub shenweiyan@66.xx.xx.xx\n\n\n将公钥拷贝至目标服务器 B 后，在源服务器 A 通过密钥跨用户免密码登录云服务器。\n\nroot@centos-vm-7 11:58:47 /root \n$ ssh shenweiyan@66.xx.xx.xx  # ssh -i id_ecdsa shenweiyan@66.xx.xx.xx\n\n参考资料\n\nRHEL6 ssh 到 RHEL9 的 no hostkey alg 错误，语雀\nHow can I use a legacy ssh-rsa key on CentOS 9 Stream?，Server Fault", 'bodyHTML': '<p dir="auto">今天从服务器 A（CentOS 7.3）配置 SSH 无密码登录服务器 B（CentOS Steam 9），发现执行以下常规操作后无法实现：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ ssh-keygen\n$ ssh-copy-id -i ~/.ssh/id_rsa.pub shenweiyan@66.xx.xx.xx  # ssh-copy-id user@rhel-9-server-IP\n$ ssh shenweiyan@66.xx.xx.xx"><pre class="notranslate"><code class="notranslate">$ ssh-keygen\n$ ssh-copy-id -i ~/.ssh/id_rsa.pub shenweiyan@66.xx.xx.xx  # ssh-copy-id user@rhel-9-server-IP\n$ ssh shenweiyan@66.xx.xx.xx\n</code></pre></div>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/82ed317111ec21aa171111dac7fac45ad7d24e46a9ca7a51beffecdbd6f7f311/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f7373682d6b657967656e2d7061737377642e706e67"><img src="https://camo.githubusercontent.com/82ed317111ec21aa171111dac7fac45ad7d24e46a9ca7a51beffecdbd6f7f311/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f7373682d6b657967656e2d7061737377642e706e67" alt="ssh-keygen-need-passwd" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/ssh-keygen-passwd.png" style="max-width: 100%;"></a></p>\n<p dir="auto">后来，更换 ecdsa 算法，问题才解决：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ ssh-keygen -t ecdsa\n$ ssh-copy-id -i ~/.ssh/id_ecdsa.pub shenweiyan@66.xx.xx.xx"><pre class="notranslate"><code class="notranslate">$ ssh-keygen -t ecdsa\n$ ssh-copy-id -i ~/.ssh/id_ecdsa.pub shenweiyan@66.xx.xx.xx\n</code></pre></div>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/9ca9fdbca54f9ec5170b247e7d301a718877c0787b0a14048c11f96773c71ffb/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f7373682d6b657967656e2d65636473612e706e67"><img src="https://camo.githubusercontent.com/9ca9fdbca54f9ec5170b247e7d301a718877c0787b0a14048c11f96773c71ffb/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f7373682d6b657967656e2d65636473612e706e67" alt="ssh-keygen-ecdsa" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/ssh-keygen-ecdsa.png" style="max-width: 100%;"></a></p>\n<p dir="auto">根本原因就在于 SHA-1 已经在 RHEL9 中弃用了！</p>\n<p dir="auto">从 RHEL9 的官网文档《<a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/considerations_in_adopting_rhel_9/index#ref_considerations-security-crypto_changes-to-security" rel="nofollow">1.0.2. Crypto-policies, RHEL core cryptographic components, and protocols</a>（加密策略、RHEL 核心加密组件和协议）》可以看到 SHA-1 已经在 RHEL9 中弃用了！</p>\n<blockquote>\n<p dir="auto">In RHEL 9, SHA-1 usage for signatures is restricted in the DEFAULT system-wide cryptographic policy. Except for HMAC, SHA-1 is no longer allowed in TLS, DTLS, SSH, IKEv2, DNSSEC, and Kerberos protocols. Individual applications not controlled by the RHEL system-wide crypto policies are also moving away from using SHA-1 hashes in RHEL 9.</p>\n</blockquote>\n<p dir="auto">在 RHEL 9 中，用于签名的 SHA-1 用法在 DEFAULT 系统范围的加密策略中受到限制。除 HMAC 外，TLS、DTLS、<strong>SSH</strong>、IKEv2、DNSSEC 和 Kerberos 协议中不再允许使用 SHA-1。不受 RHEL 系统范围的加密策略控制的单个应用程序在 RHEL 9 中也不再使用 SHA-1 hashes。</p>\n<h2 dir="auto">跨用户免密码登录</h2>\n<p dir="auto">从服务器 A（CentOS 7.3）的 root 用户已配置 SSH 无密码登录服务器 B（CentOS Steam 9）的 shenweiyan 用户。</p>\n<ul dir="auto">\n<li>在服务器 A（CentOS 7.3）的 root 用户下执行以下命令，在 <code class="notranslate">/root/.ssh</code> 目录会得到两个文件：\n<ul dir="auto">\n<li>私钥文件：<strong>id_ecdsa</strong></li>\n<li>公钥文件：<strong>id_ecdsa.pub</strong></li>\n</ul>\n</li>\n</ul>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="root@centos-vm-7 11:47:20 ~ \n$ ssh-keygen -t ecdsa\nGenerating public/private ecdsa key pair.\nEnter file in which to save the key (/root/.ssh/id_ecdsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /root/.ssh/id_ecdsa.\nYour public key has been saved in /root/.ssh/id_ecdsa.pub.\nThe key fingerprint is:\nad:15:01:5c:a9:db:69:64:2b:0c:4c:5f:be:f9:e1:44 root@centos-vm-7\nThe key\'s randomart image is:\n+--[ECDSA  256]---+\n|       ..oo.     |\n|      . . o.     |\n|     o . +.      |\n|      o o.+.E    |\n|       oS=o*     |\n|        +oB o    |\n|        .o + .   |\n|            o    |\n|                 |\n+-----------------+"><pre class="notranslate"><code class="notranslate">root@centos-vm-7 11:47:20 ~ \n$ ssh-keygen -t ecdsa\nGenerating public/private ecdsa key pair.\nEnter file in which to save the key (/root/.ssh/id_ecdsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /root/.ssh/id_ecdsa.\nYour public key has been saved in /root/.ssh/id_ecdsa.pub.\nThe key fingerprint is:\nad:15:01:5c:a9:db:69:64:2b:0c:4c:5f:be:f9:e1:44 root@centos-vm-7\nThe key\'s randomart image is:\n+--[ECDSA  256]---+\n|       ..oo.     |\n|      . . o.     |\n|     o . +.      |\n|      o o.+.E    |\n|       oS=o*     |\n|        +oB o    |\n|        .o + .   |\n|            o    |\n|                 |\n+-----------------+\n</code></pre></div>\n<ul dir="auto">\n<li>把服务器 A 下 root 用户的公钥文件拷贝到服务器 B（CentOS Steam 9）的 shenweiyan 用户的 authorized_keys 中；</li>\n</ul>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="root@centos-vm-7 11:53:25 ~\n$ ssh-copy-id -i ~/.ssh/id_ecdsa.pub shenweiyan@66.xx.xx.xx"><pre class="notranslate"><code class="notranslate">root@centos-vm-7 11:53:25 ~\n$ ssh-copy-id -i ~/.ssh/id_ecdsa.pub shenweiyan@66.xx.xx.xx\n</code></pre></div>\n<ul dir="auto">\n<li>将公钥拷贝至目标服务器 B 后，在源服务器 A 通过密钥跨用户免密码登录云服务器。</li>\n</ul>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="root@centos-vm-7 11:58:47 /root \n$ ssh shenweiyan@66.xx.xx.xx  # ssh -i id_ecdsa shenweiyan@66.xx.xx.xx"><pre class="notranslate"><code class="notranslate">root@centos-vm-7 11:58:47 /root \n$ ssh shenweiyan@66.xx.xx.xx  # ssh -i id_ecdsa shenweiyan@66.xx.xx.xx\n</code></pre></div>\n<h2 dir="auto">参考资料</h2>\n<ul dir="auto">\n<li><a href="https://www.yuque.com/shenweiyan/cookbook/rhel-9-no-hostkey-alg" rel="nofollow">RHEL6 ssh 到 RHEL9 的 no hostkey alg 错误</a>，语雀</li>\n<li><a href="https://serverfault.com/questions/1095898/how-can-i-use-a-legacy-ssh-rsa-key-on-centos-9-stream" rel="nofollow">How can I use a legacy ssh-rsa key on CentOS 9 Stream?</a>，Server Fault</li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.3-折腾'}, 'labels': {'nodes': [{'name': '1.3.17-服务器配置使用'}]}, 'comments': {'nodes': []}}, {'title': 'Micro/Mamba 安装与注意事项', 'number': 24, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/24', 'createdAt': '2023-11-27T05:37:10Z', 'lastEditedAt': '2024-03-19T06:59:48Z', 'updatedAt': '2024-03-19T06:59:48Z', 'body': '记录一下 Micromamba/Mamba 安装的步骤和注意事项。\r\n\r\n## Mamba 安装\r\n\r\nMamba 可以使用 Mambaforge 方法和已有 Mini/conda 的方式安装，官方推荐的是前面一种，即使用 Mambaforge 进行全新安装。\r\n\r\n### 全新安装\r\n关于 mamba 的安装，官方推荐 [Fresh install](https://mamba.readthedocs.io/en/latest/mamba-installation.html)，即全新安装。\r\n\r\n> We recommend that you start with the [Mambaforge distribution](https://github.com/conda-forge/miniforge#mambaforge). Mambaforge comes with the popular conda-forge channel preconfigured, but you can modify the configuration to use any channel you like. Note that Anaconda channels are generally incompatible with conda-forge, so you should not mix them.        \r\n> 我们建议您从 Mambaforge 发行版开始。 Mambaforge 预配置了流行的 conda-forge 通道，但您可以修改配置以使用您喜欢的任何通道。请注意，Anaconda 通道通常与 conda-forge 不兼容，因此您不应混合使用它们。\r\n\r\n其实就是：          \r\n1. 先去 [Mambaforge distribution](https://github.com/conda-forge/miniforge#mambaforge) 下载 Mambaforge-Linux-x86_64.sh。          \r\n2. 执行 `sh Mambaforge-Linux-x86_64.sh` 安装命令。\r\n\r\n### 在已有的 conda 中安装\r\n\r\n官方文档中明确说不推荐这种安装 Mamba 的方式，他们强烈建议使用 Mambaforge 方法（见上文）。\r\n\r\n这种方法，要获取 `mamba` ，其实只需将其从 `conda-forge` 通道安装到基础环境中即可；但是需要注意 **Installing mamba into any other environment than base is not supported**，即**不支持将 mamba 安装到 base 之外的任何其他环境中**。\r\n\r\n首先，安装 Miniconda。\r\n\r\n参考 <https://docs.conda.io/en/latest/miniconda.html>，下载完 Miniconda3-latest-Linux-x86_64.sh，sh 执行一下就可以安装了。\r\n```\r\nsh Miniconda3-latest-Linux-x86_64.sh\r\n```\r\n然后，安装 mamba。\r\n```\r\n~/miniconda3/bin/conda install -c conda-forge mamba\r\n```\r\n\r\n> For both `mamba` and `conda`, the `base` environment is meant to hold their dependencies. It is strongly discouraged to install anything else in the base envionment. Doing so may break `mamba` and `conda` installation.      \r\n> 对于 `mamba` 和 `conda` ， `base` 环境旨在保存它们的依赖关系。强烈建议不要在基础环境中安装任何其他东西。这样做可能会破坏 `mamba` 和 `conda` 安装。\r\n\r\n## Micromamba 安装\r\n参考 <https://mamba.readthedocs.io/en/latest/micromamba-installation.html>。\r\n\r\n> `micromamba` is a fully statically-linked, self-contained, executable. This means that the `base` environment is completely empty. The configuration for `micromamba` is slighly different, namely all environments and cache will be created by default under the `MAMBA_ROOT_PREFIX` environment variable. There is also no pre-configured `.condarc`/`.mambarc` shipped with micromamba (they are however still read if present).                         \r\n> `micromamba` 是一个完全静态链接的、独立的可执行文件。这意味着 `base` 环境完全是空的。`micromamba` 的配置略有不同，即默认情况下将在 `MAMBA_ROOT_PREFIX` 环境变量下创建所有环境和缓存。`micromamba` 也没有预配置的 `.condarc` / `.mambarc`（但是，如果存在，它们仍然会被读取）。\r\n\r\n### 脚本安装\r\n\r\n如果您使用的是 macOS、Linux 或 Windows 上的 Git Bash，则有一种简单的安装方法 `micromamba`。只需在您喜欢的 shell 中执行安装脚本即可。\r\n\r\n对于 Linux、macOS 或 Windows 上的 Git Bash，请使用以下命令安装：\r\n```\r\n"${SHELL}" <(curl -L micro.mamba.pm/install.sh)\r\n```\r\n\r\n### 自动更新\r\n安装后，`micromamba` 可以通过下面的方式更新：\r\n```\r\nmicromamba self-update\r\n```\r\n可以指定显式版本：\r\n```\r\nmicromamba self-update --version 1.4.6\r\n```\r\n### 手动更新\r\n\r\n#### Linux 和 macOS\r\n下载并解压可执行文件（来自官方 `conda-forge` 包）即可。\r\n> 其实，这就等同于我们直接去 <https://github.com/mamba-org/micromamba-releases/releases> 下载对应平台的二进制文件，或者 `tar.bz2` 文件，然后解压缩，把 `bin/micromamba` 部分提出来使用。\r\n\r\n确保安装了基本实用程序。我们需要 `curl` 和 `tar` 并支持 `bzip2` 。此外，您还需要一个基于 glibc 的系统，例如 Ubuntu、Fedora 或 Centos（Alpine Linux 本身无法运行）。\r\n\r\n以下 magic URL 始终返回 micromamba 的最新可用版本，并且使用 `tar` 自动提取 `bin/micromamba` 部分。\r\n```\r\n# Linux Intel (x86_64):\r\ncurl -Ls https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xvj bin/micromamba\r\n# Linux ARM64:\r\ncurl -Ls https://micro.mamba.pm/api/micromamba/linux-aarch64/latest | tar -xvj bin/micromamba\r\n# Linux Power:\r\ncurl -Ls https://micro.mamba.pm/api/micromamba/linux-ppc64le/latest | tar -xvj bin/micromamba\r\n# macOS Intel (x86_64):\r\ncurl -Ls https://micro.mamba.pm/api/micromamba/osx-64/latest | tar -xvj bin/micromamba\r\n# macOS Silicon/M1 (ARM64):\r\ncurl -Ls https://micro.mamba.pm/api/micromamba/osx-arm64/latest | tar -xvj bin/micromamba\r\n```\r\n提取完成后，我们就可以使用 `micromamba` 二进制文件了。\r\n\r\n如果您想在临时用例中快速使用 micromamba，您可以运行：\r\n```\r\nexport MAMBA_ROOT_PREFIX=/some/prefix  # optional, defaults to ~/micromamba\r\neval "$(./bin/micromamba shell hook -s posix)"\r\n```\r\n这个 shell hook 会修改您的 shell 变量以包含 micromamba 命令。\r\n\r\n如果您想保留这些更改，可以通过运行 `./micromamba shell init ...` 自动将它们写入 `.bashrc` （或 `.zshrc` ）。这还允许您选择自定义 MAMBA_ROOT_ENVIRONMENT，这是包和 repodata 缓存所在的位置。\r\n```\r\n# Linux/bash:\r\n./bin/micromamba shell init -s bash -p ~/micromamba  # this writes to your .bashrc file\r\n# sourcing the bashrc file incorporates the changes into the running session.\r\n# better yet, restart your terminal!\r\nsource ~/.bashrc\r\n\r\n# macOS/zsh:\r\n./micromamba shell init -s zsh -p ~/micromamba\r\nsource ~/.zshrc\r\n```\r\n\r\n现在您可以激活基本环境并安装新软件包，或创建其他环境。\r\n```\r\nmicromamba activate  # this activates the base environment\r\nmicromamba install python=3.6 jupyter -c conda-forge\r\n# or\r\nmicromamba create -n env_name xtensor -c conda-forge\r\nmicromamba activate env_name\r\n```\r\n\r\n专有的 [conda-forge](https://conda-forge.org/) 设置可以配置为：\r\n```\r\nmicromamba config append channels conda-forge\r\nmicromamba config append channels nodefaults\r\nmicromamba config set channel_priority strict\r\n```\r\n', 'bodyText': '记录一下 Micromamba/Mamba 安装的步骤和注意事项。\nMamba 安装\nMamba 可以使用 Mambaforge 方法和已有 Mini/conda 的方式安装，官方推荐的是前面一种，即使用 Mambaforge 进行全新安装。\n全新安装\n关于 mamba 的安装，官方推荐 Fresh install，即全新安装。\n\nWe recommend that you start with the Mambaforge distribution. Mambaforge comes with the popular conda-forge channel preconfigured, but you can modify the configuration to use any channel you like. Note that Anaconda channels are generally incompatible with conda-forge, so you should not mix them.\n我们建议您从 Mambaforge 发行版开始。 Mambaforge 预配置了流行的 conda-forge 通道，但您可以修改配置以使用您喜欢的任何通道。请注意，Anaconda 通道通常与 conda-forge 不兼容，因此您不应混合使用它们。\n\n其实就是：\n\n先去 Mambaforge distribution 下载 Mambaforge-Linux-x86_64.sh。\n执行 sh Mambaforge-Linux-x86_64.sh 安装命令。\n\n在已有的 conda 中安装\n官方文档中明确说不推荐这种安装 Mamba 的方式，他们强烈建议使用 Mambaforge 方法（见上文）。\n这种方法，要获取 mamba ，其实只需将其从 conda-forge 通道安装到基础环境中即可；但是需要注意 Installing mamba into any other environment than base is not supported，即不支持将 mamba 安装到 base 之外的任何其他环境中。\n首先，安装 Miniconda。\n参考 https://docs.conda.io/en/latest/miniconda.html，下载完 Miniconda3-latest-Linux-x86_64.sh，sh 执行一下就可以安装了。\nsh Miniconda3-latest-Linux-x86_64.sh\n\n然后，安装 mamba。\n~/miniconda3/bin/conda install -c conda-forge mamba\n\n\nFor both mamba and conda, the base environment is meant to hold their dependencies. It is strongly discouraged to install anything else in the base envionment. Doing so may break mamba and conda installation.\n对于 mamba 和 conda ， base 环境旨在保存它们的依赖关系。强烈建议不要在基础环境中安装任何其他东西。这样做可能会破坏 mamba 和 conda 安装。\n\nMicromamba 安装\n参考 https://mamba.readthedocs.io/en/latest/micromamba-installation.html。\n\nmicromamba is a fully statically-linked, self-contained, executable. This means that the base environment is completely empty. The configuration for micromamba is slighly different, namely all environments and cache will be created by default under the MAMBA_ROOT_PREFIX environment variable. There is also no pre-configured .condarc/.mambarc shipped with micromamba (they are however still read if present).\nmicromamba 是一个完全静态链接的、独立的可执行文件。这意味着 base 环境完全是空的。micromamba 的配置略有不同，即默认情况下将在 MAMBA_ROOT_PREFIX 环境变量下创建所有环境和缓存。micromamba 也没有预配置的 .condarc / .mambarc（但是，如果存在，它们仍然会被读取）。\n\n脚本安装\n如果您使用的是 macOS、Linux 或 Windows 上的 Git Bash，则有一种简单的安装方法 micromamba。只需在您喜欢的 shell 中执行安装脚本即可。\n对于 Linux、macOS 或 Windows 上的 Git Bash，请使用以下命令安装：\n"${SHELL}" <(curl -L micro.mamba.pm/install.sh)\n\n自动更新\n安装后，micromamba 可以通过下面的方式更新：\nmicromamba self-update\n\n可以指定显式版本：\nmicromamba self-update --version 1.4.6\n\n手动更新\nLinux 和 macOS\n下载并解压可执行文件（来自官方 conda-forge 包）即可。\n\n其实，这就等同于我们直接去 https://github.com/mamba-org/micromamba-releases/releases 下载对应平台的二进制文件，或者 tar.bz2 文件，然后解压缩，把 bin/micromamba 部分提出来使用。\n\n确保安装了基本实用程序。我们需要 curl 和 tar 并支持 bzip2 。此外，您还需要一个基于 glibc 的系统，例如 Ubuntu、Fedora 或 Centos（Alpine Linux 本身无法运行）。\n以下 magic URL 始终返回 micromamba 的最新可用版本，并且使用 tar 自动提取 bin/micromamba 部分。\n# Linux Intel (x86_64):\ncurl -Ls https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xvj bin/micromamba\n# Linux ARM64:\ncurl -Ls https://micro.mamba.pm/api/micromamba/linux-aarch64/latest | tar -xvj bin/micromamba\n# Linux Power:\ncurl -Ls https://micro.mamba.pm/api/micromamba/linux-ppc64le/latest | tar -xvj bin/micromamba\n# macOS Intel (x86_64):\ncurl -Ls https://micro.mamba.pm/api/micromamba/osx-64/latest | tar -xvj bin/micromamba\n# macOS Silicon/M1 (ARM64):\ncurl -Ls https://micro.mamba.pm/api/micromamba/osx-arm64/latest | tar -xvj bin/micromamba\n\n提取完成后，我们就可以使用 micromamba 二进制文件了。\n如果您想在临时用例中快速使用 micromamba，您可以运行：\nexport MAMBA_ROOT_PREFIX=/some/prefix  # optional, defaults to ~/micromamba\neval "$(./bin/micromamba shell hook -s posix)"\n\n这个 shell hook 会修改您的 shell 变量以包含 micromamba 命令。\n如果您想保留这些更改，可以通过运行 ./micromamba shell init ... 自动将它们写入 .bashrc （或 .zshrc ）。这还允许您选择自定义 MAMBA_ROOT_ENVIRONMENT，这是包和 repodata 缓存所在的位置。\n# Linux/bash:\n./bin/micromamba shell init -s bash -p ~/micromamba  # this writes to your .bashrc file\n# sourcing the bashrc file incorporates the changes into the running session.\n# better yet, restart your terminal!\nsource ~/.bashrc\n\n# macOS/zsh:\n./micromamba shell init -s zsh -p ~/micromamba\nsource ~/.zshrc\n\n现在您可以激活基本环境并安装新软件包，或创建其他环境。\nmicromamba activate  # this activates the base environment\nmicromamba install python=3.6 jupyter -c conda-forge\n# or\nmicromamba create -n env_name xtensor -c conda-forge\nmicromamba activate env_name\n\n专有的 conda-forge 设置可以配置为：\nmicromamba config append channels conda-forge\nmicromamba config append channels nodefaults\nmicromamba config set channel_priority strict', 'bodyHTML': '<p dir="auto">记录一下 Micromamba/Mamba 安装的步骤和注意事项。</p>\n<h2 dir="auto">Mamba 安装</h2>\n<p dir="auto">Mamba 可以使用 Mambaforge 方法和已有 Mini/conda 的方式安装，官方推荐的是前面一种，即使用 Mambaforge 进行全新安装。</p>\n<h3 dir="auto">全新安装</h3>\n<p dir="auto">关于 mamba 的安装，官方推荐 <a href="https://mamba.readthedocs.io/en/latest/mamba-installation.html" rel="nofollow">Fresh install</a>，即全新安装。</p>\n<blockquote>\n<p dir="auto">We recommend that you start with the <a href="https://github.com/conda-forge/miniforge#mambaforge">Mambaforge distribution</a>. Mambaforge comes with the popular conda-forge channel preconfigured, but you can modify the configuration to use any channel you like. Note that Anaconda channels are generally incompatible with conda-forge, so you should not mix them.<br>\n我们建议您从 Mambaforge 发行版开始。 Mambaforge 预配置了流行的 conda-forge 通道，但您可以修改配置以使用您喜欢的任何通道。请注意，Anaconda 通道通常与 conda-forge 不兼容，因此您不应混合使用它们。</p>\n</blockquote>\n<p dir="auto">其实就是：</p>\n<ol dir="auto">\n<li>先去 <a href="https://github.com/conda-forge/miniforge#mambaforge">Mambaforge distribution</a> 下载 Mambaforge-Linux-x86_64.sh。</li>\n<li>执行 <code class="notranslate">sh Mambaforge-Linux-x86_64.sh</code> 安装命令。</li>\n</ol>\n<h3 dir="auto">在已有的 conda 中安装</h3>\n<p dir="auto">官方文档中明确说不推荐这种安装 Mamba 的方式，他们强烈建议使用 Mambaforge 方法（见上文）。</p>\n<p dir="auto">这种方法，要获取 <code class="notranslate">mamba</code> ，其实只需将其从 <code class="notranslate">conda-forge</code> 通道安装到基础环境中即可；但是需要注意 <strong>Installing mamba into any other environment than base is not supported</strong>，即<strong>不支持将 mamba 安装到 base 之外的任何其他环境中</strong>。</p>\n<p dir="auto">首先，安装 Miniconda。</p>\n<p dir="auto">参考 <a href="https://docs.conda.io/en/latest/miniconda.html" rel="nofollow">https://docs.conda.io/en/latest/miniconda.html</a>，下载完 Miniconda3-latest-Linux-x86_64.sh，sh 执行一下就可以安装了。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="sh Miniconda3-latest-Linux-x86_64.sh"><pre class="notranslate"><code class="notranslate">sh Miniconda3-latest-Linux-x86_64.sh\n</code></pre></div>\n<p dir="auto">然后，安装 mamba。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="~/miniconda3/bin/conda install -c conda-forge mamba"><pre class="notranslate"><code class="notranslate">~/miniconda3/bin/conda install -c conda-forge mamba\n</code></pre></div>\n<blockquote>\n<p dir="auto">For both <code class="notranslate">mamba</code> and <code class="notranslate">conda</code>, the <code class="notranslate">base</code> environment is meant to hold their dependencies. It is strongly discouraged to install anything else in the base envionment. Doing so may break <code class="notranslate">mamba</code> and <code class="notranslate">conda</code> installation.<br>\n对于 <code class="notranslate">mamba</code> 和 <code class="notranslate">conda</code> ， <code class="notranslate">base</code> 环境旨在保存它们的依赖关系。强烈建议不要在基础环境中安装任何其他东西。这样做可能会破坏 <code class="notranslate">mamba</code> 和 <code class="notranslate">conda</code> 安装。</p>\n</blockquote>\n<h2 dir="auto">Micromamba 安装</h2>\n<p dir="auto">参考 <a href="https://mamba.readthedocs.io/en/latest/micromamba-installation.html" rel="nofollow">https://mamba.readthedocs.io/en/latest/micromamba-installation.html</a>。</p>\n<blockquote>\n<p dir="auto"><code class="notranslate">micromamba</code> is a fully statically-linked, self-contained, executable. This means that the <code class="notranslate">base</code> environment is completely empty. The configuration for <code class="notranslate">micromamba</code> is slighly different, namely all environments and cache will be created by default under the <code class="notranslate">MAMBA_ROOT_PREFIX</code> environment variable. There is also no pre-configured <code class="notranslate">.condarc</code>/<code class="notranslate">.mambarc</code> shipped with micromamba (they are however still read if present).<br>\n<code class="notranslate">micromamba</code> 是一个完全静态链接的、独立的可执行文件。这意味着 <code class="notranslate">base</code> 环境完全是空的。<code class="notranslate">micromamba</code> 的配置略有不同，即默认情况下将在 <code class="notranslate">MAMBA_ROOT_PREFIX</code> 环境变量下创建所有环境和缓存。<code class="notranslate">micromamba</code> 也没有预配置的 <code class="notranslate">.condarc</code> / <code class="notranslate">.mambarc</code>（但是，如果存在，它们仍然会被读取）。</p>\n</blockquote>\n<h3 dir="auto">脚本安装</h3>\n<p dir="auto">如果您使用的是 macOS、Linux 或 Windows 上的 Git Bash，则有一种简单的安装方法 <code class="notranslate">micromamba</code>。只需在您喜欢的 shell 中执行安装脚本即可。</p>\n<p dir="auto">对于 Linux、macOS 或 Windows 上的 Git Bash，请使用以下命令安装：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="&quot;${SHELL}&quot; &lt;(curl -L micro.mamba.pm/install.sh)"><pre class="notranslate"><code class="notranslate">"${SHELL}" &lt;(curl -L micro.mamba.pm/install.sh)\n</code></pre></div>\n<h3 dir="auto">自动更新</h3>\n<p dir="auto">安装后，<code class="notranslate">micromamba</code> 可以通过下面的方式更新：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="micromamba self-update"><pre class="notranslate"><code class="notranslate">micromamba self-update\n</code></pre></div>\n<p dir="auto">可以指定显式版本：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="micromamba self-update --version 1.4.6"><pre class="notranslate"><code class="notranslate">micromamba self-update --version 1.4.6\n</code></pre></div>\n<h3 dir="auto">手动更新</h3>\n<h4 dir="auto">Linux 和 macOS</h4>\n<p dir="auto">下载并解压可执行文件（来自官方 <code class="notranslate">conda-forge</code> 包）即可。</p>\n<blockquote>\n<p dir="auto">其实，这就等同于我们直接去 <a href="https://github.com/mamba-org/micromamba-releases/releases">https://github.com/mamba-org/micromamba-releases/releases</a> 下载对应平台的二进制文件，或者 <code class="notranslate">tar.bz2</code> 文件，然后解压缩，把 <code class="notranslate">bin/micromamba</code> 部分提出来使用。</p>\n</blockquote>\n<p dir="auto">确保安装了基本实用程序。我们需要 <code class="notranslate">curl</code> 和 <code class="notranslate">tar</code> 并支持 <code class="notranslate">bzip2</code> 。此外，您还需要一个基于 glibc 的系统，例如 Ubuntu、Fedora 或 Centos（Alpine Linux 本身无法运行）。</p>\n<p dir="auto">以下 magic URL 始终返回 micromamba 的最新可用版本，并且使用 <code class="notranslate">tar</code> 自动提取 <code class="notranslate">bin/micromamba</code> 部分。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# Linux Intel (x86_64):\ncurl -Ls https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xvj bin/micromamba\n# Linux ARM64:\ncurl -Ls https://micro.mamba.pm/api/micromamba/linux-aarch64/latest | tar -xvj bin/micromamba\n# Linux Power:\ncurl -Ls https://micro.mamba.pm/api/micromamba/linux-ppc64le/latest | tar -xvj bin/micromamba\n# macOS Intel (x86_64):\ncurl -Ls https://micro.mamba.pm/api/micromamba/osx-64/latest | tar -xvj bin/micromamba\n# macOS Silicon/M1 (ARM64):\ncurl -Ls https://micro.mamba.pm/api/micromamba/osx-arm64/latest | tar -xvj bin/micromamba"><pre class="notranslate"><code class="notranslate"># Linux Intel (x86_64):\ncurl -Ls https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xvj bin/micromamba\n# Linux ARM64:\ncurl -Ls https://micro.mamba.pm/api/micromamba/linux-aarch64/latest | tar -xvj bin/micromamba\n# Linux Power:\ncurl -Ls https://micro.mamba.pm/api/micromamba/linux-ppc64le/latest | tar -xvj bin/micromamba\n# macOS Intel (x86_64):\ncurl -Ls https://micro.mamba.pm/api/micromamba/osx-64/latest | tar -xvj bin/micromamba\n# macOS Silicon/M1 (ARM64):\ncurl -Ls https://micro.mamba.pm/api/micromamba/osx-arm64/latest | tar -xvj bin/micromamba\n</code></pre></div>\n<p dir="auto">提取完成后，我们就可以使用 <code class="notranslate">micromamba</code> 二进制文件了。</p>\n<p dir="auto">如果您想在临时用例中快速使用 micromamba，您可以运行：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="export MAMBA_ROOT_PREFIX=/some/prefix  # optional, defaults to ~/micromamba\neval &quot;$(./bin/micromamba shell hook -s posix)&quot;"><pre class="notranslate"><code class="notranslate">export MAMBA_ROOT_PREFIX=/some/prefix  # optional, defaults to ~/micromamba\neval "$(./bin/micromamba shell hook -s posix)"\n</code></pre></div>\n<p dir="auto">这个 shell hook 会修改您的 shell 变量以包含 micromamba 命令。</p>\n<p dir="auto">如果您想保留这些更改，可以通过运行 <code class="notranslate">./micromamba shell init ...</code> 自动将它们写入 <code class="notranslate">.bashrc</code> （或 <code class="notranslate">.zshrc</code> ）。这还允许您选择自定义 MAMBA_ROOT_ENVIRONMENT，这是包和 repodata 缓存所在的位置。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# Linux/bash:\n./bin/micromamba shell init -s bash -p ~/micromamba  # this writes to your .bashrc file\n# sourcing the bashrc file incorporates the changes into the running session.\n# better yet, restart your terminal!\nsource ~/.bashrc\n\n# macOS/zsh:\n./micromamba shell init -s zsh -p ~/micromamba\nsource ~/.zshrc"><pre class="notranslate"><code class="notranslate"># Linux/bash:\n./bin/micromamba shell init -s bash -p ~/micromamba  # this writes to your .bashrc file\n# sourcing the bashrc file incorporates the changes into the running session.\n# better yet, restart your terminal!\nsource ~/.bashrc\n\n# macOS/zsh:\n./micromamba shell init -s zsh -p ~/micromamba\nsource ~/.zshrc\n</code></pre></div>\n<p dir="auto">现在您可以激活基本环境并安装新软件包，或创建其他环境。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="micromamba activate  # this activates the base environment\nmicromamba install python=3.6 jupyter -c conda-forge\n# or\nmicromamba create -n env_name xtensor -c conda-forge\nmicromamba activate env_name"><pre class="notranslate"><code class="notranslate">micromamba activate  # this activates the base environment\nmicromamba install python=3.6 jupyter -c conda-forge\n# or\nmicromamba create -n env_name xtensor -c conda-forge\nmicromamba activate env_name\n</code></pre></div>\n<p dir="auto">专有的 <a href="https://conda-forge.org/" rel="nofollow">conda-forge</a> 设置可以配置为：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="micromamba config append channels conda-forge\nmicromamba config append channels nodefaults\nmicromamba config set channel_priority strict"><pre class="notranslate"><code class="notranslate">micromamba config append channels conda-forge\nmicromamba config append channels nodefaults\nmicromamba config set channel_priority strict\n</code></pre></div>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.3-折腾'}, 'labels': {'nodes': [{'name': '1.3.22-虚拟环境'}]}, 'comments': {'nodes': []}}, {'title': '大学计算机没有的一课', 'number': 23, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/23', 'createdAt': '2023-11-23T02:04:09Z', 'lastEditedAt': None, 'updatedAt': '2023-11-23T02:04:10Z', 'body': '今天是2023年1月19日，马上要过年了，在这里先提前给大家拜年了，祝大家新年快乐，阖家幸福安康！\r\n\r\n今天来给大家推荐一个不错的开源项目。\r\n\r\n<!-- more -->\r\n\r\n大学里的计算机课程往往只专注于讲授数据结构、操作系统这些知识，对于编程开发中常用的工具则留给学生自行学习。在 MIT 这个课程中，你可以了解和掌握命令行(shell)、文本编辑器(Vim)、版本控制系统(Git)等强大的工具，越早接触越能更加熟练地使用它们，有助于未来的职业生涯。\r\n![missing-semester](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/23019-missing-semester.png)\r\n\r\n**地址：**<https://github.com/missing-semester/missing-semester>\r\n**中文：**<https://missing-semester-cn.github.io/>\r\n', 'bodyText': '今天是2023年1月19日，马上要过年了，在这里先提前给大家拜年了，祝大家新年快乐，阖家幸福安康！\n今天来给大家推荐一个不错的开源项目。\n\n大学里的计算机课程往往只专注于讲授数据结构、操作系统这些知识，对于编程开发中常用的工具则留给学生自行学习。在 MIT 这个课程中，你可以了解和掌握命令行(shell)、文本编辑器(Vim)、版本控制系统(Git)等强大的工具，越早接触越能更加熟练地使用它们，有助于未来的职业生涯。\n\n地址：https://github.com/missing-semester/missing-semester\n中文：https://missing-semester-cn.github.io/', 'bodyHTML': '<p dir="auto">今天是2023年1月19日，马上要过年了，在这里先提前给大家拜年了，祝大家新年快乐，阖家幸福安康！</p>\n<p dir="auto">今天来给大家推荐一个不错的开源项目。</p>\n\n<p dir="auto">大学里的计算机课程往往只专注于讲授数据结构、操作系统这些知识，对于编程开发中常用的工具则留给学生自行学习。在 MIT 这个课程中，你可以了解和掌握命令行(shell)、文本编辑器(Vim)、版本控制系统(Git)等强大的工具，越早接触越能更加熟练地使用它们，有助于未来的职业生涯。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/7d90d53c9612e6948f51177276270d139e05d893e54737ad89d4471ee23a4819/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f32333031392d6d697373696e672d73656d65737465722e706e67"><img src="https://camo.githubusercontent.com/7d90d53c9612e6948f51177276270d139e05d893e54737ad89d4471ee23a4819/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f32333031392d6d697373696e672d73656d65737465722e706e67" alt="missing-semester" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/23019-missing-semester.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><strong>地址：</strong><a href="https://github.com/missing-semester/missing-semester">https://github.com/missing-semester/missing-semester</a><br>\n<strong>中文：</strong><a href="https://missing-semester-cn.github.io/" rel="nofollow">https://missing-semester-cn.github.io/</a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.4-知识'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': 'Notepad++ 在 GitHub 已经沦为战场了', 'number': 22, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/22', 'createdAt': '2023-11-23T01:59:33Z', 'lastEditedAt': '2024-07-16T05:38:26Z', 'updatedAt': '2024-07-16T05:38:26Z', 'body': 'Notepad++ 这片瓜田的瓜都吃了好几年了，作者却一直还在死性不改 。。。。。\r\n\r\n同样的 Notepad++ 在 GitHub 仓库 [notepad-plus-plus](https://github.com/notepad-plus-plus/notepad-plus-plus) 早已沦为反华辱华的垃圾场，群魔乱舞，简直惨不忍睹！\r\n\r\n<!-- more -->\r\n\r\n<img src=\'https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/say-no.png\' alt=\'say-no-to-Notepad++\' width=600>\r\n\r\n## Add random characters\r\n\r\nTwitter：<https://twitter.com/Notepad_plus/status/1618276938342359042>    \r\nV2EX：<https://www.v2ex.com/t/910777>\r\n\r\n![Twitter Notepad++](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/twitter-notepad%2B%2B.png)\r\n\r\n## Free Uyghur\r\n\r\n不知道大家有没有留意，前两天（2019 年 10 月 29）开源文本编辑器 Notepad++ 发布了最新的 \xa0[7.8.1](https://notepad-plus-plus.org/downloads/v7.8.1/)\xa0 版本。\r\n\r\n然而，软件新版本发布后，在该版本中 Notepad++ 的作者同时附加了一篇名为《[Notepad++ v7.8.1 : Free Uyghur](https://notepad-plus-plus.org/news/v781-free-uyghur-edition/)》抹黑中国的文章，具体的内容请大家自行百度（图片是文章部分截图）。而且这已经不是 Notepad++ 第一次这么干了！\r\n![Notepad++ Free Uyghur](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/notepad%2B%2Bv781.png)\r\n\r\nNotepad++ 的 "Free Uyghur" 出来以后，Notepad++ 所在的 Github 瞬间被广大中国的开发者占领，他们用自己的方式进行了回击。小编也忍不住上去看一下，发现 \xa0GitHub 上面基本上都是骂 Notepad++ 作者的，不过也有少数支持作者。\r\n![notepad-781-github-issue1](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/notepad-781-github-issue1.png)\r\n\r\n![notepad-781-github-issue2](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/notepad-781-github-issue2.png)\r\n\r\n## 起底一下开发者\r\n\r\n后来查了一下，Notepad++ 的作者，原来名字叫做侯今吾（英语：DonHO，<https://github.com/donho>），是一个毕业于台湾淡江大学及巴黎第七大学的电脑工程师，作为一个台湾人，也是一个台独积极分子，侯今吾借助 Notepad++ 抹黑中国可谓由来已久。\r\n\r\n![Notepad++ DonHO](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/notepad-donho.png)\r\n\r\n## 我也来说几句\r\n\r\n在这里我想说的是，Notepad++ 作为一款免费开源，深受国外编程爱好者赞扬，也为台湾开源界赢得好评，效率很高的文本编辑器，在早年间也是小编最喜欢常用的软件之一。但对于政见这件事情，小编觉得就像吃一道菜一样，你可以选择吃与不吃，不吃，你可以一笑而过，喜欢的人照常吃，与你无关，但你绝对不能吐一口脏东西上去。\r\n\r\n软件本身是没什么问题的，要说软件和作者之间的关系，那就是爱用不用的关系了。同类软件，我不喜欢你作者，当然就不用了，当然我不用也不会对软件发展有什么影响，不过我想说，这就像是去餐馆吃饭。对于顾客来说，他吃与不吃，不会影响服务员的工资。但对于服务员来说，至少不能让顾客觉得你讨厌。\r\n\r\n最后，有人说要抵制 Notepad++，但对我而言，小编是反对把开源与政治挂钩的，因此小编选择不用 Notepad++ —— 我有选择的权利，既然开源的编辑器那么多（我可以用 [Sublime Text](https://www.sublimetext.com/) (虽然 [Sublime Text](https://www.sublimetext.com/) 是非开源的)，可以用 [Visual Studio Code](https://code.visualstudio.com/)，可以用 [Github Atom](https://atom.io/)，也可以用 [BowPad](https://tools.stefankueng.com/BowPad.html)、[Editra](http://editra.org/)，甚至是国人开发的 [Notepad--](https://gitee.com/cxasm/notepad--)），我又何必选择一个带政治倾向自己又不喜欢的编辑器呢！\r\n', 'bodyText': 'Notepad++ 这片瓜田的瓜都吃了好几年了，作者却一直还在死性不改 。。。。。\n同样的 Notepad++ 在 GitHub 仓库 notepad-plus-plus 早已沦为反华辱华的垃圾场，群魔乱舞，简直惨不忍睹！\n\n\nAdd random characters\nTwitter：https://twitter.com/Notepad_plus/status/1618276938342359042\nV2EX：https://www.v2ex.com/t/910777\n\nFree Uyghur\n不知道大家有没有留意，前两天（2019 年 10 月 29）开源文本编辑器 Notepad++ 发布了最新的 \xa07.8.1\xa0 版本。\n然而，软件新版本发布后，在该版本中 Notepad++ 的作者同时附加了一篇名为《Notepad++ v7.8.1 : Free Uyghur》抹黑中国的文章，具体的内容请大家自行百度（图片是文章部分截图）。而且这已经不是 Notepad++ 第一次这么干了！\n\nNotepad++ 的 "Free Uyghur" 出来以后，Notepad++ 所在的 Github 瞬间被广大中国的开发者占领，他们用自己的方式进行了回击。小编也忍不住上去看一下，发现 \xa0GitHub 上面基本上都是骂 Notepad++ 作者的，不过也有少数支持作者。\n\n\n起底一下开发者\n后来查了一下，Notepad++ 的作者，原来名字叫做侯今吾（英语：DonHO，https://github.com/donho），是一个毕业于台湾淡江大学及巴黎第七大学的电脑工程师，作为一个台湾人，也是一个台独积极分子，侯今吾借助 Notepad++ 抹黑中国可谓由来已久。\n\n我也来说几句\n在这里我想说的是，Notepad++ 作为一款免费开源，深受国外编程爱好者赞扬，也为台湾开源界赢得好评，效率很高的文本编辑器，在早年间也是小编最喜欢常用的软件之一。但对于政见这件事情，小编觉得就像吃一道菜一样，你可以选择吃与不吃，不吃，你可以一笑而过，喜欢的人照常吃，与你无关，但你绝对不能吐一口脏东西上去。\n软件本身是没什么问题的，要说软件和作者之间的关系，那就是爱用不用的关系了。同类软件，我不喜欢你作者，当然就不用了，当然我不用也不会对软件发展有什么影响，不过我想说，这就像是去餐馆吃饭。对于顾客来说，他吃与不吃，不会影响服务员的工资。但对于服务员来说，至少不能让顾客觉得你讨厌。\n最后，有人说要抵制 Notepad++，但对我而言，小编是反对把开源与政治挂钩的，因此小编选择不用 Notepad++ —— 我有选择的权利，既然开源的编辑器那么多（我可以用 Sublime Text (虽然 Sublime Text 是非开源的)，可以用 Visual Studio Code，可以用 Github Atom，也可以用 BowPad、Editra，甚至是国人开发的 Notepad--），我又何必选择一个带政治倾向自己又不喜欢的编辑器呢！', 'bodyHTML': '<p dir="auto">Notepad++ 这片瓜田的瓜都吃了好几年了，作者却一直还在死性不改 。。。。。</p>\n<p dir="auto">同样的 Notepad++ 在 GitHub 仓库 <a href="https://github.com/notepad-plus-plus/notepad-plus-plus">notepad-plus-plus</a> 早已沦为反华辱华的垃圾场，群魔乱舞，简直惨不忍睹！</p>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/5f472792bb624c8666c6cf2173b00a03a2578729091521bcc294b364d916cc8b/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f7361792d6e6f2e706e67"><img src="https://camo.githubusercontent.com/5f472792bb624c8666c6cf2173b00a03a2578729091521bcc294b364d916cc8b/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f7361792d6e6f2e706e67" alt="say-no-to-Notepad++" width="600" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/say-no.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">Add random characters</h2>\n<p dir="auto">Twitter：<a href="https://twitter.com/Notepad_plus/status/1618276938342359042" rel="nofollow">https://twitter.com/Notepad_plus/status/1618276938342359042</a><br>\nV2EX：<a href="https://www.v2ex.com/t/910777" rel="nofollow">https://www.v2ex.com/t/910777</a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/e4812b189f26babf370d3ce85e24fcdeef8e4e451dd08759fdf0ee212b5784e4/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f747769747465722d6e6f74657061642532422532422e706e67"><img src="https://camo.githubusercontent.com/e4812b189f26babf370d3ce85e24fcdeef8e4e451dd08759fdf0ee212b5784e4/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f747769747465722d6e6f74657061642532422532422e706e67" alt="Twitter Notepad++" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/twitter-notepad%2B%2B.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">Free Uyghur</h2>\n<p dir="auto">不知道大家有没有留意，前两天（2019 年 10 月 29）开源文本编辑器 Notepad++ 发布了最新的 \xa0<a href="https://notepad-plus-plus.org/downloads/v7.8.1/" rel="nofollow">7.8.1</a>\xa0 版本。</p>\n<p dir="auto">然而，软件新版本发布后，在该版本中 Notepad++ 的作者同时附加了一篇名为《<a href="https://notepad-plus-plus.org/news/v781-free-uyghur-edition/" rel="nofollow">Notepad++ v7.8.1 : Free Uyghur</a>》抹黑中国的文章，具体的内容请大家自行百度（图片是文章部分截图）。而且这已经不是 Notepad++ 第一次这么干了！<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/05cfe10cb7a50e35d82253ce6caae3a0de43c0185e09b33e035ccb9c1d017b08/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6e6f7465706164253242253242763738312e706e67"><img src="https://camo.githubusercontent.com/05cfe10cb7a50e35d82253ce6caae3a0de43c0185e09b33e035ccb9c1d017b08/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6e6f7465706164253242253242763738312e706e67" alt="Notepad++ Free Uyghur" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/notepad%2B%2Bv781.png" style="max-width: 100%;"></a></p>\n<p dir="auto">Notepad++ 的 "Free Uyghur" 出来以后，Notepad++ 所在的 Github 瞬间被广大中国的开发者占领，他们用自己的方式进行了回击。小编也忍不住上去看一下，发现 \xa0GitHub 上面基本上都是骂 Notepad++ 作者的，不过也有少数支持作者。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/daaa0b33ee8b3289be315db82b52abd8a2a94f145842390bd0a9e26613b1140e/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6e6f74657061642d3738312d6769746875622d6973737565312e706e67"><img src="https://camo.githubusercontent.com/daaa0b33ee8b3289be315db82b52abd8a2a94f145842390bd0a9e26613b1140e/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6e6f74657061642d3738312d6769746875622d6973737565312e706e67" alt="notepad-781-github-issue1" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/notepad-781-github-issue1.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/de3214f514e63f6b778a434e644fa62452c4f6ef6db8a591737f01e552bcdf75/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6e6f74657061642d3738312d6769746875622d6973737565322e706e67"><img src="https://camo.githubusercontent.com/de3214f514e63f6b778a434e644fa62452c4f6ef6db8a591737f01e552bcdf75/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6e6f74657061642d3738312d6769746875622d6973737565322e706e67" alt="notepad-781-github-issue2" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/notepad-781-github-issue2.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">起底一下开发者</h2>\n<p dir="auto">后来查了一下，Notepad++ 的作者，原来名字叫做侯今吾（英语：DonHO，<a href="https://github.com/donho">https://github.com/donho</a>），是一个毕业于台湾淡江大学及巴黎第七大学的电脑工程师，作为一个台湾人，也是一个台独积极分子，侯今吾借助 Notepad++ 抹黑中国可谓由来已久。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b79e2ac7454c7de8649c3158cae2001c5a64c6b462f05d4919b3df5d58197917/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6e6f74657061642d646f6e686f2e706e67"><img src="https://camo.githubusercontent.com/b79e2ac7454c7de8649c3158cae2001c5a64c6b462f05d4919b3df5d58197917/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6e6f74657061642d646f6e686f2e706e67" alt="Notepad++ DonHO" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/notepad-donho.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">我也来说几句</h2>\n<p dir="auto">在这里我想说的是，Notepad++ 作为一款免费开源，深受国外编程爱好者赞扬，也为台湾开源界赢得好评，效率很高的文本编辑器，在早年间也是小编最喜欢常用的软件之一。但对于政见这件事情，小编觉得就像吃一道菜一样，你可以选择吃与不吃，不吃，你可以一笑而过，喜欢的人照常吃，与你无关，但你绝对不能吐一口脏东西上去。</p>\n<p dir="auto">软件本身是没什么问题的，要说软件和作者之间的关系，那就是爱用不用的关系了。同类软件，我不喜欢你作者，当然就不用了，当然我不用也不会对软件发展有什么影响，不过我想说，这就像是去餐馆吃饭。对于顾客来说，他吃与不吃，不会影响服务员的工资。但对于服务员来说，至少不能让顾客觉得你讨厌。</p>\n<p dir="auto">最后，有人说要抵制 Notepad++，但对我而言，小编是反对把开源与政治挂钩的，因此小编选择不用 Notepad++ —— 我有选择的权利，既然开源的编辑器那么多（我可以用 <a href="https://www.sublimetext.com/" rel="nofollow">Sublime Text</a> (虽然 <a href="https://www.sublimetext.com/" rel="nofollow">Sublime Text</a> 是非开源的)，可以用 <a href="https://code.visualstudio.com/" rel="nofollow">Visual Studio Code</a>，可以用 <a href="https://atom.io/" rel="nofollow">Github Atom</a>，也可以用 <a href="https://tools.stefankueng.com/BowPad.html" rel="nofollow">BowPad</a>、<a href="http://editra.org/" rel="nofollow">Editra</a>，甚至是国人开发的 <a href="https://gitee.com/cxasm/notepad--" rel="nofollow">Notepad--</a>），我又何必选择一个带政治倾向自己又不喜欢的编辑器呢！</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '2023 年 Galaxy 社区大会会议报告', 'number': 21, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/21', 'createdAt': '2023-11-23T01:47:28Z', 'lastEditedAt': '2023-12-01T05:36:10Z', 'updatedAt': '2024-01-04T05:45:31Z', 'body': '> 作者：Natalie Whitaker    \r\n> 编译：[沈维燕](https://weiyan.cc)    \r\n> 时间：2023-08-14    \r\n> 原文：[2023 Galaxy Community Conference Meeting Report](https://galaxyproject.org/blog/2023-08-14-gc-c2023-meeting-report/)    \r\n\r\n<!-- more -->\r\n\t\t\r\n## GCC 2023 会议纪要\r\n\r\n### 概述\r\n2023 年 Galaxy 社区会议（GCC2023）于7月10日至16日在澳大利亚昆士兰州布里斯班昆士兰科技大学举行。GCC 是 Galaxy 社区的年度会议，这是一个旨在在科学和技术层面展示过去一年内在 Galaxy 研究领域做出的令人惊叹的新工作，同时为与会者提供发现合作机会、加强联系、并开辟新的研究方向的大会。 GCC2023 由 Galaxy Australia 和 Australian BioCommons 主办，为期四天，包括了演讲、研讨会/培训、海报和演示等活动，还有三位主题演讲嘉宾和三天的协作节 (CoFest)。除了会议内容，整个 Galaxy 社区会议周还会举办网络交流和社交活动。总体而言，GCC2023 包括了 12.8 小时的长短演讲、37.5 小时的培训、3.3 小时的海报展示和演示，以及 10.6 小时的社交活动和交流。\r\n![GCC2023 Meeting Report Image1](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image1.png)\r\n\r\nGCC2023 共有 91 名现场参会者和 40 名虚拟参会者。来自 21 个不同国家的与会者出席了本次会议：澳大利亚、比利时、巴西、加拿大、捷克、丹麦、法国、德国、印度、爱尔兰、马耳他、摩洛哥、荷兰、新西兰、挪威、新加坡、韩国、斯里兰卡、瑞士、英国和美国（图1）。在总参会人数中，22.4% 是研究助理或技术人员，17.6% 是高级科学家或首席调查员，9.6% 是研究生，7.2% 是博士后，2.4% 是本科生，40% 是其他身份。\r\n\r\n<div align="center">\r\n    <img src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image2.png" alt="GCC2023 Meeting Report Image2">\r\n    <em>Figure 1. Map of GCC2023 attendees’ countries of origin.</em>\r\n</div>\r\n\r\n\r\n## 奖学金获得者\r\nGCC2023 非常感谢能够利用一位匿名捐赠者的资金提供现场和虚拟参会的奖学金。作为奖学金的一部分，受奖者被要求通过演讲、海报或二者兼有的方式参与会议。\r\n\r\n今年，一个现场奖学金授予了英国开放大学的一年级博士生 Marisa Loach（Twitter: @Marisa_Loach）。Marisa 进行了一次题为 “为什么使用 Galaxy？用户友好的生物信息学选项的初步结果” 的演讲并展示了一份海报。\r\n![GCC2023 Meeting Report Image3](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image3.png)\r\n\r\nGCC2023共颁发了六个虚拟奖学金。以下列出了每位受奖者及其角色、机构和对会议的贡献。\r\n\r\n### Coline Royaux\r\nTwitter: @ColineRoyaux\r\n\r\n研究生 (Graduate student)\r\n\r\n巴黎索邦大学，法国自然历史博物馆，法国 (Sorbonne University, French Natural History Museum, France)\r\n\r\n演讲标题 “Galaxy-E：基于生态学的 Galaxy 倡议，2022-2023 年更新！” \r\n\r\n### Vajiha Hussain\r\n高年级本科生 (Senior undergraduate student)\r\n\r\n印度维尼昂大学 (Vignan University, India)\r\n\r\n海报标题 “利用 RNASeq 分析识别棕榈蓟马中潜在的 GBNV 生物标志物”\r\n\r\n### Sudeepti Kulshrestha\r\n研究生 (Graduate student)\r\n\r\n印度阿米蒂大学 (Amity University, India)\r\n\r\n海报标题为“使用基于网络的方法探索 Vaginal Microbiome 和先兆子痫的关联”\r\n\r\n### Jonas Bucher\r\n研究生 (Graduate student)\r\n\r\n瑞士苏黎世联邦理工学院，苏黎世大学，瑞士 (Swiss Federal Institute of Technology in Zurich (ETH Zurich), University of Zurich, Switzerland)\r\n\r\n海报标题 “Methylator - DNA cytosine methylation pipeline”\r\n\r\n\r\n### Katarzyna Kamieniecka\r\nTwitter: @katemurat\r\n\r\n研究生 (Graduate student)\r\n\r\n英国布拉德福德大学 (University of Bradford, United Kingdom)\r\n\r\n海报标题 "Galaxy 中的 FAIR 数据管理"\r\n\r\n#### Taoufik Bensellak\r\n研究生 (Graduate student)\r\n\r\n英国利物浦大学 (University of Liverpool, United Kingdom)\r\n\r\n海报标题 “用于微阵列数据分析的 Galaxy 实例和工具”\r\n\r\n## 主讲嘉宾\r\nGCC2023 邀请了三位主题演讲嘉宾，分别就野生动物保护、结构生物学和生物安全等领域分享了他们的思考和研究成果。演讲者展示了他们团队如何通过使用 Galaxy 平台，以更易获取和可复现的方式完成工作。\r\n\r\n三位主题发言人分别发表了内容丰富的演讲，讨论了各自前瞻性研究领域的进展，重点关注开放存取端到端生物信息学 (open-access end-to-end bioinformatics)。Galaxy 在每位主题发言人的最新研究进展中都发挥了重要作用，Galaxy 开发人员和 Galaxy 社区能够亲眼目睹 Galaxy 对科学界的影响。此外，每位主题发言人都为 Galaxy 的未来提供了灵感，并有时间与平台发展轨迹背后的开发人员直接交流。\r\n\r\n### Carolyn Hogg, PhD (University of Sydney，悉尼大学)\r\n来自悉尼大学的 Carolyn Hogg 博士作为第一位主讲人拉开了 GCC2023 的序幕。霍格博士在 "拯救塔斯马尼亚袋獾计划 (Save the Tasmanian Devil Program)" 进行的研究中发挥了重要作用，此外还重点研究了其他澳大利亚物种，如橙腹鹦鹉、考拉、兔耳袋狸和袋鼠。她在 GCC2023 上的演讲题为 “走向无限和超越：结合基因组学和云技术来拯救我们的物种”，强调了自然资源保护主义者和基因组科学家之间合作研究的必要性。她的愿景是通过改变科学、管理和政策的整合方式，为澳大利亚创造保护遗产，而 Galaxy 的使用增强了她的这一愿景。通过使用像 Galaxy 这样的开源平台，Hogg 博士能够产生可重复的基因组科学，以帮助澳大利亚的物种保护和管理实践。\r\n![GCC2023 Meeting Report Image4](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image4.png)\r\n\r\n### Kate Michie, PhD (University of New South Wales，新南威尔士大学)\r\n来自新南威尔士大学的 Kate Michie 博士作为 GCC2023 的第二位主讲人发表了题为 “Alphafold2 和深度学习时代：结构生物学的最新进展” 的演讲。 Michie 博士在蛋白质结构生物学方面拥有二十多年的经验，并广泛使用 Alphafold2，并与众多研究人员密切合作，教他们如何使用这一强大的工具来推进他们的研究。在她的主题演讲中，Michie 博士呼吁关注 Galaxy 为结构生物学研究进展做好准备的迫切需要，这些进展肯定会伴随 Alphafold2 的巨大成功。 Michie 博士的演讲对 GCC2023 来说是一个有影响力的补充，因为 Galaxy 致力于保持竞争力并领先于社区的巨大研究需求。\r\n![GCC2023 Meeting Report Image5](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image5.png)\r\n\r\n### Roberto Barrero, PhD (Queensland University of Technology，昆士兰科技大学)\r\nGCC2023 的最后一位主讲人是来自昆士兰科技大学的 Roberto Barrero 博士。巴雷罗博士的演讲题为 “通过更快、更准确地诊断植物病毒和类病毒，改善植物行业获得新遗传学的机会”，重点讨论利用生物信息学解决农业、植物生物安全和人类健康方面的现实问题。最近，Barrero 博士在开发植物诊断工具包方面发挥了重要作用，该工具包可以在一次测试中准确检测一系列病毒和类病毒，并于 2018 年向他和他的团队授予生物安全影响奖。Barrero 博士的研究进展得到了 Galaxy 的支持通过 GA-VirReport 和高通量测序技术。访问开放式端到端生物信息学工作流程对于诊断植物病毒和类病毒至关重要，Galaxy 很高兴能在 GCC2023 上将这一主题置于前沿。\r\n![GCC2023 Meeting Report Image6](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image6.png)\r\n\r\n## 培训课程\r\n![GCC2023 Meeting Report Image7](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image7.png)\r\n培训是 Galaxy 社区的首要任务。让研究人员能够轻松学习使用该平台、如何进行新的分析或探索能够解决研究人员面临的实际需求的功能和工具，对于 Galaxy 的发展和可持续发展发挥了重要作用。本着这种精神，在 GCC2023 的三天里，共举办了 15 场不同的培训课程，供与会者与专家一起学习和实践生物信息学。专家包括主要研究员、Galaxy 开发人员、项目经理和 Galaxy 高级用户。培训课程主题多种多样，为 GCC2023 的所有与会者提供相关且实用的学习机会。从微生物学和人类遗传学到工作流程和工具开发，GCC2023 培训课程提供了扩大与会者特定研究兴趣和遇到新主题的机会。\r\n\r\n每节课将近三个小时，让学员有时间充分沉浸在教材中，与培训师和其他学员交流，并与来自不同背景的人交流经验和方法。\r\n\r\n## Birds of a Feather (BoF)\r\nBirds of a Feather (BoF) 会议是 GCC 期间的非正式聚会，参与者可以讨论感兴趣的话题。 BoF 每天在会议结束时举行，各小组分成焦点小组，与专家和其他与会者进行交流和讨论。\r\n\r\nGCC2023 期间，与会者有九种不同的机会参加 BoF。今年的 BoF 提出了各种主题，包括备受期待的 Galaxy 高级用户与开发人员对话的机会。此外，BoF 还提供了举办迷你社交活动的机会，例如棋盘游戏、串酒吧和澳大利亚布里斯班徒步之旅！\r\n\r\n## CoFest\r\nGCC2023 主会之后，举办了为期三天的协作节（CoFest）。 CoFest 是 Galaxy 成员的社区聚会，这些成员有兴趣为 Galaxy 的工具集、文档、培训材料、代码库以及扩展 Galaxy 生态系统的其他任何地方做出贡献。 CoFest 的目标是：\r\n\r\n1. 扩大贡献者社区。这次 CoFest 的首要目的是欢迎新的贡献者，帮助您学习资源并结识能够帮助您做出贡献的人。\r\n2. 扩大 Galaxy 生态系统。不仅仅是代码，而是整个生态系统。这包括培训、工具、最佳实践工作流程、文档、测试用例、翻译、基础设施，甚至代码。\r\n\r\nCoFest 的参与者围绕着共同的兴趣，讨论与这些兴趣相关的共同话题。这些群组在 CoFest 开始前、开始时和整个过程中形成，旨在相互之间保持流动和高度互动。今年的 CoFest 分为九大主题：前端、后端、社区、设计、工具、工作流程、培训、测试和辅助项目。由于 CoFest 在整个活动期间都在不断变化和构建，因此主题被进一步细分，重点关注以下主题：交互式工具；升级 Vue3 和上传功能；吸引和保留社区参与活动、管理和领导力；ChatGXY；实施 Galaxy 工具健康审计服务；以及 Simon 的数据俱乐部。\r\n\r\n## 社会事件\r\nGCC2023 希望将 Galaxy 社区的成员联系在一起，因此在整个会议期间举办了不同的社交活动。今年的 GCC2023 社交活动包括为会议拉开序幕的欢迎晚宴、由 Galaxy 社区成员主持的布里斯班徒步游、带有街机游戏的酒馆爬行、桌游之夜、会议晚宴，以及广受好评的 Lone Pine 考拉保护区之行！\r\n\r\n毫无疑问，Lone Pine 考拉保护区是今年社交活动的亮点！一大群 GCC2023 与会者参观了世界上最大的考拉保护区，度过了一个下午，与动物邂逅、野生动物表演，并了解一些澳大利亚最受欢迎的野生动物！\r\n![GCC2023 Meeting Report Image8](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image8.png)\r\n\r\n通过这些有组织的社交活动，Galaxy 社区的成员们在建立职业关系的同时，也建立了友谊。此外，许多社区成员还通过非组织活动，包括游览植物园、参观动物园医院和热带雨林，以及一日游等，彼此建立联系。\r\n\r\n请参阅附录一，了解今年社交活动的更多照片以及遇到的所有令人惊叹的澳大利亚动物！\r\n\r\n## 纪念 Simon Gladman\r\n### Simon 数据俱乐部\r\nSimon Gladman 是 GCC2023 的最初发起者和组织者，如果看到他的伴侣和孩子参加这次会议，他一定会感到非常自豪。Simon 获得了多项荣誉，他作为创新者、榜样、支持者和社区联系者的遗产将继续受到表彰，“星际数据委员会 (Intergalactic Data Commission)” 更名为 “Simon 数据俱乐部 (Simon’s Data Club)”，并在他的组织中获得年度奖项。姓名。\r\n![GCC2023 Meeting Report Image9](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image9.png)\r\n\r\n### Simon Gladman 旅行补助金\r\n已故西蒙·格拉德曼 (Simon Gladman) 对 Galaxy 的贡献将获得以他名字命名的年度奖项。 Galaxy Australia 才华横溢的技术主管和大家的伙伴 Simon 在 GCC2023 上受到了人们的深深怀念，人们对他表示了许多敬意。\r\n\r\nSimon 对 Galaxy 充满热情并与人交流，并且很高兴能够组织在澳大利亚举办的首届国际 Galaxy 社区会议 (GCC)。在 GCC2023 上，我们宣布了首届 Simon Gladman 旅行补助金，以此来庆祝他。每年将向参加 Galaxy 社区活动的澳大利亚公民颁发 5,000 澳元的补助金。\r\n\r\n如果您与 Simon 一样充满热情并希望为 Galaxy 做出贡献，我们鼓励您申请 Simon Gladman 旅行补助金。\r\n\r\n## 感言\r\nGalaxy 执行董事会成员 Michael Schatz 是约翰·霍普金斯大学计算机科学和生物学的彭博杰出教授，他很高兴地看到：\r\n\r\n> *"The keynotes really highlighted how Galaxy enables cutting edge science.”*\r\n> *“主题演讲真正强调了 Galaxy 如何实现尖端科学。”*\r\n\r\n来自 BioCommons、昆士兰网络基础设施基金会 (QCIF)、昆士兰大学、墨尔本生物信息学和 AARNet 的 Galaxy Australia 团队成员发表了从监测工具健康状况到开发最近发布的 Galaxy Australia 基因组实验室等主题。澳大利亚银河服务项目负责人 Gareth Price 博士表示：\r\n\r\n> *“There was a fantastic exchange between our team and international colleagues and wonderful opportunities to engage with the global Galaxy community. GCC was an exhilarating experience, and it was inspiring to be surrounded by like-minded people. The team left full of energy to keep improving Galaxy Australia and strengthen their collaborations with the wider Galaxy community.”*\r\n> *“我们的团队与国际同事之间进行了精彩的交流，并有绝佳的机会与全球 Galaxy 社区互动。 GCC 是一次令人兴奋的经历，周围都是志趣相投的人，这很鼓舞人心。该团队充满活力地继续改进 Galaxy Australia，并加强与更广泛的 Galaxy 社区的合作。”*\r\n\r\n虽然我们是在昆士兰科技大学 (QUT) 的 The Cube 一流设施中举办的，但远程参与的能力是举办真正国际会议的关键因素。尽管 Amrita 大学系统基因组学首席科学家 Prash Suravajhala 博士是 GCC2023 组委会成员，但他无法从印度出发，但他：\r\n\r\n> *“Very excited and happy to be a part of GCC2023 virtually. We witnessed scintillating talks and brainstorming sessions, and the virtual attendance was a treat. This was a cherishing moment for me as I guzzled the talks from early morning India time! It has created a great camaraderie."*\r\n> *“能够以虚拟方式参加 GCC2023 感到非常兴奋和高兴。我们目睹了精彩的演讲和头脑风暴会议，虚拟出席是一种享受。这对我来说是一个珍贵的时刻，因为我沉迷于印度时间清晨的演讲！它创造了伟大的友情。"*\r\n\r\n## Recognition\r\n特别感谢 GCC2023 的赞助商：\r\n\r\n### 白金赞助商\r\nBizData (<https://www.bizdata.com.au/>)\r\n\r\n### 银牌赞助商\r\nLimagrain (<https://www.limagrain.com/en>)\r\n\r\nGalaxyWorks (<https://galaxyworks.io/>)\r\n\r\n### 铜牌赞助商\r\nGIGA Science (<https://academic.oup.com/gigascience?login=false>)\r\n\r\n\r\n非常感谢所有使 GCC2023 取得成功的个人：\r\n\r\n### 组织和科学委员会\r\nAndrew Lonie\r\n\r\nChristina Hall\r\n\r\nEnis Afgan\r\n\r\nGareth Price\r\n\r\nJenn Vessio\r\n\r\nMargita Jadan\r\n\r\nPrash Suravajhala\r\n\r\nRoberto Barrero Gumiel\r\n\r\nRoss Lazarus\r\n\r\nAssunta DeSanto\r\n\r\nNatalie Whitaker\r\n\r\nSimon Gladman\r\n\r\nClaudia Melogno de Sandoval \r\n\r\n\r\n### 培训协调员\r\nAssunta DeSanto\r\n\r\nIgor Makunin\r\n\r\nMark Crowe\r\n\r\n\r\n### 在线支持\r\nMelissa Burke\r\n\r\nPatrick Capon\r\n\r\n\r\n### 科学计划成员\r\nAndrew Lonie\r\n\r\nAnne Claire Fouilloux\r\n\r\nAnna Syme\r\n\r\nAnshu Bhardwaj\r\n\r\nBérénice Batut\r\n\r\nBryan Raubenolt\r\n\r\nCameron Hyde\r\n\r\nCatherine Bromhead\r\n\r\nClare Sloggett\r\n\r\nCristóbal Gallardo\r\n\r\nDan Blankenberg\r\n\r\nDavor Davidović\r\n\r\nEnis Afgan\r\n\r\nFrederik Coppens\r\n\r\nHans-Rudolf Hotz\r\n\r\nIvan Jakovlić\r\n\r\nJeremy Goecks\r\n\r\nJustin Lee\r\n\r\nMargita Jadan\r\n\r\nMaria Doyle\r\n\r\nMatthias Bernt\r\n\r\nNatalie Kucher\r\n\r\nNicola Soranzo\r\n\r\nNuwan Goonasekera\r\n\r\nPeter van Heusden\r\n\r\nRalf Weber\r\n\r\nRoss Lazarus\r\n\r\nSoyean Kim\r\n\r\nThomas Harrop\r\n\r\nTimothy Griffin\r\n\r\nTyler Collins\r\n\r\nWendi Bacon\r\n\r\nYvan Le Bras\r\n\r\n\r\n### 联合节主办方\r\nCameron Hyde\r\n\r\n## *附录一*\r\n\r\n![GCC2023 Meeting Report Image10](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image10.png)\r\n\r\n![GCC2023 Meeting Report Image11](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image11.png)\r\n\r\n![GCC2023 Meeting Report Image12](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image12.png)\r\n\r\n![GCC2023 Meeting Report Image13](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image13.png)\r\n\r\n![GCC2023 Meeting Report Image14](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image14.png)', 'bodyText': '作者：Natalie Whitaker\n编译：沈维燕\n时间：2023-08-14\n原文：2023 Galaxy Community Conference Meeting Report\n\n\nGCC 2023 会议纪要\n概述\n2023 年 Galaxy 社区会议（GCC2023）于7月10日至16日在澳大利亚昆士兰州布里斯班昆士兰科技大学举行。GCC 是 Galaxy 社区的年度会议，这是一个旨在在科学和技术层面展示过去一年内在 Galaxy 研究领域做出的令人惊叹的新工作，同时为与会者提供发现合作机会、加强联系、并开辟新的研究方向的大会。 GCC2023 由 Galaxy Australia 和 Australian BioCommons 主办，为期四天，包括了演讲、研讨会/培训、海报和演示等活动，还有三位主题演讲嘉宾和三天的协作节 (CoFest)。除了会议内容，整个 Galaxy 社区会议周还会举办网络交流和社交活动。总体而言，GCC2023 包括了 12.8 小时的长短演讲、37.5 小时的培训、3.3 小时的海报展示和演示，以及 10.6 小时的社交活动和交流。\n\nGCC2023 共有 91 名现场参会者和 40 名虚拟参会者。来自 21 个不同国家的与会者出席了本次会议：澳大利亚、比利时、巴西、加拿大、捷克、丹麦、法国、德国、印度、爱尔兰、马耳他、摩洛哥、荷兰、新西兰、挪威、新加坡、韩国、斯里兰卡、瑞士、英国和美国（图1）。在总参会人数中，22.4% 是研究助理或技术人员，17.6% 是高级科学家或首席调查员，9.6% 是研究生，7.2% 是博士后，2.4% 是本科生，40% 是其他身份。\n\n    \n    Figure 1. Map of GCC2023 attendees’ countries of origin.\n\n奖学金获得者\nGCC2023 非常感谢能够利用一位匿名捐赠者的资金提供现场和虚拟参会的奖学金。作为奖学金的一部分，受奖者被要求通过演讲、海报或二者兼有的方式参与会议。\n今年，一个现场奖学金授予了英国开放大学的一年级博士生 Marisa Loach（Twitter: @Marisa_Loach）。Marisa 进行了一次题为 “为什么使用 Galaxy？用户友好的生物信息学选项的初步结果” 的演讲并展示了一份海报。\n\nGCC2023共颁发了六个虚拟奖学金。以下列出了每位受奖者及其角色、机构和对会议的贡献。\nColine Royaux\nTwitter: @ColineRoyaux\n研究生 (Graduate student)\n巴黎索邦大学，法国自然历史博物馆，法国 (Sorbonne University, French Natural History Museum, France)\n演讲标题 “Galaxy-E：基于生态学的 Galaxy 倡议，2022-2023 年更新！”\nVajiha Hussain\n高年级本科生 (Senior undergraduate student)\n印度维尼昂大学 (Vignan University, India)\n海报标题 “利用 RNASeq 分析识别棕榈蓟马中潜在的 GBNV 生物标志物”\nSudeepti Kulshrestha\n研究生 (Graduate student)\n印度阿米蒂大学 (Amity University, India)\n海报标题为“使用基于网络的方法探索 Vaginal Microbiome 和先兆子痫的关联”\nJonas Bucher\n研究生 (Graduate student)\n瑞士苏黎世联邦理工学院，苏黎世大学，瑞士 (Swiss Federal Institute of Technology in Zurich (ETH Zurich), University of Zurich, Switzerland)\n海报标题 “Methylator - DNA cytosine methylation pipeline”\nKatarzyna Kamieniecka\nTwitter: @katemurat\n研究生 (Graduate student)\n英国布拉德福德大学 (University of Bradford, United Kingdom)\n海报标题 "Galaxy 中的 FAIR 数据管理"\nTaoufik Bensellak\n研究生 (Graduate student)\n英国利物浦大学 (University of Liverpool, United Kingdom)\n海报标题 “用于微阵列数据分析的 Galaxy 实例和工具”\n主讲嘉宾\nGCC2023 邀请了三位主题演讲嘉宾，分别就野生动物保护、结构生物学和生物安全等领域分享了他们的思考和研究成果。演讲者展示了他们团队如何通过使用 Galaxy 平台，以更易获取和可复现的方式完成工作。\n三位主题发言人分别发表了内容丰富的演讲，讨论了各自前瞻性研究领域的进展，重点关注开放存取端到端生物信息学 (open-access end-to-end bioinformatics)。Galaxy 在每位主题发言人的最新研究进展中都发挥了重要作用，Galaxy 开发人员和 Galaxy 社区能够亲眼目睹 Galaxy 对科学界的影响。此外，每位主题发言人都为 Galaxy 的未来提供了灵感，并有时间与平台发展轨迹背后的开发人员直接交流。\nCarolyn Hogg, PhD (University of Sydney，悉尼大学)\n来自悉尼大学的 Carolyn Hogg 博士作为第一位主讲人拉开了 GCC2023 的序幕。霍格博士在 "拯救塔斯马尼亚袋獾计划 (Save the Tasmanian Devil Program)" 进行的研究中发挥了重要作用，此外还重点研究了其他澳大利亚物种，如橙腹鹦鹉、考拉、兔耳袋狸和袋鼠。她在 GCC2023 上的演讲题为 “走向无限和超越：结合基因组学和云技术来拯救我们的物种”，强调了自然资源保护主义者和基因组科学家之间合作研究的必要性。她的愿景是通过改变科学、管理和政策的整合方式，为澳大利亚创造保护遗产，而 Galaxy 的使用增强了她的这一愿景。通过使用像 Galaxy 这样的开源平台，Hogg 博士能够产生可重复的基因组科学，以帮助澳大利亚的物种保护和管理实践。\n\nKate Michie, PhD (University of New South Wales，新南威尔士大学)\n来自新南威尔士大学的 Kate Michie 博士作为 GCC2023 的第二位主讲人发表了题为 “Alphafold2 和深度学习时代：结构生物学的最新进展” 的演讲。 Michie 博士在蛋白质结构生物学方面拥有二十多年的经验，并广泛使用 Alphafold2，并与众多研究人员密切合作，教他们如何使用这一强大的工具来推进他们的研究。在她的主题演讲中，Michie 博士呼吁关注 Galaxy 为结构生物学研究进展做好准备的迫切需要，这些进展肯定会伴随 Alphafold2 的巨大成功。 Michie 博士的演讲对 GCC2023 来说是一个有影响力的补充，因为 Galaxy 致力于保持竞争力并领先于社区的巨大研究需求。\n\nRoberto Barrero, PhD (Queensland University of Technology，昆士兰科技大学)\nGCC2023 的最后一位主讲人是来自昆士兰科技大学的 Roberto Barrero 博士。巴雷罗博士的演讲题为 “通过更快、更准确地诊断植物病毒和类病毒，改善植物行业获得新遗传学的机会”，重点讨论利用生物信息学解决农业、植物生物安全和人类健康方面的现实问题。最近，Barrero 博士在开发植物诊断工具包方面发挥了重要作用，该工具包可以在一次测试中准确检测一系列病毒和类病毒，并于 2018 年向他和他的团队授予生物安全影响奖。Barrero 博士的研究进展得到了 Galaxy 的支持通过 GA-VirReport 和高通量测序技术。访问开放式端到端生物信息学工作流程对于诊断植物病毒和类病毒至关重要，Galaxy 很高兴能在 GCC2023 上将这一主题置于前沿。\n\n培训课程\n\n培训是 Galaxy 社区的首要任务。让研究人员能够轻松学习使用该平台、如何进行新的分析或探索能够解决研究人员面临的实际需求的功能和工具，对于 Galaxy 的发展和可持续发展发挥了重要作用。本着这种精神，在 GCC2023 的三天里，共举办了 15 场不同的培训课程，供与会者与专家一起学习和实践生物信息学。专家包括主要研究员、Galaxy 开发人员、项目经理和 Galaxy 高级用户。培训课程主题多种多样，为 GCC2023 的所有与会者提供相关且实用的学习机会。从微生物学和人类遗传学到工作流程和工具开发，GCC2023 培训课程提供了扩大与会者特定研究兴趣和遇到新主题的机会。\n每节课将近三个小时，让学员有时间充分沉浸在教材中，与培训师和其他学员交流，并与来自不同背景的人交流经验和方法。\nBirds of a Feather (BoF)\nBirds of a Feather (BoF) 会议是 GCC 期间的非正式聚会，参与者可以讨论感兴趣的话题。 BoF 每天在会议结束时举行，各小组分成焦点小组，与专家和其他与会者进行交流和讨论。\nGCC2023 期间，与会者有九种不同的机会参加 BoF。今年的 BoF 提出了各种主题，包括备受期待的 Galaxy 高级用户与开发人员对话的机会。此外，BoF 还提供了举办迷你社交活动的机会，例如棋盘游戏、串酒吧和澳大利亚布里斯班徒步之旅！\nCoFest\nGCC2023 主会之后，举办了为期三天的协作节（CoFest）。 CoFest 是 Galaxy 成员的社区聚会，这些成员有兴趣为 Galaxy 的工具集、文档、培训材料、代码库以及扩展 Galaxy 生态系统的其他任何地方做出贡献。 CoFest 的目标是：\n\n扩大贡献者社区。这次 CoFest 的首要目的是欢迎新的贡献者，帮助您学习资源并结识能够帮助您做出贡献的人。\n扩大 Galaxy 生态系统。不仅仅是代码，而是整个生态系统。这包括培训、工具、最佳实践工作流程、文档、测试用例、翻译、基础设施，甚至代码。\n\nCoFest 的参与者围绕着共同的兴趣，讨论与这些兴趣相关的共同话题。这些群组在 CoFest 开始前、开始时和整个过程中形成，旨在相互之间保持流动和高度互动。今年的 CoFest 分为九大主题：前端、后端、社区、设计、工具、工作流程、培训、测试和辅助项目。由于 CoFest 在整个活动期间都在不断变化和构建，因此主题被进一步细分，重点关注以下主题：交互式工具；升级 Vue3 和上传功能；吸引和保留社区参与活动、管理和领导力；ChatGXY；实施 Galaxy 工具健康审计服务；以及 Simon 的数据俱乐部。\n社会事件\nGCC2023 希望将 Galaxy 社区的成员联系在一起，因此在整个会议期间举办了不同的社交活动。今年的 GCC2023 社交活动包括为会议拉开序幕的欢迎晚宴、由 Galaxy 社区成员主持的布里斯班徒步游、带有街机游戏的酒馆爬行、桌游之夜、会议晚宴，以及广受好评的 Lone Pine 考拉保护区之行！\n毫无疑问，Lone Pine 考拉保护区是今年社交活动的亮点！一大群 GCC2023 与会者参观了世界上最大的考拉保护区，度过了一个下午，与动物邂逅、野生动物表演，并了解一些澳大利亚最受欢迎的野生动物！\n\n通过这些有组织的社交活动，Galaxy 社区的成员们在建立职业关系的同时，也建立了友谊。此外，许多社区成员还通过非组织活动，包括游览植物园、参观动物园医院和热带雨林，以及一日游等，彼此建立联系。\n请参阅附录一，了解今年社交活动的更多照片以及遇到的所有令人惊叹的澳大利亚动物！\n纪念 Simon Gladman\nSimon 数据俱乐部\nSimon Gladman 是 GCC2023 的最初发起者和组织者，如果看到他的伴侣和孩子参加这次会议，他一定会感到非常自豪。Simon 获得了多项荣誉，他作为创新者、榜样、支持者和社区联系者的遗产将继续受到表彰，“星际数据委员会 (Intergalactic Data Commission)” 更名为 “Simon 数据俱乐部 (Simon’s Data Club)”，并在他的组织中获得年度奖项。姓名。\n\nSimon Gladman 旅行补助金\n已故西蒙·格拉德曼 (Simon Gladman) 对 Galaxy 的贡献将获得以他名字命名的年度奖项。 Galaxy Australia 才华横溢的技术主管和大家的伙伴 Simon 在 GCC2023 上受到了人们的深深怀念，人们对他表示了许多敬意。\nSimon 对 Galaxy 充满热情并与人交流，并且很高兴能够组织在澳大利亚举办的首届国际 Galaxy 社区会议 (GCC)。在 GCC2023 上，我们宣布了首届 Simon Gladman 旅行补助金，以此来庆祝他。每年将向参加 Galaxy 社区活动的澳大利亚公民颁发 5,000 澳元的补助金。\n如果您与 Simon 一样充满热情并希望为 Galaxy 做出贡献，我们鼓励您申请 Simon Gladman 旅行补助金。\n感言\nGalaxy 执行董事会成员 Michael Schatz 是约翰·霍普金斯大学计算机科学和生物学的彭博杰出教授，他很高兴地看到：\n\n"The keynotes really highlighted how Galaxy enables cutting edge science.”\n“主题演讲真正强调了 Galaxy 如何实现尖端科学。”\n\n来自 BioCommons、昆士兰网络基础设施基金会 (QCIF)、昆士兰大学、墨尔本生物信息学和 AARNet 的 Galaxy Australia 团队成员发表了从监测工具健康状况到开发最近发布的 Galaxy Australia 基因组实验室等主题。澳大利亚银河服务项目负责人 Gareth Price 博士表示：\n\n“There was a fantastic exchange between our team and international colleagues and wonderful opportunities to engage with the global Galaxy community. GCC was an exhilarating experience, and it was inspiring to be surrounded by like-minded people. The team left full of energy to keep improving Galaxy Australia and strengthen their collaborations with the wider Galaxy community.”\n“我们的团队与国际同事之间进行了精彩的交流，并有绝佳的机会与全球 Galaxy 社区互动。 GCC 是一次令人兴奋的经历，周围都是志趣相投的人，这很鼓舞人心。该团队充满活力地继续改进 Galaxy Australia，并加强与更广泛的 Galaxy 社区的合作。”\n\n虽然我们是在昆士兰科技大学 (QUT) 的 The Cube 一流设施中举办的，但远程参与的能力是举办真正国际会议的关键因素。尽管 Amrita 大学系统基因组学首席科学家 Prash Suravajhala 博士是 GCC2023 组委会成员，但他无法从印度出发，但他：\n\n“Very excited and happy to be a part of GCC2023 virtually. We witnessed scintillating talks and brainstorming sessions, and the virtual attendance was a treat. This was a cherishing moment for me as I guzzled the talks from early morning India time! It has created a great camaraderie."\n“能够以虚拟方式参加 GCC2023 感到非常兴奋和高兴。我们目睹了精彩的演讲和头脑风暴会议，虚拟出席是一种享受。这对我来说是一个珍贵的时刻，因为我沉迷于印度时间清晨的演讲！它创造了伟大的友情。"\n\nRecognition\n特别感谢 GCC2023 的赞助商：\n白金赞助商\nBizData (https://www.bizdata.com.au/)\n银牌赞助商\nLimagrain (https://www.limagrain.com/en)\nGalaxyWorks (https://galaxyworks.io/)\n铜牌赞助商\nGIGA Science (https://academic.oup.com/gigascience?login=false)\n非常感谢所有使 GCC2023 取得成功的个人：\n组织和科学委员会\nAndrew Lonie\nChristina Hall\nEnis Afgan\nGareth Price\nJenn Vessio\nMargita Jadan\nPrash Suravajhala\nRoberto Barrero Gumiel\nRoss Lazarus\nAssunta DeSanto\nNatalie Whitaker\nSimon Gladman\nClaudia Melogno de Sandoval\n培训协调员\nAssunta DeSanto\nIgor Makunin\nMark Crowe\n在线支持\nMelissa Burke\nPatrick Capon\n科学计划成员\nAndrew Lonie\nAnne Claire Fouilloux\nAnna Syme\nAnshu Bhardwaj\nBérénice Batut\nBryan Raubenolt\nCameron Hyde\nCatherine Bromhead\nClare Sloggett\nCristóbal Gallardo\nDan Blankenberg\nDavor Davidović\nEnis Afgan\nFrederik Coppens\nHans-Rudolf Hotz\nIvan Jakovlić\nJeremy Goecks\nJustin Lee\nMargita Jadan\nMaria Doyle\nMatthias Bernt\nNatalie Kucher\nNicola Soranzo\nNuwan Goonasekera\nPeter van Heusden\nRalf Weber\nRoss Lazarus\nSoyean Kim\nThomas Harrop\nTimothy Griffin\nTyler Collins\nWendi Bacon\nYvan Le Bras\n联合节主办方\nCameron Hyde\n附录一', 'bodyHTML': '<blockquote>\n<p dir="auto">作者：Natalie Whitaker<br>\n编译：<a href="https://weiyan.cc" rel="nofollow">沈维燕</a><br>\n时间：2023-08-14<br>\n原文：<a href="https://galaxyproject.org/blog/2023-08-14-gc-c2023-meeting-report/" rel="nofollow">2023 Galaxy Community Conference Meeting Report</a></p>\n</blockquote>\n\n<h2 dir="auto">GCC 2023 会议纪要</h2>\n<h3 dir="auto">概述</h3>\n<p dir="auto">2023 年 Galaxy 社区会议（GCC2023）于7月10日至16日在澳大利亚昆士兰州布里斯班昆士兰科技大学举行。GCC 是 Galaxy 社区的年度会议，这是一个旨在在科学和技术层面展示过去一年内在 Galaxy 研究领域做出的令人惊叹的新工作，同时为与会者提供发现合作机会、加强联系、并开辟新的研究方向的大会。 GCC2023 由 Galaxy Australia 和 Australian BioCommons 主办，为期四天，包括了演讲、研讨会/培训、海报和演示等活动，还有三位主题演讲嘉宾和三天的协作节 (CoFest)。除了会议内容，整个 Galaxy 社区会议周还会举办网络交流和社交活动。总体而言，GCC2023 包括了 12.8 小时的长短演讲、37.5 小时的培训、3.3 小时的海报展示和演示，以及 10.6 小时的社交活动和交流。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/572b31a9e89a75440914e00b9961037f9272a3c9097f0b02c2356d0070415dac/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765312e706e67"><img src="https://camo.githubusercontent.com/572b31a9e89a75440914e00b9961037f9272a3c9097f0b02c2356d0070415dac/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765312e706e67" alt="GCC2023 Meeting Report Image1" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image1.png" style="max-width: 100%;"></a></p>\n<p dir="auto">GCC2023 共有 91 名现场参会者和 40 名虚拟参会者。来自 21 个不同国家的与会者出席了本次会议：澳大利亚、比利时、巴西、加拿大、捷克、丹麦、法国、德国、印度、爱尔兰、马耳他、摩洛哥、荷兰、新西兰、挪威、新加坡、韩国、斯里兰卡、瑞士、英国和美国（图1）。在总参会人数中，22.4% 是研究助理或技术人员，17.6% 是高级科学家或首席调查员，9.6% 是研究生，7.2% 是博士后，2.4% 是本科生，40% 是其他身份。</p>\n<div align="center" dir="auto">\n    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/2abaf352ecad554da63195cbf98ef69dcaeb208ac232dbaa158bf5ebeedd8fcf/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765322e706e67"><img src="https://camo.githubusercontent.com/2abaf352ecad554da63195cbf98ef69dcaeb208ac232dbaa158bf5ebeedd8fcf/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765322e706e67" alt="GCC2023 Meeting Report Image2" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image2.png" style="max-width: 100%;"></a>\n    <em>Figure 1. Map of GCC2023 attendees’ countries of origin.</em>\n</div>\n<h2 dir="auto">奖学金获得者</h2>\n<p dir="auto">GCC2023 非常感谢能够利用一位匿名捐赠者的资金提供现场和虚拟参会的奖学金。作为奖学金的一部分，受奖者被要求通过演讲、海报或二者兼有的方式参与会议。</p>\n<p dir="auto">今年，一个现场奖学金授予了英国开放大学的一年级博士生 Marisa Loach（Twitter: @Marisa_Loach）。Marisa 进行了一次题为 “为什么使用 Galaxy？用户友好的生物信息学选项的初步结果” 的演讲并展示了一份海报。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/6005612ad29d7bbbb1cabec2fb101f4007c79bf1487a18c75ad4bc5f1135b75c/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765332e706e67"><img src="https://camo.githubusercontent.com/6005612ad29d7bbbb1cabec2fb101f4007c79bf1487a18c75ad4bc5f1135b75c/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765332e706e67" alt="GCC2023 Meeting Report Image3" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image3.png" style="max-width: 100%;"></a></p>\n<p dir="auto">GCC2023共颁发了六个虚拟奖学金。以下列出了每位受奖者及其角色、机构和对会议的贡献。</p>\n<h3 dir="auto">Coline Royaux</h3>\n<p dir="auto">Twitter: <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/ColineRoyaux/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/ColineRoyaux">@ColineRoyaux</a></p>\n<p dir="auto">研究生 (Graduate student)</p>\n<p dir="auto">巴黎索邦大学，法国自然历史博物馆，法国 (Sorbonne University, French Natural History Museum, France)</p>\n<p dir="auto">演讲标题 “Galaxy-E：基于生态学的 Galaxy 倡议，2022-2023 年更新！”</p>\n<h3 dir="auto">Vajiha Hussain</h3>\n<p dir="auto">高年级本科生 (Senior undergraduate student)</p>\n<p dir="auto">印度维尼昂大学 (Vignan University, India)</p>\n<p dir="auto">海报标题 “利用 RNASeq 分析识别棕榈蓟马中潜在的 GBNV 生物标志物”</p>\n<h3 dir="auto">Sudeepti Kulshrestha</h3>\n<p dir="auto">研究生 (Graduate student)</p>\n<p dir="auto">印度阿米蒂大学 (Amity University, India)</p>\n<p dir="auto">海报标题为“使用基于网络的方法探索 Vaginal Microbiome 和先兆子痫的关联”</p>\n<h3 dir="auto">Jonas Bucher</h3>\n<p dir="auto">研究生 (Graduate student)</p>\n<p dir="auto">瑞士苏黎世联邦理工学院，苏黎世大学，瑞士 (Swiss Federal Institute of Technology in Zurich (ETH Zurich), University of Zurich, Switzerland)</p>\n<p dir="auto">海报标题 “Methylator - DNA cytosine methylation pipeline”</p>\n<h3 dir="auto">Katarzyna Kamieniecka</h3>\n<p dir="auto">Twitter: @katemurat</p>\n<p dir="auto">研究生 (Graduate student)</p>\n<p dir="auto">英国布拉德福德大学 (University of Bradford, United Kingdom)</p>\n<p dir="auto">海报标题 "Galaxy 中的 FAIR 数据管理"</p>\n<h4 dir="auto">Taoufik Bensellak</h4>\n<p dir="auto">研究生 (Graduate student)</p>\n<p dir="auto">英国利物浦大学 (University of Liverpool, United Kingdom)</p>\n<p dir="auto">海报标题 “用于微阵列数据分析的 Galaxy 实例和工具”</p>\n<h2 dir="auto">主讲嘉宾</h2>\n<p dir="auto">GCC2023 邀请了三位主题演讲嘉宾，分别就野生动物保护、结构生物学和生物安全等领域分享了他们的思考和研究成果。演讲者展示了他们团队如何通过使用 Galaxy 平台，以更易获取和可复现的方式完成工作。</p>\n<p dir="auto">三位主题发言人分别发表了内容丰富的演讲，讨论了各自前瞻性研究领域的进展，重点关注开放存取端到端生物信息学 (open-access end-to-end bioinformatics)。Galaxy 在每位主题发言人的最新研究进展中都发挥了重要作用，Galaxy 开发人员和 Galaxy 社区能够亲眼目睹 Galaxy 对科学界的影响。此外，每位主题发言人都为 Galaxy 的未来提供了灵感，并有时间与平台发展轨迹背后的开发人员直接交流。</p>\n<h3 dir="auto">Carolyn Hogg, PhD (University of Sydney，悉尼大学)</h3>\n<p dir="auto">来自悉尼大学的 Carolyn Hogg 博士作为第一位主讲人拉开了 GCC2023 的序幕。霍格博士在 "拯救塔斯马尼亚袋獾计划 (Save the Tasmanian Devil Program)" 进行的研究中发挥了重要作用，此外还重点研究了其他澳大利亚物种，如橙腹鹦鹉、考拉、兔耳袋狸和袋鼠。她在 GCC2023 上的演讲题为 “走向无限和超越：结合基因组学和云技术来拯救我们的物种”，强调了自然资源保护主义者和基因组科学家之间合作研究的必要性。她的愿景是通过改变科学、管理和政策的整合方式，为澳大利亚创造保护遗产，而 Galaxy 的使用增强了她的这一愿景。通过使用像 Galaxy 这样的开源平台，Hogg 博士能够产生可重复的基因组科学，以帮助澳大利亚的物种保护和管理实践。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/3b05d4e2ab453b9c0d39ebe76954098bd8bb76605899691d12bbad205703746e/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765342e706e67"><img src="https://camo.githubusercontent.com/3b05d4e2ab453b9c0d39ebe76954098bd8bb76605899691d12bbad205703746e/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765342e706e67" alt="GCC2023 Meeting Report Image4" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image4.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">Kate Michie, PhD (University of New South Wales，新南威尔士大学)</h3>\n<p dir="auto">来自新南威尔士大学的 Kate Michie 博士作为 GCC2023 的第二位主讲人发表了题为 “Alphafold2 和深度学习时代：结构生物学的最新进展” 的演讲。 Michie 博士在蛋白质结构生物学方面拥有二十多年的经验，并广泛使用 Alphafold2，并与众多研究人员密切合作，教他们如何使用这一强大的工具来推进他们的研究。在她的主题演讲中，Michie 博士呼吁关注 Galaxy 为结构生物学研究进展做好准备的迫切需要，这些进展肯定会伴随 Alphafold2 的巨大成功。 Michie 博士的演讲对 GCC2023 来说是一个有影响力的补充，因为 Galaxy 致力于保持竞争力并领先于社区的巨大研究需求。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/cc2b22b0e399ca4a3abfca5e18a7a2c0d7ff5ce2dae827217daeb67af790e939/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765352e706e67"><img src="https://camo.githubusercontent.com/cc2b22b0e399ca4a3abfca5e18a7a2c0d7ff5ce2dae827217daeb67af790e939/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765352e706e67" alt="GCC2023 Meeting Report Image5" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image5.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">Roberto Barrero, PhD (Queensland University of Technology，昆士兰科技大学)</h3>\n<p dir="auto">GCC2023 的最后一位主讲人是来自昆士兰科技大学的 Roberto Barrero 博士。巴雷罗博士的演讲题为 “通过更快、更准确地诊断植物病毒和类病毒，改善植物行业获得新遗传学的机会”，重点讨论利用生物信息学解决农业、植物生物安全和人类健康方面的现实问题。最近，Barrero 博士在开发植物诊断工具包方面发挥了重要作用，该工具包可以在一次测试中准确检测一系列病毒和类病毒，并于 2018 年向他和他的团队授予生物安全影响奖。Barrero 博士的研究进展得到了 Galaxy 的支持通过 GA-VirReport 和高通量测序技术。访问开放式端到端生物信息学工作流程对于诊断植物病毒和类病毒至关重要，Galaxy 很高兴能在 GCC2023 上将这一主题置于前沿。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/c27b8b7e77b3b207457b8f32bc48fc221f871b41d995efa16de55a73edfec34b/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765362e706e67"><img src="https://camo.githubusercontent.com/c27b8b7e77b3b207457b8f32bc48fc221f871b41d995efa16de55a73edfec34b/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765362e706e67" alt="GCC2023 Meeting Report Image6" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image6.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">培训课程</h2>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/aebee747238ad6a32c62bc0baa9de83ddb966fd328510be44ed2bc75ec798715/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765372e706e67"><img src="https://camo.githubusercontent.com/aebee747238ad6a32c62bc0baa9de83ddb966fd328510be44ed2bc75ec798715/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765372e706e67" alt="GCC2023 Meeting Report Image7" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image7.png" style="max-width: 100%;"></a><br>\n培训是 Galaxy 社区的首要任务。让研究人员能够轻松学习使用该平台、如何进行新的分析或探索能够解决研究人员面临的实际需求的功能和工具，对于 Galaxy 的发展和可持续发展发挥了重要作用。本着这种精神，在 GCC2023 的三天里，共举办了 15 场不同的培训课程，供与会者与专家一起学习和实践生物信息学。专家包括主要研究员、Galaxy 开发人员、项目经理和 Galaxy 高级用户。培训课程主题多种多样，为 GCC2023 的所有与会者提供相关且实用的学习机会。从微生物学和人类遗传学到工作流程和工具开发，GCC2023 培训课程提供了扩大与会者特定研究兴趣和遇到新主题的机会。</p>\n<p dir="auto">每节课将近三个小时，让学员有时间充分沉浸在教材中，与培训师和其他学员交流，并与来自不同背景的人交流经验和方法。</p>\n<h2 dir="auto">Birds of a Feather (BoF)</h2>\n<p dir="auto">Birds of a Feather (BoF) 会议是 GCC 期间的非正式聚会，参与者可以讨论感兴趣的话题。 BoF 每天在会议结束时举行，各小组分成焦点小组，与专家和其他与会者进行交流和讨论。</p>\n<p dir="auto">GCC2023 期间，与会者有九种不同的机会参加 BoF。今年的 BoF 提出了各种主题，包括备受期待的 Galaxy 高级用户与开发人员对话的机会。此外，BoF 还提供了举办迷你社交活动的机会，例如棋盘游戏、串酒吧和澳大利亚布里斯班徒步之旅！</p>\n<h2 dir="auto">CoFest</h2>\n<p dir="auto">GCC2023 主会之后，举办了为期三天的协作节（CoFest）。 CoFest 是 Galaxy 成员的社区聚会，这些成员有兴趣为 Galaxy 的工具集、文档、培训材料、代码库以及扩展 Galaxy 生态系统的其他任何地方做出贡献。 CoFest 的目标是：</p>\n<ol dir="auto">\n<li>扩大贡献者社区。这次 CoFest 的首要目的是欢迎新的贡献者，帮助您学习资源并结识能够帮助您做出贡献的人。</li>\n<li>扩大 Galaxy 生态系统。不仅仅是代码，而是整个生态系统。这包括培训、工具、最佳实践工作流程、文档、测试用例、翻译、基础设施，甚至代码。</li>\n</ol>\n<p dir="auto">CoFest 的参与者围绕着共同的兴趣，讨论与这些兴趣相关的共同话题。这些群组在 CoFest 开始前、开始时和整个过程中形成，旨在相互之间保持流动和高度互动。今年的 CoFest 分为九大主题：前端、后端、社区、设计、工具、工作流程、培训、测试和辅助项目。由于 CoFest 在整个活动期间都在不断变化和构建，因此主题被进一步细分，重点关注以下主题：交互式工具；升级 Vue3 和上传功能；吸引和保留社区参与活动、管理和领导力；ChatGXY；实施 Galaxy 工具健康审计服务；以及 Simon 的数据俱乐部。</p>\n<h2 dir="auto">社会事件</h2>\n<p dir="auto">GCC2023 希望将 Galaxy 社区的成员联系在一起，因此在整个会议期间举办了不同的社交活动。今年的 GCC2023 社交活动包括为会议拉开序幕的欢迎晚宴、由 Galaxy 社区成员主持的布里斯班徒步游、带有街机游戏的酒馆爬行、桌游之夜、会议晚宴，以及广受好评的 Lone Pine 考拉保护区之行！</p>\n<p dir="auto">毫无疑问，Lone Pine 考拉保护区是今年社交活动的亮点！一大群 GCC2023 与会者参观了世界上最大的考拉保护区，度过了一个下午，与动物邂逅、野生动物表演，并了解一些澳大利亚最受欢迎的野生动物！<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/f67ffe444db407b6cf06ed35fd93410aadda9565c09dc164da3337fa5c479c91/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765382e706e67"><img src="https://camo.githubusercontent.com/f67ffe444db407b6cf06ed35fd93410aadda9565c09dc164da3337fa5c479c91/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765382e706e67" alt="GCC2023 Meeting Report Image8" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image8.png" style="max-width: 100%;"></a></p>\n<p dir="auto">通过这些有组织的社交活动，Galaxy 社区的成员们在建立职业关系的同时，也建立了友谊。此外，许多社区成员还通过非组织活动，包括游览植物园、参观动物园医院和热带雨林，以及一日游等，彼此建立联系。</p>\n<p dir="auto">请参阅附录一，了解今年社交活动的更多照片以及遇到的所有令人惊叹的澳大利亚动物！</p>\n<h2 dir="auto">纪念 Simon Gladman</h2>\n<h3 dir="auto">Simon 数据俱乐部</h3>\n<p dir="auto">Simon Gladman 是 GCC2023 的最初发起者和组织者，如果看到他的伴侣和孩子参加这次会议，他一定会感到非常自豪。Simon 获得了多项荣誉，他作为创新者、榜样、支持者和社区联系者的遗产将继续受到表彰，“星际数据委员会 (Intergalactic Data Commission)” 更名为 “Simon 数据俱乐部 (Simon’s Data Club)”，并在他的组织中获得年度奖项。姓名。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/dc3e69c4fb2d06167ac3fe6ea8d49bc3319e01f79b06522cb8b677437440cbc8/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765392e706e67"><img src="https://camo.githubusercontent.com/dc3e69c4fb2d06167ac3fe6ea8d49bc3319e01f79b06522cb8b677437440cbc8/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765392e706e67" alt="GCC2023 Meeting Report Image9" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image9.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">Simon Gladman 旅行补助金</h3>\n<p dir="auto">已故西蒙·格拉德曼 (Simon Gladman) 对 Galaxy 的贡献将获得以他名字命名的年度奖项。 Galaxy Australia 才华横溢的技术主管和大家的伙伴 Simon 在 GCC2023 上受到了人们的深深怀念，人们对他表示了许多敬意。</p>\n<p dir="auto">Simon 对 Galaxy 充满热情并与人交流，并且很高兴能够组织在澳大利亚举办的首届国际 Galaxy 社区会议 (GCC)。在 GCC2023 上，我们宣布了首届 Simon Gladman 旅行补助金，以此来庆祝他。每年将向参加 Galaxy 社区活动的澳大利亚公民颁发 5,000 澳元的补助金。</p>\n<p dir="auto">如果您与 Simon 一样充满热情并希望为 Galaxy 做出贡献，我们鼓励您申请 Simon Gladman 旅行补助金。</p>\n<h2 dir="auto">感言</h2>\n<p dir="auto">Galaxy 执行董事会成员 Michael Schatz 是约翰·霍普金斯大学计算机科学和生物学的彭博杰出教授，他很高兴地看到：</p>\n<blockquote>\n<p dir="auto"><em>"The keynotes really highlighted how Galaxy enables cutting edge science.”</em><br>\n<em>“主题演讲真正强调了 Galaxy 如何实现尖端科学。”</em></p>\n</blockquote>\n<p dir="auto">来自 BioCommons、昆士兰网络基础设施基金会 (QCIF)、昆士兰大学、墨尔本生物信息学和 AARNet 的 Galaxy Australia 团队成员发表了从监测工具健康状况到开发最近发布的 Galaxy Australia 基因组实验室等主题。澳大利亚银河服务项目负责人 Gareth Price 博士表示：</p>\n<blockquote>\n<p dir="auto"><em>“There was a fantastic exchange between our team and international colleagues and wonderful opportunities to engage with the global Galaxy community. GCC was an exhilarating experience, and it was inspiring to be surrounded by like-minded people. The team left full of energy to keep improving Galaxy Australia and strengthen their collaborations with the wider Galaxy community.”</em><br>\n<em>“我们的团队与国际同事之间进行了精彩的交流，并有绝佳的机会与全球 Galaxy 社区互动。 GCC 是一次令人兴奋的经历，周围都是志趣相投的人，这很鼓舞人心。该团队充满活力地继续改进 Galaxy Australia，并加强与更广泛的 Galaxy 社区的合作。”</em></p>\n</blockquote>\n<p dir="auto">虽然我们是在昆士兰科技大学 (QUT) 的 The Cube 一流设施中举办的，但远程参与的能力是举办真正国际会议的关键因素。尽管 Amrita 大学系统基因组学首席科学家 Prash Suravajhala 博士是 GCC2023 组委会成员，但他无法从印度出发，但他：</p>\n<blockquote>\n<p dir="auto"><em>“Very excited and happy to be a part of GCC2023 virtually. We witnessed scintillating talks and brainstorming sessions, and the virtual attendance was a treat. This was a cherishing moment for me as I guzzled the talks from early morning India time! It has created a great camaraderie."</em><br>\n<em>“能够以虚拟方式参加 GCC2023 感到非常兴奋和高兴。我们目睹了精彩的演讲和头脑风暴会议，虚拟出席是一种享受。这对我来说是一个珍贵的时刻，因为我沉迷于印度时间清晨的演讲！它创造了伟大的友情。"</em></p>\n</blockquote>\n<h2 dir="auto">Recognition</h2>\n<p dir="auto">特别感谢 GCC2023 的赞助商：</p>\n<h3 dir="auto">白金赞助商</h3>\n<p dir="auto">BizData (<a href="https://www.bizdata.com.au/" rel="nofollow">https://www.bizdata.com.au/</a>)</p>\n<h3 dir="auto">银牌赞助商</h3>\n<p dir="auto">Limagrain (<a href="https://www.limagrain.com/en" rel="nofollow">https://www.limagrain.com/en</a>)</p>\n<p dir="auto">GalaxyWorks (<a href="https://galaxyworks.io/" rel="nofollow">https://galaxyworks.io/</a>)</p>\n<h3 dir="auto">铜牌赞助商</h3>\n<p dir="auto">GIGA Science (<a href="https://academic.oup.com/gigascience?login=false" rel="nofollow">https://academic.oup.com/gigascience?login=false</a>)</p>\n<p dir="auto">非常感谢所有使 GCC2023 取得成功的个人：</p>\n<h3 dir="auto">组织和科学委员会</h3>\n<p dir="auto">Andrew Lonie</p>\n<p dir="auto">Christina Hall</p>\n<p dir="auto">Enis Afgan</p>\n<p dir="auto">Gareth Price</p>\n<p dir="auto">Jenn Vessio</p>\n<p dir="auto">Margita Jadan</p>\n<p dir="auto">Prash Suravajhala</p>\n<p dir="auto">Roberto Barrero Gumiel</p>\n<p dir="auto">Ross Lazarus</p>\n<p dir="auto">Assunta DeSanto</p>\n<p dir="auto">Natalie Whitaker</p>\n<p dir="auto">Simon Gladman</p>\n<p dir="auto">Claudia Melogno de Sandoval</p>\n<h3 dir="auto">培训协调员</h3>\n<p dir="auto">Assunta DeSanto</p>\n<p dir="auto">Igor Makunin</p>\n<p dir="auto">Mark Crowe</p>\n<h3 dir="auto">在线支持</h3>\n<p dir="auto">Melissa Burke</p>\n<p dir="auto">Patrick Capon</p>\n<h3 dir="auto">科学计划成员</h3>\n<p dir="auto">Andrew Lonie</p>\n<p dir="auto">Anne Claire Fouilloux</p>\n<p dir="auto">Anna Syme</p>\n<p dir="auto">Anshu Bhardwaj</p>\n<p dir="auto">Bérénice Batut</p>\n<p dir="auto">Bryan Raubenolt</p>\n<p dir="auto">Cameron Hyde</p>\n<p dir="auto">Catherine Bromhead</p>\n<p dir="auto">Clare Sloggett</p>\n<p dir="auto">Cristóbal Gallardo</p>\n<p dir="auto">Dan Blankenberg</p>\n<p dir="auto">Davor Davidović</p>\n<p dir="auto">Enis Afgan</p>\n<p dir="auto">Frederik Coppens</p>\n<p dir="auto">Hans-Rudolf Hotz</p>\n<p dir="auto">Ivan Jakovlić</p>\n<p dir="auto">Jeremy Goecks</p>\n<p dir="auto">Justin Lee</p>\n<p dir="auto">Margita Jadan</p>\n<p dir="auto">Maria Doyle</p>\n<p dir="auto">Matthias Bernt</p>\n<p dir="auto">Natalie Kucher</p>\n<p dir="auto">Nicola Soranzo</p>\n<p dir="auto">Nuwan Goonasekera</p>\n<p dir="auto">Peter van Heusden</p>\n<p dir="auto">Ralf Weber</p>\n<p dir="auto">Ross Lazarus</p>\n<p dir="auto">Soyean Kim</p>\n<p dir="auto">Thomas Harrop</p>\n<p dir="auto">Timothy Griffin</p>\n<p dir="auto">Tyler Collins</p>\n<p dir="auto">Wendi Bacon</p>\n<p dir="auto">Yvan Le Bras</p>\n<h3 dir="auto">联合节主办方</h3>\n<p dir="auto">Cameron Hyde</p>\n<h2 dir="auto"><em>附录一</em></h2>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b22fb9632343bdaf39ecc9cc0adf9ff239ec0695da82fd93e0222d559401ba5a/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d61676531302e706e67"><img src="https://camo.githubusercontent.com/b22fb9632343bdaf39ecc9cc0adf9ff239ec0695da82fd93e0222d559401ba5a/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d61676531302e706e67" alt="GCC2023 Meeting Report Image10" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image10.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/359d1590386552d0aa7665cad5ad4442a17a547de5fefebee43189254042f643/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d61676531312e706e67"><img src="https://camo.githubusercontent.com/359d1590386552d0aa7665cad5ad4442a17a547de5fefebee43189254042f643/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d61676531312e706e67" alt="GCC2023 Meeting Report Image11" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image11.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/a17e4a1105e1063aed527b0bf853bd7d2cd3b498dd44e43763db63ec5f50414d/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d61676531322e706e67"><img src="https://camo.githubusercontent.com/a17e4a1105e1063aed527b0bf853bd7d2cd3b498dd44e43763db63ec5f50414d/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d61676531322e706e67" alt="GCC2023 Meeting Report Image12" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image12.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/d23acc73645f00e715f5d7675d4e8db3459749286190a4db53e3495064893356/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d61676531332e706e67"><img src="https://camo.githubusercontent.com/d23acc73645f00e715f5d7675d4e8db3459749286190a4db53e3495064893356/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d61676531332e706e67" alt="GCC2023 Meeting Report Image13" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image13.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/e0c6495f84f51653c32b2adb40bac7d402da676e7f0c4d410ffe24d7d2986a66/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d61676531342e706e67"><img src="https://camo.githubusercontent.com/e0c6495f84f51653c32b2adb40bac7d402da676e7f0c4d410ffe24d7d2986a66/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d61676531342e706e67" alt="GCC2023 Meeting Report Image14" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image14.png" style="max-width: 100%;"></a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.3-资讯'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '兆碱基中关于 Kb、KB、Bps、bps 的区别', 'number': 20, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/20', 'createdAt': '2023-11-23T01:39:14Z', 'lastEditedAt': '2023-11-23T02:48:23Z', 'updatedAt': '2023-11-23T02:48:23Z', 'body': '生物信息很多文章都提到 DNA 序列的 100 万个碱基数据（兆碱基）大致相当于计算机 1 兆的存储空间。借着这个问题，我们今天来聊一聊计算机存储和数据传输中 Kb、KB、Bps、bps 的一些区别，分析一下所谓的兆碱基到底是使用哪一种标准（单位）怎么计算出来的。\r\n\r\n<!-- more -->\r\n\r\n## 计算机存储容量单位\r\n\r\nBit (binary digit)：亦称二进制位，指二进制中的一位，是信息的最小单位。位的值只会是 0 或 1。虽然计算机也提供对位的判断和操作，但是计算机指令一般以字节(Byte)为单位。在大多数的计算机系统中，八位是一个字节。一位的值通常以存储电容是否带电来衡量。\r\n\r\nB (Byte)：字节。8 个二进制位构成 1 个"字节(Byte)"，它是电脑存储空间的基本计量单位。1 字节 (Byte)=8(bit) 位，就是有 8 个二进制数组成。1 个英文字符是 1 个字节,也就是 1B；1 个汉字为 2 个字符，也就是 2B。\r\n\r\nGB (Gigabyte)：吉字节，是一种**十进制**的信息计量单位。Gibibyte（giga binary byte 的缩写）则是**二进制**信息计量的一个单位，简称 GiB。吉字节（Gigabyte）常容易和二进制的信息计量单位 Gibibyte 混淆。\r\n\r\n> Gibibyte 与 Gigabyte 常常被混淆，前者的计算方式是二进制，后者的计算方式是十进制。现今的计算上，常把 Gigabyte 以二进制的方式计算，即 $2^{30} = 1,073,741,824$ 。(因为 Windows 对 GB 这个信息计量单位的误用，因此在 Windows 中显示的 "1GB"，其实应是指 "1GiB"，但 Windows 却显示为 "1GB"，而常造成误解。误用会普遍化的一大因素，是因为 Windows 的操作系统占有率高)，由于两种换算方法的不同，使容量在计算上相差了 7.3%，所以常有 Windows 系统报告的容量比硬盘标示的容量还要小的情况发生。但在苹果公司的 OS X 操作系统中，对于存储设备的容量计算方式与硬盘厂商一致，均为 1GB = 1,000,000,000 ( $10^{9}$ ) 字节的十进制，避免了计算和使用上的麻烦。\r\n>\r\n> —— 维基百科 - Gibibyte，<https://zh.wikipedia.org/wiki/Gibibyte>\r\n\r\nK、M、G 都是 KB、MB、GB 的简称。由于混淆已经普遍化，Gigabyte 往往是指 Gibibyte，所以平时我们说的 1 兆存储就是 1M（MB），1G 存储就是 1GB）。我们的照片一般是 104KB、209KB、1.45MB、2.45MB、3.32MB 等等。\r\n\r\n在说明其他储存单位的换算前，我们来看看两个标准：SI、IEC。\r\n\r\n### 国际单位制（SI）\r\n\r\n国际单位制(简称 SI，来自于法语 Système International d\'Unités)，是世界上最普遍采用的标准度量系统。国际单位制以七个基本单位(米（m），千克（kg），秒（s），安培（A），开尔文（K），摩尔（mol），坎德拉（cd）)为基础，由此建立起一系列相互换算关系明确的"一致单位"。另有二十个基于十进制的词头，当加在单位名称或符号前的时候，可用于表达该单位的倍数或分数。\r\n\r\n### 国际电工委员会（IEC）\r\n\r\n国际电工委员会（IEC, International Electrotechnical Commission）成立于 1906 年，至今已有 90 多年的历史。它是世界上成立最早的国际性电工标准化机构，负责有关电气工程和电子工程领域中的国际标准化工作。\r\n\r\nIEC 的宗旨是，促进电气、电子工程领域中标准化及有关问题的国际合作，增进国际间的相互了解。为实现这一目的，IEC 出版包括国际标准在内的各种出版物，并希望各成员在本国条件允许的情况下，在本国的标准化工作中使用这些标准。\r\n\r\n目前 IEC 的工作领域已由单纯研究电气设备、电机的名词术语和功率等问题扩展到电子、电力、微电子及其应用、通讯、视听、机器人、信息技术、新型医疗器械和核仪表等电工技术的各个方面。IEC 标准的权威性是世界公认的，截止到 2008 年 12 月底，IEC 已制定了 5425 个国际标准。\r\n\r\n不同标准下储存单位的次方单位 ( $2^{10}=1024$ )：\r\n\r\n![字节的次方单位](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/byte-wiki.png)\r\n\r\n## 比特率单位\r\n\r\n在电信和计算领域，比特率（Bit rate）是指单位时间内传输送或处理的比特的数量。比特率经常在电信领域用作连接速度、传输速度、信息传输速率和数字带宽容量的同义词。\r\n\r\n在数字多媒体领域，比特率是单位时间播放连续的媒体如压缩后的音频或视频的比特数量。在这个意义上讲，它相当于术语数字带宽消耗量，或吞吐量。\r\n\r\n比特率规定使用"比特每秒"（bit/s 或 bps）为单位，经常和国际单位制词头关联在一起：\r\n\r\n- bps(bit/s)，即 bit pro second（位每秒）；\r\n\r\n- Kbps(Kbit/s)，即 Kilobit pro second(千位每秒)；\r\n\r\n- Mbps(Mbit/s)，即 Milionbit pro second(百万位每秒)。\r\n\r\n其中，bit 即比特，通常用 b（小写）表示，指一位二进制位，Milionbit=1000Kilobit=1000 000bit，所以 1Mbps=1000 000bps；\r\n\r\n### bps 和 Bps\r\n\r\nbps 是通常用来**衡量带宽**的单位，常见于表示数据机及网络通讯的传输速率，指每秒钟传输的二进制位数。例如 GigabitEthernet 端口。\r\n```\r\n5 minute input rate 38410000 bits/sec, 6344 packets/sec\r\n382410000 bits/sec = 382.41Mbps\r\n```\r\n\r\n通常电脑(软件)上显示的上传下载速度（如下面的阿里云 OSSBrowser、Google Chrome 数据下载速度），则是指每秒种传输的字节数（Byte）通常用 B（大写）表示：MB 即百万字节也称兆字节；KB 即千字节；B 即字节。\r\n\r\n- 1B=8b\r\n\r\n- 1MB=1024KB=1024\\*1024B\r\n\r\n- 1Mbps=1000Kbps=1000/8KBps=125KBps\r\n\r\n我们通常说的 1M 带宽即指 1Mbps，因此 1M 的带宽下载的速度一般不会超过 125KB 每秒。2M、3M 带宽的下载速度分别不会超过 250KB、375KB 每秒。\r\n\r\n![download-byte-rate](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/download-byte-rate.png)\r\n\r\n**数据传输速率的衡量单位 K 是十进制含义，但数据存储的 K 是 2 进制含义。**\r\n\r\n1kbit/s 就是 1000bit/s，而 KB 是 1024 个字节,注意 KB(KByte) 和 kbit 的区别，另外，数据传输速率的单位是 bit/s 记作：bps 。\r\n\r\n在实际应用中：\r\n\r\n- 1kbps=1000bps\r\n\r\n- 1Mbps=1000,000bps\r\n\r\n- 1bps=0.000001bps\r\n\r\n1Mbps 与 1m/s 是有区别的，1m/s 指的是 1024KB/s，而 1Mbps 指的是(1000/8)KB/s 也就是 125KB/S。\r\n\r\n记住 K 和 k 是没区别的 \xa0，区别在于 bps 属于位每秒的单位，而 m/s ,KB/s 这两个属于字节每秒的单位，一字节等于 8 位，即 1k=8b。\r\n\r\n## 兆碱基\r\n\r\n所以，在文章开头提到的 DNA 序列的 100 万个碱基数据（兆碱基）大致相当于计算机 1 兆的存储空间。其实也就是这么计算来得：\r\n\r\n一个碱基就是一个英文字母，而一个英文字母是 1 个字节（Byte），所以 100 万个碱基就是 1000,000 Byte。按照 SI 国际单位的十进制标准，正好相当于 1 MB，如果按照 IEC 国际电工委员会的二进制标准，应该为：1000,000 / 1024 /1024 ≈ 0.95 MB，则是大致相当于计算机 1 兆的存储空间。\r\n\r\n## 参考资料\r\n\r\n- [Wiki: Gibibyte](https://zh.wikipedia.org/wiki/Gibibyte)，维基百科\r\n- [Wiki：比特率](https://zh.wikipedia.org/wiki/%E6%AF%94%E7%89%B9%E7%8E%87)，维基百科\r\n- 沙翁，《[什么是 Mbps、Kbps、bps、kb、mb 及其换算和区别](https://www.cnblogs.com/shaweng/p/3816985.html)》，博客园\r\n- 大任 Dren，《[bit、Byte、bps、Bps、pps、Gbps 的单位详细说明及换算](https://blog.csdn.net/a9254778/article/details/8513086)》，CSDN-专业 IT 技术社区\r\n', 'bodyText': '生物信息很多文章都提到 DNA 序列的 100 万个碱基数据（兆碱基）大致相当于计算机 1 兆的存储空间。借着这个问题，我们今天来聊一聊计算机存储和数据传输中 Kb、KB、Bps、bps 的一些区别，分析一下所谓的兆碱基到底是使用哪一种标准（单位）怎么计算出来的。\n\n计算机存储容量单位\nBit (binary digit)：亦称二进制位，指二进制中的一位，是信息的最小单位。位的值只会是 0 或 1。虽然计算机也提供对位的判断和操作，但是计算机指令一般以字节(Byte)为单位。在大多数的计算机系统中，八位是一个字节。一位的值通常以存储电容是否带电来衡量。\nB (Byte)：字节。8 个二进制位构成 1 个"字节(Byte)"，它是电脑存储空间的基本计量单位。1 字节 (Byte)=8(bit) 位，就是有 8 个二进制数组成。1 个英文字符是 1 个字节,也就是 1B；1 个汉字为 2 个字符，也就是 2B。\nGB (Gigabyte)：吉字节，是一种十进制的信息计量单位。Gibibyte（giga binary byte 的缩写）则是二进制信息计量的一个单位，简称 GiB。吉字节（Gigabyte）常容易和二进制的信息计量单位 Gibibyte 混淆。\n\nGibibyte 与 Gigabyte 常常被混淆，前者的计算方式是二进制，后者的计算方式是十进制。现今的计算上，常把 Gigabyte 以二进制的方式计算，即 $2^{30} = 1,073,741,824$ 。(因为 Windows 对 GB 这个信息计量单位的误用，因此在 Windows 中显示的 "1GB"，其实应是指 "1GiB"，但 Windows 却显示为 "1GB"，而常造成误解。误用会普遍化的一大因素，是因为 Windows 的操作系统占有率高)，由于两种换算方法的不同，使容量在计算上相差了 7.3%，所以常有 Windows 系统报告的容量比硬盘标示的容量还要小的情况发生。但在苹果公司的 OS X 操作系统中，对于存储设备的容量计算方式与硬盘厂商一致，均为 1GB = 1,000,000,000 ( $10^{9}$ ) 字节的十进制，避免了计算和使用上的麻烦。\n—— 维基百科 - Gibibyte，https://zh.wikipedia.org/wiki/Gibibyte\n\nK、M、G 都是 KB、MB、GB 的简称。由于混淆已经普遍化，Gigabyte 往往是指 Gibibyte，所以平时我们说的 1 兆存储就是 1M（MB），1G 存储就是 1GB）。我们的照片一般是 104KB、209KB、1.45MB、2.45MB、3.32MB 等等。\n在说明其他储存单位的换算前，我们来看看两个标准：SI、IEC。\n国际单位制（SI）\n国际单位制(简称 SI，来自于法语 Système International d\'Unités)，是世界上最普遍采用的标准度量系统。国际单位制以七个基本单位(米（m），千克（kg），秒（s），安培（A），开尔文（K），摩尔（mol），坎德拉（cd）)为基础，由此建立起一系列相互换算关系明确的"一致单位"。另有二十个基于十进制的词头，当加在单位名称或符号前的时候，可用于表达该单位的倍数或分数。\n国际电工委员会（IEC）\n国际电工委员会（IEC, International Electrotechnical Commission）成立于 1906 年，至今已有 90 多年的历史。它是世界上成立最早的国际性电工标准化机构，负责有关电气工程和电子工程领域中的国际标准化工作。\nIEC 的宗旨是，促进电气、电子工程领域中标准化及有关问题的国际合作，增进国际间的相互了解。为实现这一目的，IEC 出版包括国际标准在内的各种出版物，并希望各成员在本国条件允许的情况下，在本国的标准化工作中使用这些标准。\n目前 IEC 的工作领域已由单纯研究电气设备、电机的名词术语和功率等问题扩展到电子、电力、微电子及其应用、通讯、视听、机器人、信息技术、新型医疗器械和核仪表等电工技术的各个方面。IEC 标准的权威性是世界公认的，截止到 2008 年 12 月底，IEC 已制定了 5425 个国际标准。\n不同标准下储存单位的次方单位 ( $2^{10}=1024$ )：\n\n比特率单位\n在电信和计算领域，比特率（Bit rate）是指单位时间内传输送或处理的比特的数量。比特率经常在电信领域用作连接速度、传输速度、信息传输速率和数字带宽容量的同义词。\n在数字多媒体领域，比特率是单位时间播放连续的媒体如压缩后的音频或视频的比特数量。在这个意义上讲，它相当于术语数字带宽消耗量，或吞吐量。\n比特率规定使用"比特每秒"（bit/s 或 bps）为单位，经常和国际单位制词头关联在一起：\n\n\nbps(bit/s)，即 bit pro second（位每秒）；\n\n\nKbps(Kbit/s)，即 Kilobit pro second(千位每秒)；\n\n\nMbps(Mbit/s)，即 Milionbit pro second(百万位每秒)。\n\n\n其中，bit 即比特，通常用 b（小写）表示，指一位二进制位，Milionbit=1000Kilobit=1000 000bit，所以 1Mbps=1000 000bps；\nbps 和 Bps\nbps 是通常用来衡量带宽的单位，常见于表示数据机及网络通讯的传输速率，指每秒钟传输的二进制位数。例如 GigabitEthernet 端口。\n5 minute input rate 38410000 bits/sec, 6344 packets/sec\n382410000 bits/sec = 382.41Mbps\n\n通常电脑(软件)上显示的上传下载速度（如下面的阿里云 OSSBrowser、Google Chrome 数据下载速度），则是指每秒种传输的字节数（Byte）通常用 B（大写）表示：MB 即百万字节也称兆字节；KB 即千字节；B 即字节。\n\n\n1B=8b\n\n\n1MB=1024KB=1024*1024B\n\n\n1Mbps=1000Kbps=1000/8KBps=125KBps\n\n\n我们通常说的 1M 带宽即指 1Mbps，因此 1M 的带宽下载的速度一般不会超过 125KB 每秒。2M、3M 带宽的下载速度分别不会超过 250KB、375KB 每秒。\n\n数据传输速率的衡量单位 K 是十进制含义，但数据存储的 K 是 2 进制含义。\n1kbit/s 就是 1000bit/s，而 KB 是 1024 个字节,注意 KB(KByte) 和 kbit 的区别，另外，数据传输速率的单位是 bit/s 记作：bps 。\n在实际应用中：\n\n\n1kbps=1000bps\n\n\n1Mbps=1000,000bps\n\n\n1bps=0.000001bps\n\n\n1Mbps 与 1m/s 是有区别的，1m/s 指的是 1024KB/s，而 1Mbps 指的是(1000/8)KB/s 也就是 125KB/S。\n记住 K 和 k 是没区别的 \xa0，区别在于 bps 属于位每秒的单位，而 m/s ,KB/s 这两个属于字节每秒的单位，一字节等于 8 位，即 1k=8b。\n兆碱基\n所以，在文章开头提到的 DNA 序列的 100 万个碱基数据（兆碱基）大致相当于计算机 1 兆的存储空间。其实也就是这么计算来得：\n一个碱基就是一个英文字母，而一个英文字母是 1 个字节（Byte），所以 100 万个碱基就是 1000,000 Byte。按照 SI 国际单位的十进制标准，正好相当于 1 MB，如果按照 IEC 国际电工委员会的二进制标准，应该为：1000,000 / 1024 /1024 ≈ 0.95 MB，则是大致相当于计算机 1 兆的存储空间。\n参考资料\n\nWiki: Gibibyte，维基百科\nWiki：比特率，维基百科\n沙翁，《什么是 Mbps、Kbps、bps、kb、mb 及其换算和区别》，博客园\n大任 Dren，《bit、Byte、bps、Bps、pps、Gbps 的单位详细说明及换算》，CSDN-专业 IT 技术社区', 'bodyHTML': '<p dir="auto">生物信息很多文章都提到 DNA 序列的 100 万个碱基数据（兆碱基）大致相当于计算机 1 兆的存储空间。借着这个问题，我们今天来聊一聊计算机存储和数据传输中 Kb、KB、Bps、bps 的一些区别，分析一下所谓的兆碱基到底是使用哪一种标准（单位）怎么计算出来的。</p>\n\n<h2 dir="auto">计算机存储容量单位</h2>\n<p dir="auto">Bit (binary digit)：亦称二进制位，指二进制中的一位，是信息的最小单位。位的值只会是 0 或 1。虽然计算机也提供对位的判断和操作，但是计算机指令一般以字节(Byte)为单位。在大多数的计算机系统中，八位是一个字节。一位的值通常以存储电容是否带电来衡量。</p>\n<p dir="auto">B (Byte)：字节。8 个二进制位构成 1 个"字节(Byte)"，它是电脑存储空间的基本计量单位。1 字节 (Byte)=8(bit) 位，就是有 8 个二进制数组成。1 个英文字符是 1 个字节,也就是 1B；1 个汉字为 2 个字符，也就是 2B。</p>\n<p dir="auto">GB (Gigabyte)：吉字节，是一种<strong>十进制</strong>的信息计量单位。Gibibyte（giga binary byte 的缩写）则是<strong>二进制</strong>信息计量的一个单位，简称 GiB。吉字节（Gigabyte）常容易和二进制的信息计量单位 Gibibyte 混淆。</p>\n<blockquote>\n<p dir="auto">Gibibyte 与 Gigabyte 常常被混淆，前者的计算方式是二进制，后者的计算方式是十进制。现今的计算上，常把 Gigabyte 以二进制的方式计算，即 <math-renderer class="js-inline-math" style="display: inline-block" data-static-url="https://github.githubassets.com/static" data-run-id="441e127b4f2ffa96c1465aafc2093019">$2^{30} = 1,073,741,824$</math-renderer> 。(因为 Windows 对 GB 这个信息计量单位的误用，因此在 Windows 中显示的 "1GB"，其实应是指 "1GiB"，但 Windows 却显示为 "1GB"，而常造成误解。误用会普遍化的一大因素，是因为 Windows 的操作系统占有率高)，由于两种换算方法的不同，使容量在计算上相差了 7.3%，所以常有 Windows 系统报告的容量比硬盘标示的容量还要小的情况发生。但在苹果公司的 OS X 操作系统中，对于存储设备的容量计算方式与硬盘厂商一致，均为 1GB = 1,000,000,000 ( <math-renderer class="js-inline-math" style="display: inline-block" data-static-url="https://github.githubassets.com/static" data-run-id="441e127b4f2ffa96c1465aafc2093019">$10^{9}$</math-renderer> ) 字节的十进制，避免了计算和使用上的麻烦。</p>\n<p dir="auto">—— 维基百科 - Gibibyte，<a href="https://zh.wikipedia.org/wiki/Gibibyte" rel="nofollow">https://zh.wikipedia.org/wiki/Gibibyte</a></p>\n</blockquote>\n<p dir="auto">K、M、G 都是 KB、MB、GB 的简称。由于混淆已经普遍化，Gigabyte 往往是指 Gibibyte，所以平时我们说的 1 兆存储就是 1M（MB），1G 存储就是 1GB）。我们的照片一般是 104KB、209KB、1.45MB、2.45MB、3.32MB 等等。</p>\n<p dir="auto">在说明其他储存单位的换算前，我们来看看两个标准：SI、IEC。</p>\n<h3 dir="auto">国际单位制（SI）</h3>\n<p dir="auto">国际单位制(简称 SI，来自于法语 Système International d\'Unités)，是世界上最普遍采用的标准度量系统。国际单位制以七个基本单位(米（m），千克（kg），秒（s），安培（A），开尔文（K），摩尔（mol），坎德拉（cd）)为基础，由此建立起一系列相互换算关系明确的"一致单位"。另有二十个基于十进制的词头，当加在单位名称或符号前的时候，可用于表达该单位的倍数或分数。</p>\n<h3 dir="auto">国际电工委员会（IEC）</h3>\n<p dir="auto">国际电工委员会（IEC, International Electrotechnical Commission）成立于 1906 年，至今已有 90 多年的历史。它是世界上成立最早的国际性电工标准化机构，负责有关电气工程和电子工程领域中的国际标准化工作。</p>\n<p dir="auto">IEC 的宗旨是，促进电气、电子工程领域中标准化及有关问题的国际合作，增进国际间的相互了解。为实现这一目的，IEC 出版包括国际标准在内的各种出版物，并希望各成员在本国条件允许的情况下，在本国的标准化工作中使用这些标准。</p>\n<p dir="auto">目前 IEC 的工作领域已由单纯研究电气设备、电机的名词术语和功率等问题扩展到电子、电力、微电子及其应用、通讯、视听、机器人、信息技术、新型医疗器械和核仪表等电工技术的各个方面。IEC 标准的权威性是世界公认的，截止到 2008 年 12 月底，IEC 已制定了 5425 个国际标准。</p>\n<p dir="auto">不同标准下储存单位的次方单位 ( <math-renderer class="js-inline-math" style="display: inline-block" data-static-url="https://github.githubassets.com/static" data-run-id="441e127b4f2ffa96c1465aafc2093019">$2^{10}=1024$</math-renderer> )：</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/2c75ea207de353c146a45775cdb8c6c288408af565a20c76d79bf053de5d44c0/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f627974652d77696b692e706e67"><img src="https://camo.githubusercontent.com/2c75ea207de353c146a45775cdb8c6c288408af565a20c76d79bf053de5d44c0/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f627974652d77696b692e706e67" alt="字节的次方单位" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/byte-wiki.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">比特率单位</h2>\n<p dir="auto">在电信和计算领域，比特率（Bit rate）是指单位时间内传输送或处理的比特的数量。比特率经常在电信领域用作连接速度、传输速度、信息传输速率和数字带宽容量的同义词。</p>\n<p dir="auto">在数字多媒体领域，比特率是单位时间播放连续的媒体如压缩后的音频或视频的比特数量。在这个意义上讲，它相当于术语数字带宽消耗量，或吞吐量。</p>\n<p dir="auto">比特率规定使用"比特每秒"（bit/s 或 bps）为单位，经常和国际单位制词头关联在一起：</p>\n<ul dir="auto">\n<li>\n<p dir="auto">bps(bit/s)，即 bit pro second（位每秒）；</p>\n</li>\n<li>\n<p dir="auto">Kbps(Kbit/s)，即 Kilobit pro second(千位每秒)；</p>\n</li>\n<li>\n<p dir="auto">Mbps(Mbit/s)，即 Milionbit pro second(百万位每秒)。</p>\n</li>\n</ul>\n<p dir="auto">其中，bit 即比特，通常用 b（小写）表示，指一位二进制位，Milionbit=1000Kilobit=1000 000bit，所以 1Mbps=1000 000bps；</p>\n<h3 dir="auto">bps 和 Bps</h3>\n<p dir="auto">bps 是通常用来<strong>衡量带宽</strong>的单位，常见于表示数据机及网络通讯的传输速率，指每秒钟传输的二进制位数。例如 GigabitEthernet 端口。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="5 minute input rate 38410000 bits/sec, 6344 packets/sec\n382410000 bits/sec = 382.41Mbps"><pre class="notranslate"><code class="notranslate">5 minute input rate 38410000 bits/sec, 6344 packets/sec\n382410000 bits/sec = 382.41Mbps\n</code></pre></div>\n<p dir="auto">通常电脑(软件)上显示的上传下载速度（如下面的阿里云 OSSBrowser、Google Chrome 数据下载速度），则是指每秒种传输的字节数（Byte）通常用 B（大写）表示：MB 即百万字节也称兆字节；KB 即千字节；B 即字节。</p>\n<ul dir="auto">\n<li>\n<p dir="auto">1B=8b</p>\n</li>\n<li>\n<p dir="auto">1MB=1024KB=1024*1024B</p>\n</li>\n<li>\n<p dir="auto">1Mbps=1000Kbps=1000/8KBps=125KBps</p>\n</li>\n</ul>\n<p dir="auto">我们通常说的 1M 带宽即指 1Mbps，因此 1M 的带宽下载的速度一般不会超过 125KB 每秒。2M、3M 带宽的下载速度分别不会超过 250KB、375KB 每秒。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/022874f2cbc23e11c46487c262878799dc7a6c003af017ce4510d6135343bca4/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f646f776e6c6f61642d627974652d726174652e706e67"><img src="https://camo.githubusercontent.com/022874f2cbc23e11c46487c262878799dc7a6c003af017ce4510d6135343bca4/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f646f776e6c6f61642d627974652d726174652e706e67" alt="download-byte-rate" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/download-byte-rate.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><strong>数据传输速率的衡量单位 K 是十进制含义，但数据存储的 K 是 2 进制含义。</strong></p>\n<p dir="auto">1kbit/s 就是 1000bit/s，而 KB 是 1024 个字节,注意 KB(KByte) 和 kbit 的区别，另外，数据传输速率的单位是 bit/s 记作：bps 。</p>\n<p dir="auto">在实际应用中：</p>\n<ul dir="auto">\n<li>\n<p dir="auto">1kbps=1000bps</p>\n</li>\n<li>\n<p dir="auto">1Mbps=1000,000bps</p>\n</li>\n<li>\n<p dir="auto">1bps=0.000001bps</p>\n</li>\n</ul>\n<p dir="auto">1Mbps 与 1m/s 是有区别的，1m/s 指的是 1024KB/s，而 1Mbps 指的是(1000/8)KB/s 也就是 125KB/S。</p>\n<p dir="auto">记住 K 和 k 是没区别的 \xa0，区别在于 bps 属于位每秒的单位，而 m/s ,KB/s 这两个属于字节每秒的单位，一字节等于 8 位，即 1k=8b。</p>\n<h2 dir="auto">兆碱基</h2>\n<p dir="auto">所以，在文章开头提到的 DNA 序列的 100 万个碱基数据（兆碱基）大致相当于计算机 1 兆的存储空间。其实也就是这么计算来得：</p>\n<p dir="auto">一个碱基就是一个英文字母，而一个英文字母是 1 个字节（Byte），所以 100 万个碱基就是 1000,000 Byte。按照 SI 国际单位的十进制标准，正好相当于 1 MB，如果按照 IEC 国际电工委员会的二进制标准，应该为：1000,000 / 1024 /1024 ≈ 0.95 MB，则是大致相当于计算机 1 兆的存储空间。</p>\n<h2 dir="auto">参考资料</h2>\n<ul dir="auto">\n<li><a href="https://zh.wikipedia.org/wiki/Gibibyte" rel="nofollow">Wiki: Gibibyte</a>，维基百科</li>\n<li><a href="https://zh.wikipedia.org/wiki/%E6%AF%94%E7%89%B9%E7%8E%87" rel="nofollow">Wiki：比特率</a>，维基百科</li>\n<li>沙翁，《<a href="https://www.cnblogs.com/shaweng/p/3816985.html" rel="nofollow">什么是 Mbps、Kbps、bps、kb、mb 及其换算和区别</a>》，博客园</li>\n<li>大任 Dren，《<a href="https://blog.csdn.net/a9254778/article/details/8513086" rel="nofollow">bit、Byte、bps、Bps、pps、Gbps 的单位详细说明及换算</a>》，CSDN-专业 IT 技术社区</li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.4-知识'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '沉浸式双语网页翻译扩展', 'number': 19, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/19', 'createdAt': '2023-11-23T01:07:46Z', 'lastEditedAt': '2024-04-19T08:57:37Z', 'updatedAt': '2024-04-19T08:57:37Z', 'body': '向大家极力推荐这个插件：**沉浸式双语网页翻译扩展**，浏览器翻译神器，而且**完全免费**！\r\n\r\n- **GitHub：** [https://github.com/immersive-translate/immersive-translate](https://github.com/immersive-translate/immersive-translate)\r\n- 如果你是 **Mac** 系统，推荐：[https://github.com/ripperhe/Bob](https://github.com/ripperhe/Bob)\r\n\r\n<!-- more -->\r\n\r\n![image.png](https://shub.weiyan.tech/yuque/elog-cookbook-img/FtAZvqEDdgc3yfpbqwRq40MUEfld.png)\r\n\r\n**截图**\r\n![Twitter 翻译](https://shub.weiyan.tech/yuque/elog-cookbook-img/FpC4e5Sf_G5YT9bzCWSTl4oBIBVO.png "Twitter 翻译")\r\n\r\n![pdf 文件翻译](https://shub.weiyan.tech/yuque/elog-cookbook-img/FpImmIXzUhUNXaD-OgDI1AArm2eu.png "pdf 文件翻译")\r\n\r\n![Reddit 高亮译文样式](https://shub.weiyan.tech/yuque/elog-cookbook-img/FuFqmDqRNOZl_es2sVoRkmeMDAar.png "Reddit 高亮译文样式")\r\n', 'bodyText': '向大家极力推荐这个插件：沉浸式双语网页翻译扩展，浏览器翻译神器，而且完全免费！\n\nGitHub： https://github.com/immersive-translate/immersive-translate\n如果你是 Mac 系统，推荐：https://github.com/ripperhe/Bob\n\n\n\n截图', 'bodyHTML': '<p dir="auto">向大家极力推荐这个插件：<strong>沉浸式双语网页翻译扩展</strong>，浏览器翻译神器，而且<strong>完全免费</strong>！</p>\n<ul dir="auto">\n<li><strong>GitHub：</strong> <a href="https://github.com/immersive-translate/immersive-translate">https://github.com/immersive-translate/immersive-translate</a></li>\n<li>如果你是 <strong>Mac</strong> 系统，推荐：<a href="https://github.com/ripperhe/Bob">https://github.com/ripperhe/Bob</a></li>\n</ul>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/17a8caa394b2bcae7a528091d6a62a24ae3f6fb63e66a945e27a2c5cf0b14a17/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d636f6f6b626f6f6b2d696d672f4674415a7671454464676333796670627177527134304d5545666c642e706e67"><img src="https://camo.githubusercontent.com/17a8caa394b2bcae7a528091d6a62a24ae3f6fb63e66a945e27a2c5cf0b14a17/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d636f6f6b626f6f6b2d696d672f4674415a7671454464676333796670627177527134304d5545666c642e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-cookbook-img/FtAZvqEDdgc3yfpbqwRq40MUEfld.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><strong>截图</strong><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/0c1fd4c1cb61c551fd00b1771b7f8ce779c0b8a6b988b18383d7aaff3f617a00/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d636f6f6b626f6f6b2d696d672f46704334653553665f4735595439627a435753546c346f424942564f2e706e67"><img src="https://camo.githubusercontent.com/0c1fd4c1cb61c551fd00b1771b7f8ce779c0b8a6b988b18383d7aaff3f617a00/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d636f6f6b626f6f6b2d696d672f46704334653553665f4735595439627a435753546c346f424942564f2e706e67" alt="Twitter 翻译" title="Twitter 翻译" data-canonical-src="https://shub.weiyan.tech/yuque/elog-cookbook-img/FpC4e5Sf_G5YT9bzCWSTl4oBIBVO.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/46008529a1d08d2122a913f1b2895eeb3da19a642881f374367c086faf4211c3/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d636f6f6b626f6f6b2d696d672f4670496d6d49587a5568554e5861442d4f674449314141726d3265752e706e67"><img src="https://camo.githubusercontent.com/46008529a1d08d2122a913f1b2895eeb3da19a642881f374367c086faf4211c3/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d636f6f6b626f6f6b2d696d672f4670496d6d49587a5568554e5861442d4f674449314141726d3265752e706e67" alt="pdf 文件翻译" title="pdf 文件翻译" data-canonical-src="https://shub.weiyan.tech/yuque/elog-cookbook-img/FpImmIXzUhUNXaD-OgDI1AArm2eu.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/2fa67686dc2070c889ca34ce463af018194e9d1c61464c947b8cc5ea01f90fdf/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d636f6f6b626f6f6b2d696d672f467546716d4471524e4f5a6c5f65733273566f526b6d654d444161722e706e67"><img src="https://camo.githubusercontent.com/2fa67686dc2070c889ca34ce463af018194e9d1c61464c947b8cc5ea01f90fdf/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d636f6f6b626f6f6b2d696d672f467546716d4471524e4f5a6c5f65733273566f526b6d654d444161722e706e67" alt="Reddit 高亮译文样式" title="Reddit 高亮译文样式" data-canonical-src="https://shub.weiyan.tech/yuque/elog-cookbook-img/FuFqmDqRNOZl_es2sVoRkmeMDAar.png" style="max-width: 100%;"></a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '跨端博客解决方案 Elog 使用', 'number': 18, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/18', 'createdAt': '2023-11-23T01:04:15Z', 'lastEditedAt': None, 'updatedAt': '2024-01-04T05:44:58Z', 'body': 'Elog (<https://github.com/LetTTGACO/elog>) —— 开放式跨平台博客解决方案，随意组合写作平台 (语雀/Notion/FlowUs) 和部署平台 (Hexo/Vitepress 等 。\r\n\r\n<!-- more -->\r\n\r\n主要配置文件 **elog.config.js**：\r\n\r\n```javascript\r\nmodule.exports = {\r\n  write: {\r\n    platform: "yuque",\r\n    yuque: {\r\n      token: process.env.YUQUE_TOKEN,\r\n      baseUrl: "",\r\n      login: process.env.YUQUE_LOGIN,\r\n      repo: process.env.YUQUE_REPO,\r\n      onlyPublic: false,\r\n      onlyPublished: true,\r\n    },\r\n    notion: {\r\n      token: process.env.NOTION_TOKEN,\r\n      databaseId: process.env.NOTION_DATABASE_ID,\r\n      filter: true, // {property: \'status\', select: {equals: \'已发布\'}}\r\n      sorts: true, // [{timestamp: \'created_time\', direction: \'descending\'}],\r\n      catalog: false,\r\n    },\r\n    flowus: {\r\n      tablePageId: process.env.FLOWUS_TABLE_PAGE_ID,\r\n      filter: true, // {property: \'status\',value: \'已发布\'}\r\n      sort: true, // { property: \'createdAt\', direction: \'descending\' }\r\n      catalog: false,\r\n    },\r\n  },\r\n  deploy: {\r\n    platform: "local",\r\n    local: {\r\n      outputDir: "./Cookbook",\r\n      filename: "title", //生成文档的命名格式，取值 urlname|title\r\n      format: "markdown",\r\n      catalog: true, //是否按照目录生成文档\r\n      formatExt: "",\r\n    },\r\n    confluence: {\r\n      user: process.env.CONFLUENCE_USER,\r\n      password: process.env.CONFLUENCE_PASSWORD,\r\n      baseUrl: process.env.CONFLUENCE_BASE_URL,\r\n      spaceKey: process.env.CONFLUENCE_SPACE_KEY,\r\n      rootPageId: process.env.CONFLUENCE_ROOT_PAGE_ID, // 可选\r\n      formatExt: "", // 可选\r\n    },\r\n  },\r\n  image: {\r\n    enable: true,\r\n    platform: "local",\r\n    local: {\r\n      outputDir: "./Images", //本地图片保存目录\r\n      prefixKey: "/cookbook", //替换图片的url前缀，如 ![image.png](/cookbook/xxxx.png)\r\n    },\r\n    oss: {\r\n      secretId: process.env.OSS_SECRET_ID,\r\n      secretKey: process.env.OSS_SECRET_KEY,\r\n      bucket: process.env.OSS_BUCKET,\r\n      region: process.env.OSS_REGION,\r\n      host: process.env.OSS_HOST,\r\n      prefixKey: "",\r\n      secretExt: "", // 可选\r\n    },\r\n    cos: {\r\n      secretId: process.env.COS_SECRET_ID,\r\n      secretKey: process.env.COS_SECRET_KEY,\r\n      bucket: process.env.COS_BUCKET,\r\n      region: process.env.COS_REGION,\r\n      host: process.env.COS_HOST,\r\n      prefixKey: "",\r\n      secretExt: "", // 可选\r\n    },\r\n    qiniu: {\r\n      secretId: process.env.QINIU_SECRET_ID,\r\n      secretKey: process.env.QINIU_SECRET_KEY,\r\n      bucket: process.env.QINIU_BUCKET,\r\n      region: process.env.QINIU_REGION,\r\n      host: process.env.QINIU_HOST,\r\n      prefixKey: "",\r\n      secretExt: "", // 可选\r\n    },\r\n    upyun: {\r\n      user: process.env.UPYUN_USER,\r\n      password: process.env.UPYUN_PASSWORD,\r\n      bucket: process.env.UPYUN_BUCKET,\r\n      host: process.env.UPYUN_HOST,\r\n      prefixKey: "",\r\n      secretExt: "", // 可选\r\n    },\r\n    github: {\r\n      user: process.env.GITHUB_USER,\r\n      token: process.env.GITHUB_TOKEN,\r\n      repo: process.env.GITHUB_REPO,\r\n      branch: "",\r\n      host: "",\r\n      prefixKey: "",\r\n      secretExt: "", // 可选\r\n    },\r\n  },\r\n};\r\n```\r\n\r\n基于语雀 WebHook 实现实时同步：<https://github.com/LetTTGACO/serverless-api>\r\n', 'bodyText': 'Elog (https://github.com/LetTTGACO/elog) —— 开放式跨平台博客解决方案，随意组合写作平台 (语雀/Notion/FlowUs) 和部署平台 (Hexo/Vitepress 等 。\n\n主要配置文件 elog.config.js：\nmodule.exports = {\n  write: {\n    platform: "yuque",\n    yuque: {\n      token: process.env.YUQUE_TOKEN,\n      baseUrl: "",\n      login: process.env.YUQUE_LOGIN,\n      repo: process.env.YUQUE_REPO,\n      onlyPublic: false,\n      onlyPublished: true,\n    },\n    notion: {\n      token: process.env.NOTION_TOKEN,\n      databaseId: process.env.NOTION_DATABASE_ID,\n      filter: true, // {property: \'status\', select: {equals: \'已发布\'}}\n      sorts: true, // [{timestamp: \'created_time\', direction: \'descending\'}],\n      catalog: false,\n    },\n    flowus: {\n      tablePageId: process.env.FLOWUS_TABLE_PAGE_ID,\n      filter: true, // {property: \'status\',value: \'已发布\'}\n      sort: true, // { property: \'createdAt\', direction: \'descending\' }\n      catalog: false,\n    },\n  },\n  deploy: {\n    platform: "local",\n    local: {\n      outputDir: "./Cookbook",\n      filename: "title", //生成文档的命名格式，取值 urlname|title\n      format: "markdown",\n      catalog: true, //是否按照目录生成文档\n      formatExt: "",\n    },\n    confluence: {\n      user: process.env.CONFLUENCE_USER,\n      password: process.env.CONFLUENCE_PASSWORD,\n      baseUrl: process.env.CONFLUENCE_BASE_URL,\n      spaceKey: process.env.CONFLUENCE_SPACE_KEY,\n      rootPageId: process.env.CONFLUENCE_ROOT_PAGE_ID, // 可选\n      formatExt: "", // 可选\n    },\n  },\n  image: {\n    enable: true,\n    platform: "local",\n    local: {\n      outputDir: "./Images", //本地图片保存目录\n      prefixKey: "/cookbook", //替换图片的url前缀，如 ![image.png](/cookbook/xxxx.png)\n    },\n    oss: {\n      secretId: process.env.OSS_SECRET_ID,\n      secretKey: process.env.OSS_SECRET_KEY,\n      bucket: process.env.OSS_BUCKET,\n      region: process.env.OSS_REGION,\n      host: process.env.OSS_HOST,\n      prefixKey: "",\n      secretExt: "", // 可选\n    },\n    cos: {\n      secretId: process.env.COS_SECRET_ID,\n      secretKey: process.env.COS_SECRET_KEY,\n      bucket: process.env.COS_BUCKET,\n      region: process.env.COS_REGION,\n      host: process.env.COS_HOST,\n      prefixKey: "",\n      secretExt: "", // 可选\n    },\n    qiniu: {\n      secretId: process.env.QINIU_SECRET_ID,\n      secretKey: process.env.QINIU_SECRET_KEY,\n      bucket: process.env.QINIU_BUCKET,\n      region: process.env.QINIU_REGION,\n      host: process.env.QINIU_HOST,\n      prefixKey: "",\n      secretExt: "", // 可选\n    },\n    upyun: {\n      user: process.env.UPYUN_USER,\n      password: process.env.UPYUN_PASSWORD,\n      bucket: process.env.UPYUN_BUCKET,\n      host: process.env.UPYUN_HOST,\n      prefixKey: "",\n      secretExt: "", // 可选\n    },\n    github: {\n      user: process.env.GITHUB_USER,\n      token: process.env.GITHUB_TOKEN,\n      repo: process.env.GITHUB_REPO,\n      branch: "",\n      host: "",\n      prefixKey: "",\n      secretExt: "", // 可选\n    },\n  },\n};\n基于语雀 WebHook 实现实时同步：https://github.com/LetTTGACO/serverless-api', 'bodyHTML': '<p dir="auto">Elog (<a href="https://github.com/LetTTGACO/elog">https://github.com/LetTTGACO/elog</a>) —— 开放式跨平台博客解决方案，随意组合写作平台 (语雀/Notion/FlowUs) 和部署平台 (Hexo/Vitepress 等 。</p>\n\n<p dir="auto">主要配置文件 <strong>elog.config.js</strong>：</p>\n<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="module.exports = {\n  write: {\n    platform: &quot;yuque&quot;,\n    yuque: {\n      token: process.env.YUQUE_TOKEN,\n      baseUrl: &quot;&quot;,\n      login: process.env.YUQUE_LOGIN,\n      repo: process.env.YUQUE_REPO,\n      onlyPublic: false,\n      onlyPublished: true,\n    },\n    notion: {\n      token: process.env.NOTION_TOKEN,\n      databaseId: process.env.NOTION_DATABASE_ID,\n      filter: true, // {property: \'status\', select: {equals: \'已发布\'}}\n      sorts: true, // [{timestamp: \'created_time\', direction: \'descending\'}],\n      catalog: false,\n    },\n    flowus: {\n      tablePageId: process.env.FLOWUS_TABLE_PAGE_ID,\n      filter: true, // {property: \'status\',value: \'已发布\'}\n      sort: true, // { property: \'createdAt\', direction: \'descending\' }\n      catalog: false,\n    },\n  },\n  deploy: {\n    platform: &quot;local&quot;,\n    local: {\n      outputDir: &quot;./Cookbook&quot;,\n      filename: &quot;title&quot;, //生成文档的命名格式，取值 urlname|title\n      format: &quot;markdown&quot;,\n      catalog: true, //是否按照目录生成文档\n      formatExt: &quot;&quot;,\n    },\n    confluence: {\n      user: process.env.CONFLUENCE_USER,\n      password: process.env.CONFLUENCE_PASSWORD,\n      baseUrl: process.env.CONFLUENCE_BASE_URL,\n      spaceKey: process.env.CONFLUENCE_SPACE_KEY,\n      rootPageId: process.env.CONFLUENCE_ROOT_PAGE_ID, // 可选\n      formatExt: &quot;&quot;, // 可选\n    },\n  },\n  image: {\n    enable: true,\n    platform: &quot;local&quot;,\n    local: {\n      outputDir: &quot;./Images&quot;, //本地图片保存目录\n      prefixKey: &quot;/cookbook&quot;, //替换图片的url前缀，如 ![image.png](/cookbook/xxxx.png)\n    },\n    oss: {\n      secretId: process.env.OSS_SECRET_ID,\n      secretKey: process.env.OSS_SECRET_KEY,\n      bucket: process.env.OSS_BUCKET,\n      region: process.env.OSS_REGION,\n      host: process.env.OSS_HOST,\n      prefixKey: &quot;&quot;,\n      secretExt: &quot;&quot;, // 可选\n    },\n    cos: {\n      secretId: process.env.COS_SECRET_ID,\n      secretKey: process.env.COS_SECRET_KEY,\n      bucket: process.env.COS_BUCKET,\n      region: process.env.COS_REGION,\n      host: process.env.COS_HOST,\n      prefixKey: &quot;&quot;,\n      secretExt: &quot;&quot;, // 可选\n    },\n    qiniu: {\n      secretId: process.env.QINIU_SECRET_ID,\n      secretKey: process.env.QINIU_SECRET_KEY,\n      bucket: process.env.QINIU_BUCKET,\n      region: process.env.QINIU_REGION,\n      host: process.env.QINIU_HOST,\n      prefixKey: &quot;&quot;,\n      secretExt: &quot;&quot;, // 可选\n    },\n    upyun: {\n      user: process.env.UPYUN_USER,\n      password: process.env.UPYUN_PASSWORD,\n      bucket: process.env.UPYUN_BUCKET,\n      host: process.env.UPYUN_HOST,\n      prefixKey: &quot;&quot;,\n      secretExt: &quot;&quot;, // 可选\n    },\n    github: {\n      user: process.env.GITHUB_USER,\n      token: process.env.GITHUB_TOKEN,\n      repo: process.env.GITHUB_REPO,\n      branch: &quot;&quot;,\n      host: &quot;&quot;,\n      prefixKey: &quot;&quot;,\n      secretExt: &quot;&quot;, // 可选\n    },\n  },\n};"><pre class="notranslate"><span class="pl-smi">module</span><span class="pl-kos">.</span><span class="pl-c1">exports</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span>\n  <span class="pl-c1">write</span>: <span class="pl-kos">{</span>\n    <span class="pl-c1">platform</span>: <span class="pl-s">"yuque"</span><span class="pl-kos">,</span>\n    <span class="pl-c1">yuque</span>: <span class="pl-kos">{</span>\n      <span class="pl-c1">token</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">YUQUE_TOKEN</span><span class="pl-kos">,</span>\n      <span class="pl-c1">baseUrl</span>: <span class="pl-s">""</span><span class="pl-kos">,</span>\n      <span class="pl-c1">login</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">YUQUE_LOGIN</span><span class="pl-kos">,</span>\n      <span class="pl-c1">repo</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">YUQUE_REPO</span><span class="pl-kos">,</span>\n      <span class="pl-c1">onlyPublic</span>: <span class="pl-c1">false</span><span class="pl-kos">,</span>\n      <span class="pl-c1">onlyPublished</span>: <span class="pl-c1">true</span><span class="pl-kos">,</span>\n    <span class="pl-kos">}</span><span class="pl-kos">,</span>\n    <span class="pl-c1">notion</span>: <span class="pl-kos">{</span>\n      <span class="pl-c1">token</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">NOTION_TOKEN</span><span class="pl-kos">,</span>\n      <span class="pl-c1">databaseId</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">NOTION_DATABASE_ID</span><span class="pl-kos">,</span>\n      <span class="pl-c1">filter</span>: <span class="pl-c1">true</span><span class="pl-kos">,</span> <span class="pl-c">// {property: \'status\', select: {equals: \'已发布\'}}</span>\n      <span class="pl-c1">sorts</span>: <span class="pl-c1">true</span><span class="pl-kos">,</span> <span class="pl-c">// [{timestamp: \'created_time\', direction: \'descending\'}],</span>\n      <span class="pl-c1">catalog</span>: <span class="pl-c1">false</span><span class="pl-kos">,</span>\n    <span class="pl-kos">}</span><span class="pl-kos">,</span>\n    <span class="pl-c1">flowus</span>: <span class="pl-kos">{</span>\n      <span class="pl-c1">tablePageId</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">FLOWUS_TABLE_PAGE_ID</span><span class="pl-kos">,</span>\n      <span class="pl-c1">filter</span>: <span class="pl-c1">true</span><span class="pl-kos">,</span> <span class="pl-c">// {property: \'status\',value: \'已发布\'}</span>\n      <span class="pl-c1">sort</span>: <span class="pl-c1">true</span><span class="pl-kos">,</span> <span class="pl-c">// { property: \'createdAt\', direction: \'descending\' }</span>\n      <span class="pl-c1">catalog</span>: <span class="pl-c1">false</span><span class="pl-kos">,</span>\n    <span class="pl-kos">}</span><span class="pl-kos">,</span>\n  <span class="pl-kos">}</span><span class="pl-kos">,</span>\n  <span class="pl-c1">deploy</span>: <span class="pl-kos">{</span>\n    <span class="pl-c1">platform</span>: <span class="pl-s">"local"</span><span class="pl-kos">,</span>\n    <span class="pl-c1">local</span>: <span class="pl-kos">{</span>\n      <span class="pl-c1">outputDir</span>: <span class="pl-s">"./Cookbook"</span><span class="pl-kos">,</span>\n      <span class="pl-c1">filename</span>: <span class="pl-s">"title"</span><span class="pl-kos">,</span> <span class="pl-c">//生成文档的命名格式，取值 urlname|title</span>\n      <span class="pl-c1">format</span>: <span class="pl-s">"markdown"</span><span class="pl-kos">,</span>\n      <span class="pl-c1">catalog</span>: <span class="pl-c1">true</span><span class="pl-kos">,</span> <span class="pl-c">//是否按照目录生成文档</span>\n      <span class="pl-c1">formatExt</span>: <span class="pl-s">""</span><span class="pl-kos">,</span>\n    <span class="pl-kos">}</span><span class="pl-kos">,</span>\n    <span class="pl-c1">confluence</span>: <span class="pl-kos">{</span>\n      <span class="pl-c1">user</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">CONFLUENCE_USER</span><span class="pl-kos">,</span>\n      <span class="pl-c1">password</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">CONFLUENCE_PASSWORD</span><span class="pl-kos">,</span>\n      <span class="pl-c1">baseUrl</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">CONFLUENCE_BASE_URL</span><span class="pl-kos">,</span>\n      <span class="pl-c1">spaceKey</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">CONFLUENCE_SPACE_KEY</span><span class="pl-kos">,</span>\n      <span class="pl-c1">rootPageId</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">CONFLUENCE_ROOT_PAGE_ID</span><span class="pl-kos">,</span> <span class="pl-c">// 可选</span>\n      <span class="pl-c1">formatExt</span>: <span class="pl-s">""</span><span class="pl-kos">,</span> <span class="pl-c">// 可选</span>\n    <span class="pl-kos">}</span><span class="pl-kos">,</span>\n  <span class="pl-kos">}</span><span class="pl-kos">,</span>\n  <span class="pl-c1">image</span>: <span class="pl-kos">{</span>\n    <span class="pl-c1">enable</span>: <span class="pl-c1">true</span><span class="pl-kos">,</span>\n    <span class="pl-c1">platform</span>: <span class="pl-s">"local"</span><span class="pl-kos">,</span>\n    <span class="pl-c1">local</span>: <span class="pl-kos">{</span>\n      <span class="pl-c1">outputDir</span>: <span class="pl-s">"./Images"</span><span class="pl-kos">,</span> <span class="pl-c">//本地图片保存目录</span>\n      <span class="pl-c1">prefixKey</span>: <span class="pl-s">"/cookbook"</span><span class="pl-kos">,</span> <span class="pl-c">//替换图片的url前缀，如 ![image.png](/cookbook/xxxx.png)</span>\n    <span class="pl-kos">}</span><span class="pl-kos">,</span>\n    <span class="pl-c1">oss</span>: <span class="pl-kos">{</span>\n      <span class="pl-c1">secretId</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">OSS_SECRET_ID</span><span class="pl-kos">,</span>\n      <span class="pl-c1">secretKey</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">OSS_SECRET_KEY</span><span class="pl-kos">,</span>\n      <span class="pl-c1">bucket</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">OSS_BUCKET</span><span class="pl-kos">,</span>\n      <span class="pl-c1">region</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">OSS_REGION</span><span class="pl-kos">,</span>\n      <span class="pl-c1">host</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">OSS_HOST</span><span class="pl-kos">,</span>\n      <span class="pl-c1">prefixKey</span>: <span class="pl-s">""</span><span class="pl-kos">,</span>\n      <span class="pl-c1">secretExt</span>: <span class="pl-s">""</span><span class="pl-kos">,</span> <span class="pl-c">// 可选</span>\n    <span class="pl-kos">}</span><span class="pl-kos">,</span>\n    <span class="pl-c1">cos</span>: <span class="pl-kos">{</span>\n      <span class="pl-c1">secretId</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">COS_SECRET_ID</span><span class="pl-kos">,</span>\n      <span class="pl-c1">secretKey</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">COS_SECRET_KEY</span><span class="pl-kos">,</span>\n      <span class="pl-c1">bucket</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">COS_BUCKET</span><span class="pl-kos">,</span>\n      <span class="pl-c1">region</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">COS_REGION</span><span class="pl-kos">,</span>\n      <span class="pl-c1">host</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">COS_HOST</span><span class="pl-kos">,</span>\n      <span class="pl-c1">prefixKey</span>: <span class="pl-s">""</span><span class="pl-kos">,</span>\n      <span class="pl-c1">secretExt</span>: <span class="pl-s">""</span><span class="pl-kos">,</span> <span class="pl-c">// 可选</span>\n    <span class="pl-kos">}</span><span class="pl-kos">,</span>\n    <span class="pl-c1">qiniu</span>: <span class="pl-kos">{</span>\n      <span class="pl-c1">secretId</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">QINIU_SECRET_ID</span><span class="pl-kos">,</span>\n      <span class="pl-c1">secretKey</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">QINIU_SECRET_KEY</span><span class="pl-kos">,</span>\n      <span class="pl-c1">bucket</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">QINIU_BUCKET</span><span class="pl-kos">,</span>\n      <span class="pl-c1">region</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">QINIU_REGION</span><span class="pl-kos">,</span>\n      <span class="pl-c1">host</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">QINIU_HOST</span><span class="pl-kos">,</span>\n      <span class="pl-c1">prefixKey</span>: <span class="pl-s">""</span><span class="pl-kos">,</span>\n      <span class="pl-c1">secretExt</span>: <span class="pl-s">""</span><span class="pl-kos">,</span> <span class="pl-c">// 可选</span>\n    <span class="pl-kos">}</span><span class="pl-kos">,</span>\n    <span class="pl-c1">upyun</span>: <span class="pl-kos">{</span>\n      <span class="pl-c1">user</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">UPYUN_USER</span><span class="pl-kos">,</span>\n      <span class="pl-c1">password</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">UPYUN_PASSWORD</span><span class="pl-kos">,</span>\n      <span class="pl-c1">bucket</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">UPYUN_BUCKET</span><span class="pl-kos">,</span>\n      <span class="pl-c1">host</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">UPYUN_HOST</span><span class="pl-kos">,</span>\n      <span class="pl-c1">prefixKey</span>: <span class="pl-s">""</span><span class="pl-kos">,</span>\n      <span class="pl-c1">secretExt</span>: <span class="pl-s">""</span><span class="pl-kos">,</span> <span class="pl-c">// 可选</span>\n    <span class="pl-kos">}</span><span class="pl-kos">,</span>\n    <span class="pl-c1">github</span>: <span class="pl-kos">{</span>\n      <span class="pl-c1">user</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">GITHUB_USER</span><span class="pl-kos">,</span>\n      <span class="pl-c1">token</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">GITHUB_TOKEN</span><span class="pl-kos">,</span>\n      <span class="pl-c1">repo</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">GITHUB_REPO</span><span class="pl-kos">,</span>\n      <span class="pl-c1">branch</span>: <span class="pl-s">""</span><span class="pl-kos">,</span>\n      <span class="pl-c1">host</span>: <span class="pl-s">""</span><span class="pl-kos">,</span>\n      <span class="pl-c1">prefixKey</span>: <span class="pl-s">""</span><span class="pl-kos">,</span>\n      <span class="pl-c1">secretExt</span>: <span class="pl-s">""</span><span class="pl-kos">,</span> <span class="pl-c">// 可选</span>\n    <span class="pl-kos">}</span><span class="pl-kos">,</span>\n  <span class="pl-kos">}</span><span class="pl-kos">,</span>\n<span class="pl-kos">}</span><span class="pl-kos">;</span></pre></div>\n<p dir="auto">基于语雀 WebHook 实现实时同步：<a href="https://github.com/LetTTGACO/serverless-api">https://github.com/LetTTGACO/serverless-api</a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': 'NCBI API 使用', 'number': 17, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/17', 'createdAt': '2023-11-21T06:44:23Z', 'lastEditedAt': None, 'updatedAt': '2023-11-21T06:44:24Z', 'body': '参考：https://www.ncbi.nlm.nih.gov/books/NBK25499/', 'bodyText': '参考：https://www.ncbi.nlm.nih.gov/books/NBK25499/', 'bodyHTML': '<p dir="auto">参考：<a href="https://www.ncbi.nlm.nih.gov/books/NBK25499/" rel="nofollow">https://www.ncbi.nlm.nih.gov/books/NBK25499/</a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.1-生信'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '留言与建议', 'number': 16, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/16', 'createdAt': '2023-11-09T07:42:48Z', 'lastEditedAt': '2025-01-22T01:49:22Z', 'updatedAt': '2025-01-22T01:49:22Z', 'body': '如果你通过本人的博文/平台学到了一点东西，那么对我最好的奖赏就是请你也尝试教我些东西。你可以通过邮箱、微信，或者移步到 “[GitHub Discussions](https://github.com/shenweiyan/Digital-Garden/discussions/16)” 写下您的建议，或者向我提问。\r\n\r\n感谢你的一路支持！\r\n\r\n\r\n📢 如果给我发邮件，或者通过微信添加好友，请写上您的**真名实姓**，让我感受到一个**真实的人的气息**。我不太愿意跟**网名**打交道，对于那些不知来路、上来就问问题的微信和邮件，我通常会直接忽略。\r\n\r\n- 微信：**ishenweiyan**（请备注真实姓名，谢谢）\r\n- 邮箱：**shen@weiyan.cc**\r\n\r\n<p align="center">\r\n    <img src="https://shub.weiyan.tech/mkdocs/feedback.gif" alt="feedback">\r\n</p>', 'bodyText': '如果你通过本人的博文/平台学到了一点东西，那么对我最好的奖赏就是请你也尝试教我些东西。你可以通过邮箱、微信，或者移步到 “GitHub Discussions” 写下您的建议，或者向我提问。\n感谢你的一路支持！\n📢 如果给我发邮件，或者通过微信添加好友，请写上您的真名实姓，让我感受到一个真实的人的气息。我不太愿意跟网名打交道，对于那些不知来路、上来就问问题的微信和邮件，我通常会直接忽略。\n\n微信：ishenweiyan（请备注真实姓名，谢谢）\n邮箱：shen@weiyan.cc', 'bodyHTML': '<p dir="auto">如果你通过本人的博文/平台学到了一点东西，那么对我最好的奖赏就是请你也尝试教我些东西。你可以通过邮箱、微信，或者移步到 “<a href="https://github.com/shenweiyan/Digital-Garden/discussions/16" data-hovercard-type="discussion" data-hovercard-url="/shenweiyan/Digital-Garden/discussions/16/hovercard">GitHub Discussions</a>” 写下您的建议，或者向我提问。</p>\n<p dir="auto">感谢你的一路支持！</p>\n<p dir="auto">📢 如果给我发邮件，或者通过微信添加好友，请写上您的<strong>真名实姓</strong>，让我感受到一个<strong>真实的人的气息</strong>。我不太愿意跟<strong>网名</strong>打交道，对于那些不知来路、上来就问问题的微信和邮件，我通常会直接忽略。</p>\n<ul dir="auto">\n<li>微信：<strong>ishenweiyan</strong>（请备注真实姓名，谢谢）</li>\n<li>邮箱：<strong><a href="mailto:shen@weiyan.cc">shen@weiyan.cc</a></strong></li>\n</ul>\n<p align="center" dir="auto">\n    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/4aa0912283c96b41149e1885b4617d3e14ae66835ae8c89a54261a20c438ee35/68747470733a2f2f736875622e77656979616e2e746563682f6d6b646f63732f666565646261636b2e676966"><img src="https://camo.githubusercontent.com/4aa0912283c96b41149e1885b4617d3e14ae66835ae8c89a54261a20c438ee35/68747470733a2f2f736875622e77656979616e2e746563682f6d6b646f63732f666565646261636b2e676966" alt="feedback" data-animated-image="" data-canonical-src="https://shub.weiyan.tech/mkdocs/feedback.gif" style="max-width: 100%;"></a>\n</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': 'x.x-留言'}, 'labels': {'nodes': []}, 'comments': {'nodes': [{'body': '想了一下，还是增加一个留言的页面吧 >.<', 'author': {'login': 'shenweiyan'}}, {'body': 'hello', 'author': {'login': 'vbskycn'}}, {'body': '我也去整个webstack导航~~ 一入hugo深似海，从此wp是路人。', 'author': {'login': 'daoyuc'}}, {'body': '天气插件应该如何做呢？是在headers.yml文件中添加吗？', 'author': {'login': 'izshui'}}, {'body': '感谢博主分享导航源码，真的不错！\n现在考虑怎么整合导航和博客？有教程指导吗？\n', 'author': {'login': 'hw2001aq'}}, {'body': '非常好的博客！学习了！', 'author': {'login': 'Wcowin'}}, {'body': '请问博主，导航部署后电脑浏览器可以打开，手机上打不开，不知道什么原因？', 'author': {'login': 'hw2001aq'}}]}}, {'title': '基于 GitHub Discussions 的博客与站点', 'number': 15, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/15', 'createdAt': '2023-11-09T05:38:01Z', 'lastEditedAt': '2023-11-23T07:06:53Z', 'updatedAt': '2024-01-04T05:44:37Z', 'body': 'GitHub Discussions 是一个可以在每个 GitHub 仓库上启用的论坛。它使开发者能够轻松地讨论新功能，从社区获得反馈，创建投票，发布公告等。这里搜集了一些基于 GitHub Discussions 的博客与站点，以供参考。\r\n\r\n<!-- more -->\r\n\r\n- [Hakuba](https://github.com/YeungKC/Hakuba) - 一个通过 Github Discussion 驱动的 Blog 启动器\r\n\r\n- [GG](https://github.com/lencx/gg) - Gatsby + GitHub，好像不支持 MathJax，也不见怎么维护了\r\n    - [lencx.tech](https://lencx.tech/#/)\r\n    - [gg-discussions](https://shenweiyan.github.io/gg-discussions/)，个人尝试对页面进行了一些调整\r\n\r\n- [Pure](https://github.com/LeetaoGoooo/pure) 一个基于 Github Discussion 的极简博客', 'bodyText': 'GitHub Discussions 是一个可以在每个 GitHub 仓库上启用的论坛。它使开发者能够轻松地讨论新功能，从社区获得反馈，创建投票，发布公告等。这里搜集了一些基于 GitHub Discussions 的博客与站点，以供参考。\n\n\n\nHakuba - 一个通过 Github Discussion 驱动的 Blog 启动器\n\n\nGG - Gatsby + GitHub，好像不支持 MathJax，也不见怎么维护了\n\nlencx.tech\ngg-discussions，个人尝试对页面进行了一些调整\n\n\n\nPure 一个基于 Github Discussion 的极简博客', 'bodyHTML': '<p dir="auto">GitHub Discussions 是一个可以在每个 GitHub 仓库上启用的论坛。它使开发者能够轻松地讨论新功能，从社区获得反馈，创建投票，发布公告等。这里搜集了一些基于 GitHub Discussions 的博客与站点，以供参考。</p>\n\n<ul dir="auto">\n<li>\n<p dir="auto"><a href="https://github.com/YeungKC/Hakuba">Hakuba</a> - 一个通过 Github Discussion 驱动的 Blog 启动器</p>\n</li>\n<li>\n<p dir="auto"><a href="https://github.com/lencx/gg">GG</a> - Gatsby + GitHub，好像不支持 MathJax，也不见怎么维护了</p>\n<ul dir="auto">\n<li><a href="https://lencx.tech/#/" rel="nofollow">lencx.tech</a></li>\n<li><a href="https://shenweiyan.github.io/gg-discussions/" rel="nofollow">gg-discussions</a>，个人尝试对页面进行了一些调整</li>\n</ul>\n</li>\n<li>\n<p dir="auto"><a href="https://github.com/LeetaoGoooo/pure">Pure</a> 一个基于 Github Discussion 的极简博客</p>\n</li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '基于 Mkdocs 的主题与站点', 'number': 14, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/14', 'createdAt': '2023-11-08T03:29:49Z', 'lastEditedAt': '2024-06-03T03:28:50Z', 'updatedAt': '2024-06-03T03:28:50Z', 'body': "鉴于 MkDocs 的诸多优点，让它被很多知名开源项目选中，用于搭建和项目相关的文档网站。比如 Python 里知名的 Web 圈里的 [django-rest-framework](https://sspai.com/link?target=https%3A%2F%2Fwww.django-rest-framework.org%2F)、[FastAPI](https://sspai.com/link?target=https%3A%2F%2Ffastapi.tiangolo.com%2F) 以及基于 Go 编写的云网关代理服务器 [traefik](https://sspai.com/link?target=https%3A%2F%2Fgithub.com%2Ftraefik%2Ftraefik) 等项目的官方文档站点，都是通过 MkDocs 进行搭建。\r\n\r\n<!-- more -->\r\n\r\n下面列的是搜集的一些 Mkdocs 主题与站点，以供参考。\r\n\r\n- Hello 算法 - <https://www.hello-algo.com/>\r\n- FDU-MSC 论坛 - <https://fdu-msc.github.io/forum/>\r\n- Django REST framework - <https://www.django-rest-framework.org/>\r\n- FastAPI - <https://fastapi.tiangolo.com/>\r\n- Chrisjing 的运维之旅精选 - <http://www.chrisjing.com/>\r\n- 艇仔粥 TingZaiZuk - <https://herointene.github.io/>\r\n- Arisa | Blog - <https://blog.arisa.moe/>\r\n- 嬉戏实验室 - <https://blog.xiiigame.com/>\r\n- 老胡的周刊 - [weekly.howie6879.com](https://weekly.howie6879.com/)\r\n- Wcowin's Web - <https://wcowin.work/>\r\n- Jeremy Feng - <https://fengchao.pro/>\r\n- 我的工作学习生活笔记 - <https://hellowac.github.io/>\r\n- Power's Wiki - <https://wiki-power.com/>", 'bodyText': "鉴于 MkDocs 的诸多优点，让它被很多知名开源项目选中，用于搭建和项目相关的文档网站。比如 Python 里知名的 Web 圈里的 django-rest-framework、FastAPI 以及基于 Go 编写的云网关代理服务器 traefik 等项目的官方文档站点，都是通过 MkDocs 进行搭建。\n\n下面列的是搜集的一些 Mkdocs 主题与站点，以供参考。\n\nHello 算法 - https://www.hello-algo.com/\nFDU-MSC 论坛 - https://fdu-msc.github.io/forum/\nDjango REST framework - https://www.django-rest-framework.org/\nFastAPI - https://fastapi.tiangolo.com/\nChrisjing 的运维之旅精选 - http://www.chrisjing.com/\n艇仔粥 TingZaiZuk - https://herointene.github.io/\nArisa | Blog - https://blog.arisa.moe/\n嬉戏实验室 - https://blog.xiiigame.com/\n老胡的周刊 - weekly.howie6879.com\nWcowin's Web - https://wcowin.work/\nJeremy Feng - https://fengchao.pro/\n我的工作学习生活笔记 - https://hellowac.github.io/\nPower's Wiki - https://wiki-power.com/", 'bodyHTML': '<p dir="auto">鉴于 MkDocs 的诸多优点，让它被很多知名开源项目选中，用于搭建和项目相关的文档网站。比如 Python 里知名的 Web 圈里的 <a href="https://sspai.com/link?target=https%3A%2F%2Fwww.django-rest-framework.org%2F" rel="nofollow">django-rest-framework</a>、<a href="https://sspai.com/link?target=https%3A%2F%2Ffastapi.tiangolo.com%2F" rel="nofollow">FastAPI</a> 以及基于 Go 编写的云网关代理服务器 <a href="https://sspai.com/link?target=https%3A%2F%2Fgithub.com%2Ftraefik%2Ftraefik" rel="nofollow">traefik</a> 等项目的官方文档站点，都是通过 MkDocs 进行搭建。</p>\n\n<p dir="auto">下面列的是搜集的一些 Mkdocs 主题与站点，以供参考。</p>\n<ul dir="auto">\n<li>Hello 算法 - <a href="https://www.hello-algo.com/" rel="nofollow">https://www.hello-algo.com/</a></li>\n<li>FDU-MSC 论坛 - <a href="https://fdu-msc.github.io/forum/" rel="nofollow">https://fdu-msc.github.io/forum/</a></li>\n<li>Django REST framework - <a href="https://www.django-rest-framework.org/" rel="nofollow">https://www.django-rest-framework.org/</a></li>\n<li>FastAPI - <a href="https://fastapi.tiangolo.com/" rel="nofollow">https://fastapi.tiangolo.com/</a></li>\n<li>Chrisjing 的运维之旅精选 - <a href="http://www.chrisjing.com/" rel="nofollow">http://www.chrisjing.com/</a></li>\n<li>艇仔粥 TingZaiZuk - <a href="https://herointene.github.io/" rel="nofollow">https://herointene.github.io/</a></li>\n<li>Arisa | Blog - <a href="https://blog.arisa.moe/" rel="nofollow">https://blog.arisa.moe/</a></li>\n<li>嬉戏实验室 - <a href="https://blog.xiiigame.com/" rel="nofollow">https://blog.xiiigame.com/</a></li>\n<li>老胡的周刊 - <a href="https://weekly.howie6879.com/" rel="nofollow">weekly.howie6879.com</a></li>\n<li>Wcowin\'s Web - <a href="https://wcowin.work/" rel="nofollow">https://wcowin.work/</a></li>\n<li>Jeremy Feng - <a href="https://fengchao.pro/" rel="nofollow">https://fengchao.pro/</a></li>\n<li>我的工作学习生活笔记 - <a href="https://hellowac.github.io/" rel="nofollow">https://hellowac.github.io/</a></li>\n<li>Power\'s Wiki - <a href="https://wiki-power.com/" rel="nofollow">https://wiki-power.com/</a></li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': [{'name': 'mkdocs'}]}, 'comments': {'nodes': []}}, {'title': 'Python3 源码安装', 'number': 13, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/13', 'createdAt': '2023-11-02T03:05:46Z', 'lastEditedAt': '2025-02-26T05:20:19Z', 'updatedAt': '2025-02-26T05:20:19Z', 'body': '编程，作为生物信息学的一个基础性技能，是任何一个生信工程师都无法绕开话题。也许有些人还在纠结 Perl 和 Python 到底应该学习哪一个，但作为目前最火最流行的编程语言 Python 还是非常值得尝试的。它不但可以进行文本处理，在统计、网站、游戏、爬虫、数据可视化等方面也有非常强大的应用，比起曾经的 Perl 真的强大和全面很多，且比 Perl 更容易入手。不管从长远发展，还是短期需要，学会 Python，看懂 Perl (或者先学 \xa0 Python，后学 Perl) 应该是每一个生信工程必备的基础技能之一。\r\n\r\n工欲善其事，必先利其器。关于 Python 安装教程在网上一搜一大把，但总感觉不够全面，尤其对于中间出现的一些问题的解决方法不尽如人意。鉴于此，本文基于 \xa0CentOS/RHEL Linux 对 Python 的源码编译安装进行了一下简单的总结，记录如下。\r\n\r\n## 安装环境\r\n\r\nRed Hat 6.5 + GCC 4.4.7（GCC-7.3.0 - 此版本 gcc 为手动安装）。\r\n\r\nGCC 高级版本手动或者 `yum` 安装参考以下文章：\r\n- [SCL+Devtoolset 安装与使用笔记 · 语雀](https://www.yuque.com/shenweiyan/cookbook/scl-devtoolset-note)\r\n- [非 root 用户手动编译安装 GCC · 语雀](https://www.yuque.com/shenweiyan/cookbook/linux-gcc-install)\r\n\r\n```bash\r\n$ lsb_release -a\r\nLSB Version:    :base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch\r\nDistributor ID: RedHatEnterpriseServer\r\nDescription:    Red Hat Enterprise Linux Server release 6.5 (Santiago)\r\nRelease:        6.5\r\nCodename:       Santiago\r\n\r\n$ gcc --version\r\ngcc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-4)\r\nCopyright (C) 2010 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n```\r\n\r\n## 解决依赖\r\n\r\n如果您拥有 root 权限，请执以下依赖安装：\r\n\r\n```bash\r\nyum install zlib\r\nyum install zlib-devel\r\nyum install openssl\r\nyum install openssl-devel\r\nyum install libffi\r\nyum install libffi-devel\r\nyum install readline readline-devel sqlite sqlite-devel tk-devel\r\n```\r\n\r\n| 缺少库名称 | 安装命令                                              |\r\n| ---------- | ----------------------------------------------------- |\r\n| \\_uuid     | yum install libuuid-devel                             |\r\n| readline   | yum install readline-devel                            |\r\n| \\_tkinter  | yum install tk-devel                                  |\r\n| \\_ffi      | yum install libffi-devel                              |\r\n| \\_curses   | yum install ncurses-libs                              |\r\n| \\_sqlite   | yum install sqlite-devel                              |\r\n| \\_bz2      | yum isntall bzip2-devel                               |\r\n| \\_ssl      | yum install openssl-devel                             |\r\n| \\_gdbm     | yum install gdbm-devel                                |\r\n| \\_dbi      | yum install libdbi-devel                              |\r\n| \\_zlib     | yum install zlib-devel                                |\r\n| lzma       | yum install xz-develyum install python-backports-lzma |\r\n\r\n如果您没有 root 权限，可以参考《[手把手教你在 Linux 源码安装最新版本的 R](https://www.yuque.com/shenweiyan/cookbook/install-latest-r-from-source)》一文，手动一个个去解决以上的依赖。\r\n\r\n### _sqlite3 \r\n\r\n执行 **make** 过程中提示 **_sqlite3 not found**，如下：\r\n\r\n```bash\r\n$ make\r\n......\r\nPython build finished successfully!\r\nThe necessary bits to build these optional modules were not found:\r\n_sqlite3              _ssl\r\nTo find the necessary bits, look in setup.py in detect_modules() for the module\'s name.\r\n\r\nThe following modules found by detect_modules() in setup.py, have been\r\nbuilt by the Makefile instead, as configured by the Setup files:\r\n_abc                  atexit                pwd\r\ntime\r\n```\r\n\r\n#### 系统已安装 sqlite3\r\n\r\n如果执行 **rpm -qa|grep sqlite** 看到 sqlite 和 sqlite-devel 都已经安装（libsqlite3.so 默认保存在 /usr/lib64 下； `sqlite3.h` 默认保存在 `/usr/include` 下）。\r\n\r\n```bash\r\n$ sqlite3 -version\r\n3.6.20\r\n\r\n$ ll /usr/lib64/libsqlite3.so\r\nlrwxrwxrwx 1 root root 19 Apr 23  2015 /usr/lib64/libsqlite3.so -> libsqlite3.so.0.8.6\r\n\r\n$ ll /usr/include/sqlite3.h\r\n-rw-r--r-- 1 root root 263K Nov 25  2009 /usr/include/sqlite3.h\r\n```\r\n\r\n但是，执行 `make` 依然出现以上报错，参考下面的方法《[python build from source: cannot build optional module sqlite3 - Stack Overflow](https://stackoverflow.com/questions/32779768/python-build-from-source-cannot-build-optional-module-sqlite3)》。\r\n\r\n#### 手动安装 sqlite3\r\n\r\n```bash\r\n$ wget https://www.sqlite.org/2021/sqlite-autoconf-3360000.tar.gz --no-check-certificate\r\n$ tar zvxf sqlite-autoconf-3360000.tar.gz\r\n$ cd sqlite-autoconf-3360000\r\n$ ./configure --prefix=/home/shenweiyan/software/sqlite-3.36.0\r\n$ make\r\n$ make install\r\n```\r\n\r\n#### 配置 sqlite3\r\n\r\n1. 配置环境\r\n\r\n```bash\r\n$ export LD_LIBRARY_PATH=/home/shenweiyan/software/sqlite-3.36.0/lib:$LD_LIBRARY_PATH\r\n```\r\n2. 调整源码或编译\r\n\r\n对于 3.11.x 以上版本的 Python 可以在 `configure` 指定自定义安装的 sqlite3 路径解决 `_sqlite3` 依赖。\r\n```\r\n./configure ... \\\r\n    LDFLAGS="-L/home/shenweiyan/software/sqlite-3.36.0/lib" \\\r\n    CPPFLAGS="-I/home/shenweiyan/software/sqlite-3.36.0/include" \r\n```\r\n\r\n有些低版本的 Python (如 3.7) 可能需要再源码文件中加入 `sqlite3.h` 的文件路径。\r\n\r\n1. 找到 **sqlite3.h** 文件的保存目录。\r\n2. 修改 **setup.py** 文件，在 sqlite_inc_paths 中加上 sqlite3.h 的文件路径。\r\n\r\n```bash\r\nsqlite_inc_paths = [ \'/home/shenweiyan/software/sqlite-3.36.0/include\',\r\n                     \'/usr/include\',\r\n                     \'/usr/include/sqlite\',\r\n                     \'/usr/include/sqlite3\',\r\n                     \'/usr/local/include\',\r\n                     \'/usr/local/include/sqlite\',\r\n                     \'/usr/local/include/sqlite3\',\r\n                   ]\r\n```\r\n\r\n\r\n### _ssl \r\n\r\nPython3 需要引用 `openssl`\xa0 模块，但是 python3.7+ 在 CentOS 中要求的 openssl 版本最低为 1.0.2，而 CentOS 默认的为 1.0.1（CentOS-6.x 通过 `yum`\xa0 源安装的 openssl 的最高版本是 1.0.1），所以需要手动更新 openssl。\r\n\r\n对于 openssl 版本的选择，建议至少选择 1.1.1+ 版本：\r\n\r\n1. urllib3 v2.0 only supports OpenSSL 1.1.1+, currently the \'ssl\' module is compiled with \'OpenSSL 1.0.2k-fips  26 Jan 2017\'. See: https://github.com/urllib3/urllib3/issues/2168\r\n2. **Python requires an OpenSSL 1.0.2 or 1.1 compatible libssl with X509_VERIFY_PARAM_set1_host().**\r\n\r\n```bash\r\n# 下载\r\nwget http://www.openssl.org/source/openssl-1.1.1.tar.gz\r\n\r\n# 解压缩\r\ntar -zxvf openssl-1.1.1.tar.gz\r\n\r\n# 进入目录安装\r\ncd openssl-1.1.1\r\n\r\n# 进行配置下，自定义\r\n./config --prefix=/home/shenweiyan/software/openssl-1.1.1 shared zlib\r\n\r\n# 编译并安装\r\nmake && make install\r\n\r\n# 配置到用户环境变量，随处使用\r\necho "export LD_LIBRARY_PATH=/home/shenweiyan/software/openssl-1.1.1/lib:$LD_LIBRARY_PATH" >> $HOME/.bashrc\r\n\r\n# 是环境变量配置生效\r\nsource $HOME/.bashrc\r\n```\r\n\r\n**请注意：**\r\n\r\n1. **openssl**\xa0编译（config）的时候 **必须要加上 shared\xa0 参数**，否者源码安装 Python 即使添加了 `--with-openssl`\xa0的自定义路径，依然会导致 `Could not build the ssl module!`\xa0报错！\r\n2. 从 <https://www.openssl.org/source/>\xa0下载的源码 openssl-1.0.2s、openssl-1.0.2m，包括 \xa0CentOS-7.5 使用 `yum`\xa0安装的最高版本的 openssl-1.0.2k 目前发现依然会导致 `Could not build the ssl module`\xa0，建议从 <https://www.openssl.org/source/old/>\xa0下载 1.1.1 的源码编译安装。\r\n\r\n最后，在 Python 执行 `configure` 的时候指定 openssl 的相关参数：\r\n```\r\n./configure ... \\\r\n    --with-openssl=/home/shenweiyan/software/openssl-1.1.1 \\\r\n    --with-openssl-rpath=/home/shenweiyan/software/openssl-1.1.1/lib \\\r\n```\r\n\r\n### _tkinter\r\n\r\nTkinter 模块缺失是一个比较棘手的问题，为此专门写了一篇文章来介绍这个问题。\r\n\r\n具体请参考：[Python 中 tkinter 源码安装使用与中文乱码 - Knowledge-Garden#12](https://github.com/shenweiyan/Knowledge-Garden/discussions/12)\r\n\r\n### _dbm\r\n\r\n`_dbm` 和 `_gdbm` 的模块缺失可以通过下面手动的方法解决。\r\n\r\n```\r\nwget https://ftp.gnu.org/gnu/gdbm/gdbm-1.23.tar.gz\r\ntar -zxvf gdbm-1.23.tar.gz\r\n./configure --prefix=/home/shenweiyan/software/gdbm-1.23 --enable-libgdbm-compat  --enable-debug\r\nmake && make install\r\n```\r\n\r\n最后，增加环境变量，并调整 Python 执行 `configure` 时的参数：\r\n```\r\nexport PATH=/home/shenweiyan/software/gdbm-1.23/bin:$PATH\r\nexport LD_LIBRARY_PATH=/home/shenweiyan/software/gdbm-1.23/lib:$LD_LIBRARY_PATH\r\n\r\n./configure ... \\\r\n    LDFLAGS="-L/home/shenweiyan/software/gdbm-1.23/lib" \\\r\n    CPPFLAGS="-I/home/shenweiyan/software/gdbm-1.23/include"\r\n```\r\n\r\n### _lzma \r\n\r\n正常情况下，下面的方法可以解决该问题（如果您有 root 权限的话）。\r\n\r\n```bash\r\n# For ubuntu:\r\n$ sudo apt-get install liblzma-dev\r\n\r\n# For centos:\r\n$ yum install xz-devel\r\n```\r\n\r\n普通用户可以手动安装解决：\r\n\r\n```bash\r\n$ wget https://tukaani.org/xz/xz-5.2.5.tar.gz --no-check-certificat\r\n$ tar zvxf xz-5.2.5.tar.gz\r\n$ cd xz-5.2.5\r\n$ ./configure --prefix=/home/shenweiyan/software/xz-5.2.5\r\n$ make\r\n$ make install\r\n```\r\n\r\n最后，配置环境：\r\n\r\n```bash\r\n$ export LD_LIBRARY_PATH=/home/shenweiyan/software/xz-5.2.5/lib:$LD_LIBRARY_PATH\r\n```\r\n\r\n### _ctypes \r\n\r\n在 CentOS 6.x 安装 `libffi-devel`\xa0 的时候出现以下问题：\r\n\r\n```bash\r\n$ yum install libffi-devel\r\nLoaded plugins: product-id, refresh-packagekit, search-disabled-repos, security, subscription-manager\r\nThis system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.\r\nSetting up Install Process\r\ncdrom                                                                                                                                         | 4.1 kB     00:00 ...\r\nNo package libffi-devel available.\r\nError: Nothing to do\r\n```\r\n\r\n可以使用下面的方法安装：\r\n```shell\r\n[root@log01 ~]# rpm -ivh http://mirror.centos.org/centos/6/os/x86_64/Packages/libffi-devel-3.0.5-3.2.el6.x86_64.rpm\r\nRetrieving http://mirror.centos.org/centos/6/os/x86_64/Packages/libffi-devel-3.0.5-3.2.el6.x86_64.rpm\r\nwarning: /var/tmp/rpm-tmp.V9ihbu: Header V3 RSA/SHA256 Signature, key ID c105b9de: NOKEY\r\nPreparing...                ########################################### [100%]\r\n   1:libffi-devel           ########################################### [100%]\r\n[root@log01 ~]# rpm -qa|grep libffi\r\nlibffi-3.0.5-3.2.el6.x86_64\r\nlibffi-devel-3.0.5-3.2.el6.x86_64\r\n```\r\n\r\n手动的源码方法安装如下：\r\n```bash\r\n$ wget ftp://sourceware.org/pub/libffi/libffi-3.2.1.tar.gz\r\n$ tar zvxf libffi-3.2.1.tar.gz\r\n$ ./configure --prefix=/home/shenweiyan/software/libffi-3.2.1\r\n$ make\r\n$ make install\r\n```\r\n\r\n###  pygraphviz\r\n\r\n如果你不需要使用 pygraphviz，可以不用管这个依赖。\r\n\r\n> PyGraphviz is a Python interface to the Graphviz graph layout and visualization package. With PyGraphviz you can create, edit, read, write, and draw graphs using Python to access the Graphviz graph data structure and layout algorithms.\r\n\r\n> PyGraphviz 是 Graphviz 图形布局和可视化包的 Python 接口。 借助 PyGraphviz，您可以使用 Python 创建、编辑、读取、写入和绘制图形，以访问 Graphviz 图形数据结构和布局算法。\r\n\r\n```bash\r\n$ /home/shenweiyan/software/Python-3.7.3/bin/pip3 install pygraphviz\r\nCollecting pygraphviz\r\n  Using cached https://files.pythonhosted.org/packages/7e/b1/d6d849ddaf6f11036f9980d433f383d4c13d1ebcfc3cd09bc845bda7e433/pygraphviz-1.5.zip\r\nInstalling collected packages: pygraphviz\r\n  Running setup.py install for pygraphviz ... error\r\n    Complete output from command /home/shenweiyan/software/Python-3.7.3/bin/python3.7 -u -c "import setuptools, tokenize;__file__=\'/tmp/pip-install-_zdjdg0j/pygraphviz/setup.py\';f=getattr(tokenize, \'open\', open)(__file__);code=f.read().replace(\'\\r\\n\', \'\\n\');f.close();exec(compile(code, __file__, \'exec\'))" install --record /tmp/pip-record-g0mz7lrq/install-record.txt --single-version-externally-managed --compile:\r\n    running install\r\n    Trying dpkg\r\n    Failed to find dpkg\r\n    Trying pkg-config\r\n    Package libcgraph was not found in the pkg-config search path.\r\n    Perhaps you should add the directory containing `libcgraph.pc\'\r\n    to the PKG_CONFIG_PATH environment variable\r\n    No package \'libcgraph\' found\r\n    Traceback (most recent call last):\r\n      File "<string>", line 1, in <module>\r\n      File "/tmp/pip-install-_zdjdg0j/pygraphviz/setup.py", line 93, in <module>\r\n        tests_require=[\'nose>=1.3.7\', \'doctest-ignore-unicode>=0.1.2\', \'mock>=2.0.0\'],\r\n      File "/home/shenweiyan/software/Python-3.7.3/lib/python3.7/site-packages/setuptools/__init__.py", line 145, in setup\r\n        return distutils.core.setup(**attrs)\r\n      File "/home/shenweiyan/software/Python-3.7.3/lib/python3.7/distutils/core.py", line 148, in setup\r\n        dist.run_commands()\r\n      File "/home/shenweiyan/software/Python-3.7.3/lib/python3.7/distutils/dist.py", line 966, in run_commands\r\n        self.run_command(cmd)\r\n      File "/home/shenweiyan/software/Python-3.7.3/lib/python3.7/distutils/dist.py", line 985, in run_command\r\n        cmd_obj.run()\r\n      File "/tmp/pip-install-_zdjdg0j/pygraphviz/setup_commands.py", line 44, in modified_run\r\n        self.include_path, self.library_path = get_graphviz_dirs()\r\n      File "/tmp/pip-install-_zdjdg0j/pygraphviz/setup_extra.py", line 162, in get_graphviz_dirs\r\n        include_dirs, library_dirs = _try_configure(include_dirs, library_dirs, _pkg_config)\r\n      File "/tmp/pip-install-_zdjdg0j/pygraphviz/setup_extra.py", line 117, in _try_configure\r\n        i, l = try_function()\r\n      File "/tmp/pip-install-_zdjdg0j/pygraphviz/setup_extra.py", line 72, in _pkg_config\r\n        output = S.check_output([\'pkg-config\', \'--libs-only-L\', \'libcgraph\'])\r\n      File "/home/shenweiyan/software/Python-3.7.3/lib/python3.7/subprocess.py", line 395, in check_output\r\n        **kwargs).stdout\r\n      File "/home/shenweiyan/software/Python-3.7.3/lib/python3.7/subprocess.py", line 487, in run\r\n        output=stdout, stderr=stderr)\r\n    subprocess.CalledProcessError: Command \'[\'pkg-config\', \'--libs-only-L\', \'libcgraph\']\' returned non-zero exit status 1.\r\n\r\n    ----------------------------------------\r\nCommand "/home/shenweiyan/software/Python-3.7.3/bin/python3.7 -u -c "import setuptools, tokenize;__file__=\'/tmp/pip-install-_zdjdg0j/pygraphviz/setup.py\';f=getattr(tokenize, \'open\', open)(__file__);code=f.read().replace(\'\\r\\n\', \'\\n\');f.close();exec(compile(code, __file__, \'exec\'))" install --record /tmp/pip-record-g0mz7lrq/install-record.txt --single-version-externally-managed --compile" failed with error code 1 in /tmp/pip-install-_zdjdg0j/pygraphviz/\r\n\r\n```\r\n\r\n参考：《[Installation:fatal error: \'graphviz/cgraph.h\' file not found](https://github.com/pygraphviz/pygraphviz/issues/11)》\r\n\r\n```bash\r\n$ wget https://graphviz.gitlab.io/pub/graphviz/stable/SOURCES/graphviz.tar.gz\r\n$ tar zvxf graphviz.tar.gz\r\n$ cd graphviz-2.40.1\r\n$ ./configure --prefix=/home/shenweiyan/software/graphviz-2.40.1\r\n$ make && make install\r\n```\r\n\r\n推荐把安装好的 graphviz 添加到环境变量，这样可以避免运行过程中出现：**"pygraphviz/graphviz_wrap.c:2987:29: fatal error: graphviz/cgraph.h: No such file or directory"** 无法找到头文件的异常。\r\n\r\n```bash\r\nexport PKG_CONFIG_PATH=/home/shenweiyan/software/graphviz-2.40.1/lib/pkgconfig:$PKG_CONFIG_PATH\r\nexport LD_LIBRARY_PATH=/home/shenweiyan/software/graphviz-2.40.1/lib:$LD_LIBRARY_PATH\r\nexport C_INCLUDE_PATH=/home/shenweiyan/software/graphviz-2.40.1/include:$C_INCLUDE_PATH\r\nexport CPLUS_INCLUDE_PATH=/home/shenweiyan/software/graphviz-2.40.1/include:$CPLUS_INCLUDE_PATH\r\n```\r\n\r\n如果 graphviz 添加到环境变量， `pygraphviz`\xa0的 python 包可以参考下面的方法安装：\r\n\r\n```bash\r\n$ /home/shenweiyan/software/Python-3.7.3/bin/pip3 install --global-option=build_ext --global-option="-I/home/shenweiyan/software/graphviz-2.40.1/include" --global-option="-L/home/shenweiyan/software/graphviz-2.40.1/lib" pygraphviz\r\n/home/shenweiyan/software/Python-3.7.3/lib/python3.7/site-packages/pip/_internal/commands/install.py:207: UserWarning: Disabling all use of wheels due to the use of --build-options / --global-options / --install-options.\r\n  cmdoptions.check_install_build_global(options)\r\nCollecting pygraphviz\r\n  Using cached https://files.pythonhosted.org/packages/7e/b1/d6d849ddaf6f11036f9980d433f383d4c13d1ebcfc3cd09bc845bda7e433/pygraphviz-1.5.zip\r\nInstalling collected packages: pygraphviz\r\n  Running setup.py install for pygraphviz ... done\r\nSuccessfully installed pygraphviz-1.5\r\n```\r\n\r\n## 编译安装\r\n\r\n这里的编译安装，以 Python-3.11.6 为示例。\r\n\r\n第一，下载 Python 源码，解压。\r\n\r\n```bash\r\n# 官网下载地址 https://www.python.org/downloads\r\nwget https://www.python.org/ftp/python/3.11.6/Python-3.11.6.tgz\r\n\r\n# 解压到指定目录\r\ntar zvxf Python-3.11.6.tgz -C /usr/local/src\r\n```\r\n\r\n第二，进入解压的源码路径，编译 Python 源码。\r\n\r\n```bash\r\n$ export PKG_CONFIG_PATH=/home/shenweiyan/software/libffi-3.2.1/lib/pkgconfig:$PKG_CONFIG_PATH\r\n$ export PKG_CONFIG_PATH=/home/shenweiyan/software/graphviz-2.40.1/lib/pkgconfig:$PKG_CONFIG_PATH\r\n\r\n$ export LD_LIBRARY_PATH=/home/shenweiyan/software/libffi-3.2.1/lib64:$LD_LIBRARY_PATH\r\n$ export LD_LIBRARY_PATH=/home/shenweiyan/software/graphviz-2.40.1/lib:$LD_LIBRARY_PATH\r\n$ export LD_LIBRARY_PATH=/home/shenweiyan/software/openssl-1.1.1/lib:$LD_LIBRARY_PATH\r\n$ export LD_LIBRARY_PATH=/home/shenweiyan/software/sqlite-3.36.0/lib:$LD_LIBRARY_PATH\r\n$ export LD_LIBRARY_PATH=/home/shenweiyan/software/gdbm-1.23/lib:$LD_LIBRARY_PATH\r\n$ export LD_LIBRARY_PATH=/home/shenweiyan/software/ActiveTcl-8.6.9/lib:$LD_LIBRARY_PATH\r\n\r\n$ export TCLTK_LIBS="-L/home/shenweiyan/software/ActiveTcl-8.6.9/lib -ltcl8.6 -ltk8.6"\r\n$ export TCLTK_CFLAGS="-I/home/shenweiyan/software/ActiveTcl-8.6.9/include"\r\n\r\n$ ./configure \\\r\n--enable-optimizations \\\r\n--prefix=/home/shenweiyan/software/Python-3.11.6 \\\r\n--with-openssl=/home/shenweiyan/software/openssl-1.1.1 \\\r\n--with-openssl-rpath=/home/shenweiyan/software/openssl-1.1.1/lib \\\r\nCC=/home/shenweiyan/software/gcc-7.3.0/bin/gcc \\\r\nCXX=/home/shenweiyan/software/gcc-7.3.0/bin/c++ \\\r\nLDFLAGS="-L/home/shenweiyan/software/libffi-3.2.1/lib64 \\\r\n         -L/home/shenweiyan/software/graphviz-2.40.1/lib \\\r\n         -L/RiboBio/home/shenweiyan/software/sqlite-3.36.0/lib \\\r\n         -L/home/shenweiyan/software/gdbm-1.23/lib" \\\r\nCPPFLAGS="-I/home/shenweiyan/software/graphviz-2.40.1/include \\\r\n          -I/home/shenweiyan/software/sqlite-3.36.0/include \\\r\n          -I/home/shenweiyan/software/gdbm-1.23/include" \\\r\nPKG_CONFIG_PATH="/home/shenweiyan/software/libffi-3.2.1/lib/pkgconfig: \\\r\n                 /home/shenweiyan/software/graphviz-2.40.1/lib/pkgconfig"\r\n```\r\n\r\n- `--enable-optimizations`\xa0 是优化选项（LTO，PGO\xa0 等）加上这个 \xa0flag\xa0 编译后，性能有 \xa010%\xa0 左右的优化，但是这会明显的增加编译时间。建议使用这个参数；\r\n- `--prefix`\xa0 声明安装路径；\r\n- 安装多个 python 的版本，如果不开启`--enable-shared`，指定不同路径即可。当开启`--enable-shared` 时，默认只有一个版本的 python。\r\n- Python 3 编译可以在 configure 或者环境变量中指定 OpenSSL 安装路径进行编译的方式解决 OpenSSL 依赖，否则 `make`\xa0 过程可能出错。\r\n\r\n```shell\r\n$ make\r\n......\r\nThe following modules found by detect_modules() in setup.py, have been\r\nbuilt by the Makefile instead, as configured by the Setup files:\r\n_abc                  atexit                pwd\r\ntime\r\n\r\n\r\nFailed to build these modules:\r\n_ctypes               _hashlib              _ssl\r\n\r\n\r\nCould not build the ssl module!\r\nPython requires an OpenSSL 1.0.2 or 1.1 compatible libssl with X509_VERIFY_PARAM_set1_host().\r\nLibreSSL 2.6.4 and earlier do not provide the necessary APIs, https://github.com/libressl-portable/portable/issues/381\r\n\r\n......\r\n```\r\n\r\n- `make`\xa0过程如果出现 `ModuleNotFoundError: No module named \'_ctypes\'`\xa0或者 `INFO: Could not locate ffi libs and/or headers`\xa0参考：<https://groups.google.com/forum/#!topic/comp.lang.python/npv-wzmytzo>\r\n\r\n![image.png](https://shub.weiyan.tech/yuque/elog-cookbook-img/FmK7bCeEeGjfbl1UVdvHyw3Jg8Zj.png)\r\n\r\n- 对于低版本的 Python 如果指定\xa0`--with-openssl=DIR`\xa0依然无法解决 ssl 模块的问题，可以参考修改 Modules/Setup.dist 文件（默认这块是注释的，放开注释即可。这块功能是开启 SSL 模块，不然会出现安装完毕后，提示找不到 ssl 模块的错误）再执行 configure，修改内容如下：\r\n\r\n```bash\r\n# Socket module helper for SSL support; you must comment out the other\r\n# socket line above, and possibly edit the SSL variable:\r\nSSL=/usr/local/ssl\r\n_ssl _ssl.c \\\r\n    -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \\\r\n    -L$(SSL)/lib -lssl -lcrypto\r\n```\r\n\r\n第三，Makefile 生后依次在当前路径执行编译和安装命令。\r\n\r\n```bash\r\nmake && make install\r\n```\r\n\r\n第四，安装完成。以上命令执行完毕，且无报错的情况下，我们将默认 python 换将切换至 3.11.6（一般不建议替换，个人建议把自定义安装的 Python bin 路径添加到 PATH 环境变量即可）：\r\n\r\n```bash\r\n# 替换系统自带的 python（不建议）\r\nmv /usr/bin/python /usr/bin/python2\r\nln -s /home/shenweiyan/software/Python-3.11.6/bin/python3 /usr/bin/python3\r\n\r\n# 添加新 Python 到 PATH 环境变量（建议）\r\necho "export PATH=/home/shenweiyan/software/Python-3.11.6/bin:$PATH" >>~/.bashrc\r\nsource ~/.bashrc\r\n```\r\n\r\n运行命令 `python -V`\xa0，查看是否出现 3.11.6\xa0 的版本，出现即为安装成功。\r\n\r\n## 其他工具\r\n\r\nPython >= 3.10 在安装时候，默认会同时安装 **pip3**！如果你的 python < 3.10，可以参考下面的方法安装 pip。\r\n\r\n```bash\r\n# 下载 setuptools 和 pip 安装程序\r\ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\r\npython3 get-pip.py\r\n```\r\n\r\n至此，CentOS Linux release\xa06.5 下的 python-3.11.6\xa0 全部安装完成。如果在安装过程中出现其他的报错，建议把 error 关键信息直接复制到 Google 进行检索，参考其他人的解决方法。\r\n\r\n## 其他异常与解决\r\n\r\n### _bz2\r\n\r\n- 系统：CentOS Linux release 7.7.1908 (Core)\r\n- GCC：gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)\r\n\r\n在 CentOS 7 中安装 Python-3.6.9 中发现 make 过程中一直提示："**ModuleNotFoundError: No module named \'_bz2\'**"，尽管 `sudo yum install bzip2 bzip2-devel`\xa0 已经安装了 bzip2 的依赖，问题还是不得其解。最后参考 stackoverflow 上的《Correctly building local python3, with bz2 support》，终于解决问题，下面记录一下。\r\n[Correctly building local python3, with bz2 support](https://stackoverflow.com/questions/51149227/correctly-building-local-python3-with-bz2-support)\r\n\r\n**手动安装 bzip2：**\r\n\r\n```bash\r\nwget https://nchc.dl.sourceforge.net/project/bzip2/bzip2-1.0.6.tar.gz\r\ntar zvxf bzip2-1.0.6.tar.gz\r\ncd bzip2-1.0.6\r\nmake -f Makefile_libbz2_so  # 这一步是生成 libbz2.so.1.0.6 的动态库文件\r\nmake\r\nmake install PREFIX=/usr/local/software/bzip2-1.0.6\r\ncp libbz2.so.1.0.6 /usr/local/software/bzip2-1.0.6/lib/\r\n```\r\n\r\n**几点说明：**\r\n\r\n- bzip2 的官网 \xa0<http://www.bzip.org/>\xa0 已经把 bzip2 的源码下载链接放到了 \xa0SourceForge，网络上一些从 \xa0<http://www.bzip.org/1.0.6/bzip2-1.0.6.tar.gz>\xa0 下载的做法已经失效。\r\n- [SourceForge](https://sourceforge.net/projects/bzip2/files/) 上 bzip2 的最新版本还是 1.0.6（Last modified 2018-11-3），更高级版本的 bzip2 我也不知道是否存在，也不知道能不能用。\r\n\r\n![image.png](https://shub.weiyan.tech/yuque/elog-cookbook-img/FvgxGWlVJSxOCvgXFo9BPOa3ODm5.png)\r\n\r\n**编译安装 Python-3.6.9：**\r\n\r\n```bash\r\n$ wget https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgz\r\n$ tar zvxf Python-3.6.9.tgz\r\n$ cd Python-3.6.9\r\n$ ./configure --enable-optimizations --prefix=/usr/local/software/python-3.6 CFLAGS="-I/usr/local/software/bzip2-1.0.6/include" LDFLAGS="-L/usr/local/software/bzip2-1.0.6/lib"\r\n$ make\r\n$ make install\r\n```\r\n\r\n- Python-3.6.9 中的 `./configure --help`\xa0中没有 `--with-openssl`\xa0参数！有点神奇，我也不知道原因。\r\n- 安装完成可以用 `from _bz2 import BZ2Compressor, BZ2Decompressor`\xa0测试一下 `_bz2`\xa0 是否可用。\r\n\r\n\r\n## 参考资料\r\n\r\n1. 行者无疆-ITer,《[python2.7 源码编译安装](https://www.cnblogs.com/ITer-jack/p/8305912.html)》, 博客园\r\n2. Scott Frazer,《[How do I compile Python 3.4 with custom OpenSSL?](https://stackoverflow.com/questions/23548188/how-do-i-compile-python-3-4-with-custom-openssl)》, Stack Overflow\r\n', 'bodyText': '编程，作为生物信息学的一个基础性技能，是任何一个生信工程师都无法绕开话题。也许有些人还在纠结 Perl 和 Python 到底应该学习哪一个，但作为目前最火最流行的编程语言 Python 还是非常值得尝试的。它不但可以进行文本处理，在统计、网站、游戏、爬虫、数据可视化等方面也有非常强大的应用，比起曾经的 Perl 真的强大和全面很多，且比 Perl 更容易入手。不管从长远发展，还是短期需要，学会 Python，看懂 Perl (或者先学 \xa0 Python，后学 Perl) 应该是每一个生信工程必备的基础技能之一。\n工欲善其事，必先利其器。关于 Python 安装教程在网上一搜一大把，但总感觉不够全面，尤其对于中间出现的一些问题的解决方法不尽如人意。鉴于此，本文基于 \xa0CentOS/RHEL Linux 对 Python 的源码编译安装进行了一下简单的总结，记录如下。\n安装环境\nRed Hat 6.5 + GCC 4.4.7（GCC-7.3.0 - 此版本 gcc 为手动安装）。\nGCC 高级版本手动或者 yum 安装参考以下文章：\n\nSCL+Devtoolset 安装与使用笔记 · 语雀\n非 root 用户手动编译安装 GCC · 语雀\n\n$ lsb_release -a\nLSB Version:    :base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch\nDistributor ID: RedHatEnterpriseServer\nDescription:    Red Hat Enterprise Linux Server release 6.5 (Santiago)\nRelease:        6.5\nCodename:       Santiago\n\n$ gcc --version\ngcc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-4)\nCopyright (C) 2010 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n解决依赖\n如果您拥有 root 权限，请执以下依赖安装：\nyum install zlib\nyum install zlib-devel\nyum install openssl\nyum install openssl-devel\nyum install libffi\nyum install libffi-devel\nyum install readline readline-devel sqlite sqlite-devel tk-devel\n\n\n\n缺少库名称\n安装命令\n\n\n\n\n_uuid\nyum install libuuid-devel\n\n\nreadline\nyum install readline-devel\n\n\n_tkinter\nyum install tk-devel\n\n\n_ffi\nyum install libffi-devel\n\n\n_curses\nyum install ncurses-libs\n\n\n_sqlite\nyum install sqlite-devel\n\n\n_bz2\nyum isntall bzip2-devel\n\n\n_ssl\nyum install openssl-devel\n\n\n_gdbm\nyum install gdbm-devel\n\n\n_dbi\nyum install libdbi-devel\n\n\n_zlib\nyum install zlib-devel\n\n\nlzma\nyum install xz-develyum install python-backports-lzma\n\n\n\n如果您没有 root 权限，可以参考《手把手教你在 Linux 源码安装最新版本的 R》一文，手动一个个去解决以上的依赖。\n_sqlite3\n执行 make 过程中提示 _sqlite3 not found，如下：\n$ make\n......\nPython build finished successfully!\nThe necessary bits to build these optional modules were not found:\n_sqlite3              _ssl\nTo find the necessary bits, look in setup.py in detect_modules() for the module\'s name.\n\nThe following modules found by detect_modules() in setup.py, have been\nbuilt by the Makefile instead, as configured by the Setup files:\n_abc                  atexit                pwd\ntime\n系统已安装 sqlite3\n如果执行 rpm -qa|grep sqlite 看到 sqlite 和 sqlite-devel 都已经安装（libsqlite3.so 默认保存在 /usr/lib64 下； sqlite3.h 默认保存在 /usr/include 下）。\n$ sqlite3 -version\n3.6.20\n\n$ ll /usr/lib64/libsqlite3.so\nlrwxrwxrwx 1 root root 19 Apr 23  2015 /usr/lib64/libsqlite3.so -> libsqlite3.so.0.8.6\n\n$ ll /usr/include/sqlite3.h\n-rw-r--r-- 1 root root 263K Nov 25  2009 /usr/include/sqlite3.h\n但是，执行 make 依然出现以上报错，参考下面的方法《python build from source: cannot build optional module sqlite3 - Stack Overflow》。\n手动安装 sqlite3\n$ wget https://www.sqlite.org/2021/sqlite-autoconf-3360000.tar.gz --no-check-certificate\n$ tar zvxf sqlite-autoconf-3360000.tar.gz\n$ cd sqlite-autoconf-3360000\n$ ./configure --prefix=/home/shenweiyan/software/sqlite-3.36.0\n$ make\n$ make install\n配置 sqlite3\n\n配置环境\n\n$ export LD_LIBRARY_PATH=/home/shenweiyan/software/sqlite-3.36.0/lib:$LD_LIBRARY_PATH\n\n调整源码或编译\n\n对于 3.11.x 以上版本的 Python 可以在 configure 指定自定义安装的 sqlite3 路径解决 _sqlite3 依赖。\n./configure ... \\\n    LDFLAGS="-L/home/shenweiyan/software/sqlite-3.36.0/lib" \\\n    CPPFLAGS="-I/home/shenweiyan/software/sqlite-3.36.0/include" \n\n有些低版本的 Python (如 3.7) 可能需要再源码文件中加入 sqlite3.h 的文件路径。\n\n找到 sqlite3.h 文件的保存目录。\n修改 setup.py 文件，在 sqlite_inc_paths 中加上 sqlite3.h 的文件路径。\n\nsqlite_inc_paths = [ \'/home/shenweiyan/software/sqlite-3.36.0/include\',\n                     \'/usr/include\',\n                     \'/usr/include/sqlite\',\n                     \'/usr/include/sqlite3\',\n                     \'/usr/local/include\',\n                     \'/usr/local/include/sqlite\',\n                     \'/usr/local/include/sqlite3\',\n                   ]\n_ssl\nPython3 需要引用 openssl\xa0 模块，但是 python3.7+ 在 CentOS 中要求的 openssl 版本最低为 1.0.2，而 CentOS 默认的为 1.0.1（CentOS-6.x 通过 yum\xa0 源安装的 openssl 的最高版本是 1.0.1），所以需要手动更新 openssl。\n对于 openssl 版本的选择，建议至少选择 1.1.1+ 版本：\n\nurllib3 v2.0 only supports OpenSSL 1.1.1+, currently the \'ssl\' module is compiled with \'OpenSSL 1.0.2k-fips  26 Jan 2017\'. See: urllib3/urllib3#2168\nPython requires an OpenSSL 1.0.2 or 1.1 compatible libssl with X509_VERIFY_PARAM_set1_host().\n\n# 下载\nwget http://www.openssl.org/source/openssl-1.1.1.tar.gz\n\n# 解压缩\ntar -zxvf openssl-1.1.1.tar.gz\n\n# 进入目录安装\ncd openssl-1.1.1\n\n# 进行配置下，自定义\n./config --prefix=/home/shenweiyan/software/openssl-1.1.1 shared zlib\n\n# 编译并安装\nmake && make install\n\n# 配置到用户环境变量，随处使用\necho "export LD_LIBRARY_PATH=/home/shenweiyan/software/openssl-1.1.1/lib:$LD_LIBRARY_PATH" >> $HOME/.bashrc\n\n# 是环境变量配置生效\nsource $HOME/.bashrc\n请注意：\n\nopenssl\xa0编译（config）的时候 必须要加上 shared\xa0 参数，否者源码安装 Python 即使添加了 --with-openssl\xa0的自定义路径，依然会导致 Could not build the ssl module!\xa0报错！\n从 https://www.openssl.org/source/\xa0下载的源码 openssl-1.0.2s、openssl-1.0.2m，包括 \xa0CentOS-7.5 使用 yum\xa0安装的最高版本的 openssl-1.0.2k 目前发现依然会导致 Could not build the ssl module\xa0，建议从 https://www.openssl.org/source/old/\xa0下载 1.1.1 的源码编译安装。\n\n最后，在 Python 执行 configure 的时候指定 openssl 的相关参数：\n./configure ... \\\n    --with-openssl=/home/shenweiyan/software/openssl-1.1.1 \\\n    --with-openssl-rpath=/home/shenweiyan/software/openssl-1.1.1/lib \\\n\n_tkinter\nTkinter 模块缺失是一个比较棘手的问题，为此专门写了一篇文章来介绍这个问题。\n具体请参考：Python 中 tkinter 源码安装使用与中文乱码 - Knowledge-Garden#12\n_dbm\n_dbm 和 _gdbm 的模块缺失可以通过下面手动的方法解决。\nwget https://ftp.gnu.org/gnu/gdbm/gdbm-1.23.tar.gz\ntar -zxvf gdbm-1.23.tar.gz\n./configure --prefix=/home/shenweiyan/software/gdbm-1.23 --enable-libgdbm-compat  --enable-debug\nmake && make install\n\n最后，增加环境变量，并调整 Python 执行 configure 时的参数：\nexport PATH=/home/shenweiyan/software/gdbm-1.23/bin:$PATH\nexport LD_LIBRARY_PATH=/home/shenweiyan/software/gdbm-1.23/lib:$LD_LIBRARY_PATH\n\n./configure ... \\\n    LDFLAGS="-L/home/shenweiyan/software/gdbm-1.23/lib" \\\n    CPPFLAGS="-I/home/shenweiyan/software/gdbm-1.23/include"\n\n_lzma\n正常情况下，下面的方法可以解决该问题（如果您有 root 权限的话）。\n# For ubuntu:\n$ sudo apt-get install liblzma-dev\n\n# For centos:\n$ yum install xz-devel\n普通用户可以手动安装解决：\n$ wget https://tukaani.org/xz/xz-5.2.5.tar.gz --no-check-certificat\n$ tar zvxf xz-5.2.5.tar.gz\n$ cd xz-5.2.5\n$ ./configure --prefix=/home/shenweiyan/software/xz-5.2.5\n$ make\n$ make install\n最后，配置环境：\n$ export LD_LIBRARY_PATH=/home/shenweiyan/software/xz-5.2.5/lib:$LD_LIBRARY_PATH\n_ctypes\n在 CentOS 6.x 安装 libffi-devel\xa0 的时候出现以下问题：\n$ yum install libffi-devel\nLoaded plugins: product-id, refresh-packagekit, search-disabled-repos, security, subscription-manager\nThis system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.\nSetting up Install Process\ncdrom                                                                                                                                         | 4.1 kB     00:00 ...\nNo package libffi-devel available.\nError: Nothing to do\n可以使用下面的方法安装：\n[root@log01 ~]# rpm -ivh http://mirror.centos.org/centos/6/os/x86_64/Packages/libffi-devel-3.0.5-3.2.el6.x86_64.rpm\nRetrieving http://mirror.centos.org/centos/6/os/x86_64/Packages/libffi-devel-3.0.5-3.2.el6.x86_64.rpm\nwarning: /var/tmp/rpm-tmp.V9ihbu: Header V3 RSA/SHA256 Signature, key ID c105b9de: NOKEY\nPreparing...                ########################################### [100%]\n   1:libffi-devel           ########################################### [100%]\n[root@log01 ~]# rpm -qa|grep libffi\nlibffi-3.0.5-3.2.el6.x86_64\nlibffi-devel-3.0.5-3.2.el6.x86_64\n手动的源码方法安装如下：\n$ wget ftp://sourceware.org/pub/libffi/libffi-3.2.1.tar.gz\n$ tar zvxf libffi-3.2.1.tar.gz\n$ ./configure --prefix=/home/shenweiyan/software/libffi-3.2.1\n$ make\n$ make install\npygraphviz\n如果你不需要使用 pygraphviz，可以不用管这个依赖。\n\nPyGraphviz is a Python interface to the Graphviz graph layout and visualization package. With PyGraphviz you can create, edit, read, write, and draw graphs using Python to access the Graphviz graph data structure and layout algorithms.\n\n\nPyGraphviz 是 Graphviz 图形布局和可视化包的 Python 接口。 借助 PyGraphviz，您可以使用 Python 创建、编辑、读取、写入和绘制图形，以访问 Graphviz 图形数据结构和布局算法。\n\n$ /home/shenweiyan/software/Python-3.7.3/bin/pip3 install pygraphviz\nCollecting pygraphviz\n  Using cached https://files.pythonhosted.org/packages/7e/b1/d6d849ddaf6f11036f9980d433f383d4c13d1ebcfc3cd09bc845bda7e433/pygraphviz-1.5.zip\nInstalling collected packages: pygraphviz\n  Running setup.py install for pygraphviz ... error\n    Complete output from command /home/shenweiyan/software/Python-3.7.3/bin/python3.7 -u -c "import setuptools, tokenize;__file__=\'/tmp/pip-install-_zdjdg0j/pygraphviz/setup.py\';f=getattr(tokenize, \'open\', open)(__file__);code=f.read().replace(\'\\r\\n\', \'\\n\');f.close();exec(compile(code, __file__, \'exec\'))" install --record /tmp/pip-record-g0mz7lrq/install-record.txt --single-version-externally-managed --compile:\n    running install\n    Trying dpkg\n    Failed to find dpkg\n    Trying pkg-config\n    Package libcgraph was not found in the pkg-config search path.\n    Perhaps you should add the directory containing `libcgraph.pc\'\n    to the PKG_CONFIG_PATH environment variable\n    No package \'libcgraph\' found\n    Traceback (most recent call last):\n      File "<string>", line 1, in <module>\n      File "/tmp/pip-install-_zdjdg0j/pygraphviz/setup.py", line 93, in <module>\n        tests_require=[\'nose>=1.3.7\', \'doctest-ignore-unicode>=0.1.2\', \'mock>=2.0.0\'],\n      File "/home/shenweiyan/software/Python-3.7.3/lib/python3.7/site-packages/setuptools/__init__.py", line 145, in setup\n        return distutils.core.setup(**attrs)\n      File "/home/shenweiyan/software/Python-3.7.3/lib/python3.7/distutils/core.py", line 148, in setup\n        dist.run_commands()\n      File "/home/shenweiyan/software/Python-3.7.3/lib/python3.7/distutils/dist.py", line 966, in run_commands\n        self.run_command(cmd)\n      File "/home/shenweiyan/software/Python-3.7.3/lib/python3.7/distutils/dist.py", line 985, in run_command\n        cmd_obj.run()\n      File "/tmp/pip-install-_zdjdg0j/pygraphviz/setup_commands.py", line 44, in modified_run\n        self.include_path, self.library_path = get_graphviz_dirs()\n      File "/tmp/pip-install-_zdjdg0j/pygraphviz/setup_extra.py", line 162, in get_graphviz_dirs\n        include_dirs, library_dirs = _try_configure(include_dirs, library_dirs, _pkg_config)\n      File "/tmp/pip-install-_zdjdg0j/pygraphviz/setup_extra.py", line 117, in _try_configure\n        i, l = try_function()\n      File "/tmp/pip-install-_zdjdg0j/pygraphviz/setup_extra.py", line 72, in _pkg_config\n        output = S.check_output([\'pkg-config\', \'--libs-only-L\', \'libcgraph\'])\n      File "/home/shenweiyan/software/Python-3.7.3/lib/python3.7/subprocess.py", line 395, in check_output\n        **kwargs).stdout\n      File "/home/shenweiyan/software/Python-3.7.3/lib/python3.7/subprocess.py", line 487, in run\n        output=stdout, stderr=stderr)\n    subprocess.CalledProcessError: Command \'[\'pkg-config\', \'--libs-only-L\', \'libcgraph\']\' returned non-zero exit status 1.\n\n    ----------------------------------------\nCommand "/home/shenweiyan/software/Python-3.7.3/bin/python3.7 -u -c "import setuptools, tokenize;__file__=\'/tmp/pip-install-_zdjdg0j/pygraphviz/setup.py\';f=getattr(tokenize, \'open\', open)(__file__);code=f.read().replace(\'\\r\\n\', \'\\n\');f.close();exec(compile(code, __file__, \'exec\'))" install --record /tmp/pip-record-g0mz7lrq/install-record.txt --single-version-externally-managed --compile" failed with error code 1 in /tmp/pip-install-_zdjdg0j/pygraphviz/\n\n参考：《Installation:fatal error: \'graphviz/cgraph.h\' file not found》\n$ wget https://graphviz.gitlab.io/pub/graphviz/stable/SOURCES/graphviz.tar.gz\n$ tar zvxf graphviz.tar.gz\n$ cd graphviz-2.40.1\n$ ./configure --prefix=/home/shenweiyan/software/graphviz-2.40.1\n$ make && make install\n推荐把安装好的 graphviz 添加到环境变量，这样可以避免运行过程中出现："pygraphviz/graphviz_wrap.c:2987:29: fatal error: graphviz/cgraph.h: No such file or directory" 无法找到头文件的异常。\nexport PKG_CONFIG_PATH=/home/shenweiyan/software/graphviz-2.40.1/lib/pkgconfig:$PKG_CONFIG_PATH\nexport LD_LIBRARY_PATH=/home/shenweiyan/software/graphviz-2.40.1/lib:$LD_LIBRARY_PATH\nexport C_INCLUDE_PATH=/home/shenweiyan/software/graphviz-2.40.1/include:$C_INCLUDE_PATH\nexport CPLUS_INCLUDE_PATH=/home/shenweiyan/software/graphviz-2.40.1/include:$CPLUS_INCLUDE_PATH\n如果 graphviz 添加到环境变量， pygraphviz\xa0的 python 包可以参考下面的方法安装：\n$ /home/shenweiyan/software/Python-3.7.3/bin/pip3 install --global-option=build_ext --global-option="-I/home/shenweiyan/software/graphviz-2.40.1/include" --global-option="-L/home/shenweiyan/software/graphviz-2.40.1/lib" pygraphviz\n/home/shenweiyan/software/Python-3.7.3/lib/python3.7/site-packages/pip/_internal/commands/install.py:207: UserWarning: Disabling all use of wheels due to the use of --build-options / --global-options / --install-options.\n  cmdoptions.check_install_build_global(options)\nCollecting pygraphviz\n  Using cached https://files.pythonhosted.org/packages/7e/b1/d6d849ddaf6f11036f9980d433f383d4c13d1ebcfc3cd09bc845bda7e433/pygraphviz-1.5.zip\nInstalling collected packages: pygraphviz\n  Running setup.py install for pygraphviz ... done\nSuccessfully installed pygraphviz-1.5\n编译安装\n这里的编译安装，以 Python-3.11.6 为示例。\n第一，下载 Python 源码，解压。\n# 官网下载地址 https://www.python.org/downloads\nwget https://www.python.org/ftp/python/3.11.6/Python-3.11.6.tgz\n\n# 解压到指定目录\ntar zvxf Python-3.11.6.tgz -C /usr/local/src\n第二，进入解压的源码路径，编译 Python 源码。\n$ export PKG_CONFIG_PATH=/home/shenweiyan/software/libffi-3.2.1/lib/pkgconfig:$PKG_CONFIG_PATH\n$ export PKG_CONFIG_PATH=/home/shenweiyan/software/graphviz-2.40.1/lib/pkgconfig:$PKG_CONFIG_PATH\n\n$ export LD_LIBRARY_PATH=/home/shenweiyan/software/libffi-3.2.1/lib64:$LD_LIBRARY_PATH\n$ export LD_LIBRARY_PATH=/home/shenweiyan/software/graphviz-2.40.1/lib:$LD_LIBRARY_PATH\n$ export LD_LIBRARY_PATH=/home/shenweiyan/software/openssl-1.1.1/lib:$LD_LIBRARY_PATH\n$ export LD_LIBRARY_PATH=/home/shenweiyan/software/sqlite-3.36.0/lib:$LD_LIBRARY_PATH\n$ export LD_LIBRARY_PATH=/home/shenweiyan/software/gdbm-1.23/lib:$LD_LIBRARY_PATH\n$ export LD_LIBRARY_PATH=/home/shenweiyan/software/ActiveTcl-8.6.9/lib:$LD_LIBRARY_PATH\n\n$ export TCLTK_LIBS="-L/home/shenweiyan/software/ActiveTcl-8.6.9/lib -ltcl8.6 -ltk8.6"\n$ export TCLTK_CFLAGS="-I/home/shenweiyan/software/ActiveTcl-8.6.9/include"\n\n$ ./configure \\\n--enable-optimizations \\\n--prefix=/home/shenweiyan/software/Python-3.11.6 \\\n--with-openssl=/home/shenweiyan/software/openssl-1.1.1 \\\n--with-openssl-rpath=/home/shenweiyan/software/openssl-1.1.1/lib \\\nCC=/home/shenweiyan/software/gcc-7.3.0/bin/gcc \\\nCXX=/home/shenweiyan/software/gcc-7.3.0/bin/c++ \\\nLDFLAGS="-L/home/shenweiyan/software/libffi-3.2.1/lib64 \\\n         -L/home/shenweiyan/software/graphviz-2.40.1/lib \\\n         -L/RiboBio/home/shenweiyan/software/sqlite-3.36.0/lib \\\n         -L/home/shenweiyan/software/gdbm-1.23/lib" \\\nCPPFLAGS="-I/home/shenweiyan/software/graphviz-2.40.1/include \\\n          -I/home/shenweiyan/software/sqlite-3.36.0/include \\\n          -I/home/shenweiyan/software/gdbm-1.23/include" \\\nPKG_CONFIG_PATH="/home/shenweiyan/software/libffi-3.2.1/lib/pkgconfig: \\\n                 /home/shenweiyan/software/graphviz-2.40.1/lib/pkgconfig"\n\n--enable-optimizations\xa0 是优化选项（LTO，PGO\xa0 等）加上这个 \xa0flag\xa0 编译后，性能有 \xa010%\xa0 左右的优化，但是这会明显的增加编译时间。建议使用这个参数；\n--prefix\xa0 声明安装路径；\n安装多个 python 的版本，如果不开启--enable-shared，指定不同路径即可。当开启--enable-shared 时，默认只有一个版本的 python。\nPython 3 编译可以在 configure 或者环境变量中指定 OpenSSL 安装路径进行编译的方式解决 OpenSSL 依赖，否则 make\xa0 过程可能出错。\n\n$ make\n......\nThe following modules found by detect_modules() in setup.py, have been\nbuilt by the Makefile instead, as configured by the Setup files:\n_abc                  atexit                pwd\ntime\n\n\nFailed to build these modules:\n_ctypes               _hashlib              _ssl\n\n\nCould not build the ssl module!\nPython requires an OpenSSL 1.0.2 or 1.1 compatible libssl with X509_VERIFY_PARAM_set1_host().\nLibreSSL 2.6.4 and earlier do not provide the necessary APIs, https://github.com/libressl-portable/portable/issues/381\n\n......\n\nmake\xa0过程如果出现 ModuleNotFoundError: No module named \'_ctypes\'\xa0或者 INFO: Could not locate ffi libs and/or headers\xa0参考：https://groups.google.com/forum/#!topic/comp.lang.python/npv-wzmytzo\n\n\n\n对于低版本的 Python 如果指定\xa0--with-openssl=DIR\xa0依然无法解决 ssl 模块的问题，可以参考修改 Modules/Setup.dist 文件（默认这块是注释的，放开注释即可。这块功能是开启 SSL 模块，不然会出现安装完毕后，提示找不到 ssl 模块的错误）再执行 configure，修改内容如下：\n\n# Socket module helper for SSL support; you must comment out the other\n# socket line above, and possibly edit the SSL variable:\nSSL=/usr/local/ssl\n_ssl _ssl.c \\\n    -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \\\n    -L$(SSL)/lib -lssl -lcrypto\n第三，Makefile 生后依次在当前路径执行编译和安装命令。\nmake && make install\n第四，安装完成。以上命令执行完毕，且无报错的情况下，我们将默认 python 换将切换至 3.11.6（一般不建议替换，个人建议把自定义安装的 Python bin 路径添加到 PATH 环境变量即可）：\n# 替换系统自带的 python（不建议）\nmv /usr/bin/python /usr/bin/python2\nln -s /home/shenweiyan/software/Python-3.11.6/bin/python3 /usr/bin/python3\n\n# 添加新 Python 到 PATH 环境变量（建议）\necho "export PATH=/home/shenweiyan/software/Python-3.11.6/bin:$PATH" >>~/.bashrc\nsource ~/.bashrc\n运行命令 python -V\xa0，查看是否出现 3.11.6\xa0 的版本，出现即为安装成功。\n其他工具\nPython >= 3.10 在安装时候，默认会同时安装 pip3！如果你的 python < 3.10，可以参考下面的方法安装 pip。\n# 下载 setuptools 和 pip 安装程序\ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\npython3 get-pip.py\n至此，CentOS Linux release\xa06.5 下的 python-3.11.6\xa0 全部安装完成。如果在安装过程中出现其他的报错，建议把 error 关键信息直接复制到 Google 进行检索，参考其他人的解决方法。\n其他异常与解决\n_bz2\n\n系统：CentOS Linux release 7.7.1908 (Core)\nGCC：gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)\n\n在 CentOS 7 中安装 Python-3.6.9 中发现 make 过程中一直提示："ModuleNotFoundError: No module named \'_bz2\'"，尽管 sudo yum install bzip2 bzip2-devel\xa0 已经安装了 bzip2 的依赖，问题还是不得其解。最后参考 stackoverflow 上的《Correctly building local python3, with bz2 support》，终于解决问题，下面记录一下。\nCorrectly building local python3, with bz2 support\n手动安装 bzip2：\nwget https://nchc.dl.sourceforge.net/project/bzip2/bzip2-1.0.6.tar.gz\ntar zvxf bzip2-1.0.6.tar.gz\ncd bzip2-1.0.6\nmake -f Makefile_libbz2_so  # 这一步是生成 libbz2.so.1.0.6 的动态库文件\nmake\nmake install PREFIX=/usr/local/software/bzip2-1.0.6\ncp libbz2.so.1.0.6 /usr/local/software/bzip2-1.0.6/lib/\n几点说明：\n\nbzip2 的官网 \xa0http://www.bzip.org/\xa0 已经把 bzip2 的源码下载链接放到了 \xa0SourceForge，网络上一些从 \xa0http://www.bzip.org/1.0.6/bzip2-1.0.6.tar.gz\xa0 下载的做法已经失效。\nSourceForge 上 bzip2 的最新版本还是 1.0.6（Last modified 2018-11-3），更高级版本的 bzip2 我也不知道是否存在，也不知道能不能用。\n\n\n编译安装 Python-3.6.9：\n$ wget https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgz\n$ tar zvxf Python-3.6.9.tgz\n$ cd Python-3.6.9\n$ ./configure --enable-optimizations --prefix=/usr/local/software/python-3.6 CFLAGS="-I/usr/local/software/bzip2-1.0.6/include" LDFLAGS="-L/usr/local/software/bzip2-1.0.6/lib"\n$ make\n$ make install\n\nPython-3.6.9 中的 ./configure --help\xa0中没有 --with-openssl\xa0参数！有点神奇，我也不知道原因。\n安装完成可以用 from _bz2 import BZ2Compressor, BZ2Decompressor\xa0测试一下 _bz2\xa0 是否可用。\n\n参考资料\n\n行者无疆-ITer,《python2.7 源码编译安装》, 博客园\nScott Frazer,《How do I compile Python 3.4 with custom OpenSSL?》, Stack Overflow', 'bodyHTML': '<p dir="auto">编程，作为生物信息学的一个基础性技能，是任何一个生信工程师都无法绕开话题。也许有些人还在纠结 Perl 和 Python 到底应该学习哪一个，但作为目前最火最流行的编程语言 Python 还是非常值得尝试的。它不但可以进行文本处理，在统计、网站、游戏、爬虫、数据可视化等方面也有非常强大的应用，比起曾经的 Perl 真的强大和全面很多，且比 Perl 更容易入手。不管从长远发展，还是短期需要，学会 Python，看懂 Perl (或者先学 \xa0 Python，后学 Perl) 应该是每一个生信工程必备的基础技能之一。</p>\n<p dir="auto">工欲善其事，必先利其器。关于 Python 安装教程在网上一搜一大把，但总感觉不够全面，尤其对于中间出现的一些问题的解决方法不尽如人意。鉴于此，本文基于 \xa0CentOS/RHEL Linux 对 Python 的源码编译安装进行了一下简单的总结，记录如下。</p>\n<h2 dir="auto">安装环境</h2>\n<p dir="auto">Red Hat 6.5 + GCC 4.4.7（GCC-7.3.0 - 此版本 gcc 为手动安装）。</p>\n<p dir="auto">GCC 高级版本手动或者 <code class="notranslate">yum</code> 安装参考以下文章：</p>\n<ul dir="auto">\n<li><a href="https://www.yuque.com/shenweiyan/cookbook/scl-devtoolset-note" rel="nofollow">SCL+Devtoolset 安装与使用笔记 · 语雀</a></li>\n<li><a href="https://www.yuque.com/shenweiyan/cookbook/linux-gcc-install" rel="nofollow">非 root 用户手动编译安装 GCC · 语雀</a></li>\n</ul>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ lsb_release -a\nLSB Version:    :base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch\nDistributor ID: RedHatEnterpriseServer\nDescription:    Red Hat Enterprise Linux Server release 6.5 (Santiago)\nRelease:        6.5\nCodename:       Santiago\n\n$ gcc --version\ngcc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-4)\nCopyright (C) 2010 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."><pre class="notranslate">$ lsb_release -a\nLSB Version:    :base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch\nDistributor ID: RedHatEnterpriseServer\nDescription:    Red Hat Enterprise Linux Server release 6.5 (Santiago)\nRelease:        6.5\nCodename:       Santiago\n\n$ gcc --version\ngcc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-4)\nCopyright (C) 2010 Free Software Foundation, Inc.\nThis is free software<span class="pl-k">;</span> see the <span class="pl-c1">source</span> <span class="pl-k">for</span> copying conditions.  There is NO\nwarranty<span class="pl-k">;</span> not even <span class="pl-k">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</pre></div>\n<h2 dir="auto">解决依赖</h2>\n<p dir="auto">如果您拥有 root 权限，请执以下依赖安装：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="yum install zlib\nyum install zlib-devel\nyum install openssl\nyum install openssl-devel\nyum install libffi\nyum install libffi-devel\nyum install readline readline-devel sqlite sqlite-devel tk-devel"><pre class="notranslate">yum install zlib\nyum install zlib-devel\nyum install openssl\nyum install openssl-devel\nyum install libffi\nyum install libffi-devel\nyum install readline readline-devel sqlite sqlite-devel tk-devel</pre></div>\n<markdown-accessiblity-table><table role="table">\n<thead>\n<tr>\n<th>缺少库名称</th>\n<th>安装命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>_uuid</td>\n<td>yum install libuuid-devel</td>\n</tr>\n<tr>\n<td>readline</td>\n<td>yum install readline-devel</td>\n</tr>\n<tr>\n<td>_tkinter</td>\n<td>yum install tk-devel</td>\n</tr>\n<tr>\n<td>_ffi</td>\n<td>yum install libffi-devel</td>\n</tr>\n<tr>\n<td>_curses</td>\n<td>yum install ncurses-libs</td>\n</tr>\n<tr>\n<td>_sqlite</td>\n<td>yum install sqlite-devel</td>\n</tr>\n<tr>\n<td>_bz2</td>\n<td>yum isntall bzip2-devel</td>\n</tr>\n<tr>\n<td>_ssl</td>\n<td>yum install openssl-devel</td>\n</tr>\n<tr>\n<td>_gdbm</td>\n<td>yum install gdbm-devel</td>\n</tr>\n<tr>\n<td>_dbi</td>\n<td>yum install libdbi-devel</td>\n</tr>\n<tr>\n<td>_zlib</td>\n<td>yum install zlib-devel</td>\n</tr>\n<tr>\n<td>lzma</td>\n<td>yum install xz-develyum install python-backports-lzma</td>\n</tr>\n</tbody>\n</table></markdown-accessiblity-table>\n<p dir="auto">如果您没有 root 权限，可以参考《<a href="https://www.yuque.com/shenweiyan/cookbook/install-latest-r-from-source" rel="nofollow">手把手教你在 Linux 源码安装最新版本的 R</a>》一文，手动一个个去解决以上的依赖。</p>\n<h3 dir="auto">_sqlite3</h3>\n<p dir="auto">执行 <strong>make</strong> 过程中提示 <strong>_sqlite3 not found</strong>，如下：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ make\n......\nPython build finished successfully!\nThe necessary bits to build these optional modules were not found:\n_sqlite3              _ssl\nTo find the necessary bits, look in setup.py in detect_modules() for the module\'s name.\n\nThe following modules found by detect_modules() in setup.py, have been\nbuilt by the Makefile instead, as configured by the Setup files:\n_abc                  atexit                pwd\ntime"><pre class="notranslate">$ make\n......\nPython build finished successfully<span class="pl-k">!</span>\nThe necessary bits to build these optional modules were not found:\n_sqlite3              _ssl\nTo find the necessary bits, look <span class="pl-k">in</span> setup.py <span class="pl-k">in</span> <span class="pl-en">detect_modules</span>() <span class="pl-k">for</span> the module<span class="pl-s"><span class="pl-pds">\'</span>s name.</span>\n<span class="pl-s"></span>\n<span class="pl-s">The following modules found by detect_modules() in setup.py, have been</span>\n<span class="pl-s">built by the Makefile instead, as configured by the Setup files:</span>\n<span class="pl-s">_abc                  atexit                pwd</span>\n<span class="pl-s">time</span></pre></div>\n<h4 dir="auto">系统已安装 sqlite3</h4>\n<p dir="auto">如果执行 <strong>rpm -qa|grep sqlite</strong> 看到 sqlite 和 sqlite-devel 都已经安装（libsqlite3.so 默认保存在 /usr/lib64 下； <code class="notranslate">sqlite3.h</code> 默认保存在 <code class="notranslate">/usr/include</code> 下）。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ sqlite3 -version\n3.6.20\n\n$ ll /usr/lib64/libsqlite3.so\nlrwxrwxrwx 1 root root 19 Apr 23  2015 /usr/lib64/libsqlite3.so -&gt; libsqlite3.so.0.8.6\n\n$ ll /usr/include/sqlite3.h\n-rw-r--r-- 1 root root 263K Nov 25  2009 /usr/include/sqlite3.h"><pre class="notranslate">$ sqlite3 -version\n3.6.20\n\n$ ll /usr/lib64/libsqlite3.so\nlrwxrwxrwx 1 root root 19 Apr 23  2015 /usr/lib64/libsqlite3.so -<span class="pl-k">&gt;</span> libsqlite3.so.0.8.6\n\n$ ll /usr/include/sqlite3.h\n-rw-r--r-- 1 root root 263K Nov 25  2009 /usr/include/sqlite3.h</pre></div>\n<p dir="auto">但是，执行 <code class="notranslate">make</code> 依然出现以上报错，参考下面的方法《<a href="https://stackoverflow.com/questions/32779768/python-build-from-source-cannot-build-optional-module-sqlite3" rel="nofollow">python build from source: cannot build optional module sqlite3 - Stack Overflow</a>》。</p>\n<h4 dir="auto">手动安装 sqlite3</h4>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ wget https://www.sqlite.org/2021/sqlite-autoconf-3360000.tar.gz --no-check-certificate\n$ tar zvxf sqlite-autoconf-3360000.tar.gz\n$ cd sqlite-autoconf-3360000\n$ ./configure --prefix=/home/shenweiyan/software/sqlite-3.36.0\n$ make\n$ make install"><pre class="notranslate">$ wget https://www.sqlite.org/2021/sqlite-autoconf-3360000.tar.gz --no-check-certificate\n$ tar zvxf sqlite-autoconf-3360000.tar.gz\n$ <span class="pl-c1">cd</span> sqlite-autoconf-3360000\n$ ./configure --prefix=/home/shenweiyan/software/sqlite-3.36.0\n$ make\n$ make install</pre></div>\n<h4 dir="auto">配置 sqlite3</h4>\n<ol dir="auto">\n<li>配置环境</li>\n</ol>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ export LD_LIBRARY_PATH=/home/shenweiyan/software/sqlite-3.36.0/lib:$LD_LIBRARY_PATH"><pre class="notranslate">$ <span class="pl-k">export</span> LD_LIBRARY_PATH=/home/shenweiyan/software/sqlite-3.36.0/lib:<span class="pl-smi">$LD_LIBRARY_PATH</span></pre></div>\n<ol start="2" dir="auto">\n<li>调整源码或编译</li>\n</ol>\n<p dir="auto">对于 3.11.x 以上版本的 Python 可以在 <code class="notranslate">configure</code> 指定自定义安装的 sqlite3 路径解决 <code class="notranslate">_sqlite3</code> 依赖。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="./configure ... \\\n    LDFLAGS=&quot;-L/home/shenweiyan/software/sqlite-3.36.0/lib&quot; \\\n    CPPFLAGS=&quot;-I/home/shenweiyan/software/sqlite-3.36.0/include&quot; "><pre class="notranslate"><code class="notranslate">./configure ... \\\n    LDFLAGS="-L/home/shenweiyan/software/sqlite-3.36.0/lib" \\\n    CPPFLAGS="-I/home/shenweiyan/software/sqlite-3.36.0/include" \n</code></pre></div>\n<p dir="auto">有些低版本的 Python (如 3.7) 可能需要再源码文件中加入 <code class="notranslate">sqlite3.h</code> 的文件路径。</p>\n<ol dir="auto">\n<li>找到 <strong>sqlite3.h</strong> 文件的保存目录。</li>\n<li>修改 <strong>setup.py</strong> 文件，在 sqlite_inc_paths 中加上 sqlite3.h 的文件路径。</li>\n</ol>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sqlite_inc_paths = [ \'/home/shenweiyan/software/sqlite-3.36.0/include\',\n                     \'/usr/include\',\n                     \'/usr/include/sqlite\',\n                     \'/usr/include/sqlite3\',\n                     \'/usr/local/include\',\n                     \'/usr/local/include/sqlite\',\n                     \'/usr/local/include/sqlite3\',\n                   ]"><pre class="notranslate">sqlite_inc_paths = [ <span class="pl-s"><span class="pl-pds">\'</span>/home/shenweiyan/software/sqlite-3.36.0/include<span class="pl-pds">\'</span></span>,\n                     <span class="pl-s"><span class="pl-pds">\'</span>/usr/include<span class="pl-pds">\'</span></span>,\n                     <span class="pl-s"><span class="pl-pds">\'</span>/usr/include/sqlite<span class="pl-pds">\'</span></span>,\n                     <span class="pl-s"><span class="pl-pds">\'</span>/usr/include/sqlite3<span class="pl-pds">\'</span></span>,\n                     <span class="pl-s"><span class="pl-pds">\'</span>/usr/local/include<span class="pl-pds">\'</span></span>,\n                     <span class="pl-s"><span class="pl-pds">\'</span>/usr/local/include/sqlite<span class="pl-pds">\'</span></span>,\n                     <span class="pl-s"><span class="pl-pds">\'</span>/usr/local/include/sqlite3<span class="pl-pds">\'</span></span>,\n                   ]</pre></div>\n<h3 dir="auto">_ssl</h3>\n<p dir="auto">Python3 需要引用 <code class="notranslate">openssl</code>\xa0 模块，但是 python3.7+ 在 CentOS 中要求的 openssl 版本最低为 1.0.2，而 CentOS 默认的为 1.0.1（CentOS-6.x 通过 <code class="notranslate">yum</code>\xa0 源安装的 openssl 的最高版本是 1.0.1），所以需要手动更新 openssl。</p>\n<p dir="auto">对于 openssl 版本的选择，建议至少选择 1.1.1+ 版本：</p>\n<ol dir="auto">\n<li>urllib3 v2.0 only supports OpenSSL 1.1.1+, currently the \'ssl\' module is compiled with \'OpenSSL 1.0.2k-fips  26 Jan 2017\'. See: <a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="824222127" data-permission-text="Title is private" data-url="https://github.com/urllib3/urllib3/issues/2168" data-hovercard-type="issue" data-hovercard-url="/urllib3/urllib3/issues/2168/hovercard" href="https://github.com/urllib3/urllib3/issues/2168">urllib3/urllib3#2168</a></li>\n<li><strong>Python requires an OpenSSL 1.0.2 or 1.1 compatible libssl with X509_VERIFY_PARAM_set1_host().</strong></li>\n</ol>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# 下载\nwget http://www.openssl.org/source/openssl-1.1.1.tar.gz\n\n# 解压缩\ntar -zxvf openssl-1.1.1.tar.gz\n\n# 进入目录安装\ncd openssl-1.1.1\n\n# 进行配置下，自定义\n./config --prefix=/home/shenweiyan/software/openssl-1.1.1 shared zlib\n\n# 编译并安装\nmake &amp;&amp; make install\n\n# 配置到用户环境变量，随处使用\necho &quot;export LD_LIBRARY_PATH=/home/shenweiyan/software/openssl-1.1.1/lib:$LD_LIBRARY_PATH&quot; &gt;&gt; $HOME/.bashrc\n\n# 是环境变量配置生效\nsource $HOME/.bashrc"><pre class="notranslate"><span class="pl-c"><span class="pl-c">#</span> 下载</span>\nwget http://www.openssl.org/source/openssl-1.1.1.tar.gz\n\n<span class="pl-c"><span class="pl-c">#</span> 解压缩</span>\ntar -zxvf openssl-1.1.1.tar.gz\n\n<span class="pl-c"><span class="pl-c">#</span> 进入目录安装</span>\n<span class="pl-c1">cd</span> openssl-1.1.1\n\n<span class="pl-c"><span class="pl-c">#</span> 进行配置下，自定义</span>\n./config --prefix=/home/shenweiyan/software/openssl-1.1.1 shared zlib\n\n<span class="pl-c"><span class="pl-c">#</span> 编译并安装</span>\nmake <span class="pl-k">&amp;&amp;</span> make install\n\n<span class="pl-c"><span class="pl-c">#</span> 配置到用户环境变量，随处使用</span>\n<span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span>export LD_LIBRARY_PATH=/home/shenweiyan/software/openssl-1.1.1/lib:<span class="pl-smi">$LD_LIBRARY_PATH</span><span class="pl-pds">"</span></span> <span class="pl-k">&gt;&gt;</span> <span class="pl-smi">$HOME</span>/.bashrc\n\n<span class="pl-c"><span class="pl-c">#</span> 是环境变量配置生效</span>\n<span class="pl-c1">source</span> <span class="pl-smi">$HOME</span>/.bashrc</pre></div>\n<p dir="auto"><strong>请注意：</strong></p>\n<ol dir="auto">\n<li><strong>openssl</strong>\xa0编译（config）的时候 <strong>必须要加上 shared\xa0 参数</strong>，否者源码安装 Python 即使添加了 <code class="notranslate">--with-openssl</code>\xa0的自定义路径，依然会导致 <code class="notranslate">Could not build the ssl module!</code>\xa0报错！</li>\n<li>从 <a href="https://www.openssl.org/source/" rel="nofollow">https://www.openssl.org/source/</a>\xa0下载的源码 openssl-1.0.2s、openssl-1.0.2m，包括 \xa0CentOS-7.5 使用 <code class="notranslate">yum</code>\xa0安装的最高版本的 openssl-1.0.2k 目前发现依然会导致 <code class="notranslate">Could not build the ssl module</code>\xa0，建议从 <a href="https://www.openssl.org/source/old/" rel="nofollow">https://www.openssl.org/source/old/</a>\xa0下载 1.1.1 的源码编译安装。</li>\n</ol>\n<p dir="auto">最后，在 Python 执行 <code class="notranslate">configure</code> 的时候指定 openssl 的相关参数：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="./configure ... \\\n    --with-openssl=/home/shenweiyan/software/openssl-1.1.1 \\\n    --with-openssl-rpath=/home/shenweiyan/software/openssl-1.1.1/lib \\"><pre class="notranslate"><code class="notranslate">./configure ... \\\n    --with-openssl=/home/shenweiyan/software/openssl-1.1.1 \\\n    --with-openssl-rpath=/home/shenweiyan/software/openssl-1.1.1/lib \\\n</code></pre></div>\n<h3 dir="auto">_tkinter</h3>\n<p dir="auto">Tkinter 模块缺失是一个比较棘手的问题，为此专门写了一篇文章来介绍这个问题。</p>\n<p dir="auto">具体请参考：<a href="https://github.com/shenweiyan/Knowledge-Garden/discussions/12" data-hovercard-type="discussion" data-hovercard-url="/shenweiyan/Digital-Garden/discussions/12/hovercard">Python 中 tkinter 源码安装使用与中文乱码 - Knowledge-Garden#12</a></p>\n<h3 dir="auto">_dbm</h3>\n<p dir="auto"><code class="notranslate">_dbm</code> 和 <code class="notranslate">_gdbm</code> 的模块缺失可以通过下面手动的方法解决。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="wget https://ftp.gnu.org/gnu/gdbm/gdbm-1.23.tar.gz\ntar -zxvf gdbm-1.23.tar.gz\n./configure --prefix=/home/shenweiyan/software/gdbm-1.23 --enable-libgdbm-compat  --enable-debug\nmake &amp;&amp; make install"><pre class="notranslate"><code class="notranslate">wget https://ftp.gnu.org/gnu/gdbm/gdbm-1.23.tar.gz\ntar -zxvf gdbm-1.23.tar.gz\n./configure --prefix=/home/shenweiyan/software/gdbm-1.23 --enable-libgdbm-compat  --enable-debug\nmake &amp;&amp; make install\n</code></pre></div>\n<p dir="auto">最后，增加环境变量，并调整 Python 执行 <code class="notranslate">configure</code> 时的参数：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="export PATH=/home/shenweiyan/software/gdbm-1.23/bin:$PATH\nexport LD_LIBRARY_PATH=/home/shenweiyan/software/gdbm-1.23/lib:$LD_LIBRARY_PATH\n\n./configure ... \\\n    LDFLAGS=&quot;-L/home/shenweiyan/software/gdbm-1.23/lib&quot; \\\n    CPPFLAGS=&quot;-I/home/shenweiyan/software/gdbm-1.23/include&quot;"><pre class="notranslate"><code class="notranslate">export PATH=/home/shenweiyan/software/gdbm-1.23/bin:$PATH\nexport LD_LIBRARY_PATH=/home/shenweiyan/software/gdbm-1.23/lib:$LD_LIBRARY_PATH\n\n./configure ... \\\n    LDFLAGS="-L/home/shenweiyan/software/gdbm-1.23/lib" \\\n    CPPFLAGS="-I/home/shenweiyan/software/gdbm-1.23/include"\n</code></pre></div>\n<h3 dir="auto">_lzma</h3>\n<p dir="auto">正常情况下，下面的方法可以解决该问题（如果您有 root 权限的话）。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# For ubuntu:\n$ sudo apt-get install liblzma-dev\n\n# For centos:\n$ yum install xz-devel"><pre class="notranslate"><span class="pl-c"><span class="pl-c">#</span> For ubuntu:</span>\n$ sudo apt-get install liblzma-dev\n\n<span class="pl-c"><span class="pl-c">#</span> For centos:</span>\n$ yum install xz-devel</pre></div>\n<p dir="auto">普通用户可以手动安装解决：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ wget https://tukaani.org/xz/xz-5.2.5.tar.gz --no-check-certificat\n$ tar zvxf xz-5.2.5.tar.gz\n$ cd xz-5.2.5\n$ ./configure --prefix=/home/shenweiyan/software/xz-5.2.5\n$ make\n$ make install"><pre class="notranslate">$ wget https://tukaani.org/xz/xz-5.2.5.tar.gz --no-check-certificat\n$ tar zvxf xz-5.2.5.tar.gz\n$ <span class="pl-c1">cd</span> xz-5.2.5\n$ ./configure --prefix=/home/shenweiyan/software/xz-5.2.5\n$ make\n$ make install</pre></div>\n<p dir="auto">最后，配置环境：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ export LD_LIBRARY_PATH=/home/shenweiyan/software/xz-5.2.5/lib:$LD_LIBRARY_PATH"><pre class="notranslate">$ <span class="pl-k">export</span> LD_LIBRARY_PATH=/home/shenweiyan/software/xz-5.2.5/lib:<span class="pl-smi">$LD_LIBRARY_PATH</span></pre></div>\n<h3 dir="auto">_ctypes</h3>\n<p dir="auto">在 CentOS 6.x 安装 <code class="notranslate">libffi-devel</code>\xa0 的时候出现以下问题：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ yum install libffi-devel\nLoaded plugins: product-id, refresh-packagekit, search-disabled-repos, security, subscription-manager\nThis system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.\nSetting up Install Process\ncdrom                                                                                                                                         | 4.1 kB     00:00 ...\nNo package libffi-devel available.\nError: Nothing to do"><pre class="notranslate">$ yum install libffi-devel\nLoaded plugins: product-id, refresh-packagekit, search-disabled-repos, security, subscription-manager\nThis system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.\nSetting up Install Process\ncdrom                                                                                                                                         <span class="pl-k">|</span> 4.1 kB     00:00 ...\nNo package libffi-devel available.\nError: Nothing to <span class="pl-k">do</span></pre></div>\n<p dir="auto">可以使用下面的方法安装：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="[root@log01 ~]# rpm -ivh http://mirror.centos.org/centos/6/os/x86_64/Packages/libffi-devel-3.0.5-3.2.el6.x86_64.rpm\nRetrieving http://mirror.centos.org/centos/6/os/x86_64/Packages/libffi-devel-3.0.5-3.2.el6.x86_64.rpm\nwarning: /var/tmp/rpm-tmp.V9ihbu: Header V3 RSA/SHA256 Signature, key ID c105b9de: NOKEY\nPreparing...                ########################################### [100%]\n   1:libffi-devel           ########################################### [100%]\n[root@log01 ~]# rpm -qa|grep libffi\nlibffi-3.0.5-3.2.el6.x86_64\nlibffi-devel-3.0.5-3.2.el6.x86_64"><pre class="notranslate">[root@log01 <span class="pl-k">~</span>]<span class="pl-c"><span class="pl-c">#</span> rpm -ivh http://mirror.centos.org/centos/6/os/x86_64/Packages/libffi-devel-3.0.5-3.2.el6.x86_64.rpm</span>\nRetrieving http://mirror.centos.org/centos/6/os/x86_64/Packages/libffi-devel-3.0.5-3.2.el6.x86_64.rpm\nwarning: /var/tmp/rpm-tmp.V9ihbu: Header V3 RSA/SHA256 Signature, key ID c105b9de: NOKEY\nPreparing...                <span class="pl-c"><span class="pl-c">#</span>########################################## [100%]</span>\n   1:libffi-devel           <span class="pl-c"><span class="pl-c">#</span>########################################## [100%]</span>\n[root@log01 <span class="pl-k">~</span>]<span class="pl-c"><span class="pl-c">#</span> rpm -qa|grep libffi</span>\nlibffi-3.0.5-3.2.el6.x86_64\nlibffi-devel-3.0.5-3.2.el6.x86_64</pre></div>\n<p dir="auto">手动的源码方法安装如下：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ wget ftp://sourceware.org/pub/libffi/libffi-3.2.1.tar.gz\n$ tar zvxf libffi-3.2.1.tar.gz\n$ ./configure --prefix=/home/shenweiyan/software/libffi-3.2.1\n$ make\n$ make install"><pre class="notranslate">$ wget ftp://sourceware.org/pub/libffi/libffi-3.2.1.tar.gz\n$ tar zvxf libffi-3.2.1.tar.gz\n$ ./configure --prefix=/home/shenweiyan/software/libffi-3.2.1\n$ make\n$ make install</pre></div>\n<h3 dir="auto">pygraphviz</h3>\n<p dir="auto">如果你不需要使用 pygraphviz，可以不用管这个依赖。</p>\n<blockquote>\n<p dir="auto">PyGraphviz is a Python interface to the Graphviz graph layout and visualization package. With PyGraphviz you can create, edit, read, write, and draw graphs using Python to access the Graphviz graph data structure and layout algorithms.</p>\n</blockquote>\n<blockquote>\n<p dir="auto">PyGraphviz 是 Graphviz 图形布局和可视化包的 Python 接口。 借助 PyGraphviz，您可以使用 Python 创建、编辑、读取、写入和绘制图形，以访问 Graphviz 图形数据结构和布局算法。</p>\n</blockquote>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ /home/shenweiyan/software/Python-3.7.3/bin/pip3 install pygraphviz\nCollecting pygraphviz\n  Using cached https://files.pythonhosted.org/packages/7e/b1/d6d849ddaf6f11036f9980d433f383d4c13d1ebcfc3cd09bc845bda7e433/pygraphviz-1.5.zip\nInstalling collected packages: pygraphviz\n  Running setup.py install for pygraphviz ... error\n    Complete output from command /home/shenweiyan/software/Python-3.7.3/bin/python3.7 -u -c &quot;import setuptools, tokenize;__file__=\'/tmp/pip-install-_zdjdg0j/pygraphviz/setup.py\';f=getattr(tokenize, \'open\', open)(__file__);code=f.read().replace(\'\\r\\n\', \'\\n\');f.close();exec(compile(code, __file__, \'exec\'))&quot; install --record /tmp/pip-record-g0mz7lrq/install-record.txt --single-version-externally-managed --compile:\n    running install\n    Trying dpkg\n    Failed to find dpkg\n    Trying pkg-config\n    Package libcgraph was not found in the pkg-config search path.\n    Perhaps you should add the directory containing `libcgraph.pc\'\n    to the PKG_CONFIG_PATH environment variable\n    No package \'libcgraph\' found\n    Traceback (most recent call last):\n      File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;\n      File &quot;/tmp/pip-install-_zdjdg0j/pygraphviz/setup.py&quot;, line 93, in &lt;module&gt;\n        tests_require=[\'nose&gt;=1.3.7\', \'doctest-ignore-unicode&gt;=0.1.2\', \'mock&gt;=2.0.0\'],\n      File &quot;/home/shenweiyan/software/Python-3.7.3/lib/python3.7/site-packages/setuptools/__init__.py&quot;, line 145, in setup\n        return distutils.core.setup(**attrs)\n      File &quot;/home/shenweiyan/software/Python-3.7.3/lib/python3.7/distutils/core.py&quot;, line 148, in setup\n        dist.run_commands()\n      File &quot;/home/shenweiyan/software/Python-3.7.3/lib/python3.7/distutils/dist.py&quot;, line 966, in run_commands\n        self.run_command(cmd)\n      File &quot;/home/shenweiyan/software/Python-3.7.3/lib/python3.7/distutils/dist.py&quot;, line 985, in run_command\n        cmd_obj.run()\n      File &quot;/tmp/pip-install-_zdjdg0j/pygraphviz/setup_commands.py&quot;, line 44, in modified_run\n        self.include_path, self.library_path = get_graphviz_dirs()\n      File &quot;/tmp/pip-install-_zdjdg0j/pygraphviz/setup_extra.py&quot;, line 162, in get_graphviz_dirs\n        include_dirs, library_dirs = _try_configure(include_dirs, library_dirs, _pkg_config)\n      File &quot;/tmp/pip-install-_zdjdg0j/pygraphviz/setup_extra.py&quot;, line 117, in _try_configure\n        i, l = try_function()\n      File &quot;/tmp/pip-install-_zdjdg0j/pygraphviz/setup_extra.py&quot;, line 72, in _pkg_config\n        output = S.check_output([\'pkg-config\', \'--libs-only-L\', \'libcgraph\'])\n      File &quot;/home/shenweiyan/software/Python-3.7.3/lib/python3.7/subprocess.py&quot;, line 395, in check_output\n        **kwargs).stdout\n      File &quot;/home/shenweiyan/software/Python-3.7.3/lib/python3.7/subprocess.py&quot;, line 487, in run\n        output=stdout, stderr=stderr)\n    subprocess.CalledProcessError: Command \'[\'pkg-config\', \'--libs-only-L\', \'libcgraph\']\' returned non-zero exit status 1.\n\n    ----------------------------------------\nCommand &quot;/home/shenweiyan/software/Python-3.7.3/bin/python3.7 -u -c &quot;import setuptools, tokenize;__file__=\'/tmp/pip-install-_zdjdg0j/pygraphviz/setup.py\';f=getattr(tokenize, \'open\', open)(__file__);code=f.read().replace(\'\\r\\n\', \'\\n\');f.close();exec(compile(code, __file__, \'exec\'))&quot; install --record /tmp/pip-record-g0mz7lrq/install-record.txt --single-version-externally-managed --compile&quot; failed with error code 1 in /tmp/pip-install-_zdjdg0j/pygraphviz/\n"><pre class="notranslate">$ /home/shenweiyan/software/Python-3.7.3/bin/pip3 install pygraphviz\nCollecting pygraphviz\n  Using cached https://files.pythonhosted.org/packages/7e/b1/d6d849ddaf6f11036f9980d433f383d4c13d1ebcfc3cd09bc845bda7e433/pygraphviz-1.5.zip\nInstalling collected packages: pygraphviz\n  Running setup.py install <span class="pl-k">for</span> pygraphviz ... error\n    Complete output from <span class="pl-c1">command</span> /home/shenweiyan/software/Python-3.7.3/bin/python3.7 -u -c <span class="pl-s"><span class="pl-pds">"</span>import setuptools, tokenize;__file__=\'/tmp/pip-install-_zdjdg0j/pygraphviz/setup.py\';f=getattr(tokenize, \'open\', open)(__file__);code=f.read().replace(\'\\r\\n\', \'\\n\');f.close();exec(compile(code, __file__, \'exec\'))<span class="pl-pds">"</span></span> install --record /tmp/pip-record-g0mz7lrq/install-record.txt --single-version-externally-managed --compile:\n    running install\n    Trying dpkg\n    Failed to find dpkg\n    Trying pkg-config\n    Package libcgraph was not found <span class="pl-k">in</span> the pkg-config search path.\n    Perhaps you should add the directory containing <span class="pl-s"><span class="pl-pds">`</span>libcgraph.pc<span class="pl-s"><span class="pl-pds">\'</span></span></span>\n<span class="pl-s"><span class="pl-s">    to the PKG_CONFIG_PATH environment variable</span></span>\n<span class="pl-s"><span class="pl-s">    No package <span class="pl-pds">\'</span></span>libcgraph<span class="pl-s"><span class="pl-pds">\'</span> found</span></span>\n<span class="pl-s"><span class="pl-s">    Traceback (most recent call last):</span></span>\n<span class="pl-s"><span class="pl-s">      File "&lt;string&gt;", line 1, in &lt;module&gt;</span></span>\n<span class="pl-s"><span class="pl-s">      File "/tmp/pip-install-_zdjdg0j/pygraphviz/setup.py", line 93, in &lt;module&gt;</span></span>\n<span class="pl-s"><span class="pl-s">        tests_require=[<span class="pl-pds">\'</span></span>nose<span class="pl-k">&gt;</span>=1.3.7<span class="pl-s"><span class="pl-pds">\'</span>, <span class="pl-pds">\'</span></span>doctest-ignore-unicode<span class="pl-k">&gt;</span>=0.1.2<span class="pl-s"><span class="pl-pds">\'</span>, <span class="pl-pds">\'</span></span>mock<span class="pl-k">&gt;</span>=2.0.0<span class="pl-s"><span class="pl-pds">\'</span>],</span></span>\n<span class="pl-s"><span class="pl-s">      File "/home/shenweiyan/software/Python-3.7.3/lib/python3.7/site-packages/setuptools/__init__.py", line 145, in setup</span></span>\n<span class="pl-s"><span class="pl-s">        return distutils.core.setup(**attrs)</span></span>\n<span class="pl-s"><span class="pl-s">      File "/home/shenweiyan/software/Python-3.7.3/lib/python3.7/distutils/core.py", line 148, in setup</span></span>\n<span class="pl-s"><span class="pl-s">        dist.run_commands()</span></span>\n<span class="pl-s"><span class="pl-s">      File "/home/shenweiyan/software/Python-3.7.3/lib/python3.7/distutils/dist.py", line 966, in run_commands</span></span>\n<span class="pl-s"><span class="pl-s">        self.run_command(cmd)</span></span>\n<span class="pl-s"><span class="pl-s">      File "/home/shenweiyan/software/Python-3.7.3/lib/python3.7/distutils/dist.py", line 985, in run_command</span></span>\n<span class="pl-s"><span class="pl-s">        cmd_obj.run()</span></span>\n<span class="pl-s"><span class="pl-s">      File "/tmp/pip-install-_zdjdg0j/pygraphviz/setup_commands.py", line 44, in modified_run</span></span>\n<span class="pl-s"><span class="pl-s">        self.include_path, self.library_path = get_graphviz_dirs()</span></span>\n<span class="pl-s"><span class="pl-s">      File "/tmp/pip-install-_zdjdg0j/pygraphviz/setup_extra.py", line 162, in get_graphviz_dirs</span></span>\n<span class="pl-s"><span class="pl-s">        include_dirs, library_dirs = _try_configure(include_dirs, library_dirs, _pkg_config)</span></span>\n<span class="pl-s"><span class="pl-s">      File "/tmp/pip-install-_zdjdg0j/pygraphviz/setup_extra.py", line 117, in _try_configure</span></span>\n<span class="pl-s"><span class="pl-s">        i, l = try_function()</span></span>\n<span class="pl-s"><span class="pl-s">      File "/tmp/pip-install-_zdjdg0j/pygraphviz/setup_extra.py", line 72, in _pkg_config</span></span>\n<span class="pl-s"><span class="pl-s">        output = S.check_output([<span class="pl-pds">\'</span></span>pkg-config<span class="pl-s"><span class="pl-pds">\'</span>, <span class="pl-pds">\'</span></span>--libs-only-L<span class="pl-s"><span class="pl-pds">\'</span>, <span class="pl-pds">\'</span></span>libcgraph<span class="pl-s"><span class="pl-pds">\'</span>])</span></span>\n<span class="pl-s"><span class="pl-s">      File "/home/shenweiyan/software/Python-3.7.3/lib/python3.7/subprocess.py", line 395, in check_output</span></span>\n<span class="pl-s"><span class="pl-s">        **kwargs).stdout</span></span>\n<span class="pl-s"><span class="pl-s">      File "/home/shenweiyan/software/Python-3.7.3/lib/python3.7/subprocess.py", line 487, in run</span></span>\n<span class="pl-s"><span class="pl-s">        output=stdout, stderr=stderr)</span></span>\n<span class="pl-s"><span class="pl-s">    subprocess.CalledProcessError: Command <span class="pl-pds">\'</span></span>[<span class="pl-s"><span class="pl-pds">\'</span>pkg-config<span class="pl-pds">\'</span></span>, <span class="pl-s"><span class="pl-pds">\'</span>--libs-only-L<span class="pl-pds">\'</span></span>, <span class="pl-s"><span class="pl-pds">\'</span>libcgraph<span class="pl-pds">\'</span></span>]<span class="pl-s"><span class="pl-pds">\'</span> returned non-zero exit status 1.</span></span>\n<span class="pl-s"><span class="pl-s"></span></span>\n<span class="pl-s"><span class="pl-s">    ----------------------------------------</span></span>\n<span class="pl-s"><span class="pl-s">Command "/home/shenweiyan/software/Python-3.7.3/bin/python3.7 -u -c "import setuptools, tokenize;__file__=<span class="pl-pds">\'</span></span>/tmp/pip-install-_zdjdg0j/pygraphviz/setup.py<span class="pl-s"><span class="pl-pds">\'</span>;f=getattr(tokenize, <span class="pl-pds">\'</span></span>open<span class="pl-s"><span class="pl-pds">\'</span>, open)(__file__);code=f.read().replace(<span class="pl-pds">\'</span></span><span class="pl-cce">\\r\\n</span><span class="pl-s"><span class="pl-pds">\'</span>, <span class="pl-pds">\'</span></span><span class="pl-cce">\\n</span><span class="pl-s"><span class="pl-pds">\'</span>);f.close();exec(compile(code, __file__, <span class="pl-pds">\'</span></span>exec<span class="pl-s"><span class="pl-pds">\'</span>))" install --record /tmp/pip-record-g0mz7lrq/install-record.txt --single-version-externally-managed --compile" failed with error code 1 in /tmp/pip-install-_zdjdg0j/pygraphviz/</span></span>\n<span class="pl-s"><span class="pl-s"></span></span></pre></div>\n<p dir="auto">参考：《<a href="https://github.com/pygraphviz/pygraphviz/issues/11" data-hovercard-type="issue" data-hovercard-url="/pygraphviz/pygraphviz/issues/11/hovercard">Installation:fatal error: \'graphviz/cgraph.h\' file not found</a>》</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ wget https://graphviz.gitlab.io/pub/graphviz/stable/SOURCES/graphviz.tar.gz\n$ tar zvxf graphviz.tar.gz\n$ cd graphviz-2.40.1\n$ ./configure --prefix=/home/shenweiyan/software/graphviz-2.40.1\n$ make &amp;&amp; make install"><pre class="notranslate">$ wget https://graphviz.gitlab.io/pub/graphviz/stable/SOURCES/graphviz.tar.gz\n$ tar zvxf graphviz.tar.gz\n$ <span class="pl-c1">cd</span> graphviz-2.40.1\n$ ./configure --prefix=/home/shenweiyan/software/graphviz-2.40.1\n$ make <span class="pl-k">&amp;&amp;</span> make install</pre></div>\n<p dir="auto">推荐把安装好的 graphviz 添加到环境变量，这样可以避免运行过程中出现：<strong>"pygraphviz/graphviz_wrap.c:2987:29: fatal error: graphviz/cgraph.h: No such file or directory"</strong> 无法找到头文件的异常。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="export PKG_CONFIG_PATH=/home/shenweiyan/software/graphviz-2.40.1/lib/pkgconfig:$PKG_CONFIG_PATH\nexport LD_LIBRARY_PATH=/home/shenweiyan/software/graphviz-2.40.1/lib:$LD_LIBRARY_PATH\nexport C_INCLUDE_PATH=/home/shenweiyan/software/graphviz-2.40.1/include:$C_INCLUDE_PATH\nexport CPLUS_INCLUDE_PATH=/home/shenweiyan/software/graphviz-2.40.1/include:$CPLUS_INCLUDE_PATH"><pre class="notranslate"><span class="pl-k">export</span> PKG_CONFIG_PATH=/home/shenweiyan/software/graphviz-2.40.1/lib/pkgconfig:<span class="pl-smi">$PKG_CONFIG_PATH</span>\n<span class="pl-k">export</span> LD_LIBRARY_PATH=/home/shenweiyan/software/graphviz-2.40.1/lib:<span class="pl-smi">$LD_LIBRARY_PATH</span>\n<span class="pl-k">export</span> C_INCLUDE_PATH=/home/shenweiyan/software/graphviz-2.40.1/include:<span class="pl-smi">$C_INCLUDE_PATH</span>\n<span class="pl-k">export</span> CPLUS_INCLUDE_PATH=/home/shenweiyan/software/graphviz-2.40.1/include:<span class="pl-smi">$CPLUS_INCLUDE_PATH</span></pre></div>\n<p dir="auto">如果 graphviz 添加到环境变量， <code class="notranslate">pygraphviz</code>\xa0的 python 包可以参考下面的方法安装：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ /home/shenweiyan/software/Python-3.7.3/bin/pip3 install --global-option=build_ext --global-option=&quot;-I/home/shenweiyan/software/graphviz-2.40.1/include&quot; --global-option=&quot;-L/home/shenweiyan/software/graphviz-2.40.1/lib&quot; pygraphviz\n/home/shenweiyan/software/Python-3.7.3/lib/python3.7/site-packages/pip/_internal/commands/install.py:207: UserWarning: Disabling all use of wheels due to the use of --build-options / --global-options / --install-options.\n  cmdoptions.check_install_build_global(options)\nCollecting pygraphviz\n  Using cached https://files.pythonhosted.org/packages/7e/b1/d6d849ddaf6f11036f9980d433f383d4c13d1ebcfc3cd09bc845bda7e433/pygraphviz-1.5.zip\nInstalling collected packages: pygraphviz\n  Running setup.py install for pygraphviz ... done\nSuccessfully installed pygraphviz-1.5"><pre class="notranslate">$ /home/shenweiyan/software/Python-3.7.3/bin/pip3 install --global-option=build_ext --global-option=<span class="pl-s"><span class="pl-pds">"</span>-I/home/shenweiyan/software/graphviz-2.40.1/include<span class="pl-pds">"</span></span> --global-option=<span class="pl-s"><span class="pl-pds">"</span>-L/home/shenweiyan/software/graphviz-2.40.1/lib<span class="pl-pds">"</span></span> pygraphviz\n/home/shenweiyan/software/Python-3.7.3/lib/python3.7/site-packages/pip/_internal/commands/install.py:207: UserWarning: Disabling all use of wheels due to the use of --build-options / --global-options / --install-options.\n  cmdoptions.check_install_build_global(options)\nCollecting pygraphviz\n  Using cached https://files.pythonhosted.org/packages/7e/b1/d6d849ddaf6f11036f9980d433f383d4c13d1ebcfc3cd09bc845bda7e433/pygraphviz-1.5.zip\nInstalling collected packages: pygraphviz\n  Running setup.py install <span class="pl-k">for</span> pygraphviz ... <span class="pl-k">done</span>\nSuccessfully installed pygraphviz-1.5</pre></div>\n<h2 dir="auto">编译安装</h2>\n<p dir="auto">这里的编译安装，以 Python-3.11.6 为示例。</p>\n<p dir="auto">第一，下载 Python 源码，解压。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# 官网下载地址 https://www.python.org/downloads\nwget https://www.python.org/ftp/python/3.11.6/Python-3.11.6.tgz\n\n# 解压到指定目录\ntar zvxf Python-3.11.6.tgz -C /usr/local/src"><pre class="notranslate"><span class="pl-c"><span class="pl-c">#</span> 官网下载地址 https://www.python.org/downloads</span>\nwget https://www.python.org/ftp/python/3.11.6/Python-3.11.6.tgz\n\n<span class="pl-c"><span class="pl-c">#</span> 解压到指定目录</span>\ntar zvxf Python-3.11.6.tgz -C /usr/local/src</pre></div>\n<p dir="auto">第二，进入解压的源码路径，编译 Python 源码。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ export PKG_CONFIG_PATH=/home/shenweiyan/software/libffi-3.2.1/lib/pkgconfig:$PKG_CONFIG_PATH\n$ export PKG_CONFIG_PATH=/home/shenweiyan/software/graphviz-2.40.1/lib/pkgconfig:$PKG_CONFIG_PATH\n\n$ export LD_LIBRARY_PATH=/home/shenweiyan/software/libffi-3.2.1/lib64:$LD_LIBRARY_PATH\n$ export LD_LIBRARY_PATH=/home/shenweiyan/software/graphviz-2.40.1/lib:$LD_LIBRARY_PATH\n$ export LD_LIBRARY_PATH=/home/shenweiyan/software/openssl-1.1.1/lib:$LD_LIBRARY_PATH\n$ export LD_LIBRARY_PATH=/home/shenweiyan/software/sqlite-3.36.0/lib:$LD_LIBRARY_PATH\n$ export LD_LIBRARY_PATH=/home/shenweiyan/software/gdbm-1.23/lib:$LD_LIBRARY_PATH\n$ export LD_LIBRARY_PATH=/home/shenweiyan/software/ActiveTcl-8.6.9/lib:$LD_LIBRARY_PATH\n\n$ export TCLTK_LIBS=&quot;-L/home/shenweiyan/software/ActiveTcl-8.6.9/lib -ltcl8.6 -ltk8.6&quot;\n$ export TCLTK_CFLAGS=&quot;-I/home/shenweiyan/software/ActiveTcl-8.6.9/include&quot;\n\n$ ./configure \\\n--enable-optimizations \\\n--prefix=/home/shenweiyan/software/Python-3.11.6 \\\n--with-openssl=/home/shenweiyan/software/openssl-1.1.1 \\\n--with-openssl-rpath=/home/shenweiyan/software/openssl-1.1.1/lib \\\nCC=/home/shenweiyan/software/gcc-7.3.0/bin/gcc \\\nCXX=/home/shenweiyan/software/gcc-7.3.0/bin/c++ \\\nLDFLAGS=&quot;-L/home/shenweiyan/software/libffi-3.2.1/lib64 \\\n         -L/home/shenweiyan/software/graphviz-2.40.1/lib \\\n         -L/RiboBio/home/shenweiyan/software/sqlite-3.36.0/lib \\\n         -L/home/shenweiyan/software/gdbm-1.23/lib&quot; \\\nCPPFLAGS=&quot;-I/home/shenweiyan/software/graphviz-2.40.1/include \\\n          -I/home/shenweiyan/software/sqlite-3.36.0/include \\\n          -I/home/shenweiyan/software/gdbm-1.23/include&quot; \\\nPKG_CONFIG_PATH=&quot;/home/shenweiyan/software/libffi-3.2.1/lib/pkgconfig: \\\n                 /home/shenweiyan/software/graphviz-2.40.1/lib/pkgconfig&quot;"><pre class="notranslate">$ <span class="pl-k">export</span> PKG_CONFIG_PATH=/home/shenweiyan/software/libffi-3.2.1/lib/pkgconfig:<span class="pl-smi">$PKG_CONFIG_PATH</span>\n$ <span class="pl-k">export</span> PKG_CONFIG_PATH=/home/shenweiyan/software/graphviz-2.40.1/lib/pkgconfig:<span class="pl-smi">$PKG_CONFIG_PATH</span>\n\n$ <span class="pl-k">export</span> LD_LIBRARY_PATH=/home/shenweiyan/software/libffi-3.2.1/lib64:<span class="pl-smi">$LD_LIBRARY_PATH</span>\n$ <span class="pl-k">export</span> LD_LIBRARY_PATH=/home/shenweiyan/software/graphviz-2.40.1/lib:<span class="pl-smi">$LD_LIBRARY_PATH</span>\n$ <span class="pl-k">export</span> LD_LIBRARY_PATH=/home/shenweiyan/software/openssl-1.1.1/lib:<span class="pl-smi">$LD_LIBRARY_PATH</span>\n$ <span class="pl-k">export</span> LD_LIBRARY_PATH=/home/shenweiyan/software/sqlite-3.36.0/lib:<span class="pl-smi">$LD_LIBRARY_PATH</span>\n$ <span class="pl-k">export</span> LD_LIBRARY_PATH=/home/shenweiyan/software/gdbm-1.23/lib:<span class="pl-smi">$LD_LIBRARY_PATH</span>\n$ <span class="pl-k">export</span> LD_LIBRARY_PATH=/home/shenweiyan/software/ActiveTcl-8.6.9/lib:<span class="pl-smi">$LD_LIBRARY_PATH</span>\n\n$ <span class="pl-k">export</span> TCLTK_LIBS=<span class="pl-s"><span class="pl-pds">"</span>-L/home/shenweiyan/software/ActiveTcl-8.6.9/lib -ltcl8.6 -ltk8.6<span class="pl-pds">"</span></span>\n$ <span class="pl-k">export</span> TCLTK_CFLAGS=<span class="pl-s"><span class="pl-pds">"</span>-I/home/shenweiyan/software/ActiveTcl-8.6.9/include<span class="pl-pds">"</span></span>\n\n$ ./configure \\\n--enable-optimizations \\\n--prefix=/home/shenweiyan/software/Python-3.11.6 \\\n--with-openssl=/home/shenweiyan/software/openssl-1.1.1 \\\n--with-openssl-rpath=/home/shenweiyan/software/openssl-1.1.1/lib \\\nCC=/home/shenweiyan/software/gcc-7.3.0/bin/gcc \\\nCXX=/home/shenweiyan/software/gcc-7.3.0/bin/c++ \\\nLDFLAGS=<span class="pl-s"><span class="pl-pds">"</span>-L/home/shenweiyan/software/libffi-3.2.1/lib64 <span class="pl-cce">\\</span></span>\n<span class="pl-s">         -L/home/shenweiyan/software/graphviz-2.40.1/lib <span class="pl-cce">\\</span></span>\n<span class="pl-s">         -L/RiboBio/home/shenweiyan/software/sqlite-3.36.0/lib <span class="pl-cce">\\</span></span>\n<span class="pl-s">         -L/home/shenweiyan/software/gdbm-1.23/lib<span class="pl-pds">"</span></span> \\\nCPPFLAGS=<span class="pl-s"><span class="pl-pds">"</span>-I/home/shenweiyan/software/graphviz-2.40.1/include <span class="pl-cce">\\</span></span>\n<span class="pl-s">          -I/home/shenweiyan/software/sqlite-3.36.0/include <span class="pl-cce">\\</span></span>\n<span class="pl-s">          -I/home/shenweiyan/software/gdbm-1.23/include<span class="pl-pds">"</span></span> \\\nPKG_CONFIG_PATH=<span class="pl-s"><span class="pl-pds">"</span>/home/shenweiyan/software/libffi-3.2.1/lib/pkgconfig: <span class="pl-cce">\\</span></span>\n<span class="pl-s">                 /home/shenweiyan/software/graphviz-2.40.1/lib/pkgconfig<span class="pl-pds">"</span></span></pre></div>\n<ul dir="auto">\n<li><code class="notranslate">--enable-optimizations</code>\xa0 是优化选项（LTO，PGO\xa0 等）加上这个 \xa0flag\xa0 编译后，性能有 \xa010%\xa0 左右的优化，但是这会明显的增加编译时间。建议使用这个参数；</li>\n<li><code class="notranslate">--prefix</code>\xa0 声明安装路径；</li>\n<li>安装多个 python 的版本，如果不开启<code class="notranslate">--enable-shared</code>，指定不同路径即可。当开启<code class="notranslate">--enable-shared</code> 时，默认只有一个版本的 python。</li>\n<li>Python 3 编译可以在 configure 或者环境变量中指定 OpenSSL 安装路径进行编译的方式解决 OpenSSL 依赖，否则 <code class="notranslate">make</code>\xa0 过程可能出错。</li>\n</ul>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ make\n......\nThe following modules found by detect_modules() in setup.py, have been\nbuilt by the Makefile instead, as configured by the Setup files:\n_abc                  atexit                pwd\ntime\n\n\nFailed to build these modules:\n_ctypes               _hashlib              _ssl\n\n\nCould not build the ssl module!\nPython requires an OpenSSL 1.0.2 or 1.1 compatible libssl with X509_VERIFY_PARAM_set1_host().\nLibreSSL 2.6.4 and earlier do not provide the necessary APIs, https://github.com/libressl-portable/portable/issues/381\n\n......"><pre class="notranslate">$ make\n......\nThe following modules found by <span class="pl-en">detect_modules</span>() <span class="pl-k">in</span> setup.py, have been\nbuilt by the Makefile instead, as configured by the Setup files:\n_abc                  atexit                <span class="pl-c1">pwd</span>\n<span class="pl-k">time</span>\n\n\nFailed to build these modules:\n_ctypes               _hashlib              _ssl\n\n\nCould not build the ssl module<span class="pl-k">!</span>\nPython requires an OpenSSL 1.0.2 or 1.1 compatible libssl with <span class="pl-en">X509_VERIFY_PARAM_set1_host</span>().\nLibreSSL 2.6.4 and earlier <span class="pl-k">do</span> not provide the necessary APIs, https://github.com/libressl-portable/portable/issues/381\n\n......</pre></div>\n<ul dir="auto">\n<li><code class="notranslate">make</code>\xa0过程如果出现 <code class="notranslate">ModuleNotFoundError: No module named \'_ctypes\'</code>\xa0或者 <code class="notranslate">INFO: Could not locate ffi libs and/or headers</code>\xa0参考：<a href="https://groups.google.com/forum/#!topic/comp.lang.python/npv-wzmytzo" rel="nofollow">https://groups.google.com/forum/#!topic/comp.lang.python/npv-wzmytzo</a></li>\n</ul>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/433018eef098e1626516140ed29bbd28598a26a1ec62e8193a406d3bfc2fd778/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d636f6f6b626f6f6b2d696d672f466d4b376243654565476a66626c3155566476487977334a67385a6a2e706e67"><img src="https://camo.githubusercontent.com/433018eef098e1626516140ed29bbd28598a26a1ec62e8193a406d3bfc2fd778/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d636f6f6b626f6f6b2d696d672f466d4b376243654565476a66626c3155566476487977334a67385a6a2e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-cookbook-img/FmK7bCeEeGjfbl1UVdvHyw3Jg8Zj.png" style="max-width: 100%;"></a></p>\n<ul dir="auto">\n<li>对于低版本的 Python 如果指定\xa0<code class="notranslate">--with-openssl=DIR</code>\xa0依然无法解决 ssl 模块的问题，可以参考修改 Modules/Setup.dist 文件（默认这块是注释的，放开注释即可。这块功能是开启 SSL 模块，不然会出现安装完毕后，提示找不到 ssl 模块的错误）再执行 configure，修改内容如下：</li>\n</ul>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Socket module helper for SSL support; you must comment out the other\n# socket line above, and possibly edit the SSL variable:\nSSL=/usr/local/ssl\n_ssl _ssl.c \\\n    -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \\\n    -L$(SSL)/lib -lssl -lcrypto"><pre class="notranslate"><span class="pl-c"><span class="pl-c">#</span> Socket module helper for SSL support; you must comment out the other</span>\n<span class="pl-c"><span class="pl-c">#</span> socket line above, and possibly edit the SSL variable:</span>\nSSL=/usr/local/ssl\n_ssl _ssl.c \\\n    -DUSE_SSL -I<span class="pl-s"><span class="pl-pds">$(</span>SSL<span class="pl-pds">)</span></span>/include -I<span class="pl-s"><span class="pl-pds">$(</span>SSL<span class="pl-pds">)</span></span>/include/openssl \\\n    -L<span class="pl-s"><span class="pl-pds">$(</span>SSL<span class="pl-pds">)</span></span>/lib -lssl -lcrypto</pre></div>\n<p dir="auto">第三，Makefile 生后依次在当前路径执行编译和安装命令。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="make &amp;&amp; make install"><pre class="notranslate">make <span class="pl-k">&amp;&amp;</span> make install</pre></div>\n<p dir="auto">第四，安装完成。以上命令执行完毕，且无报错的情况下，我们将默认 python 换将切换至 3.11.6（一般不建议替换，个人建议把自定义安装的 Python bin 路径添加到 PATH 环境变量即可）：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# 替换系统自带的 python（不建议）\nmv /usr/bin/python /usr/bin/python2\nln -s /home/shenweiyan/software/Python-3.11.6/bin/python3 /usr/bin/python3\n\n# 添加新 Python 到 PATH 环境变量（建议）\necho &quot;export PATH=/home/shenweiyan/software/Python-3.11.6/bin:$PATH&quot; &gt;&gt;~/.bashrc\nsource ~/.bashrc"><pre class="notranslate"><span class="pl-c"><span class="pl-c">#</span> 替换系统自带的 python（不建议）</span>\nmv /usr/bin/python /usr/bin/python2\nln -s /home/shenweiyan/software/Python-3.11.6/bin/python3 /usr/bin/python3\n\n<span class="pl-c"><span class="pl-c">#</span> 添加新 Python 到 PATH 环境变量（建议）</span>\n<span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span>export PATH=/home/shenweiyan/software/Python-3.11.6/bin:<span class="pl-smi">$PATH</span><span class="pl-pds">"</span></span> <span class="pl-k">&gt;&gt;</span>~/.bashrc\n<span class="pl-c1">source</span> <span class="pl-k">~</span>/.bashrc</pre></div>\n<p dir="auto">运行命令 <code class="notranslate">python -V</code>\xa0，查看是否出现 3.11.6\xa0 的版本，出现即为安装成功。</p>\n<h2 dir="auto">其他工具</h2>\n<p dir="auto">Python &gt;= 3.10 在安装时候，默认会同时安装 <strong>pip3</strong>！如果你的 python &lt; 3.10，可以参考下面的方法安装 pip。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# 下载 setuptools 和 pip 安装程序\ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\npython3 get-pip.py"><pre class="notranslate"><span class="pl-c"><span class="pl-c">#</span> 下载 setuptools 和 pip 安装程序</span>\ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\npython3 get-pip.py</pre></div>\n<p dir="auto">至此，CentOS Linux release\xa06.5 下的 python-3.11.6\xa0 全部安装完成。如果在安装过程中出现其他的报错，建议把 error 关键信息直接复制到 Google 进行检索，参考其他人的解决方法。</p>\n<h2 dir="auto">其他异常与解决</h2>\n<h3 dir="auto">_bz2</h3>\n<ul dir="auto">\n<li>系统：CentOS Linux release 7.7.1908 (Core)</li>\n<li>GCC：gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)</li>\n</ul>\n<p dir="auto">在 CentOS 7 中安装 Python-3.6.9 中发现 make 过程中一直提示："<strong>ModuleNotFoundError: No module named \'_bz2\'</strong>"，尽管 <code class="notranslate">sudo yum install bzip2 bzip2-devel</code>\xa0 已经安装了 bzip2 的依赖，问题还是不得其解。最后参考 stackoverflow 上的《Correctly building local python3, with bz2 support》，终于解决问题，下面记录一下。<br>\n<a href="https://stackoverflow.com/questions/51149227/correctly-building-local-python3-with-bz2-support" rel="nofollow">Correctly building local python3, with bz2 support</a></p>\n<p dir="auto"><strong>手动安装 bzip2：</strong></p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="wget https://nchc.dl.sourceforge.net/project/bzip2/bzip2-1.0.6.tar.gz\ntar zvxf bzip2-1.0.6.tar.gz\ncd bzip2-1.0.6\nmake -f Makefile_libbz2_so  # 这一步是生成 libbz2.so.1.0.6 的动态库文件\nmake\nmake install PREFIX=/usr/local/software/bzip2-1.0.6\ncp libbz2.so.1.0.6 /usr/local/software/bzip2-1.0.6/lib/"><pre class="notranslate">wget https://nchc.dl.sourceforge.net/project/bzip2/bzip2-1.0.6.tar.gz\ntar zvxf bzip2-1.0.6.tar.gz\n<span class="pl-c1">cd</span> bzip2-1.0.6\nmake -f Makefile_libbz2_so  <span class="pl-c"><span class="pl-c">#</span> 这一步是生成 libbz2.so.1.0.6 的动态库文件</span>\nmake\nmake install PREFIX=/usr/local/software/bzip2-1.0.6\ncp libbz2.so.1.0.6 /usr/local/software/bzip2-1.0.6/lib/</pre></div>\n<p dir="auto"><strong>几点说明：</strong></p>\n<ul dir="auto">\n<li>bzip2 的官网 \xa0<a href="http://www.bzip.org/" rel="nofollow">http://www.bzip.org/</a>\xa0 已经把 bzip2 的源码下载链接放到了 \xa0SourceForge，网络上一些从 \xa0<a href="http://www.bzip.org/1.0.6/bzip2-1.0.6.tar.gz" rel="nofollow">http://www.bzip.org/1.0.6/bzip2-1.0.6.tar.gz</a>\xa0 下载的做法已经失效。</li>\n<li><a href="https://sourceforge.net/projects/bzip2/files/" rel="nofollow">SourceForge</a> 上 bzip2 的最新版本还是 1.0.6（Last modified 2018-11-3），更高级版本的 bzip2 我也不知道是否存在，也不知道能不能用。</li>\n</ul>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/13569e2890ed297aa1040cb228ca558850c5bba31ee54b2c8c368d3744b91018/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d636f6f6b626f6f6b2d696d672f4676677847576c564a53784f43766758466f3942504f61334f446d352e706e67"><img src="https://camo.githubusercontent.com/13569e2890ed297aa1040cb228ca558850c5bba31ee54b2c8c368d3744b91018/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d636f6f6b626f6f6b2d696d672f4676677847576c564a53784f43766758466f3942504f61334f446d352e706e67" alt="image.png" data-canonical-src="https://shub.weiyan.tech/yuque/elog-cookbook-img/FvgxGWlVJSxOCvgXFo9BPOa3ODm5.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><strong>编译安装 Python-3.6.9：</strong></p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ wget https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgz\n$ tar zvxf Python-3.6.9.tgz\n$ cd Python-3.6.9\n$ ./configure --enable-optimizations --prefix=/usr/local/software/python-3.6 CFLAGS=&quot;-I/usr/local/software/bzip2-1.0.6/include&quot; LDFLAGS=&quot;-L/usr/local/software/bzip2-1.0.6/lib&quot;\n$ make\n$ make install"><pre class="notranslate">$ wget https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgz\n$ tar zvxf Python-3.6.9.tgz\n$ <span class="pl-c1">cd</span> Python-3.6.9\n$ ./configure --enable-optimizations --prefix=/usr/local/software/python-3.6 CFLAGS=<span class="pl-s"><span class="pl-pds">"</span>-I/usr/local/software/bzip2-1.0.6/include<span class="pl-pds">"</span></span> LDFLAGS=<span class="pl-s"><span class="pl-pds">"</span>-L/usr/local/software/bzip2-1.0.6/lib<span class="pl-pds">"</span></span>\n$ make\n$ make install</pre></div>\n<ul dir="auto">\n<li>Python-3.6.9 中的 <code class="notranslate">./configure --help</code>\xa0中没有 <code class="notranslate">--with-openssl</code>\xa0参数！有点神奇，我也不知道原因。</li>\n<li>安装完成可以用 <code class="notranslate">from _bz2 import BZ2Compressor, BZ2Decompressor</code>\xa0测试一下 <code class="notranslate">_bz2</code>\xa0 是否可用。</li>\n</ul>\n<h2 dir="auto">参考资料</h2>\n<ol dir="auto">\n<li>行者无疆-ITer,《<a href="https://www.cnblogs.com/ITer-jack/p/8305912.html" rel="nofollow">python2.7 源码编译安装</a>》, 博客园</li>\n<li>Scott Frazer,《<a href="https://stackoverflow.com/questions/23548188/how-do-i-compile-python-3-4-with-custom-openssl" rel="nofollow">How do I compile Python 3.4 with custom OpenSSL?</a>》, Stack Overflow</li>\n</ol>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.3-折腾'}, 'labels': {'nodes': [{'name': '1.3.5-Python'}]}, 'comments': {'nodes': []}}, {'title': 'Python 中 tkinter 源码安装使用与中文乱码', 'number': 12, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/12', 'createdAt': '2023-11-02T02:24:22Z', 'lastEditedAt': '2025-02-26T05:18:33Z', 'updatedAt': '2025-02-26T05:18:33Z', 'body': '主要是因为下面这两个原因，所以决定从源码编译安装去折腾一下 tkinter，以下是一些记录。\r\n\r\n## _tkinter not found\r\n\r\nPython 3 源码编译安装，执行 `make` 过程中提示 `_tkinter not found`，如下：\r\n```bash\r\n$ make\r\n......\r\nPython build finished successfully!\r\nThe necessary bits to build these optional modules were not found:\r\n_tkinter \r\n```\r\n\r\n## 中文乱码\r\n\r\n使用 Anaconda 3（conda 4.5.11）的 tkinter python 包（conda install -c conda-forge tk）开发 GUI 界面程序过程中，发现 UI 界面出现的中文 Unicode 乱码一直没办法解决。\r\n\r\n```python\r\n#-*- coding: utf-8 -*-\r\n\r\nimport sys\r\n\r\nfrom tkinter import *\r\ntop=Tk()\r\ntop.wm_title("菜单")\r\ntop.geometry("800x600+300+100") # 创建一个菜单项，类似于导航栏\r\nmenubar=Menu(top) # 创建菜单项\r\nfmenu1=Menu(top)\r\n# 如果该菜单时顶层菜单的一个菜单项，则它添加的是下拉菜单的菜单\r\nfor item in [\'新建文件\', \'打开文件\',\'结果保存\']:\r\n    fmenu1.add_command(label=item)\r\n\r\nfmenu2=Menu(top)\r\nfor item in [\'程序设置\',\'程序运行\']:\r\n    fmenu2.add_command(label=item)\r\n\r\nfmenu3=Menu(top)\r\nfor item in [\'使用教程\', \'版权信息\', \'检查更新\']:\r\n    fmenu3.add_command(label=item)\r\n\r\n# add_cascade 的一个很重要的属性就是 menu 属性，它指明了要把那个菜单级联到该菜单项上\r\n# 当然，还必不可少的就是 label 属性，用于指定该菜单项的名称\r\nmenubar.add_cascade(label=\'文件\', menu=fmenu1)\r\nmenubar.add_cascade(label="程序", menu=fmenu2)\r\nmenubar.add_cascade(label="帮助", menu=fmenu3)\r\n\r\n# 最后可以用窗口的 menu 属性指定我们使用哪一个作为它的顶层菜单\r\ntop[\'menu\']=menubar\r\ntop.mainloop()\r\n```\r\n\r\n![](https://shub.weiyan.tech/yuque/elog-cookbook-img/Fh22i487OzvY-uSXvAuFs6rEXXvu.png)\r\n\r\n我们也可以确认一下是不是 Tk 本身的问题：\r\n```\r\necho \'pack [button .h -text "Hello, World! 显示中文" -command exit]\' | wish\r\n```\r\n- 正常显示\r\n  ![TK 正常显示](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/tk-ok.png)\r\n\r\n- 中文乱码\r\n  ![TK 中文乱码](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/tk-error.png)\r\n\r\n**一些参考资料：**\r\n\r\n- Python 3.x 中文编码转换的问题：<https://bbs.bccn.net/thread-479560-1-1.html>\r\n- Python 2.6 Tk 中文乱码解決方法：<http://blogkrogh.blogspot.com/2011/03/python-26-tk.html>\r\n- tkinter 乱码，pyqt4 乱码：<http://aboutweb.lofter.com/post/11743e_6f7e4a5>\r\n\r\n上面几种方法测试后，问题依然存在。在 google 上一番搜索和来回测试之后，发现了几点信息：\r\n\r\n- 有人说，可能是 tcl/tk 安装不完整造成的。\r\n- tcl/tk 重装后需要对 Python 重新编译 tkinter 才能起作用。\r\n- conda install -c conda-forge tk，虽然没有任何报错，python2 中 import tkinter 也正常，但 conda 的软件安装就像一个黑盒子，无法确认 tcl/tk 是否完整安装。\r\n- python 的 PyPI 仓库中是没有 tkinter 包的，想要使用 `pip install tkinter` 卸载或者重装都是行不通的。\r\n- 网上也有人说可以使用 `yum install python3-tk/python-tk` 解决，但对于本人来说，没用。\r\n\r\n## 什么是 tcl, tk, tkinter\r\n\r\n> The\xa0[tkinter](https://docs.python.org/3.6/library/tkinter.html#module-tkinter)\xa0package (“Tk interface”) is the standard Python interface to the Tk GUI toolkit. Both Tk and\xa0[tkinter](https://docs.python.org/3.6/library/tkinter.html#module-tkinter)\xa0are available on most Unix platforms, as well as on Windows systems. (Tk itself is not part of Python; it is maintained at ActiveState.)\r\n>\r\n> Running\xa0`python\xa0-m\xa0tkinter`\xa0from the command line should open a window demonstrating a simple Tk interface, letting you know that\xa0[tkinter](https://docs.python.org/3.6/library/tkinter.html#module-tkinter)\xa0is properly installed on your system, and also showing what version of Tcl/Tk is installed, so you can read the Tcl/Tk documentation specific to that version.\r\n>\r\n> From <https://docs.python.org/3/library/tkinter.html>\r\n\r\nTcl 是"工具控制语言（Tool Control Language）"的缩写。Tk 是 Tcl "图形工具箱" 的扩展，它提供各种标准的 GUI 接口项，以利于迅速进行高级应用程序开发。\r\n\r\ntkinter 包（"Tk 接口"）是 Tk GUI 工具包的标准 Python 接口。 Tk 和 \xa0tkinter 在大多数 Unix 平台以及 Windows 系统上都可用（Tk 本身不是 Python 的一部分，它在 ActiveState 中维护）。您可以通过从命令行运行 \xa0`python -m\xa0tkinter`来检查 \xa0tkinter 是否已正确安装在系统上。如果已经安装该命令会打开一个简单的 Tk 界面，该界面除了让我们知道 tkinter 已正确安装，并且还显示安装了哪个版本的 Tcl/Tk，因此我们可以阅读特定于该版本的 Tcl/Tk 文档。\r\n\r\n![](https://shub.weiyan.tech/yuque/elog-cookbook-img/FpWx6rSTKaQ1BXXPQJzchNbviKYd.png)\r\n\r\n如果 \xa0tkinter\xa0 没有安装，则会提示找不到该包（注意在 Python 2 中该包包名为 Tkinter，Python 3 中为 tkinter）：\r\n\r\n![](https://shub.weiyan.tech/yuque/elog-cookbook-img/FrRwzLFA1tIq2VfwS4p7i0dVLTjP.png)\r\n\r\n接下来我们将尝试在 Python 2/3 中安装 Tcl/Tk，并重新编译 Python 2/3，已完成 Tkinter 安装（tkinter 为 Python 的标准库，标准库的安装需要重新编译 Python ？）。\r\n\r\n## ActiveTcl 安装\r\n\r\nActiveTcl 是 ActiveState 发布的关于 Tcl/Tk 的发行版本，该发行版本包含了最新版本的 Tk 和 Tcl 程序，我们下载其免费的社区版本进行安装即可。\r\n\r\n参考下载链接：<https://www.activestate.com/products/activetcl/downloads/>\r\n参考安装教程：<https://tkdocs.com/tutorial/install.html>\r\n\r\n以下为 CentOS 6.5 下 **ActiveTcl-8.6.9** 的一些安装记录，仅作参考。\r\n\r\n```bash\r\n$ curl -fL "https://shenweiyan-generic.pkg.coding.net/btscl/activetcl/ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d.tar.gz?version=8.6.9.8609.2" -o ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d.tar.gz\r\n$ tar zvxf ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d.tar.gz\r\n$ cd ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d\r\n$ ./install.sh\r\n......\r\nCancel         [no]  => [RET]\r\nAccept License [yes] => \'A\' >>A\r\n\r\nPlease specify the installation directory.\r\nPath [/opt/ActiveTcl-8.6]: /home/shenweiyan/software/ActiveTcl-8.6.9\r\n\r\nPlease specify the directory for the demos.\r\nPath [/home/shenweiyan/software/ActiveTcl-8.6.9/demos]:\r\n\r\nPlease specify the runtime installation directory.\r\n\r\nThis is the directory the applications will see as their installation directory\r\nwhen searching for packages and libraries, instead of the directory the files\r\nwere copied to. In most circumstances this is the same as the installation\r\ndirectory chosen before.\r\nPath [/home/shenweiyan/software/ActiveTcl-8.6.9]:\r\n\r\nPress return to begin installation\r\n     Installation Directory:  /home/shenweiyan/software/ActiveTcl-8.6.9\r\n     Demos Directory:         /home/shenweiyan/software/ActiveTcl-8.6.9/demos\r\n     Runtime Directory:       See Installation Directory\r\nCancel => C\r\nNext   => [RET] >>\r\n\r\nInstalling ActiveTcl ...\r\n        Creating directory /home/shenweiyan/software/ActiveTcl-8.6.9/share ...\r\n        Creating directory /home/shenweiyan/software/ActiveTcl-8.6.9/share/man ...\r\n        ......\r\n\r\nPlease do not forget to extend your PATH and MANPATH variables to\r\nget access to the applications and manpages distributed with ActiveTcl.\r\n\r\nFor a csh or compatible perform\r\n    setenv PATH "/home/shenweiyan/software/ActiveTcl-8.6.9/bin:$PATH"\r\n\r\nFor a sh or similar perform\r\n    PATH="/home/shenweiyan/software/ActiveTcl-8.6.9/bin:$PATH"\r\n    export PATH\r\n\r\nSome shells (bash for example) allow\r\n    export PATH="/home/shenweiyan/software/ActiveTcl-8.6.9/bin:$PATH"\r\n\r\nSimilar changes are required for MANPATH\r\nFinish >>\r\n```\r\n\r\nActiveTcl 安装完成后，需要把 path 添加至环境变量（\\~/.bashrc）:\r\n```\r\nexport PATH="/home/shenweiyan/software/ActiveTcl-8.6.9/bin:$PATH"\r\n```\r\n\r\n## Tcl/Tk\r\n\r\n我们也可以直接去 <https://sourceforge.net/projects/tcl/files/Tcl/> 直接通过源码的方式去编译安装 Tcl/Tk，尤其是当你的系统版本比较低，需要低版本的 Tcl/Tk，这种方法会比较合适。\r\n\r\n以 tcl8.5.19-src.tar.gz/tk8.5.19-src.tar.gz 为例，下载完成后，直接解压，然后执行常规安装即可。\r\n```\r\ncd tcl8.5.19/unix\r\n./configure\r\nmake\r\nmake test\r\nmake install\r\n```\r\n\r\n## Python 重新编译安装\r\n\r\n参考：[What’s New In Python 3.11](https://docs.python.org/3/whatsnew/3.11.html) - doc.python.org\r\n\r\n> 📢 **注意：**\r\n>\r\n> 1. Python 3.11.x 起（如 Python-3.11.3）中的 `configure` 已经把 `--with-tcltk-includes`和`--with-tcltk-libs`这两个参数移除！并使用 `TCLTK_CFLAGS` 和 `TCLTK_LIBS` 替代！！！\r\n> 2. Python 3.10.x (及以下版本，如 Python-3.9.16) 以及 Python 2.x.x 在 `configure` 中 `--with-tcltk-includes`和`--with-tcltk-libs`都是有的，通过这两个参数可以解决 Tkinter 的问题！！！\r\n\r\n### Python 3\r\n\r\n这里以 Python-3.11.6 为例，参考 [Python 3.11.0 install doesn’t recognize homebrew Tcl/Tk due to --with-tcltk-libs, --with-tcltk-includes switches being removed from 3.11 - pyenv#2499](https://github.com/pyenv/pyenv/issues/2499)，在编译安装过程中使用 `TCLTK_CFLAGS` 和 `TCLTK_LIBS` 解决 `_tkinter` 缺失的问题。\r\n```\r\nexport TCLTK_LIBS="-L/home/shenweiyan/software/ActiveTcl-8.6.9/lib -ltcl8.6 -ltk8.6"  # 8.5.x 版本，需改为 -ltcl8.5 -ltk8.5\r\nexport TCLTK_CFLAGS="-I/home/shenweiyan/software/ActiveTcl-8.6.9/include"\r\n\r\ncd Python-3.11.6\r\n/configure --prefix=/home/shenweiyan/software/python-3.11.6 ......\r\nmake && make install\r\n```\r\n\r\n![python3-confiigure-tkinter-yes](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/python-3-tkinter.png)\r\n\r\n对于 Python 3.10.x (及以下版本，如 Python-3.9.18)，`configure` 中 `--with-tcltk-includes` 和 `--with-tcltk-libs` 的具体使用参考 <https://bugs.python.org/issue21887>：  \r\n   \r\n![tcltk-issue-21887-msg](https://kg.weiyan.cc/2024/10/tcltk-issue-21887-msg.webp)\r\n\r\n### Python 2\r\n\r\n想要在 Python 2.7 安装 Tkinter，需要在编译过程中通过 `--with-tcltk-includes` 和 `--with-tcltk-libs` 中指定 ActiveTcl 的头文件以及库所在路径。\r\n\r\n如果在执行编译安装过程中，出现无法找到 libXss.so.1 共享动态库报错：\r\n\r\n```bash\r\n$ tar zvxf Python-2.7.15.tgz\r\n$ cd Python-2.7.15\r\n$ ./configure --prefix=/usr/local/software/python-2.7 --with-tcltk-includes=\'-I/usr/local/software/ActiveTcl-8.6/include\' --with-tcltk-libs=\'-L/usr/local/software/ActiveTcl-8.6/lib -ltcl8.6 -ltk8.6\' --enable-optimizations\r\n$ make\r\n\r\n......\r\n\r\nwarning: building with the bundled copy of libffi is deprecated on this platform.  It will not be distributed with Python 3.7\r\n*** WARNING: renaming "_tkinter" since importing it failed: libXss.so.1: cannot open shared object file: No such file or directory\r\n\r\nPython build finished successfully!\r\nThe necessary bits to build these optional modules were not found:\r\n_dbm                  _gdbm\r\nTo find the necessary bits, look in setup.py in detect_modules() for the module\'s name.\r\n\r\nThe following modules found by detect_modules() in setup.py, have been\r\nbuilt by the Makefile instead, as configured by the Setup files:\r\natexit                pwd                   time\r\n\r\nFollowing modules built successfully but were removed because they could not be imported:\r\n_tkinter\r\n\r\nrunning build_scripts\r\n\r\n......\r\n```\r\n\r\nCentOS 下请参考以下解决方法：\r\n```\r\n$ sudo yum install libXScrnSaver libXScrnSaver-devel\r\n```\r\n\r\n## 调用 Tkinter\r\n\r\nPython 2/3 重新编译完后，执行一下下面的命令即可显示 Tk 的 ui 界面，以及相应的 Tcl/Tk 版本。\r\n```\r\npython2 -m Tkinter   # python 2\r\npython3 -m tkinter   # python 3\r\n```\r\n![python2-m-Tkinter](https://shub.weiyan.tech/yuque/elog-cookbook-img/FgBtb14ZgZFZXIRhOdt6efbYz7fd.png)\r\n\r\n这时候，我们重新运行开头的 GUI 界面程序，可以看到中文已经正常显示：\r\n![](https://shub.weiyan.tech/yuque/elog-cookbook-img/FqRHUXczPdHrQjFUXNQr_Cg_j2B4.png)\r\n\r\n## 参考资料\r\n\r\n- Download And Install Tcl: ActiveTcl，<https://www.activestate.com/products/activetcl/downloads/>\r\n- Installing Tk，<https://tkdocs.com/tutorial/install.html>\r\n- Python 下"No module named \\_tkinter"问题解决过程分析，<https://www.jianshu.com/p/0baa9657377f>\r\n- Python GUI 编程(Tkinter)文件对话框，<https://my.oschina.net/u/2245781/blog/661533>\r\n', 'bodyText': '主要是因为下面这两个原因，所以决定从源码编译安装去折腾一下 tkinter，以下是一些记录。\n_tkinter not found\nPython 3 源码编译安装，执行 make 过程中提示 _tkinter not found，如下：\n$ make\n......\nPython build finished successfully!\nThe necessary bits to build these optional modules were not found:\n_tkinter \n中文乱码\n使用 Anaconda 3（conda 4.5.11）的 tkinter python 包（conda install -c conda-forge tk）开发 GUI 界面程序过程中，发现 UI 界面出现的中文 Unicode 乱码一直没办法解决。\n#-*- coding: utf-8 -*-\n\nimport sys\n\nfrom tkinter import *\ntop=Tk()\ntop.wm_title("菜单")\ntop.geometry("800x600+300+100") # 创建一个菜单项，类似于导航栏\nmenubar=Menu(top) # 创建菜单项\nfmenu1=Menu(top)\n# 如果该菜单时顶层菜单的一个菜单项，则它添加的是下拉菜单的菜单\nfor item in [\'新建文件\', \'打开文件\',\'结果保存\']:\n    fmenu1.add_command(label=item)\n\nfmenu2=Menu(top)\nfor item in [\'程序设置\',\'程序运行\']:\n    fmenu2.add_command(label=item)\n\nfmenu3=Menu(top)\nfor item in [\'使用教程\', \'版权信息\', \'检查更新\']:\n    fmenu3.add_command(label=item)\n\n# add_cascade 的一个很重要的属性就是 menu 属性，它指明了要把那个菜单级联到该菜单项上\n# 当然，还必不可少的就是 label 属性，用于指定该菜单项的名称\nmenubar.add_cascade(label=\'文件\', menu=fmenu1)\nmenubar.add_cascade(label="程序", menu=fmenu2)\nmenubar.add_cascade(label="帮助", menu=fmenu3)\n\n# 最后可以用窗口的 menu 属性指定我们使用哪一个作为它的顶层菜单\ntop[\'menu\']=menubar\ntop.mainloop()\n\n我们也可以确认一下是不是 Tk 本身的问题：\necho \'pack [button .h -text "Hello, World! 显示中文" -command exit]\' | wish\n\n\n\n正常显示\n\n\n\n中文乱码\n\n\n\n一些参考资料：\n\nPython 3.x 中文编码转换的问题：https://bbs.bccn.net/thread-479560-1-1.html\nPython 2.6 Tk 中文乱码解決方法：http://blogkrogh.blogspot.com/2011/03/python-26-tk.html\ntkinter 乱码，pyqt4 乱码：http://aboutweb.lofter.com/post/11743e_6f7e4a5\n\n上面几种方法测试后，问题依然存在。在 google 上一番搜索和来回测试之后，发现了几点信息：\n\n有人说，可能是 tcl/tk 安装不完整造成的。\ntcl/tk 重装后需要对 Python 重新编译 tkinter 才能起作用。\nconda install -c conda-forge tk，虽然没有任何报错，python2 中 import tkinter 也正常，但 conda 的软件安装就像一个黑盒子，无法确认 tcl/tk 是否完整安装。\npython 的 PyPI 仓库中是没有 tkinter 包的，想要使用 pip install tkinter 卸载或者重装都是行不通的。\n网上也有人说可以使用 yum install python3-tk/python-tk 解决，但对于本人来说，没用。\n\n什么是 tcl, tk, tkinter\n\nThe\xa0tkinter\xa0package (“Tk interface”) is the standard Python interface to the Tk GUI toolkit. Both Tk and\xa0tkinter\xa0are available on most Unix platforms, as well as on Windows systems. (Tk itself is not part of Python; it is maintained at ActiveState.)\nRunning\xa0python\xa0-m\xa0tkinter\xa0from the command line should open a window demonstrating a simple Tk interface, letting you know that\xa0tkinter\xa0is properly installed on your system, and also showing what version of Tcl/Tk is installed, so you can read the Tcl/Tk documentation specific to that version.\nFrom https://docs.python.org/3/library/tkinter.html\n\nTcl 是"工具控制语言（Tool Control Language）"的缩写。Tk 是 Tcl "图形工具箱" 的扩展，它提供各种标准的 GUI 接口项，以利于迅速进行高级应用程序开发。\ntkinter 包（"Tk 接口"）是 Tk GUI 工具包的标准 Python 接口。 Tk 和 \xa0tkinter 在大多数 Unix 平台以及 Windows 系统上都可用（Tk 本身不是 Python 的一部分，它在 ActiveState 中维护）。您可以通过从命令行运行 \xa0python -m\xa0tkinter来检查 \xa0tkinter 是否已正确安装在系统上。如果已经安装该命令会打开一个简单的 Tk 界面，该界面除了让我们知道 tkinter 已正确安装，并且还显示安装了哪个版本的 Tcl/Tk，因此我们可以阅读特定于该版本的 Tcl/Tk 文档。\n\n如果 \xa0tkinter\xa0 没有安装，则会提示找不到该包（注意在 Python 2 中该包包名为 Tkinter，Python 3 中为 tkinter）：\n\n接下来我们将尝试在 Python 2/3 中安装 Tcl/Tk，并重新编译 Python 2/3，已完成 Tkinter 安装（tkinter 为 Python 的标准库，标准库的安装需要重新编译 Python ？）。\nActiveTcl 安装\nActiveTcl 是 ActiveState 发布的关于 Tcl/Tk 的发行版本，该发行版本包含了最新版本的 Tk 和 Tcl 程序，我们下载其免费的社区版本进行安装即可。\n参考下载链接：https://www.activestate.com/products/activetcl/downloads/\n参考安装教程：https://tkdocs.com/tutorial/install.html\n以下为 CentOS 6.5 下 ActiveTcl-8.6.9 的一些安装记录，仅作参考。\n$ curl -fL "https://shenweiyan-generic.pkg.coding.net/btscl/activetcl/ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d.tar.gz?version=8.6.9.8609.2" -o ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d.tar.gz\n$ tar zvxf ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d.tar.gz\n$ cd ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d\n$ ./install.sh\n......\nCancel         [no]  => [RET]\nAccept License [yes] => \'A\' >>A\n\nPlease specify the installation directory.\nPath [/opt/ActiveTcl-8.6]: /home/shenweiyan/software/ActiveTcl-8.6.9\n\nPlease specify the directory for the demos.\nPath [/home/shenweiyan/software/ActiveTcl-8.6.9/demos]:\n\nPlease specify the runtime installation directory.\n\nThis is the directory the applications will see as their installation directory\nwhen searching for packages and libraries, instead of the directory the files\nwere copied to. In most circumstances this is the same as the installation\ndirectory chosen before.\nPath [/home/shenweiyan/software/ActiveTcl-8.6.9]:\n\nPress return to begin installation\n     Installation Directory:  /home/shenweiyan/software/ActiveTcl-8.6.9\n     Demos Directory:         /home/shenweiyan/software/ActiveTcl-8.6.9/demos\n     Runtime Directory:       See Installation Directory\nCancel => C\nNext   => [RET] >>\n\nInstalling ActiveTcl ...\n        Creating directory /home/shenweiyan/software/ActiveTcl-8.6.9/share ...\n        Creating directory /home/shenweiyan/software/ActiveTcl-8.6.9/share/man ...\n        ......\n\nPlease do not forget to extend your PATH and MANPATH variables to\nget access to the applications and manpages distributed with ActiveTcl.\n\nFor a csh or compatible perform\n    setenv PATH "/home/shenweiyan/software/ActiveTcl-8.6.9/bin:$PATH"\n\nFor a sh or similar perform\n    PATH="/home/shenweiyan/software/ActiveTcl-8.6.9/bin:$PATH"\n    export PATH\n\nSome shells (bash for example) allow\n    export PATH="/home/shenweiyan/software/ActiveTcl-8.6.9/bin:$PATH"\n\nSimilar changes are required for MANPATH\nFinish >>\nActiveTcl 安装完成后，需要把 path 添加至环境变量（~/.bashrc）:\nexport PATH="/home/shenweiyan/software/ActiveTcl-8.6.9/bin:$PATH"\n\nTcl/Tk\n我们也可以直接去 https://sourceforge.net/projects/tcl/files/Tcl/ 直接通过源码的方式去编译安装 Tcl/Tk，尤其是当你的系统版本比较低，需要低版本的 Tcl/Tk，这种方法会比较合适。\n以 tcl8.5.19-src.tar.gz/tk8.5.19-src.tar.gz 为例，下载完成后，直接解压，然后执行常规安装即可。\ncd tcl8.5.19/unix\n./configure\nmake\nmake test\nmake install\n\nPython 重新编译安装\n参考：What’s New In Python 3.11 - doc.python.org\n\n📢 注意：\n\nPython 3.11.x 起（如 Python-3.11.3）中的 configure 已经把 --with-tcltk-includes和--with-tcltk-libs这两个参数移除！并使用 TCLTK_CFLAGS 和 TCLTK_LIBS 替代！！！\nPython 3.10.x (及以下版本，如 Python-3.9.16) 以及 Python 2.x.x 在 configure 中 --with-tcltk-includes和--with-tcltk-libs都是有的，通过这两个参数可以解决 Tkinter 的问题！！！\n\n\nPython 3\n这里以 Python-3.11.6 为例，参考 Python 3.11.0 install doesn’t recognize homebrew Tcl/Tk due to --with-tcltk-libs, --with-tcltk-includes switches being removed from 3.11 - pyenv#2499，在编译安装过程中使用 TCLTK_CFLAGS 和 TCLTK_LIBS 解决 _tkinter 缺失的问题。\nexport TCLTK_LIBS="-L/home/shenweiyan/software/ActiveTcl-8.6.9/lib -ltcl8.6 -ltk8.6"  # 8.5.x 版本，需改为 -ltcl8.5 -ltk8.5\nexport TCLTK_CFLAGS="-I/home/shenweiyan/software/ActiveTcl-8.6.9/include"\n\ncd Python-3.11.6\n/configure --prefix=/home/shenweiyan/software/python-3.11.6 ......\nmake && make install\n\n\n对于 Python 3.10.x (及以下版本，如 Python-3.9.18)，configure 中 --with-tcltk-includes 和 --with-tcltk-libs 的具体使用参考 https://bugs.python.org/issue21887：\n\nPython 2\n想要在 Python 2.7 安装 Tkinter，需要在编译过程中通过 --with-tcltk-includes 和 --with-tcltk-libs 中指定 ActiveTcl 的头文件以及库所在路径。\n如果在执行编译安装过程中，出现无法找到 libXss.so.1 共享动态库报错：\n$ tar zvxf Python-2.7.15.tgz\n$ cd Python-2.7.15\n$ ./configure --prefix=/usr/local/software/python-2.7 --with-tcltk-includes=\'-I/usr/local/software/ActiveTcl-8.6/include\' --with-tcltk-libs=\'-L/usr/local/software/ActiveTcl-8.6/lib -ltcl8.6 -ltk8.6\' --enable-optimizations\n$ make\n\n......\n\nwarning: building with the bundled copy of libffi is deprecated on this platform.  It will not be distributed with Python 3.7\n*** WARNING: renaming "_tkinter" since importing it failed: libXss.so.1: cannot open shared object file: No such file or directory\n\nPython build finished successfully!\nThe necessary bits to build these optional modules were not found:\n_dbm                  _gdbm\nTo find the necessary bits, look in setup.py in detect_modules() for the module\'s name.\n\nThe following modules found by detect_modules() in setup.py, have been\nbuilt by the Makefile instead, as configured by the Setup files:\natexit                pwd                   time\n\nFollowing modules built successfully but were removed because they could not be imported:\n_tkinter\n\nrunning build_scripts\n\n......\nCentOS 下请参考以下解决方法：\n$ sudo yum install libXScrnSaver libXScrnSaver-devel\n\n调用 Tkinter\nPython 2/3 重新编译完后，执行一下下面的命令即可显示 Tk 的 ui 界面，以及相应的 Tcl/Tk 版本。\npython2 -m Tkinter   # python 2\npython3 -m tkinter   # python 3\n\n\n这时候，我们重新运行开头的 GUI 界面程序，可以看到中文已经正常显示：\n\n参考资料\n\nDownload And Install Tcl: ActiveTcl，https://www.activestate.com/products/activetcl/downloads/\nInstalling Tk，https://tkdocs.com/tutorial/install.html\nPython 下"No module named _tkinter"问题解决过程分析，https://www.jianshu.com/p/0baa9657377f\nPython GUI 编程(Tkinter)文件对话框，https://my.oschina.net/u/2245781/blog/661533', 'bodyHTML': '<p dir="auto">主要是因为下面这两个原因，所以决定从源码编译安装去折腾一下 tkinter，以下是一些记录。</p>\n<h2 dir="auto">_tkinter not found</h2>\n<p dir="auto">Python 3 源码编译安装，执行 <code class="notranslate">make</code> 过程中提示 <code class="notranslate">_tkinter not found</code>，如下：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ make\n......\nPython build finished successfully!\nThe necessary bits to build these optional modules were not found:\n_tkinter "><pre class="notranslate">$ make\n......\nPython build finished successfully<span class="pl-k">!</span>\nThe necessary bits to build these optional modules were not found:\n_tkinter </pre></div>\n<h2 dir="auto">中文乱码</h2>\n<p dir="auto">使用 Anaconda 3（conda 4.5.11）的 tkinter python 包（conda install -c conda-forge tk）开发 GUI 界面程序过程中，发现 UI 界面出现的中文 Unicode 乱码一直没办法解决。</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="#-*- coding: utf-8 -*-\n\nimport sys\n\nfrom tkinter import *\ntop=Tk()\ntop.wm_title(&quot;菜单&quot;)\ntop.geometry(&quot;800x600+300+100&quot;) # 创建一个菜单项，类似于导航栏\nmenubar=Menu(top) # 创建菜单项\nfmenu1=Menu(top)\n# 如果该菜单时顶层菜单的一个菜单项，则它添加的是下拉菜单的菜单\nfor item in [\'新建文件\', \'打开文件\',\'结果保存\']:\n    fmenu1.add_command(label=item)\n\nfmenu2=Menu(top)\nfor item in [\'程序设置\',\'程序运行\']:\n    fmenu2.add_command(label=item)\n\nfmenu3=Menu(top)\nfor item in [\'使用教程\', \'版权信息\', \'检查更新\']:\n    fmenu3.add_command(label=item)\n\n# add_cascade 的一个很重要的属性就是 menu 属性，它指明了要把那个菜单级联到该菜单项上\n# 当然，还必不可少的就是 label 属性，用于指定该菜单项的名称\nmenubar.add_cascade(label=\'文件\', menu=fmenu1)\nmenubar.add_cascade(label=&quot;程序&quot;, menu=fmenu2)\nmenubar.add_cascade(label=&quot;帮助&quot;, menu=fmenu3)\n\n# 最后可以用窗口的 menu 属性指定我们使用哪一个作为它的顶层菜单\ntop[\'menu\']=menubar\ntop.mainloop()"><pre class="notranslate"><span class="pl-c">#-*- coding: utf-8 -*-</span>\n\n<span class="pl-k">import</span> <span class="pl-s1">sys</span>\n\n<span class="pl-k">from</span> <span class="pl-s1">tkinter</span> <span class="pl-k">import</span> <span class="pl-c1">*</span>\n<span class="pl-s1">top</span><span class="pl-c1">=</span><span class="pl-en">Tk</span>()\n<span class="pl-s1">top</span>.<span class="pl-c1">wm_title</span>(<span class="pl-s">"菜单"</span>)\n<span class="pl-s1">top</span>.<span class="pl-c1">geometry</span>(<span class="pl-s">"800x600+300+100"</span>) <span class="pl-c"># 创建一个菜单项，类似于导航栏</span>\n<span class="pl-s1">menubar</span><span class="pl-c1">=</span><span class="pl-en">Menu</span>(<span class="pl-s1">top</span>) <span class="pl-c"># 创建菜单项</span>\n<span class="pl-s1">fmenu1</span><span class="pl-c1">=</span><span class="pl-en">Menu</span>(<span class="pl-s1">top</span>)\n<span class="pl-c"># 如果该菜单时顶层菜单的一个菜单项，则它添加的是下拉菜单的菜单</span>\n<span class="pl-k">for</span> <span class="pl-s1">item</span> <span class="pl-c1">in</span> [<span class="pl-s">\'新建文件\'</span>, <span class="pl-s">\'打开文件\'</span>,<span class="pl-s">\'结果保存\'</span>]:\n    <span class="pl-s1">fmenu1</span>.<span class="pl-c1">add_command</span>(<span class="pl-s1">label</span><span class="pl-c1">=</span><span class="pl-s1">item</span>)\n\n<span class="pl-s1">fmenu2</span><span class="pl-c1">=</span><span class="pl-en">Menu</span>(<span class="pl-s1">top</span>)\n<span class="pl-k">for</span> <span class="pl-s1">item</span> <span class="pl-c1">in</span> [<span class="pl-s">\'程序设置\'</span>,<span class="pl-s">\'程序运行\'</span>]:\n    <span class="pl-s1">fmenu2</span>.<span class="pl-c1">add_command</span>(<span class="pl-s1">label</span><span class="pl-c1">=</span><span class="pl-s1">item</span>)\n\n<span class="pl-s1">fmenu3</span><span class="pl-c1">=</span><span class="pl-en">Menu</span>(<span class="pl-s1">top</span>)\n<span class="pl-k">for</span> <span class="pl-s1">item</span> <span class="pl-c1">in</span> [<span class="pl-s">\'使用教程\'</span>, <span class="pl-s">\'版权信息\'</span>, <span class="pl-s">\'检查更新\'</span>]:\n    <span class="pl-s1">fmenu3</span>.<span class="pl-c1">add_command</span>(<span class="pl-s1">label</span><span class="pl-c1">=</span><span class="pl-s1">item</span>)\n\n<span class="pl-c"># add_cascade 的一个很重要的属性就是 menu 属性，它指明了要把那个菜单级联到该菜单项上</span>\n<span class="pl-c"># 当然，还必不可少的就是 label 属性，用于指定该菜单项的名称</span>\n<span class="pl-s1">menubar</span>.<span class="pl-c1">add_cascade</span>(<span class="pl-s1">label</span><span class="pl-c1">=</span><span class="pl-s">\'文件\'</span>, <span class="pl-s1">menu</span><span class="pl-c1">=</span><span class="pl-s1">fmenu1</span>)\n<span class="pl-s1">menubar</span>.<span class="pl-c1">add_cascade</span>(<span class="pl-s1">label</span><span class="pl-c1">=</span><span class="pl-s">"程序"</span>, <span class="pl-s1">menu</span><span class="pl-c1">=</span><span class="pl-s1">fmenu2</span>)\n<span class="pl-s1">menubar</span>.<span class="pl-c1">add_cascade</span>(<span class="pl-s1">label</span><span class="pl-c1">=</span><span class="pl-s">"帮助"</span>, <span class="pl-s1">menu</span><span class="pl-c1">=</span><span class="pl-s1">fmenu3</span>)\n\n<span class="pl-c"># 最后可以用窗口的 menu 属性指定我们使用哪一个作为它的顶层菜单</span>\n<span class="pl-s1">top</span>[<span class="pl-s">\'menu\'</span>]<span class="pl-c1">=</span><span class="pl-s1">menubar</span>\n<span class="pl-s1">top</span>.<span class="pl-c1">mainloop</span>()</pre></div>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/71993f96daae953a7f4f3671c25ad0d04a5abe7a1fcad79c3b8ec2ac41e61da7/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d636f6f6b626f6f6b2d696d672f46683232693438374f7a76592d7553587641754673367245585876752e706e67"><img src="https://camo.githubusercontent.com/71993f96daae953a7f4f3671c25ad0d04a5abe7a1fcad79c3b8ec2ac41e61da7/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d636f6f6b626f6f6b2d696d672f46683232693438374f7a76592d7553587641754673367245585876752e706e67" alt="" data-canonical-src="https://shub.weiyan.tech/yuque/elog-cookbook-img/Fh22i487OzvY-uSXvAuFs6rEXXvu.png" style="max-width: 100%;"></a></p>\n<p dir="auto">我们也可以确认一下是不是 Tk 本身的问题：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="echo \'pack [button .h -text &quot;Hello, World! 显示中文&quot; -command exit]\' | wish"><pre class="notranslate"><code class="notranslate">echo \'pack [button .h -text "Hello, World! 显示中文" -command exit]\' | wish\n</code></pre></div>\n<ul dir="auto">\n<li>\n<p dir="auto">正常显示<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/3ed1e71ffd786ffe1e4cc021f522e1a07baf337fc1e8e0ccc472d36859177a0a/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f746b2d6f6b2e706e67"><img src="https://camo.githubusercontent.com/3ed1e71ffd786ffe1e4cc021f522e1a07baf337fc1e8e0ccc472d36859177a0a/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f746b2d6f6b2e706e67" alt="TK 正常显示" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/tk-ok.png" style="max-width: 100%;"></a></p>\n</li>\n<li>\n<p dir="auto">中文乱码<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/cbab9d6fcbf5c195bb977fe1c4fb79ce8efe3eb8dcb6e701de2c3209b5d587b7/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f746b2d6572726f722e706e67"><img src="https://camo.githubusercontent.com/cbab9d6fcbf5c195bb977fe1c4fb79ce8efe3eb8dcb6e701de2c3209b5d587b7/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f746b2d6572726f722e706e67" alt="TK 中文乱码" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/tk-error.png" style="max-width: 100%;"></a></p>\n</li>\n</ul>\n<p dir="auto"><strong>一些参考资料：</strong></p>\n<ul dir="auto">\n<li>Python 3.x 中文编码转换的问题：<a href="https://bbs.bccn.net/thread-479560-1-1.html" rel="nofollow">https://bbs.bccn.net/thread-479560-1-1.html</a></li>\n<li>Python 2.6 Tk 中文乱码解決方法：<a href="http://blogkrogh.blogspot.com/2011/03/python-26-tk.html" rel="nofollow">http://blogkrogh.blogspot.com/2011/03/python-26-tk.html</a></li>\n<li>tkinter 乱码，pyqt4 乱码：<a href="http://aboutweb.lofter.com/post/11743e_6f7e4a5" rel="nofollow">http://aboutweb.lofter.com/post/11743e_6f7e4a5</a></li>\n</ul>\n<p dir="auto">上面几种方法测试后，问题依然存在。在 google 上一番搜索和来回测试之后，发现了几点信息：</p>\n<ul dir="auto">\n<li>有人说，可能是 tcl/tk 安装不完整造成的。</li>\n<li>tcl/tk 重装后需要对 Python 重新编译 tkinter 才能起作用。</li>\n<li>conda install -c conda-forge tk，虽然没有任何报错，python2 中 import tkinter 也正常，但 conda 的软件安装就像一个黑盒子，无法确认 tcl/tk 是否完整安装。</li>\n<li>python 的 PyPI 仓库中是没有 tkinter 包的，想要使用 <code class="notranslate">pip install tkinter</code> 卸载或者重装都是行不通的。</li>\n<li>网上也有人说可以使用 <code class="notranslate">yum install python3-tk/python-tk</code> 解决，但对于本人来说，没用。</li>\n</ul>\n<h2 dir="auto">什么是 tcl, tk, tkinter</h2>\n<blockquote>\n<p dir="auto">The\xa0<a href="https://docs.python.org/3.6/library/tkinter.html#module-tkinter" rel="nofollow">tkinter</a>\xa0package (“Tk interface”) is the standard Python interface to the Tk GUI toolkit. Both Tk and\xa0<a href="https://docs.python.org/3.6/library/tkinter.html#module-tkinter" rel="nofollow">tkinter</a>\xa0are available on most Unix platforms, as well as on Windows systems. (Tk itself is not part of Python; it is maintained at ActiveState.)</p>\n<p dir="auto">Running\xa0<code class="notranslate">python\xa0-m\xa0tkinter</code>\xa0from the command line should open a window demonstrating a simple Tk interface, letting you know that\xa0<a href="https://docs.python.org/3.6/library/tkinter.html#module-tkinter" rel="nofollow">tkinter</a>\xa0is properly installed on your system, and also showing what version of Tcl/Tk is installed, so you can read the Tcl/Tk documentation specific to that version.</p>\n<p dir="auto">From <a href="https://docs.python.org/3/library/tkinter.html" rel="nofollow">https://docs.python.org/3/library/tkinter.html</a></p>\n</blockquote>\n<p dir="auto">Tcl 是"工具控制语言（Tool Control Language）"的缩写。Tk 是 Tcl "图形工具箱" 的扩展，它提供各种标准的 GUI 接口项，以利于迅速进行高级应用程序开发。</p>\n<p dir="auto">tkinter 包（"Tk 接口"）是 Tk GUI 工具包的标准 Python 接口。 Tk 和 \xa0tkinter 在大多数 Unix 平台以及 Windows 系统上都可用（Tk 本身不是 Python 的一部分，它在 ActiveState 中维护）。您可以通过从命令行运行 \xa0<code class="notranslate">python -m\xa0tkinter</code>来检查 \xa0tkinter 是否已正确安装在系统上。如果已经安装该命令会打开一个简单的 Tk 界面，该界面除了让我们知道 tkinter 已正确安装，并且还显示安装了哪个版本的 Tcl/Tk，因此我们可以阅读特定于该版本的 Tcl/Tk 文档。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/2f324994cb3d39e49f29934d5ced8a6e6c2c1ff9c88e8198b61a67a541e07d6d/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d636f6f6b626f6f6b2d696d672f46705778367253544b61513142585850514a7a63684e6276694b59642e706e67"><img src="https://camo.githubusercontent.com/2f324994cb3d39e49f29934d5ced8a6e6c2c1ff9c88e8198b61a67a541e07d6d/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d636f6f6b626f6f6b2d696d672f46705778367253544b61513142585850514a7a63684e6276694b59642e706e67" alt="" data-canonical-src="https://shub.weiyan.tech/yuque/elog-cookbook-img/FpWx6rSTKaQ1BXXPQJzchNbviKYd.png" style="max-width: 100%;"></a></p>\n<p dir="auto">如果 \xa0tkinter\xa0 没有安装，则会提示找不到该包（注意在 Python 2 中该包包名为 Tkinter，Python 3 中为 tkinter）：</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/4bf77f5a3b6fa9b97b58dd6dab0566f128645c57be21d4a34593ef6b5edc2046/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d636f6f6b626f6f6b2d696d672f467252777a4c4641317449713256667753347037693064564c546a502e706e67"><img src="https://camo.githubusercontent.com/4bf77f5a3b6fa9b97b58dd6dab0566f128645c57be21d4a34593ef6b5edc2046/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d636f6f6b626f6f6b2d696d672f467252777a4c4641317449713256667753347037693064564c546a502e706e67" alt="" data-canonical-src="https://shub.weiyan.tech/yuque/elog-cookbook-img/FrRwzLFA1tIq2VfwS4p7i0dVLTjP.png" style="max-width: 100%;"></a></p>\n<p dir="auto">接下来我们将尝试在 Python 2/3 中安装 Tcl/Tk，并重新编译 Python 2/3，已完成 Tkinter 安装（tkinter 为 Python 的标准库，标准库的安装需要重新编译 Python ？）。</p>\n<h2 dir="auto">ActiveTcl 安装</h2>\n<p dir="auto">ActiveTcl 是 ActiveState 发布的关于 Tcl/Tk 的发行版本，该发行版本包含了最新版本的 Tk 和 Tcl 程序，我们下载其免费的社区版本进行安装即可。</p>\n<p dir="auto">参考下载链接：<a href="https://www.activestate.com/products/activetcl/downloads/" rel="nofollow">https://www.activestate.com/products/activetcl/downloads/</a><br>\n参考安装教程：<a href="https://tkdocs.com/tutorial/install.html" rel="nofollow">https://tkdocs.com/tutorial/install.html</a></p>\n<p dir="auto">以下为 CentOS 6.5 下 <strong>ActiveTcl-8.6.9</strong> 的一些安装记录，仅作参考。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ curl -fL &quot;https://shenweiyan-generic.pkg.coding.net/btscl/activetcl/ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d.tar.gz?version=8.6.9.8609.2&quot; -o ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d.tar.gz\n$ tar zvxf ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d.tar.gz\n$ cd ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d\n$ ./install.sh\n......\nCancel         [no]  =&gt; [RET]\nAccept License [yes] =&gt; \'A\' &gt;&gt;A\n\nPlease specify the installation directory.\nPath [/opt/ActiveTcl-8.6]: /home/shenweiyan/software/ActiveTcl-8.6.9\n\nPlease specify the directory for the demos.\nPath [/home/shenweiyan/software/ActiveTcl-8.6.9/demos]:\n\nPlease specify the runtime installation directory.\n\nThis is the directory the applications will see as their installation directory\nwhen searching for packages and libraries, instead of the directory the files\nwere copied to. In most circumstances this is the same as the installation\ndirectory chosen before.\nPath [/home/shenweiyan/software/ActiveTcl-8.6.9]:\n\nPress return to begin installation\n     Installation Directory:  /home/shenweiyan/software/ActiveTcl-8.6.9\n     Demos Directory:         /home/shenweiyan/software/ActiveTcl-8.6.9/demos\n     Runtime Directory:       See Installation Directory\nCancel =&gt; C\nNext   =&gt; [RET] &gt;&gt;\n\nInstalling ActiveTcl ...\n        Creating directory /home/shenweiyan/software/ActiveTcl-8.6.9/share ...\n        Creating directory /home/shenweiyan/software/ActiveTcl-8.6.9/share/man ...\n        ......\n\nPlease do not forget to extend your PATH and MANPATH variables to\nget access to the applications and manpages distributed with ActiveTcl.\n\nFor a csh or compatible perform\n    setenv PATH &quot;/home/shenweiyan/software/ActiveTcl-8.6.9/bin:$PATH&quot;\n\nFor a sh or similar perform\n    PATH=&quot;/home/shenweiyan/software/ActiveTcl-8.6.9/bin:$PATH&quot;\n    export PATH\n\nSome shells (bash for example) allow\n    export PATH=&quot;/home/shenweiyan/software/ActiveTcl-8.6.9/bin:$PATH&quot;\n\nSimilar changes are required for MANPATH\nFinish &gt;&gt;"><pre class="notranslate">$ curl -fL <span class="pl-s"><span class="pl-pds">"</span>https://shenweiyan-generic.pkg.coding.net/btscl/activetcl/ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d.tar.gz?version=8.6.9.8609.2<span class="pl-pds">"</span></span> -o ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d.tar.gz\n$ tar zvxf ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d.tar.gz\n$ <span class="pl-c1">cd</span> ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d\n$ ./install.sh\n......\nCancel         [no]  =<span class="pl-k">&gt;</span> [RET]\nAccept License [yes] =<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds">\'</span>A<span class="pl-pds">\'</span></span> <span class="pl-k">&gt;&gt;</span>A\n\nPlease specify the installation directory.\nPath [/opt/ActiveTcl-8.6]: /home/shenweiyan/software/ActiveTcl-8.6.9\n\nPlease specify the directory <span class="pl-k">for</span> the demos.\nPath [/home/shenweiyan/software/ActiveTcl-8.6.9/demos]:\n\nPlease specify the runtime installation directory.\n\nThis is the directory the applications will see as their installation directory\nwhen searching <span class="pl-k">for</span> packages and libraries, instead of the directory the files\nwere copied to. In most circumstances this is the same as the installation\ndirectory chosen before.\nPath [/home/shenweiyan/software/ActiveTcl-8.6.9]:\n\nPress <span class="pl-k">return</span> to begin installation\n     Installation Directory:  /home/shenweiyan/software/ActiveTcl-8.6.9\n     Demos Directory:         /home/shenweiyan/software/ActiveTcl-8.6.9/demos\n     Runtime Directory:       See Installation Directory\nCancel =<span class="pl-k">&gt;</span> C\nNext   =<span class="pl-k">&gt;</span> [RET] <span class="pl-k">&gt;&gt;</span>\n\nInstalling ActiveTcl ...\n        Creating directory /home/shenweiyan/software/ActiveTcl-8.6.9/share ...\n        Creating directory /home/shenweiyan/software/ActiveTcl-8.6.9/share/man ...\n        ......\n\nPlease <span class="pl-k">do</span> not forget to extend your PATH and MANPATH variables to\nget access to the applications and manpages distributed with ActiveTcl.\n\nFor a csh or compatible perform\n    setenv PATH <span class="pl-s"><span class="pl-pds">"</span>/home/shenweiyan/software/ActiveTcl-8.6.9/bin:<span class="pl-smi">$PATH</span><span class="pl-pds">"</span></span>\n\nFor a sh or similar perform\n    PATH=<span class="pl-s"><span class="pl-pds">"</span>/home/shenweiyan/software/ActiveTcl-8.6.9/bin:<span class="pl-smi">$PATH</span><span class="pl-pds">"</span></span>\n    <span class="pl-k">export</span> PATH\n\nSome shells (bash <span class="pl-k">for</span> example) allow\n    <span class="pl-k">export</span> PATH=<span class="pl-s"><span class="pl-pds">"</span>/home/shenweiyan/software/ActiveTcl-8.6.9/bin:<span class="pl-smi">$PATH</span><span class="pl-pds">"</span></span>\n\nSimilar changes are required <span class="pl-k">for</span> MANPATH\nFinish <span class="pl-k">&gt;&gt;</span></pre></div>\n<p dir="auto">ActiveTcl 安装完成后，需要把 path 添加至环境变量（~/.bashrc）:</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="export PATH=&quot;/home/shenweiyan/software/ActiveTcl-8.6.9/bin:$PATH&quot;"><pre class="notranslate"><code class="notranslate">export PATH="/home/shenweiyan/software/ActiveTcl-8.6.9/bin:$PATH"\n</code></pre></div>\n<h2 dir="auto">Tcl/Tk</h2>\n<p dir="auto">我们也可以直接去 <a href="https://sourceforge.net/projects/tcl/files/Tcl/" rel="nofollow">https://sourceforge.net/projects/tcl/files/Tcl/</a> 直接通过源码的方式去编译安装 Tcl/Tk，尤其是当你的系统版本比较低，需要低版本的 Tcl/Tk，这种方法会比较合适。</p>\n<p dir="auto">以 tcl8.5.19-src.tar.gz/tk8.5.19-src.tar.gz 为例，下载完成后，直接解压，然后执行常规安装即可。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="cd tcl8.5.19/unix\n./configure\nmake\nmake test\nmake install"><pre class="notranslate"><code class="notranslate">cd tcl8.5.19/unix\n./configure\nmake\nmake test\nmake install\n</code></pre></div>\n<h2 dir="auto">Python 重新编译安装</h2>\n<p dir="auto">参考：<a href="https://docs.python.org/3/whatsnew/3.11.html" rel="nofollow">What’s New In Python 3.11</a> - doc.python.org</p>\n<blockquote>\n<p dir="auto">📢 <strong>注意：</strong></p>\n<ol dir="auto">\n<li>Python 3.11.x 起（如 Python-3.11.3）中的 <code class="notranslate">configure</code> 已经把 <code class="notranslate">--with-tcltk-includes</code>和<code class="notranslate">--with-tcltk-libs</code>这两个参数移除！并使用 <code class="notranslate">TCLTK_CFLAGS</code> 和 <code class="notranslate">TCLTK_LIBS</code> 替代！！！</li>\n<li>Python 3.10.x (及以下版本，如 Python-3.9.16) 以及 Python 2.x.x 在 <code class="notranslate">configure</code> 中 <code class="notranslate">--with-tcltk-includes</code>和<code class="notranslate">--with-tcltk-libs</code>都是有的，通过这两个参数可以解决 Tkinter 的问题！！！</li>\n</ol>\n</blockquote>\n<h3 dir="auto">Python 3</h3>\n<p dir="auto">这里以 Python-3.11.6 为例，参考 <a href="https://github.com/pyenv/pyenv/issues/2499" data-hovercard-type="issue" data-hovercard-url="/pyenv/pyenv/issues/2499/hovercard">Python 3.11.0 install doesn’t recognize homebrew Tcl/Tk due to --with-tcltk-libs, --with-tcltk-includes switches being removed from 3.11 - pyenv#2499</a>，在编译安装过程中使用 <code class="notranslate">TCLTK_CFLAGS</code> 和 <code class="notranslate">TCLTK_LIBS</code> 解决 <code class="notranslate">_tkinter</code> 缺失的问题。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="export TCLTK_LIBS=&quot;-L/home/shenweiyan/software/ActiveTcl-8.6.9/lib -ltcl8.6 -ltk8.6&quot;  # 8.5.x 版本，需改为 -ltcl8.5 -ltk8.5\nexport TCLTK_CFLAGS=&quot;-I/home/shenweiyan/software/ActiveTcl-8.6.9/include&quot;\n\ncd Python-3.11.6\n/configure --prefix=/home/shenweiyan/software/python-3.11.6 ......\nmake &amp;&amp; make install"><pre class="notranslate"><code class="notranslate">export TCLTK_LIBS="-L/home/shenweiyan/software/ActiveTcl-8.6.9/lib -ltcl8.6 -ltk8.6"  # 8.5.x 版本，需改为 -ltcl8.5 -ltk8.5\nexport TCLTK_CFLAGS="-I/home/shenweiyan/software/ActiveTcl-8.6.9/include"\n\ncd Python-3.11.6\n/configure --prefix=/home/shenweiyan/software/python-3.11.6 ......\nmake &amp;&amp; make install\n</code></pre></div>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/8ac23ce0ff2718876d29a04185dcb0bc2335b4e62a6f7497d4fcc9fdf84554d9/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f707974686f6e2d332d746b696e7465722e706e67"><img src="https://camo.githubusercontent.com/8ac23ce0ff2718876d29a04185dcb0bc2335b4e62a6f7497d4fcc9fdf84554d9/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f707974686f6e2d332d746b696e7465722e706e67" alt="python3-confiigure-tkinter-yes" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/python-3-tkinter.png" style="max-width: 100%;"></a></p>\n<p dir="auto">对于 Python 3.10.x (及以下版本，如 Python-3.9.18)，<code class="notranslate">configure</code> 中 <code class="notranslate">--with-tcltk-includes</code> 和 <code class="notranslate">--with-tcltk-libs</code> 的具体使用参考 <a href="https://bugs.python.org/issue21887" rel="nofollow">https://bugs.python.org/issue21887</a>：</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/3a438e861c864c9f6b17886b2f4deb3890e7dbc335495efe421381caf3b2b77c/68747470733a2f2f6b672e77656979616e2e63632f323032342f31302f74636c746b2d69737375652d32313838372d6d73672e77656270"><img src="https://camo.githubusercontent.com/3a438e861c864c9f6b17886b2f4deb3890e7dbc335495efe421381caf3b2b77c/68747470733a2f2f6b672e77656979616e2e63632f323032342f31302f74636c746b2d69737375652d32313838372d6d73672e77656270" alt="tcltk-issue-21887-msg" data-canonical-src="https://kg.weiyan.cc/2024/10/tcltk-issue-21887-msg.webp" style="max-width: 100%;"></a></p>\n<h3 dir="auto">Python 2</h3>\n<p dir="auto">想要在 Python 2.7 安装 Tkinter，需要在编译过程中通过 <code class="notranslate">--with-tcltk-includes</code> 和 <code class="notranslate">--with-tcltk-libs</code> 中指定 ActiveTcl 的头文件以及库所在路径。</p>\n<p dir="auto">如果在执行编译安装过程中，出现无法找到 libXss.so.1 共享动态库报错：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ tar zvxf Python-2.7.15.tgz\n$ cd Python-2.7.15\n$ ./configure --prefix=/usr/local/software/python-2.7 --with-tcltk-includes=\'-I/usr/local/software/ActiveTcl-8.6/include\' --with-tcltk-libs=\'-L/usr/local/software/ActiveTcl-8.6/lib -ltcl8.6 -ltk8.6\' --enable-optimizations\n$ make\n\n......\n\nwarning: building with the bundled copy of libffi is deprecated on this platform.  It will not be distributed with Python 3.7\n*** WARNING: renaming &quot;_tkinter&quot; since importing it failed: libXss.so.1: cannot open shared object file: No such file or directory\n\nPython build finished successfully!\nThe necessary bits to build these optional modules were not found:\n_dbm                  _gdbm\nTo find the necessary bits, look in setup.py in detect_modules() for the module\'s name.\n\nThe following modules found by detect_modules() in setup.py, have been\nbuilt by the Makefile instead, as configured by the Setup files:\natexit                pwd                   time\n\nFollowing modules built successfully but were removed because they could not be imported:\n_tkinter\n\nrunning build_scripts\n\n......"><pre class="notranslate">$ tar zvxf Python-2.7.15.tgz\n$ <span class="pl-c1">cd</span> Python-2.7.15\n$ ./configure --prefix=/usr/local/software/python-2.7 --with-tcltk-includes=<span class="pl-s"><span class="pl-pds">\'</span>-I/usr/local/software/ActiveTcl-8.6/include<span class="pl-pds">\'</span></span> --with-tcltk-libs=<span class="pl-s"><span class="pl-pds">\'</span>-L/usr/local/software/ActiveTcl-8.6/lib -ltcl8.6 -ltk8.6<span class="pl-pds">\'</span></span> --enable-optimizations\n$ make\n\n......\n\nwarning: building with the bundled copy of libffi is deprecated on this platform.  It will not be distributed with Python 3.7\n<span class="pl-k">***</span> WARNING: renaming <span class="pl-s"><span class="pl-pds">"</span>_tkinter<span class="pl-pds">"</span></span> since importing it failed: libXss.so.1: cannot open shared object file: No such file or directory\n\nPython build finished successfully<span class="pl-k">!</span>\nThe necessary bits to build these optional modules were not found:\n_dbm                  _gdbm\nTo find the necessary bits, look <span class="pl-k">in</span> setup.py <span class="pl-k">in</span> <span class="pl-en">detect_modules</span>() <span class="pl-k">for</span> the module<span class="pl-s"><span class="pl-pds">\'</span>s name.</span>\n<span class="pl-s"></span>\n<span class="pl-s">The following modules found by detect_modules() in setup.py, have been</span>\n<span class="pl-s">built by the Makefile instead, as configured by the Setup files:</span>\n<span class="pl-s">atexit                pwd                   time</span>\n<span class="pl-s"></span>\n<span class="pl-s">Following modules built successfully but were removed because they could not be imported:</span>\n<span class="pl-s">_tkinter</span>\n<span class="pl-s"></span>\n<span class="pl-s">running build_scripts</span>\n<span class="pl-s"></span>\n<span class="pl-s">......</span></pre></div>\n<p dir="auto">CentOS 下请参考以下解决方法：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ sudo yum install libXScrnSaver libXScrnSaver-devel"><pre class="notranslate"><code class="notranslate">$ sudo yum install libXScrnSaver libXScrnSaver-devel\n</code></pre></div>\n<h2 dir="auto">调用 Tkinter</h2>\n<p dir="auto">Python 2/3 重新编译完后，执行一下下面的命令即可显示 Tk 的 ui 界面，以及相应的 Tcl/Tk 版本。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="python2 -m Tkinter   # python 2\npython3 -m tkinter   # python 3"><pre class="notranslate"><code class="notranslate">python2 -m Tkinter   # python 2\npython3 -m tkinter   # python 3\n</code></pre></div>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/5cd4cebb1bcb58f9900ff97c581c72c1cb4d0ec3a8f63d6b1f53ae9a67fe7502/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d636f6f6b626f6f6b2d696d672f466742746231345a675a465a584952684f647436656662597a3766642e706e67"><img src="https://camo.githubusercontent.com/5cd4cebb1bcb58f9900ff97c581c72c1cb4d0ec3a8f63d6b1f53ae9a67fe7502/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d636f6f6b626f6f6b2d696d672f466742746231345a675a465a584952684f647436656662597a3766642e706e67" alt="python2-m-Tkinter" data-canonical-src="https://shub.weiyan.tech/yuque/elog-cookbook-img/FgBtb14ZgZFZXIRhOdt6efbYz7fd.png" style="max-width: 100%;"></a></p>\n<p dir="auto">这时候，我们重新运行开头的 GUI 界面程序，可以看到中文已经正常显示：<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/0afa7713dfc1c7eb055e57671b69d9e0a2c2f823b313cf0dfc2003c8e4af5308/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d636f6f6b626f6f6b2d696d672f467152485558637a50644872516a4655584e51725f43675f6a3242342e706e67"><img src="https://camo.githubusercontent.com/0afa7713dfc1c7eb055e57671b69d9e0a2c2f823b313cf0dfc2003c8e4af5308/68747470733a2f2f736875622e77656979616e2e746563682f79757175652f656c6f672d636f6f6b626f6f6b2d696d672f467152485558637a50644872516a4655584e51725f43675f6a3242342e706e67" alt="" data-canonical-src="https://shub.weiyan.tech/yuque/elog-cookbook-img/FqRHUXczPdHrQjFUXNQr_Cg_j2B4.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">参考资料</h2>\n<ul dir="auto">\n<li>Download And Install Tcl: ActiveTcl，<a href="https://www.activestate.com/products/activetcl/downloads/" rel="nofollow">https://www.activestate.com/products/activetcl/downloads/</a></li>\n<li>Installing Tk，<a href="https://tkdocs.com/tutorial/install.html" rel="nofollow">https://tkdocs.com/tutorial/install.html</a></li>\n<li>Python 下"No module named _tkinter"问题解决过程分析，<a href="https://www.jianshu.com/p/0baa9657377f" rel="nofollow">https://www.jianshu.com/p/0baa9657377f</a></li>\n<li>Python GUI 编程(Tkinter)文件对话框，<a href="https://my.oschina.net/u/2245781/blog/661533" rel="nofollow">https://my.oschina.net/u/2245781/blog/661533</a></li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.3-折腾'}, 'labels': {'nodes': [{'name': '1.3.5-Python'}]}, 'comments': {'nodes': []}}, {'title': '飞书文档初体验', 'number': 11, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/11', 'createdAt': '2023-10-24T07:57:52Z', 'lastEditedAt': '2023-12-01T02:24:27Z', 'updatedAt': '2024-01-04T05:44:25Z', 'body': '2023 年的 1024 程序员节前一天，语雀服务器崩溃长达 8 个小时的余温还没消，就迫不及待再去体验了一把飞书文档，说几点个人感受。\r\n\r\n<!-- more -->\r\n\r\n![20231023-yuque](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/Gitbook/2023/20231023-yuque.png)\r\n\r\n- [如何看待语雀因网络故障导致用户无法正常访问文档？在线文档的可靠性还值得信任吗？](https://www.zhihu.com/question/627418678) - 知乎\r\n- [鉴于昨天的语雀，有啥推荐的笔记软件么](https://www.v2ex.com/t/984728) -V2EX\r\n\r\n\r\n首先，飞书文档[国内版本](https://www.feishu.cn/)和[国际版本](https://www.larksuite.com/)的区别可不是一般的大。\r\n\r\n![飞书文档国内版本](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/Gitbook/2023/feishu-cn-admin.png)\r\n\r\n![飞书文档国际版本](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/Gitbook/2023/larksuite-admin.png)\r\n\r\n第二，书写体验相当不错。\r\n\r\n第三，最然支持 Markdown 所见即所得的编辑模式，但没法查看单篇文档的 Markdown，这也是我最不满意的地方。\r\n\r\n第四，API 很强大，文档很丰富，但没找到怎么通过 API 获取 wiki 知识库内容的介绍！\r\n\r\n截止 2023.10.25 了解到飞书目前是没有 wiki 知识库内容的 API 接口，不清楚后面是否会有这方面的支持，且持续关注中。\r\n\r\n![飞书文档 wiki 知识库 API](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/feishu-wiki-api.png)\r\n\r\n事实上，飞书是支持 通过 API 接口获取 wiki 知识库内容的（上面截图中客服的回答并不准确），具体可以参考 [Feishu Pages](https://github.com/longbridgeapp/feishu-pages#feishu-pages) 实现 wiki 知识库的内容导出。\r\n\r\n第五，经历语雀宕机事件，不得不考虑多平台备份的问题，对于飞书文档目前没发现比较好的方法。\r\n\r\n经过了这个事件很多人都对在线文档产生了一些动摇，但总体来说在使用性和方便性上在线文档还是很有优势的，但值得注意的是不能把所有的鸡蛋都放到一个篮子 —— 备份很重要！**通用格式** 和 **数据可控** 或者可以成为一个评判的基础，那些过于封闭不支持导出(甚至是批量导出)的平台基本可以放弃了。\r\n', 'bodyText': '2023 年的 1024 程序员节前一天，语雀服务器崩溃长达 8 个小时的余温还没消，就迫不及待再去体验了一把飞书文档，说几点个人感受。\n\n\n\n如何看待语雀因网络故障导致用户无法正常访问文档？在线文档的可靠性还值得信任吗？ - 知乎\n鉴于昨天的语雀，有啥推荐的笔记软件么 -V2EX\n\n首先，飞书文档国内版本和国际版本的区别可不是一般的大。\n\n\n第二，书写体验相当不错。\n第三，最然支持 Markdown 所见即所得的编辑模式，但没法查看单篇文档的 Markdown，这也是我最不满意的地方。\n第四，API 很强大，文档很丰富，但没找到怎么通过 API 获取 wiki 知识库内容的介绍！\n截止 2023.10.25 了解到飞书目前是没有 wiki 知识库内容的 API 接口，不清楚后面是否会有这方面的支持，且持续关注中。\n\n事实上，飞书是支持 通过 API 接口获取 wiki 知识库内容的（上面截图中客服的回答并不准确），具体可以参考 Feishu Pages 实现 wiki 知识库的内容导出。\n第五，经历语雀宕机事件，不得不考虑多平台备份的问题，对于飞书文档目前没发现比较好的方法。\n经过了这个事件很多人都对在线文档产生了一些动摇，但总体来说在使用性和方便性上在线文档还是很有优势的，但值得注意的是不能把所有的鸡蛋都放到一个篮子 —— 备份很重要！通用格式 和 数据可控 或者可以成为一个评判的基础，那些过于封闭不支持导出(甚至是批量导出)的平台基本可以放弃了。', 'bodyHTML': '<p dir="auto">2023 年的 1024 程序员节前一天，语雀服务器崩溃长达 8 个小时的余温还没消，就迫不及待再去体验了一把飞书文档，说几点个人感受。</p>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/6ca3cf77d1a83df2c92fb36c88cd72fc3f0cab657f4fb6e4e1396a96db2aa29c/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f476974626f6f6b2f323032332f32303233313032332d79757175652e706e67"><img src="https://camo.githubusercontent.com/6ca3cf77d1a83df2c92fb36c88cd72fc3f0cab657f4fb6e4e1396a96db2aa29c/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f476974626f6f6b2f323032332f32303233313032332d79757175652e706e67" alt="20231023-yuque" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/Gitbook/2023/20231023-yuque.png" style="max-width: 100%;"></a></p>\n<ul dir="auto">\n<li><a href="https://www.zhihu.com/question/627418678" rel="nofollow">如何看待语雀因网络故障导致用户无法正常访问文档？在线文档的可靠性还值得信任吗？</a> - 知乎</li>\n<li><a href="https://www.v2ex.com/t/984728" rel="nofollow">鉴于昨天的语雀，有啥推荐的笔记软件么</a> -V2EX</li>\n</ul>\n<p dir="auto">首先，飞书文档<a href="https://www.feishu.cn/" rel="nofollow">国内版本</a>和<a href="https://www.larksuite.com/" rel="nofollow">国际版本</a>的区别可不是一般的大。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/19fb14b3c00b0b2c10be25745bd38053df2801e1e2e846d859391fa50a8ec5cc/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f476974626f6f6b2f323032332f6665697368752d636e2d61646d696e2e706e67"><img src="https://camo.githubusercontent.com/19fb14b3c00b0b2c10be25745bd38053df2801e1e2e846d859391fa50a8ec5cc/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f476974626f6f6b2f323032332f6665697368752d636e2d61646d696e2e706e67" alt="飞书文档国内版本" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/Gitbook/2023/feishu-cn-admin.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/3cab2a08b06143e70301285f6e16d69daf14789a7252e3d6c49aa33caed02247/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f476974626f6f6b2f323032332f6c61726b73756974652d61646d696e2e706e67"><img src="https://camo.githubusercontent.com/3cab2a08b06143e70301285f6e16d69daf14789a7252e3d6c49aa33caed02247/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f476974626f6f6b2f323032332f6c61726b73756974652d61646d696e2e706e67" alt="飞书文档国际版本" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/Gitbook/2023/larksuite-admin.png" style="max-width: 100%;"></a></p>\n<p dir="auto">第二，书写体验相当不错。</p>\n<p dir="auto">第三，最然支持 Markdown 所见即所得的编辑模式，但没法查看单篇文档的 Markdown，这也是我最不满意的地方。</p>\n<p dir="auto">第四，API 很强大，文档很丰富，但没找到怎么通过 API 获取 wiki 知识库内容的介绍！</p>\n<p dir="auto">截止 2023.10.25 了解到飞书目前是没有 wiki 知识库内容的 API 接口，不清楚后面是否会有这方面的支持，且持续关注中。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/1b08786466b80dc45de3bccdd07eec03c15cfd43335c09e69953e1f3f6af65d6/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6665697368752d77696b692d6170692e706e67"><img src="https://camo.githubusercontent.com/1b08786466b80dc45de3bccdd07eec03c15cfd43335c09e69953e1f3f6af65d6/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6665697368752d77696b692d6170692e706e67" alt="飞书文档 wiki 知识库 API" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/feishu-wiki-api.png" style="max-width: 100%;"></a></p>\n<p dir="auto">事实上，飞书是支持 通过 API 接口获取 wiki 知识库内容的（上面截图中客服的回答并不准确），具体可以参考 <a href="https://github.com/longbridgeapp/feishu-pages#feishu-pages">Feishu Pages</a> 实现 wiki 知识库的内容导出。</p>\n<p dir="auto">第五，经历语雀宕机事件，不得不考虑多平台备份的问题，对于飞书文档目前没发现比较好的方法。</p>\n<p dir="auto">经过了这个事件很多人都对在线文档产生了一些动摇，但总体来说在使用性和方便性上在线文档还是很有优势的，但值得注意的是不能把所有的鸡蛋都放到一个篮子 —— 备份很重要！<strong>通用格式</strong> 和 <strong>数据可控</strong> 或者可以成为一个评判的基础，那些过于封闭不支持导出(甚至是批量导出)的平台基本可以放弃了。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': 'WebStack-Hugo | 一个静态响应式导航主题', 'number': 10, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/10', 'createdAt': '2023-10-23T08:25:32Z', 'lastEditedAt': '2024-11-05T01:44:19Z', 'updatedAt': '2025-03-09T09:51:53Z', 'body': '> Via：[我给自己做了一个导航网站](https://mp.weixin.qq.com/s/gVWGjxG9qd7qSyX3N8Zgag) | [BioIT爱好者](https://www.bioitee.com)    \r\n\r\n<br/>\r\n\r\n**📢 让更多人的人制作自己的导航网站。如果你觉得本主题对你有所帮助，欢迎请作者 [喝杯咖啡](https://kg.weiyan.cc/0000/img/donate.webp) >.<**\r\n\r\n## 主题开源地址    \r\n\r\n[**GitHub**](https://github.com/shenweiyan/WebStack-Hugo) | [**Gitee**](https://gitee.com/shenweiyan/WebStack-Hugo) | [**GitCode**](https://gitcode.com/shenweiyan/WebStack-Hugo)\r\n\r\n## 主题展示地址\r\n\r\n[**WebStack-Hugo 网址导航**](https://bioit.top/) | [**生信网址导航**](https://hao.bioitee.com/) \r\n\r\n## 为什么做这个网站\r\n\r\n之所以想着要给自己倒腾一个导航网站，主要有几个原因：\r\n\r\n- 购买了一个域名，且也备案成功了，总想折腾点跟它有关的事情；\r\n- 经常在公司、家里（有时候还有其他的临时场所）更换电脑，每次同步书签（或者登陆一些导航网站）需要各种登陆，麻烦。\r\n\r\n说干就干，从 [WebStack 的开源项目](https://github.com/WebStackPage/WebStackPage.github.io)开始，断断续续的折腾了好几天，终于把轮子造起来了。\r\n\r\n<img src="https://kg.weiyan.cc/2023/11/webstack-hugo-collapse.png" width=800>\r\n<img src="https://kg.weiyan.cc/2023/11/webstack-hugo-expand.png" width=800>\r\n<img src="https://kg.weiyan.cc/2023/11/webstack-hugo-search.png" width=800>\r\n<img src="https://kg.weiyan.cc/2023/11/webstack-hugo-phone.png" alt="webstack-apple" width=600>\r\n\r\n## 跟其他导航网站有什么区别\r\n\r\n这是 Hugo 版 WebStack 主题。可以借助 Github/Gitee Pages 或者云平台直接托管部署，无需服务器。\r\n\r\n本项目是基于纯静态的网址导航网站 [webstack.cc](https://github.com/WebStackPage/WebStackPage.github.io) 制作的 [Hugo](https://gohugo.io/) 主题，其中部分代码参考了以下几个开源项目：\r\n\r\n- [https://github.com/WebStackPage/WebStackPage.github.io](https://github.com/WebStackPage/WebStackPage.github.io)\r\n- [https://github.com/liutongxu/liutongxu.github.io](https://github.com/WebStackPage/WebStackPage.github.io)\r\n- [https://github.com/iplaycode/webstack-hugo](https://github.com/iplaycode/webstack-hugo)\r\n\r\n总体说一下特点：\r\n\r\n- 采用了一直以来最喜欢的 hugo 部署方式，方便高效。\r\n- 主要的配置信息都集成到了 **config.toml**，一键完成各种自定义的配置。\r\n- 导航的各个信息都集成在 **data/webstack.yml** 文件中，方便后续增删改动。\r\n\r\n```yaml\r\n- taxonomy: 科研办公\r\n  icon: fas fa-flask fa-lg\r\n  list:\r\n    - term: 生物信息\r\n      links:\r\n        - title: NCBI\r\n          logo: n/ncbi.jpg\r\n          url: https://www.ncbi.nlm.nih.gov/\r\n          description: National Center for Biotechnology Information.\r\n        - title: Bioconda\r\n          logo: b/bioconda.jpg\r\n          url: https://anaconda.org/bioconda/\r\n          description: "Bioconda :: Anaconda.org."\r\n    - term: 云服务器\r\n      links:\r\n        - title: 阿里云\r\n          logo: a/aliyun.jpg\r\n          url: https://www.aliyun.com/\r\n          description: 上云就上阿里云。\r\n        - title: 腾讯云\r\n          logo: c/cloud-tencent.jpg\r\n          url: https://cloud.tencent.com/\r\n          description: 产业智变，云启未来。\r\n```\r\n\r\n- 做了手机电脑自适应以及夜间模式。\r\n- 增加了搜索功能，以及下拉的热词选项（基于百度 API）。\r\n- 增加了一言、和风天气的 API（和风天气 API 已经官方已经不再支持，目前还没到到替代）。\r\n\r\n## Windows 下安装部署\r\n\r\n本安装部署在 Windows 7 x64 上测试没问题，相关操作同样适用于 Windows 10，如有任何问题，欢迎留言或者微信与我联系。\r\n\r\n### 第一，下载 hugo\r\n\r\n下载链接：[https://github.com/gohugoio/hugo/releases](https://github.com/gohugoio/hugo/releases)，在这里我们下载 [hugo_0.89.4_Windows-64bit.zip](https://github.com/gohugoio/hugo/releases/download/v0.89.4/hugo_0.89.4_Windows-64bit.zip)。\r\n\r\n![download-hugo-windows](https://kg.weiyan.cc/2023/11/download-hugo-windows.png)\r\n\r\n### 第二，解压\r\n\r\n我们把 [hugo_0.89.4_Windows-64bit.zip](https://github.com/gohugoio/hugo/releases/download/v0.89.4/hugo_0.89.4_Windows-64bit.zip) 下载到 **F:\\WebStack** 目录下，然后解压到当前文件夹。\r\n\r\n解压完成后，在该目录会多出 `hugo.exe`、`LICENSE`、`README.md` 三个文件：\r\n\r\n![unzip hugo_0.89.4_Windows-64bit](https://kg.weiyan.cc/2023/11/unzip-hugo-0.89.4-windows-64bit.png)\r\n\r\n### 第三，检测是否安装成功\r\n\r\n通过下面的方法，检测 `hugo` 是否安装成功。\r\n\r\n> **🏷️ 温馨提示：**\r\n> \r\n> Windows 命令运行窗口中可以使用 Tab 进行命令行补全，例如你当前目录下有一个 WebStack-Hugo 目录，你在命令行窗口中输入一个 w 后按下 Tab 键，命令行就会自动出现 WebStack-Hugo！\r\n> \r\n> 使用命令行补全，可以减少代码（或者文件名）的输入，方便快捷，又能减少错误！\r\n\r\n1. 在 Windows 中使用 **Win+R** 打开“**运行**”对话框，在对话框中输入“**cmd**”，点击确认。\r\n\r\n   ![win-r-cmd](https://kg.weiyan.cc/2023/11/win-r-cmd.png)\r\n\r\n2. 在 Windows 运行窗口，先切换盘符到 **F** 盘，然后进入 `hugo` 的解压缩目录（**F:\\WebStack**），具体操作如下。\r\n\r\n   - 在光标处输入 **F:**，然后按回车；\r\n\r\n     ![cmd-change-dir](https://kg.weiyan.cc/2023/11/cmd-change-dir.png)\r\n\r\n   - 我们就将盘符切换为 **F** 盘；\r\n\r\n     ![cmd-f-dir](https://kg.weiyan.cc/2023/11/cmd-f-dir.png)\r\n\r\n   - 接着输入 **cd WebStack**，回车，就进入了 **F:\\WebStack** 目录；使用 **ls** 可以看到当前目录下的文件。\r\n\r\n     ![webstack-win-ls](https://kg.weiyan.cc/2023/11/webstack-win-ls.png)\r\n\r\n   - 最后，输入 **hugo.exe version**，回车，如图所示，则代表安装成功。\r\n\r\n     ![hugo-exe-version](https://kg.weiyan.cc/2023/11/hugo-exe-version.png)\r\n\r\n### 第四，下载 WebStack-Hugo\r\n\r\n浏览器打开 [https://github.com/shenweiyan/WebStack-Hugo](https://github.com/shenweiyan/WebStack-Hugo)，点击 Code 下的 **"Download ZIP"**，把 **WebStack-hugo-main.zip** 下载到刚才 hugo 解压缩的目录（**F:\\WebStack**）。\r\n\r\n![webstack-download-zip](https://kg.weiyan.cc/2023/11/webstack-download-zip.png)\r\n\r\n![webstack-hugo-main-zip](https://kg.weiyan.cc/2023/11/webstack-hugo-main-zip.png)\r\n\r\n### 第五，解压和重命名\r\n\r\n把 **WebStack-Hugo-main.zip** 解压到当前目录。\r\n\r\n![webstack-hugo-main-unzip](https://kg.weiyan.cc/2023/11/webstack-hugo-main-unzip.png)\r\n![webstack-hugo-main-rename](https://kg.weiyan.cc/2023/11/webstack-hugo-main-rename.png)\r\n\r\n### 第六，安装主题\r\n\r\n首先，进入 **F:\\WebStack** 目录；\r\n\r\n然后，创建一个 **themes** 的文件夹；\r\n\r\n![create-themes-dir](https://kg.weiyan.cc/2023/11/create-themes-dir.png)\r\n\r\n接着，把解压后的 **WebStack-Hugo** 整个文件夹移动到 **themes** 中。\r\n\r\n![mv-webstack-hugo-to-themes](https://kg.weiyan.cc/2023/11/mv-webstack-hugo-to-themes.png)\r\n\r\n第四，将 `themes/WebStack-Hugo/exampleSite` 目录下的所有文件复制到 hugo 站点根目录（即 `F:\\WebStack`）。\r\n\r\n![cp-examplesite](https://kg.weiyan.cc/2023/11/cp-examplesite.png)\r\n\r\n### 第七，启动预览\r\n\r\n在刚才已经打开的 Windows 命令运行窗口中，使用下面的命令执行 **hugo server**，启动站点——Hugo 可以启动一个 Web 服务器，同时构建站点内容到内存中并在检测到文件更改后重新渲染，方便我们在开发环境实时预览对站点所做的更改。\r\n\r\n```shell\r\nhugo.exe server\r\n```\r\n\r\n![hugo-exe-server](https://kg.weiyan.cc/2023/11/hugo-exe-server.png)\r\n\r\n最后，在浏览器中打开 [**http://127.0.0.1:1313/**](http://127.0.0.1:1313/)，即可看到生成的站点。\r\n\r\n![webstack-hugo-1313](https://kg.weiyan.cc/2023/11/webstack-hugo-1313.png)\r\n\r\n## Linux 下安装部署\r\n\r\n安装完本 WebStack-Hugo 主题后，将 exampleSite 目录下的文件复制到 hugo 站点根目录，根据需要把 config.toml 的一些信息改成自己的，导航的网址信息可通过 data 目录下 webstack.yml 修改。\r\n\r\n具体执行步骤如下：\r\n\r\n```bash\r\nmkdir /home/shenweiyan/mysite\r\ncd /home/shenweiyan/mysite\r\n\r\n# 安装 WebStack-Hugo 主题\r\ngit clone https://github.com/shenweiyan/WebStack-Hugo.git themes/WebStack-Hugo\r\n\r\n# 将 exampleSite 目录下的文件复制到 hugo 站点根目录\r\ncd /home/shenweiyan/mysite\r\ncp -r themes/WebStack-Hugo/exampleSite/* ./\r\n\r\n# 启动 hugo 站点\r\nhugo server\r\n# 如果你知道你的公网 ip, 如下面的 132.76.230.31, 可以使用下面的方式执行 hugo server\r\nhugo server --baseUrl=132.76.230.31 --bind=0.0.0.0\r\n```\r\n\r\n也可以参考 [@jetsung](https://github.com/jetsung) 在 [pull 15](https://github.com/shenweiyan/WebStack-Hugo/pull/15) 所用的方法安装部署：\r\n\r\n```bash\r\n# 创建项目\r\nmkdir navsites\r\ncd $_\r\n\r\n# 初始化项目\r\ngit init\r\n\r\n# 将 WebStack-Hugo 源下载到 themes/WebStack-Hugo 文件夹\r\ngit submodule add https://github.com/shenweiyan/WebStack-Hugo.git themes/WebStack-Hugo\r\ncp -r themes/WebStack-Hugo/exampleSite/* ./\r\n\r\n# 安装 hugo\r\ngo install github.com/gohugoio/hugo@latest\r\n\r\n# 本地测试\r\nhugo server\r\n\r\n# 生成 docs 文件夹，将并静态内容生成至此处\r\nhugo -D\r\n```\r\n\r\n## 导出 HTML 静态资源\r\n\r\nWindows/Linux 下执行的 **hugo server** 命令将会通过热加载的方式临时启动一个 Hugo 服务器（Hugo 可以启动一个 Web 服务器，同时构建站点内容到内存中并在检测到文件更改后重新渲染，方便我们在开发环境实时预览对站点所做的更改），这个时候我们打开浏览器 [http://127.0.0.1:1313/](http://127.0.0.1:1313/)，就可以看到我们站点的样子了。\r\n\r\n如果我们想要把我们的站点部署到 GitHub/Gitee Pages（或者本地的服务器），我们可以：\r\n\r\n### 1. 生成静态页面内容\r\n\r\n可以通过下面的命令，生成(构建)静态页面内容。\r\n\r\n```python\r\nhugo -D 或者 hugo --minify\r\n```\r\n\r\n这个命令会默认在 **`public/`** 目录中生成您的网站，当然您可以通过改变站点配置中的 **`publishDir`** 选项来配置这个输出目录。\r\n\r\n> **🏷️ Hugo 小知识 - 草案、未来和过期内容**\r\n> \r\n> Hugo 允许您在网站内容的前言设定中设置文档的`draft`，`publishdate`甚至`expirydate`字段。默认情况下，Hugo 不会发布下面内容：\r\n>\r\n> 1. `publishdate` 发布日期值设定在未来的内容；\r\n> 2. `draft:true` 草案状态设置为真的内容；\r\n> 3. `expirydate` 过期日期值设置为过去某事件的内容。\r\n>\r\n> 这三个可以在本地开发和部署编译时通过对`hugo`和`hugo server`分别添加如下参数来重新设定，或者在配置文件中设定对应(不包含`--`)域的 boolean 值：\r\n>\r\n> 1. -F, --buildFuture include content with publishdate in the future\r\n> 2. -D, --buildDrafts include content marked as draft\r\n> 3. -E, --buildExpired include expired content\r\n\r\n### 2. 部署站点\r\n\r\n把生成的 `public/` 静态内容目录上传到 GitHub，开启 GitHub/Gitee Pages，并且绑定 cname 域名即可。\r\n\r\n## 使用说明与技巧\r\n\r\n这是一个开源的公益项目，你可以拿来制作自己的网址导航，也可以做与导航无关的网站。\r\n\r\n### 左导航栏图标\r\n\r\n左侧、顶部导航栏图标用的都是 **Font Awesome** 图标库 **v5** 版本 **Free** 的图标。链接如下：\r\n\r\n🔗 [https://fontawesome.com/v5/search?o=r&m=free](https://fontawesome.com/v5/search?o=r&m=free)\r\n\r\n![fontawesome-v5-free](https://kg.weiyan.cc/2023/11/fontawesome-v5-free.png)\r\n\r\n### 调整头部搜索栏\r\n\r\n头部搜索栏的默认位置可以通过下面的方法进行修改。\r\n\r\n1. 直接修改 **layouts/partials/content_search.html**，调整对应部分的位置。\r\n2. 调整默认的搜索（即点击"常用/搜索/工具 ...." 时下指箭头的指向），把对应的 id 添加到对应的 label 里面。\r\n\r\n![set-default-search-bing](https://kg.weiyan.cc/2023/11/set-default-search-bing.png)\r\n![view-default-search-bing](https://kg.weiyan.cc/2023/11/view-default-search-bing.png)\r\n\r\n### 自定义头部导航\r\n\r\n[WebStack-Hugo](https://github.com/shenweiyan/WebStack-Hugo) 把头部的导航菜单的各个信息集成在了 **data/header.yml** 文件中，每个人可以根据自己的需要调整。\r\n\r\n```yaml\r\n- item: 首页\r\n  icon: fa fa-home\r\n  link: "./"\r\n\r\n- item: 作者\r\n  icon: fa fa-book\r\n  link: https://www.yuque.com/shenweiyan\r\n\r\n- item: 配置\r\n  icon: fa fa-cog\r\n  link: ""\r\n  list:\r\n    - name: 源码\r\n      url: "#"\r\n    - name: 图标\r\n      url: "#"\r\n```\r\n\r\n### 获取网站图标\r\n\r\n[Bio & IT 网址导航](https://nav.bioitee.com/)默认使用的是个人收集的网站图标，主要是查看网站源码、百度、谷歌等途径把对应导航的图标下载下来，这个方法比较原始繁琐，适合导航不是很多的情况。\r\n\r\n#### 一为\r\n\r\n你也可以使用一为提供的的 [Favicon](https://www.iowen.cn/tag/favicon/) 图标 [API](https://www.iowen.cn/tag/api/)：[获取网站 Favicon - 免费 API 数据接口调用服务平台](https://api.iowen.cn/doc/favicon.html)。\r\n\r\n**使用方法：**\r\n\r\n1. 获取 Favicon 图标\r\n```\r\nhttps://api.iowen.cn/favicon/www.iowen.cn.png\r\n```\r\n\r\n2. 刷新缓存\r\n```\r\nhttps://api.iowen.cn/favicon/www.iowen.cn.png?refresh=true\r\n```\r\n\r\n3. 将上方代码中的 `www.iowen.cn` 替换为你需要获取的网址域名。\r\n\r\n#### Favicon.im\r\n\r\n除了一为的 API，你也可以使用 <https://favicon.im/> 来在网页中插入其他网站的 Favicon 图片，可以放大显示。\r\n\r\n![favicon-im](https://kg.weiyan.cc/2024/08/favicon-im.webp)\r\n\r\n#### Favicon Extractor\r\n\r\n类似网站 [Favicon Downloader](https://www.faviconextractor.com/)，代码[开源](https://github.com/seadfeng/favicon-downloader)。\r\n\r\n![favicon-extractor](https://kg.weiyan.cc/2024/08/favicon-extractor.webp)\r\n\r\n\r\n## 已知问题\r\n\r\n1. 日间模式与夜间模式切换时候，头部搜索栏的背景图片切换不够流畅（个人的 js 知识有限，在 footer.html 做了一些简单的调整来实现），如果你有更好的想法，欢迎 PR 或者交流。\r\n\r\n## 感谢墙\r\n\r\n本主题的部分代码参考了以下几个开源项目，特此感谢。\r\n\r\n- [WebStackPage/WebStackPage.github.io](https://github.com/WebStackPage/WebStackPage.github.io)\r\n- [liutongxu/liutongxu.github.io](https://github.com/liutongxu/liutongxu.github.io)\r\n- [iplaycode/webstack-hugo](https://github.com/iplaycode/webstack-hugo)\r\n\r\n感谢 [WebStack](https://github.com/WebStackPage/WebStackPage.github.io) 的作者 [Viggo](https://twitter.com/decohack) 的肯定和[推广宣传](https://twitter.com/decohack/status/1569188705478516738)。\r\n\r\n![twitter-decohack-webstack-hugo](https://kg.weiyan.cc/2023/11/twitter-decohack-webstack-hugo.png)\r\n\r\n感谢以下所有朋友对本主题所做出的贡献。       \r\n**[@yanbeiyinhanghang](https://github.com/yinhanghang)**      \r\n**[@jetsung](https://github.com/jetsung)**       \r\n\r\n## 赞赏\r\n\r\n如果你觉得本项目对你有所帮助，欢迎请作者喝杯热咖啡 >.<     \r\n\r\n![donate-wecaht-aliapy](https://kg.weiyan.cc/0000/img/donate.webp)\r\n\r\n## 反馈与交流\r\n\r\n最后，最重要的，秉承 WebStack 的宗旨，这是一个开源的公益项目，你可以拿来制作自己的网址导航，也可以做与导航无关的网站。\r\n\r\nWebStack 有非常多的魔改版本，这是其中一个。\r\n\r\n**如果你对本主题进行了一些个性化调整，欢迎在本项目中 **[**issues**](https://github.com/shenweiyan/WebStack-Hugo/issues)** 中一起分享交流！**\r\n\r\n**如果参考本主题构建了属于你自己的网址导航，欢迎在本评论区（或源码 **[**issues**](https://github.com/shenweiyan/WebStack-Hugo/issues)** 区）留下你网站的访问链接 >.<**\r\n', 'bodyText': 'Via：我给自己做了一个导航网站 | BioIT爱好者\n\n\n📢 让更多人的人制作自己的导航网站。如果你觉得本主题对你有所帮助，欢迎请作者 喝杯咖啡 >.<\n主题开源地址\nGitHub | Gitee | GitCode\n主题展示地址\nWebStack-Hugo 网址导航 | 生信网址导航\n为什么做这个网站\n之所以想着要给自己倒腾一个导航网站，主要有几个原因：\n\n购买了一个域名，且也备案成功了，总想折腾点跟它有关的事情；\n经常在公司、家里（有时候还有其他的临时场所）更换电脑，每次同步书签（或者登陆一些导航网站）需要各种登陆，麻烦。\n\n说干就干，从 WebStack 的开源项目开始，断断续续的折腾了好几天，终于把轮子造起来了。\n\n\n\n\n跟其他导航网站有什么区别\n这是 Hugo 版 WebStack 主题。可以借助 Github/Gitee Pages 或者云平台直接托管部署，无需服务器。\n本项目是基于纯静态的网址导航网站 webstack.cc 制作的 Hugo 主题，其中部分代码参考了以下几个开源项目：\n\nhttps://github.com/WebStackPage/WebStackPage.github.io\nhttps://github.com/liutongxu/liutongxu.github.io\nhttps://github.com/iplaycode/webstack-hugo\n\n总体说一下特点：\n\n采用了一直以来最喜欢的 hugo 部署方式，方便高效。\n主要的配置信息都集成到了 config.toml，一键完成各种自定义的配置。\n导航的各个信息都集成在 data/webstack.yml 文件中，方便后续增删改动。\n\n- taxonomy: 科研办公\n  icon: fas fa-flask fa-lg\n  list:\n    - term: 生物信息\n      links:\n        - title: NCBI\n          logo: n/ncbi.jpg\n          url: https://www.ncbi.nlm.nih.gov/\n          description: National Center for Biotechnology Information.\n        - title: Bioconda\n          logo: b/bioconda.jpg\n          url: https://anaconda.org/bioconda/\n          description: "Bioconda :: Anaconda.org."\n    - term: 云服务器\n      links:\n        - title: 阿里云\n          logo: a/aliyun.jpg\n          url: https://www.aliyun.com/\n          description: 上云就上阿里云。\n        - title: 腾讯云\n          logo: c/cloud-tencent.jpg\n          url: https://cloud.tencent.com/\n          description: 产业智变，云启未来。\n\n做了手机电脑自适应以及夜间模式。\n增加了搜索功能，以及下拉的热词选项（基于百度 API）。\n增加了一言、和风天气的 API（和风天气 API 已经官方已经不再支持，目前还没到到替代）。\n\nWindows 下安装部署\n本安装部署在 Windows 7 x64 上测试没问题，相关操作同样适用于 Windows 10，如有任何问题，欢迎留言或者微信与我联系。\n第一，下载 hugo\n下载链接：https://github.com/gohugoio/hugo/releases，在这里我们下载 hugo_0.89.4_Windows-64bit.zip。\n\n第二，解压\n我们把 hugo_0.89.4_Windows-64bit.zip 下载到 F:\\WebStack 目录下，然后解压到当前文件夹。\n解压完成后，在该目录会多出 hugo.exe、LICENSE、README.md 三个文件：\n\n第三，检测是否安装成功\n通过下面的方法，检测 hugo 是否安装成功。\n\n🏷️ 温馨提示：\nWindows 命令运行窗口中可以使用 Tab 进行命令行补全，例如你当前目录下有一个 WebStack-Hugo 目录，你在命令行窗口中输入一个 w 后按下 Tab 键，命令行就会自动出现 WebStack-Hugo！\n使用命令行补全，可以减少代码（或者文件名）的输入，方便快捷，又能减少错误！\n\n\n\n在 Windows 中使用 Win+R 打开“运行”对话框，在对话框中输入“cmd”，点击确认。\n\n\n\n在 Windows 运行窗口，先切换盘符到 F 盘，然后进入 hugo 的解压缩目录（F:\\WebStack），具体操作如下。\n\n\n在光标处输入 F:，然后按回车；\n\n\n\n我们就将盘符切换为 F 盘；\n\n\n\n接着输入 cd WebStack，回车，就进入了 F:\\WebStack 目录；使用 ls 可以看到当前目录下的文件。\n\n\n\n最后，输入 hugo.exe version，回车，如图所示，则代表安装成功。\n\n\n\n\n\n第四，下载 WebStack-Hugo\n浏览器打开 https://github.com/shenweiyan/WebStack-Hugo，点击 Code 下的 "Download ZIP"，把 WebStack-hugo-main.zip 下载到刚才 hugo 解压缩的目录（F:\\WebStack）。\n\n\n第五，解压和重命名\n把 WebStack-Hugo-main.zip 解压到当前目录。\n\n\n第六，安装主题\n首先，进入 F:\\WebStack 目录；\n然后，创建一个 themes 的文件夹；\n\n接着，把解压后的 WebStack-Hugo 整个文件夹移动到 themes 中。\n\n第四，将 themes/WebStack-Hugo/exampleSite 目录下的所有文件复制到 hugo 站点根目录（即 F:\\WebStack）。\n\n第七，启动预览\n在刚才已经打开的 Windows 命令运行窗口中，使用下面的命令执行 hugo server，启动站点——Hugo 可以启动一个 Web 服务器，同时构建站点内容到内存中并在检测到文件更改后重新渲染，方便我们在开发环境实时预览对站点所做的更改。\nhugo.exe server\n\n最后，在浏览器中打开 http://127.0.0.1:1313/，即可看到生成的站点。\n\nLinux 下安装部署\n安装完本 WebStack-Hugo 主题后，将 exampleSite 目录下的文件复制到 hugo 站点根目录，根据需要把 config.toml 的一些信息改成自己的，导航的网址信息可通过 data 目录下 webstack.yml 修改。\n具体执行步骤如下：\nmkdir /home/shenweiyan/mysite\ncd /home/shenweiyan/mysite\n\n# 安装 WebStack-Hugo 主题\ngit clone https://github.com/shenweiyan/WebStack-Hugo.git themes/WebStack-Hugo\n\n# 将 exampleSite 目录下的文件复制到 hugo 站点根目录\ncd /home/shenweiyan/mysite\ncp -r themes/WebStack-Hugo/exampleSite/* ./\n\n# 启动 hugo 站点\nhugo server\n# 如果你知道你的公网 ip, 如下面的 132.76.230.31, 可以使用下面的方式执行 hugo server\nhugo server --baseUrl=132.76.230.31 --bind=0.0.0.0\n也可以参考 @jetsung 在 pull 15 所用的方法安装部署：\n# 创建项目\nmkdir navsites\ncd $_\n\n# 初始化项目\ngit init\n\n# 将 WebStack-Hugo 源下载到 themes/WebStack-Hugo 文件夹\ngit submodule add https://github.com/shenweiyan/WebStack-Hugo.git themes/WebStack-Hugo\ncp -r themes/WebStack-Hugo/exampleSite/* ./\n\n# 安装 hugo\ngo install github.com/gohugoio/hugo@latest\n\n# 本地测试\nhugo server\n\n# 生成 docs 文件夹，将并静态内容生成至此处\nhugo -D\n导出 HTML 静态资源\nWindows/Linux 下执行的 hugo server 命令将会通过热加载的方式临时启动一个 Hugo 服务器（Hugo 可以启动一个 Web 服务器，同时构建站点内容到内存中并在检测到文件更改后重新渲染，方便我们在开发环境实时预览对站点所做的更改），这个时候我们打开浏览器 http://127.0.0.1:1313/，就可以看到我们站点的样子了。\n如果我们想要把我们的站点部署到 GitHub/Gitee Pages（或者本地的服务器），我们可以：\n1. 生成静态页面内容\n可以通过下面的命令，生成(构建)静态页面内容。\nhugo -D 或者 hugo --minify\n这个命令会默认在 public/ 目录中生成您的网站，当然您可以通过改变站点配置中的 publishDir 选项来配置这个输出目录。\n\n🏷️ Hugo 小知识 - 草案、未来和过期内容\nHugo 允许您在网站内容的前言设定中设置文档的draft，publishdate甚至expirydate字段。默认情况下，Hugo 不会发布下面内容：\n\npublishdate 发布日期值设定在未来的内容；\ndraft:true 草案状态设置为真的内容；\nexpirydate 过期日期值设置为过去某事件的内容。\n\n这三个可以在本地开发和部署编译时通过对hugo和hugo server分别添加如下参数来重新设定，或者在配置文件中设定对应(不包含--)域的 boolean 值：\n\n-F, --buildFuture include content with publishdate in the future\n-D, --buildDrafts include content marked as draft\n-E, --buildExpired include expired content\n\n\n2. 部署站点\n把生成的 public/ 静态内容目录上传到 GitHub，开启 GitHub/Gitee Pages，并且绑定 cname 域名即可。\n使用说明与技巧\n这是一个开源的公益项目，你可以拿来制作自己的网址导航，也可以做与导航无关的网站。\n左导航栏图标\n左侧、顶部导航栏图标用的都是 Font Awesome 图标库 v5 版本 Free 的图标。链接如下：\n🔗 https://fontawesome.com/v5/search?o=r&m=free\n\n调整头部搜索栏\n头部搜索栏的默认位置可以通过下面的方法进行修改。\n\n直接修改 layouts/partials/content_search.html，调整对应部分的位置。\n调整默认的搜索（即点击"常用/搜索/工具 ...." 时下指箭头的指向），把对应的 id 添加到对应的 label 里面。\n\n\n\n自定义头部导航\nWebStack-Hugo 把头部的导航菜单的各个信息集成在了 data/header.yml 文件中，每个人可以根据自己的需要调整。\n- item: 首页\n  icon: fa fa-home\n  link: "./"\n\n- item: 作者\n  icon: fa fa-book\n  link: https://www.yuque.com/shenweiyan\n\n- item: 配置\n  icon: fa fa-cog\n  link: ""\n  list:\n    - name: 源码\n      url: "#"\n    - name: 图标\n      url: "#"\n获取网站图标\nBio & IT 网址导航默认使用的是个人收集的网站图标，主要是查看网站源码、百度、谷歌等途径把对应导航的图标下载下来，这个方法比较原始繁琐，适合导航不是很多的情况。\n一为\n你也可以使用一为提供的的 Favicon 图标 API：获取网站 Favicon - 免费 API 数据接口调用服务平台。\n使用方法：\n\n获取 Favicon 图标\n\nhttps://api.iowen.cn/favicon/www.iowen.cn.png\n\n\n刷新缓存\n\nhttps://api.iowen.cn/favicon/www.iowen.cn.png?refresh=true\n\n\n将上方代码中的 www.iowen.cn 替换为你需要获取的网址域名。\n\nFavicon.im\n除了一为的 API，你也可以使用 https://favicon.im/ 来在网页中插入其他网站的 Favicon 图片，可以放大显示。\n\nFavicon Extractor\n类似网站 Favicon Downloader，代码开源。\n\n已知问题\n\n日间模式与夜间模式切换时候，头部搜索栏的背景图片切换不够流畅（个人的 js 知识有限，在 footer.html 做了一些简单的调整来实现），如果你有更好的想法，欢迎 PR 或者交流。\n\n感谢墙\n本主题的部分代码参考了以下几个开源项目，特此感谢。\n\nWebStackPage/WebStackPage.github.io\nliutongxu/liutongxu.github.io\niplaycode/webstack-hugo\n\n感谢 WebStack 的作者 Viggo 的肯定和推广宣传。\n\n感谢以下所有朋友对本主题所做出的贡献。\n@yanbeiyinhanghang\n@jetsung\n赞赏\n如果你觉得本项目对你有所帮助，欢迎请作者喝杯热咖啡 >.<\n\n反馈与交流\n最后，最重要的，秉承 WebStack 的宗旨，这是一个开源的公益项目，你可以拿来制作自己的网址导航，也可以做与导航无关的网站。\nWebStack 有非常多的魔改版本，这是其中一个。\n如果你对本主题进行了一些个性化调整，欢迎在本项目中 issues 中一起分享交流！\n如果参考本主题构建了属于你自己的网址导航，欢迎在本评论区（或源码 issues 区）留下你网站的访问链接 >.<', 'bodyHTML': '<blockquote>\n<p dir="auto">Via：<a href="https://mp.weixin.qq.com/s/gVWGjxG9qd7qSyX3N8Zgag" rel="nofollow">我给自己做了一个导航网站</a> | <a href="https://www.bioitee.com" rel="nofollow">BioIT爱好者</a></p>\n</blockquote>\n<br>\n<p dir="auto"><strong>📢 让更多人的人制作自己的导航网站。如果你觉得本主题对你有所帮助，欢迎请作者 <a href="https://kg.weiyan.cc/0000/img/donate.webp" rel="nofollow">喝杯咖啡</a> &gt;.&lt;</strong></p>\n<h2 dir="auto">主题开源地址</h2>\n<p dir="auto"><a href="https://github.com/shenweiyan/WebStack-Hugo"><strong>GitHub</strong></a> | <a href="https://gitee.com/shenweiyan/WebStack-Hugo" rel="nofollow"><strong>Gitee</strong></a> | <a href="https://gitcode.com/shenweiyan/WebStack-Hugo" rel="nofollow"><strong>GitCode</strong></a></p>\n<h2 dir="auto">主题展示地址</h2>\n<p dir="auto"><a href="https://bioit.top/" rel="nofollow"><strong>WebStack-Hugo 网址导航</strong></a> | <a href="https://hao.bioitee.com/" rel="nofollow"><strong>生信网址导航</strong></a></p>\n<h2 dir="auto">为什么做这个网站</h2>\n<p dir="auto">之所以想着要给自己倒腾一个导航网站，主要有几个原因：</p>\n<ul dir="auto">\n<li>购买了一个域名，且也备案成功了，总想折腾点跟它有关的事情；</li>\n<li>经常在公司、家里（有时候还有其他的临时场所）更换电脑，每次同步书签（或者登陆一些导航网站）需要各种登陆，麻烦。</li>\n</ul>\n<p dir="auto">说干就干，从 <a href="https://github.com/WebStackPage/WebStackPage.github.io">WebStack 的开源项目</a>开始，断断续续的折腾了好几天，终于把轮子造起来了。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/d60a5c99c06c911ef241f53ad0770d12ab8a2269bf66f0907cd9760e8ed1ee9e/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f776562737461636b2d6875676f2d636f6c6c617073652e706e67"><img src="https://camo.githubusercontent.com/d60a5c99c06c911ef241f53ad0770d12ab8a2269bf66f0907cd9760e8ed1ee9e/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f776562737461636b2d6875676f2d636f6c6c617073652e706e67" width="800" data-canonical-src="https://kg.weiyan.cc/2023/11/webstack-hugo-collapse.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/ea9e0450b985c3857e3f3e1aaba25977198ddc0145bd4b345cc2f30c41c9373f/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f776562737461636b2d6875676f2d657870616e642e706e67"><img src="https://camo.githubusercontent.com/ea9e0450b985c3857e3f3e1aaba25977198ddc0145bd4b345cc2f30c41c9373f/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f776562737461636b2d6875676f2d657870616e642e706e67" width="800" data-canonical-src="https://kg.weiyan.cc/2023/11/webstack-hugo-expand.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/f557611a4ff4471bf762115653a3a805666426bee4ba2c21ae80052f1c312b8e/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f776562737461636b2d6875676f2d7365617263682e706e67"><img src="https://camo.githubusercontent.com/f557611a4ff4471bf762115653a3a805666426bee4ba2c21ae80052f1c312b8e/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f776562737461636b2d6875676f2d7365617263682e706e67" width="800" data-canonical-src="https://kg.weiyan.cc/2023/11/webstack-hugo-search.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b445a696ca7d158a0bd1d28c7686db7b5172d19224fdbc79b28f6281ff3a3826/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f776562737461636b2d6875676f2d70686f6e652e706e67"><img src="https://camo.githubusercontent.com/b445a696ca7d158a0bd1d28c7686db7b5172d19224fdbc79b28f6281ff3a3826/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f776562737461636b2d6875676f2d70686f6e652e706e67" alt="webstack-apple" width="600" data-canonical-src="https://kg.weiyan.cc/2023/11/webstack-hugo-phone.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">跟其他导航网站有什么区别</h2>\n<p dir="auto">这是 Hugo 版 WebStack 主题。可以借助 Github/Gitee Pages 或者云平台直接托管部署，无需服务器。</p>\n<p dir="auto">本项目是基于纯静态的网址导航网站 <a href="https://github.com/WebStackPage/WebStackPage.github.io">webstack.cc</a> 制作的 <a href="https://gohugo.io/" rel="nofollow">Hugo</a> 主题，其中部分代码参考了以下几个开源项目：</p>\n<ul dir="auto">\n<li><a href="https://github.com/WebStackPage/WebStackPage.github.io">https://github.com/WebStackPage/WebStackPage.github.io</a></li>\n<li><a href="https://github.com/WebStackPage/WebStackPage.github.io">https://github.com/liutongxu/liutongxu.github.io</a></li>\n<li><a href="https://github.com/iplaycode/webstack-hugo">https://github.com/iplaycode/webstack-hugo</a></li>\n</ul>\n<p dir="auto">总体说一下特点：</p>\n<ul dir="auto">\n<li>采用了一直以来最喜欢的 hugo 部署方式，方便高效。</li>\n<li>主要的配置信息都集成到了 <strong>config.toml</strong>，一键完成各种自定义的配置。</li>\n<li>导航的各个信息都集成在 <strong>data/webstack.yml</strong> 文件中，方便后续增删改动。</li>\n</ul>\n<div class="highlight highlight-source-yaml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="- taxonomy: 科研办公\n  icon: fas fa-flask fa-lg\n  list:\n    - term: 生物信息\n      links:\n        - title: NCBI\n          logo: n/ncbi.jpg\n          url: https://www.ncbi.nlm.nih.gov/\n          description: National Center for Biotechnology Information.\n        - title: Bioconda\n          logo: b/bioconda.jpg\n          url: https://anaconda.org/bioconda/\n          description: &quot;Bioconda :: Anaconda.org.&quot;\n    - term: 云服务器\n      links:\n        - title: 阿里云\n          logo: a/aliyun.jpg\n          url: https://www.aliyun.com/\n          description: 上云就上阿里云。\n        - title: 腾讯云\n          logo: c/cloud-tencent.jpg\n          url: https://cloud.tencent.com/\n          description: 产业智变，云启未来。"><pre class="notranslate">- <span class="pl-ent">taxonomy</span>: <span class="pl-s">科研办公</span>\n  <span class="pl-ent">icon</span>: <span class="pl-s">fas fa-flask fa-lg</span>\n  <span class="pl-ent">list</span>:\n    - <span class="pl-ent">term</span>: <span class="pl-s">生物信息</span>\n      <span class="pl-ent">links</span>:\n        - <span class="pl-ent">title</span>: <span class="pl-s">NCBI</span>\n          <span class="pl-ent">logo</span>: <span class="pl-s">n/ncbi.jpg</span>\n          <span class="pl-ent">url</span>: <span class="pl-s">https://www.ncbi.nlm.nih.gov/</span>\n          <span class="pl-ent">description</span>: <span class="pl-s">National Center for Biotechnology Information.</span>\n        - <span class="pl-ent">title</span>: <span class="pl-s">Bioconda</span>\n          <span class="pl-ent">logo</span>: <span class="pl-s">b/bioconda.jpg</span>\n          <span class="pl-ent">url</span>: <span class="pl-s">https://anaconda.org/bioconda/</span>\n          <span class="pl-ent">description</span>: <span class="pl-s"><span class="pl-pds">"</span>Bioconda :: Anaconda.org.<span class="pl-pds">"</span></span>\n    - <span class="pl-ent">term</span>: <span class="pl-s">云服务器</span>\n      <span class="pl-ent">links</span>:\n        - <span class="pl-ent">title</span>: <span class="pl-s">阿里云</span>\n          <span class="pl-ent">logo</span>: <span class="pl-s">a/aliyun.jpg</span>\n          <span class="pl-ent">url</span>: <span class="pl-s">https://www.aliyun.com/</span>\n          <span class="pl-ent">description</span>: <span class="pl-s">上云就上阿里云。</span>\n        - <span class="pl-ent">title</span>: <span class="pl-s">腾讯云</span>\n          <span class="pl-ent">logo</span>: <span class="pl-s">c/cloud-tencent.jpg</span>\n          <span class="pl-ent">url</span>: <span class="pl-s">https://cloud.tencent.com/</span>\n          <span class="pl-ent">description</span>: <span class="pl-s">产业智变，云启未来。</span></pre></div>\n<ul dir="auto">\n<li>做了手机电脑自适应以及夜间模式。</li>\n<li>增加了搜索功能，以及下拉的热词选项（基于百度 API）。</li>\n<li>增加了一言、和风天气的 API（和风天气 API 已经官方已经不再支持，目前还没到到替代）。</li>\n</ul>\n<h2 dir="auto">Windows 下安装部署</h2>\n<p dir="auto">本安装部署在 Windows 7 x64 上测试没问题，相关操作同样适用于 Windows 10，如有任何问题，欢迎留言或者微信与我联系。</p>\n<h3 dir="auto">第一，下载 hugo</h3>\n<p dir="auto">下载链接：<a href="https://github.com/gohugoio/hugo/releases">https://github.com/gohugoio/hugo/releases</a>，在这里我们下载 <a href="https://github.com/gohugoio/hugo/releases/download/v0.89.4/hugo_0.89.4_Windows-64bit.zip">hugo_0.89.4_Windows-64bit.zip</a>。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/fe712ffca68798cf1c8dcf3d799e7cd8da389aafee7c5d353b43eba45a541b26/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f646f776e6c6f61642d6875676f2d77696e646f77732e706e67"><img src="https://camo.githubusercontent.com/fe712ffca68798cf1c8dcf3d799e7cd8da389aafee7c5d353b43eba45a541b26/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f646f776e6c6f61642d6875676f2d77696e646f77732e706e67" alt="download-hugo-windows" data-canonical-src="https://kg.weiyan.cc/2023/11/download-hugo-windows.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">第二，解压</h3>\n<p dir="auto">我们把 <a href="https://github.com/gohugoio/hugo/releases/download/v0.89.4/hugo_0.89.4_Windows-64bit.zip">hugo_0.89.4_Windows-64bit.zip</a> 下载到 <strong>F:\\WebStack</strong> 目录下，然后解压到当前文件夹。</p>\n<p dir="auto">解压完成后，在该目录会多出 <code class="notranslate">hugo.exe</code>、<code class="notranslate">LICENSE</code>、<code class="notranslate">README.md</code> 三个文件：</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b6e4f8cb3076d1536f63a9626abdf50e6d04f003ded8884cffba04975faef847/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f756e7a69702d6875676f2d302e38392e342d77696e646f77732d36346269742e706e67"><img src="https://camo.githubusercontent.com/b6e4f8cb3076d1536f63a9626abdf50e6d04f003ded8884cffba04975faef847/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f756e7a69702d6875676f2d302e38392e342d77696e646f77732d36346269742e706e67" alt="unzip hugo_0.89.4_Windows-64bit" data-canonical-src="https://kg.weiyan.cc/2023/11/unzip-hugo-0.89.4-windows-64bit.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">第三，检测是否安装成功</h3>\n<p dir="auto">通过下面的方法，检测 <code class="notranslate">hugo</code> 是否安装成功。</p>\n<blockquote>\n<p dir="auto"><strong>🏷️ 温馨提示：</strong></p>\n<p dir="auto">Windows 命令运行窗口中可以使用 Tab 进行命令行补全，例如你当前目录下有一个 WebStack-Hugo 目录，你在命令行窗口中输入一个 w 后按下 Tab 键，命令行就会自动出现 WebStack-Hugo！</p>\n<p dir="auto">使用命令行补全，可以减少代码（或者文件名）的输入，方便快捷，又能减少错误！</p>\n</blockquote>\n<ol dir="auto">\n<li>\n<p dir="auto">在 Windows 中使用 <strong>Win+R</strong> 打开“<strong>运行</strong>”对话框，在对话框中输入“<strong>cmd</strong>”，点击确认。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/afd0a39753db010889c10357f0ad3d9ff896daae1900e7aea3a04fa1651a5d2e/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f77696e2d722d636d642e706e67"><img src="https://camo.githubusercontent.com/afd0a39753db010889c10357f0ad3d9ff896daae1900e7aea3a04fa1651a5d2e/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f77696e2d722d636d642e706e67" alt="win-r-cmd" data-canonical-src="https://kg.weiyan.cc/2023/11/win-r-cmd.png" style="max-width: 100%;"></a></p>\n</li>\n<li>\n<p dir="auto">在 Windows 运行窗口，先切换盘符到 <strong>F</strong> 盘，然后进入 <code class="notranslate">hugo</code> 的解压缩目录（<strong>F:\\WebStack</strong>），具体操作如下。</p>\n<ul dir="auto">\n<li>\n<p dir="auto">在光标处输入 <strong>F:</strong>，然后按回车；</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/e79a40824543371027be93243c070fde241cf9437e59f4789d603fe0f8d3422e/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f636d642d6368616e67652d6469722e706e67"><img src="https://camo.githubusercontent.com/e79a40824543371027be93243c070fde241cf9437e59f4789d603fe0f8d3422e/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f636d642d6368616e67652d6469722e706e67" alt="cmd-change-dir" data-canonical-src="https://kg.weiyan.cc/2023/11/cmd-change-dir.png" style="max-width: 100%;"></a></p>\n</li>\n<li>\n<p dir="auto">我们就将盘符切换为 <strong>F</strong> 盘；</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/a3ce5dcffe3ad359cbbab6324ccf2eb69cb02127156b006a39ee9cb3f2051d1a/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f636d642d662d6469722e706e67"><img src="https://camo.githubusercontent.com/a3ce5dcffe3ad359cbbab6324ccf2eb69cb02127156b006a39ee9cb3f2051d1a/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f636d642d662d6469722e706e67" alt="cmd-f-dir" data-canonical-src="https://kg.weiyan.cc/2023/11/cmd-f-dir.png" style="max-width: 100%;"></a></p>\n</li>\n<li>\n<p dir="auto">接着输入 <strong>cd WebStack</strong>，回车，就进入了 <strong>F:\\WebStack</strong> 目录；使用 <strong>ls</strong> 可以看到当前目录下的文件。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b49420293448a72d4a8e6f879585e19d561bb8671cca80adb263cd074b957adf/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f776562737461636b2d77696e2d6c732e706e67"><img src="https://camo.githubusercontent.com/b49420293448a72d4a8e6f879585e19d561bb8671cca80adb263cd074b957adf/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f776562737461636b2d77696e2d6c732e706e67" alt="webstack-win-ls" data-canonical-src="https://kg.weiyan.cc/2023/11/webstack-win-ls.png" style="max-width: 100%;"></a></p>\n</li>\n<li>\n<p dir="auto">最后，输入 <strong>hugo.exe version</strong>，回车，如图所示，则代表安装成功。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/72562e1974134fac9b6613f30cf831575349695409fb25e67faff4a741b64934/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f6875676f2d6578652d76657273696f6e2e706e67"><img src="https://camo.githubusercontent.com/72562e1974134fac9b6613f30cf831575349695409fb25e67faff4a741b64934/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f6875676f2d6578652d76657273696f6e2e706e67" alt="hugo-exe-version" data-canonical-src="https://kg.weiyan.cc/2023/11/hugo-exe-version.png" style="max-width: 100%;"></a></p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 dir="auto">第四，下载 WebStack-Hugo</h3>\n<p dir="auto">浏览器打开 <a href="https://github.com/shenweiyan/WebStack-Hugo">https://github.com/shenweiyan/WebStack-Hugo</a>，点击 Code 下的 <strong>"Download ZIP"</strong>，把 <strong>WebStack-hugo-main.zip</strong> 下载到刚才 hugo 解压缩的目录（<strong>F:\\WebStack</strong>）。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/5d8ca60a8438bb7011b86cd25729c696494b3f5af602a2c1363f208beb729334/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f776562737461636b2d646f776e6c6f61642d7a69702e706e67"><img src="https://camo.githubusercontent.com/5d8ca60a8438bb7011b86cd25729c696494b3f5af602a2c1363f208beb729334/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f776562737461636b2d646f776e6c6f61642d7a69702e706e67" alt="webstack-download-zip" data-canonical-src="https://kg.weiyan.cc/2023/11/webstack-download-zip.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/adcd88304b412be75bcd95be39b74ee593588e5038d5fae9ef47dd3d9a347e7e/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f776562737461636b2d6875676f2d6d61696e2d7a69702e706e67"><img src="https://camo.githubusercontent.com/adcd88304b412be75bcd95be39b74ee593588e5038d5fae9ef47dd3d9a347e7e/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f776562737461636b2d6875676f2d6d61696e2d7a69702e706e67" alt="webstack-hugo-main-zip" data-canonical-src="https://kg.weiyan.cc/2023/11/webstack-hugo-main-zip.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">第五，解压和重命名</h3>\n<p dir="auto">把 <strong>WebStack-Hugo-main.zip</strong> 解压到当前目录。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/bc69e2b0df8cebad0c29c1324f8693bee0f79aab8819473281613a0981eeaa3e/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f776562737461636b2d6875676f2d6d61696e2d756e7a69702e706e67"><img src="https://camo.githubusercontent.com/bc69e2b0df8cebad0c29c1324f8693bee0f79aab8819473281613a0981eeaa3e/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f776562737461636b2d6875676f2d6d61696e2d756e7a69702e706e67" alt="webstack-hugo-main-unzip" data-canonical-src="https://kg.weiyan.cc/2023/11/webstack-hugo-main-unzip.png" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/97a61e35889b7ab70307259f0de8b49815b37c2829b3320afa6ef41e1c662465/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f776562737461636b2d6875676f2d6d61696e2d72656e616d652e706e67"><img src="https://camo.githubusercontent.com/97a61e35889b7ab70307259f0de8b49815b37c2829b3320afa6ef41e1c662465/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f776562737461636b2d6875676f2d6d61696e2d72656e616d652e706e67" alt="webstack-hugo-main-rename" data-canonical-src="https://kg.weiyan.cc/2023/11/webstack-hugo-main-rename.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">第六，安装主题</h3>\n<p dir="auto">首先，进入 <strong>F:\\WebStack</strong> 目录；</p>\n<p dir="auto">然后，创建一个 <strong>themes</strong> 的文件夹；</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/da31dc6a897d7a865947b6d29bdc34f68559fa10e3a0d0ec7bf71ccdab94c71f/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f6372656174652d7468656d65732d6469722e706e67"><img src="https://camo.githubusercontent.com/da31dc6a897d7a865947b6d29bdc34f68559fa10e3a0d0ec7bf71ccdab94c71f/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f6372656174652d7468656d65732d6469722e706e67" alt="create-themes-dir" data-canonical-src="https://kg.weiyan.cc/2023/11/create-themes-dir.png" style="max-width: 100%;"></a></p>\n<p dir="auto">接着，把解压后的 <strong>WebStack-Hugo</strong> 整个文件夹移动到 <strong>themes</strong> 中。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/da3de2ffc16780a78089f0352ae27553119c4f206579eed79025d5d9ae3d4d06/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f6d762d776562737461636b2d6875676f2d746f2d7468656d65732e706e67"><img src="https://camo.githubusercontent.com/da3de2ffc16780a78089f0352ae27553119c4f206579eed79025d5d9ae3d4d06/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f6d762d776562737461636b2d6875676f2d746f2d7468656d65732e706e67" alt="mv-webstack-hugo-to-themes" data-canonical-src="https://kg.weiyan.cc/2023/11/mv-webstack-hugo-to-themes.png" style="max-width: 100%;"></a></p>\n<p dir="auto">第四，将 <code class="notranslate">themes/WebStack-Hugo/exampleSite</code> 目录下的所有文件复制到 hugo 站点根目录（即 <code class="notranslate">F:\\WebStack</code>）。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/52982e855d5aad652e8082264b1778f4d7f1d911604bcdd73c986e2d3c21f0bb/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f63702d6578616d706c65736974652e706e67"><img src="https://camo.githubusercontent.com/52982e855d5aad652e8082264b1778f4d7f1d911604bcdd73c986e2d3c21f0bb/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f63702d6578616d706c65736974652e706e67" alt="cp-examplesite" data-canonical-src="https://kg.weiyan.cc/2023/11/cp-examplesite.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">第七，启动预览</h3>\n<p dir="auto">在刚才已经打开的 Windows 命令运行窗口中，使用下面的命令执行 <strong>hugo server</strong>，启动站点——Hugo 可以启动一个 Web 服务器，同时构建站点内容到内存中并在检测到文件更改后重新渲染，方便我们在开发环境实时预览对站点所做的更改。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="hugo.exe server"><pre class="notranslate">hugo.exe server</pre></div>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/1ebc2361e238e78a1990dc55629337719717ba8b32a625eafbc4abf1a0ace926/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f6875676f2d6578652d7365727665722e706e67"><img src="https://camo.githubusercontent.com/1ebc2361e238e78a1990dc55629337719717ba8b32a625eafbc4abf1a0ace926/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f6875676f2d6578652d7365727665722e706e67" alt="hugo-exe-server" data-canonical-src="https://kg.weiyan.cc/2023/11/hugo-exe-server.png" style="max-width: 100%;"></a></p>\n<p dir="auto">最后，在浏览器中打开 <a href="http://127.0.0.1:1313/" rel="nofollow"><strong>http://127.0.0.1:1313/</strong></a>，即可看到生成的站点。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/c0b6027d332fcf659c0c3fdbfadc4243a611d4c62835b0c393b232d6f6552c25/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f776562737461636b2d6875676f2d313331332e706e67"><img src="https://camo.githubusercontent.com/c0b6027d332fcf659c0c3fdbfadc4243a611d4c62835b0c393b232d6f6552c25/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f776562737461636b2d6875676f2d313331332e706e67" alt="webstack-hugo-1313" data-canonical-src="https://kg.weiyan.cc/2023/11/webstack-hugo-1313.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">Linux 下安装部署</h2>\n<p dir="auto">安装完本 WebStack-Hugo 主题后，将 exampleSite 目录下的文件复制到 hugo 站点根目录，根据需要把 config.toml 的一些信息改成自己的，导航的网址信息可通过 data 目录下 webstack.yml 修改。</p>\n<p dir="auto">具体执行步骤如下：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="mkdir /home/shenweiyan/mysite\ncd /home/shenweiyan/mysite\n\n# 安装 WebStack-Hugo 主题\ngit clone https://github.com/shenweiyan/WebStack-Hugo.git themes/WebStack-Hugo\n\n# 将 exampleSite 目录下的文件复制到 hugo 站点根目录\ncd /home/shenweiyan/mysite\ncp -r themes/WebStack-Hugo/exampleSite/* ./\n\n# 启动 hugo 站点\nhugo server\n# 如果你知道你的公网 ip, 如下面的 132.76.230.31, 可以使用下面的方式执行 hugo server\nhugo server --baseUrl=132.76.230.31 --bind=0.0.0.0"><pre class="notranslate">mkdir /home/shenweiyan/mysite\n<span class="pl-c1">cd</span> /home/shenweiyan/mysite\n\n<span class="pl-c"><span class="pl-c">#</span> 安装 WebStack-Hugo 主题</span>\ngit clone https://github.com/shenweiyan/WebStack-Hugo.git themes/WebStack-Hugo\n\n<span class="pl-c"><span class="pl-c">#</span> 将 exampleSite 目录下的文件复制到 hugo 站点根目录</span>\n<span class="pl-c1">cd</span> /home/shenweiyan/mysite\ncp -r themes/WebStack-Hugo/exampleSite/<span class="pl-k">*</span> ./\n\n<span class="pl-c"><span class="pl-c">#</span> 启动 hugo 站点</span>\nhugo server\n<span class="pl-c"><span class="pl-c">#</span> 如果你知道你的公网 ip, 如下面的 132.76.230.31, 可以使用下面的方式执行 hugo server</span>\nhugo server --baseUrl=132.76.230.31 --bind=0.0.0.0</pre></div>\n<p dir="auto">也可以参考 <a href="https://github.com/jetsung">@jetsung</a> 在 <a href="https://github.com/shenweiyan/WebStack-Hugo/pull/15" data-hovercard-type="pull_request" data-hovercard-url="/shenweiyan/WebStack-Hugo/pull/15/hovercard">pull 15</a> 所用的方法安装部署：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# 创建项目\nmkdir navsites\ncd $_\n\n# 初始化项目\ngit init\n\n# 将 WebStack-Hugo 源下载到 themes/WebStack-Hugo 文件夹\ngit submodule add https://github.com/shenweiyan/WebStack-Hugo.git themes/WebStack-Hugo\ncp -r themes/WebStack-Hugo/exampleSite/* ./\n\n# 安装 hugo\ngo install github.com/gohugoio/hugo@latest\n\n# 本地测试\nhugo server\n\n# 生成 docs 文件夹，将并静态内容生成至此处\nhugo -D"><pre class="notranslate"><span class="pl-c"><span class="pl-c">#</span> 创建项目</span>\nmkdir navsites\n<span class="pl-c1">cd</span> <span class="pl-smi">$_</span>\n\n<span class="pl-c"><span class="pl-c">#</span> 初始化项目</span>\ngit init\n\n<span class="pl-c"><span class="pl-c">#</span> 将 WebStack-Hugo 源下载到 themes/WebStack-Hugo 文件夹</span>\ngit submodule add https://github.com/shenweiyan/WebStack-Hugo.git themes/WebStack-Hugo\ncp -r themes/WebStack-Hugo/exampleSite/<span class="pl-k">*</span> ./\n\n<span class="pl-c"><span class="pl-c">#</span> 安装 hugo</span>\ngo install github.com/gohugoio/hugo@latest\n\n<span class="pl-c"><span class="pl-c">#</span> 本地测试</span>\nhugo server\n\n<span class="pl-c"><span class="pl-c">#</span> 生成 docs 文件夹，将并静态内容生成至此处</span>\nhugo -D</pre></div>\n<h2 dir="auto">导出 HTML 静态资源</h2>\n<p dir="auto">Windows/Linux 下执行的 <strong>hugo server</strong> 命令将会通过热加载的方式临时启动一个 Hugo 服务器（Hugo 可以启动一个 Web 服务器，同时构建站点内容到内存中并在检测到文件更改后重新渲染，方便我们在开发环境实时预览对站点所做的更改），这个时候我们打开浏览器 <a href="http://127.0.0.1:1313/" rel="nofollow">http://127.0.0.1:1313/</a>，就可以看到我们站点的样子了。</p>\n<p dir="auto">如果我们想要把我们的站点部署到 GitHub/Gitee Pages（或者本地的服务器），我们可以：</p>\n<h3 dir="auto">1. 生成静态页面内容</h3>\n<p dir="auto">可以通过下面的命令，生成(构建)静态页面内容。</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="hugo -D 或者 hugo --minify"><pre class="notranslate"><span class="pl-s1">hugo</span> <span class="pl-c1">-</span><span class="pl-c1">D</span> <span class="pl-s1">或者</span> <span class="pl-s1">hugo</span> <span class="pl-c1">-</span><span class="pl-c1">-</span><span class="pl-s1">minify</span></pre></div>\n<p dir="auto">这个命令会默认在 <strong><code class="notranslate">public/</code></strong> 目录中生成您的网站，当然您可以通过改变站点配置中的 <strong><code class="notranslate">publishDir</code></strong> 选项来配置这个输出目录。</p>\n<blockquote>\n<p dir="auto"><strong>🏷️ Hugo 小知识 - 草案、未来和过期内容</strong></p>\n<p dir="auto">Hugo 允许您在网站内容的前言设定中设置文档的<code class="notranslate">draft</code>，<code class="notranslate">publishdate</code>甚至<code class="notranslate">expirydate</code>字段。默认情况下，Hugo 不会发布下面内容：</p>\n<ol dir="auto">\n<li><code class="notranslate">publishdate</code> 发布日期值设定在未来的内容；</li>\n<li><code class="notranslate">draft:true</code> 草案状态设置为真的内容；</li>\n<li><code class="notranslate">expirydate</code> 过期日期值设置为过去某事件的内容。</li>\n</ol>\n<p dir="auto">这三个可以在本地开发和部署编译时通过对<code class="notranslate">hugo</code>和<code class="notranslate">hugo server</code>分别添加如下参数来重新设定，或者在配置文件中设定对应(不包含<code class="notranslate">--</code>)域的 boolean 值：</p>\n<ol dir="auto">\n<li>-F, --buildFuture include content with publishdate in the future</li>\n<li>-D, --buildDrafts include content marked as draft</li>\n<li>-E, --buildExpired include expired content</li>\n</ol>\n</blockquote>\n<h3 dir="auto">2. 部署站点</h3>\n<p dir="auto">把生成的 <code class="notranslate">public/</code> 静态内容目录上传到 GitHub，开启 GitHub/Gitee Pages，并且绑定 cname 域名即可。</p>\n<h2 dir="auto">使用说明与技巧</h2>\n<p dir="auto">这是一个开源的公益项目，你可以拿来制作自己的网址导航，也可以做与导航无关的网站。</p>\n<h3 dir="auto">左导航栏图标</h3>\n<p dir="auto">左侧、顶部导航栏图标用的都是 <strong>Font Awesome</strong> 图标库 <strong>v5</strong> 版本 <strong>Free</strong> 的图标。链接如下：</p>\n<p dir="auto">🔗 <a href="https://fontawesome.com/v5/search?o=r&amp;m=free" rel="nofollow">https://fontawesome.com/v5/search?o=r&amp;m=free</a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/3f4c11e7502bb353ebd15c7aa5e8278ff2317efea37c4305c81aaa9f4caa0648/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f666f6e74617765736f6d652d76352d667265652e706e67"><img src="https://camo.githubusercontent.com/3f4c11e7502bb353ebd15c7aa5e8278ff2317efea37c4305c81aaa9f4caa0648/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f666f6e74617765736f6d652d76352d667265652e706e67" alt="fontawesome-v5-free" data-canonical-src="https://kg.weiyan.cc/2023/11/fontawesome-v5-free.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">调整头部搜索栏</h3>\n<p dir="auto">头部搜索栏的默认位置可以通过下面的方法进行修改。</p>\n<ol dir="auto">\n<li>直接修改 <strong>layouts/partials/content_search.html</strong>，调整对应部分的位置。</li>\n<li>调整默认的搜索（即点击"常用/搜索/工具 ...." 时下指箭头的指向），把对应的 id 添加到对应的 label 里面。</li>\n</ol>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/15f93dd538b75916586dfe378de3ff848660364321d919656fd28e4326a97282/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f7365742d64656661756c742d7365617263682d62696e672e706e67"><img src="https://camo.githubusercontent.com/15f93dd538b75916586dfe378de3ff848660364321d919656fd28e4326a97282/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f7365742d64656661756c742d7365617263682d62696e672e706e67" alt="set-default-search-bing" data-canonical-src="https://kg.weiyan.cc/2023/11/set-default-search-bing.png" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/04108756944fd959913fe792702c715c3cbe251649f5d4112e10a34963ac6253/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f766965772d64656661756c742d7365617263682d62696e672e706e67"><img src="https://camo.githubusercontent.com/04108756944fd959913fe792702c715c3cbe251649f5d4112e10a34963ac6253/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f766965772d64656661756c742d7365617263682d62696e672e706e67" alt="view-default-search-bing" data-canonical-src="https://kg.weiyan.cc/2023/11/view-default-search-bing.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">自定义头部导航</h3>\n<p dir="auto"><a href="https://github.com/shenweiyan/WebStack-Hugo">WebStack-Hugo</a> 把头部的导航菜单的各个信息集成在了 <strong>data/header.yml</strong> 文件中，每个人可以根据自己的需要调整。</p>\n<div class="highlight highlight-source-yaml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="- item: 首页\n  icon: fa fa-home\n  link: &quot;./&quot;\n\n- item: 作者\n  icon: fa fa-book\n  link: https://www.yuque.com/shenweiyan\n\n- item: 配置\n  icon: fa fa-cog\n  link: &quot;&quot;\n  list:\n    - name: 源码\n      url: &quot;#&quot;\n    - name: 图标\n      url: &quot;#&quot;"><pre class="notranslate">- <span class="pl-ent">item</span>: <span class="pl-s">首页</span>\n  <span class="pl-ent">icon</span>: <span class="pl-s">fa fa-home</span>\n  <span class="pl-ent">link</span>: <span class="pl-s"><span class="pl-pds">"</span>./<span class="pl-pds">"</span></span>\n\n- <span class="pl-ent">item</span>: <span class="pl-s">作者</span>\n  <span class="pl-ent">icon</span>: <span class="pl-s">fa fa-book</span>\n  <span class="pl-ent">link</span>: <span class="pl-s">https://www.yuque.com/shenweiyan</span>\n\n- <span class="pl-ent">item</span>: <span class="pl-s">配置</span>\n  <span class="pl-ent">icon</span>: <span class="pl-s">fa fa-cog</span>\n  <span class="pl-ent">link</span>: <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>\n  <span class="pl-ent">list</span>:\n    - <span class="pl-ent">name</span>: <span class="pl-s">源码</span>\n      <span class="pl-ent">url</span>: <span class="pl-s"><span class="pl-pds">"</span>#<span class="pl-pds">"</span></span>\n    - <span class="pl-ent">name</span>: <span class="pl-s">图标</span>\n      <span class="pl-ent">url</span>: <span class="pl-s"><span class="pl-pds">"</span>#<span class="pl-pds">"</span></span></pre></div>\n<h3 dir="auto">获取网站图标</h3>\n<p dir="auto"><a href="https://nav.bioitee.com/" rel="nofollow">Bio &amp; IT 网址导航</a>默认使用的是个人收集的网站图标，主要是查看网站源码、百度、谷歌等途径把对应导航的图标下载下来，这个方法比较原始繁琐，适合导航不是很多的情况。</p>\n<h4 dir="auto">一为</h4>\n<p dir="auto">你也可以使用一为提供的的 <a href="https://www.iowen.cn/tag/favicon/" rel="nofollow">Favicon</a> 图标 <a href="https://www.iowen.cn/tag/api/" rel="nofollow">API</a>：<a href="https://api.iowen.cn/doc/favicon.html" rel="nofollow">获取网站 Favicon - 免费 API 数据接口调用服务平台</a>。</p>\n<p dir="auto"><strong>使用方法：</strong></p>\n<ol dir="auto">\n<li>获取 Favicon 图标</li>\n</ol>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="https://api.iowen.cn/favicon/www.iowen.cn.png"><pre class="notranslate"><code class="notranslate">https://api.iowen.cn/favicon/www.iowen.cn.png\n</code></pre></div>\n<ol start="2" dir="auto">\n<li>刷新缓存</li>\n</ol>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="https://api.iowen.cn/favicon/www.iowen.cn.png?refresh=true"><pre class="notranslate"><code class="notranslate">https://api.iowen.cn/favicon/www.iowen.cn.png?refresh=true\n</code></pre></div>\n<ol start="3" dir="auto">\n<li>将上方代码中的 <code class="notranslate">www.iowen.cn</code> 替换为你需要获取的网址域名。</li>\n</ol>\n<h4 dir="auto">Favicon.im</h4>\n<p dir="auto">除了一为的 API，你也可以使用 <a href="https://favicon.im/" rel="nofollow">https://favicon.im/</a> 来在网页中插入其他网站的 Favicon 图片，可以放大显示。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/54b2c8c4ad9b390d30fd12bceb0ec68d5c16d19abcd23dff7805016fb24d25ba/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f66617669636f6e2d696d2e77656270"><img src="https://camo.githubusercontent.com/54b2c8c4ad9b390d30fd12bceb0ec68d5c16d19abcd23dff7805016fb24d25ba/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f66617669636f6e2d696d2e77656270" alt="favicon-im" data-canonical-src="https://kg.weiyan.cc/2024/08/favicon-im.webp" style="max-width: 100%;"></a></p>\n<h4 dir="auto">Favicon Extractor</h4>\n<p dir="auto">类似网站 <a href="https://www.faviconextractor.com/" rel="nofollow">Favicon Downloader</a>，代码<a href="https://github.com/seadfeng/favicon-downloader">开源</a>。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b8012a1bbfd75747b1f1c3f9f0838a21aa920c96b49461ade001563abe47605a/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f66617669636f6e2d657874726163746f722e77656270"><img src="https://camo.githubusercontent.com/b8012a1bbfd75747b1f1c3f9f0838a21aa920c96b49461ade001563abe47605a/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f66617669636f6e2d657874726163746f722e77656270" alt="favicon-extractor" data-canonical-src="https://kg.weiyan.cc/2024/08/favicon-extractor.webp" style="max-width: 100%;"></a></p>\n<h2 dir="auto">已知问题</h2>\n<ol dir="auto">\n<li>日间模式与夜间模式切换时候，头部搜索栏的背景图片切换不够流畅（个人的 js 知识有限，在 footer.html 做了一些简单的调整来实现），如果你有更好的想法，欢迎 PR 或者交流。</li>\n</ol>\n<h2 dir="auto">感谢墙</h2>\n<p dir="auto">本主题的部分代码参考了以下几个开源项目，特此感谢。</p>\n<ul dir="auto">\n<li><a href="https://github.com/WebStackPage/WebStackPage.github.io">WebStackPage/WebStackPage.github.io</a></li>\n<li><a href="https://github.com/liutongxu/liutongxu.github.io">liutongxu/liutongxu.github.io</a></li>\n<li><a href="https://github.com/iplaycode/webstack-hugo">iplaycode/webstack-hugo</a></li>\n</ul>\n<p dir="auto">感谢 <a href="https://github.com/WebStackPage/WebStackPage.github.io">WebStack</a> 的作者 <a href="https://twitter.com/decohack" rel="nofollow">Viggo</a> 的肯定和<a href="https://twitter.com/decohack/status/1569188705478516738" rel="nofollow">推广宣传</a>。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/9d237ebbc9765772b1e08bb38cae79e95a16070f1fedb0b1a7750b140164e57a/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f747769747465722d6465636f6861636b2d776562737461636b2d6875676f2e706e67"><img src="https://camo.githubusercontent.com/9d237ebbc9765772b1e08bb38cae79e95a16070f1fedb0b1a7750b140164e57a/68747470733a2f2f6b672e77656979616e2e63632f323032332f31312f747769747465722d6465636f6861636b2d776562737461636b2d6875676f2e706e67" alt="twitter-decohack-webstack-hugo" data-canonical-src="https://kg.weiyan.cc/2023/11/twitter-decohack-webstack-hugo.png" style="max-width: 100%;"></a></p>\n<p dir="auto">感谢以下所有朋友对本主题所做出的贡献。<br>\n<strong><a href="https://github.com/yinhanghang">@yanbeiyinhanghang</a></strong><br>\n<strong><a href="https://github.com/jetsung">@jetsung</a></strong></p>\n<h2 dir="auto">赞赏</h2>\n<p dir="auto">如果你觉得本项目对你有所帮助，欢迎请作者喝杯热咖啡 &gt;.&lt;</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/ff0212b7e76151521129ef863f11ae634815944c85bc852249c091f5b5f5a5aa/68747470733a2f2f6b672e77656979616e2e63632f303030302f696d672f646f6e6174652e77656270"><img src="https://camo.githubusercontent.com/ff0212b7e76151521129ef863f11ae634815944c85bc852249c091f5b5f5a5aa/68747470733a2f2f6b672e77656979616e2e63632f303030302f696d672f646f6e6174652e77656270" alt="donate-wecaht-aliapy" data-canonical-src="https://kg.weiyan.cc/0000/img/donate.webp" style="max-width: 100%;"></a></p>\n<h2 dir="auto">反馈与交流</h2>\n<p dir="auto">最后，最重要的，秉承 WebStack 的宗旨，这是一个开源的公益项目，你可以拿来制作自己的网址导航，也可以做与导航无关的网站。</p>\n<p dir="auto">WebStack 有非常多的魔改版本，这是其中一个。</p>\n<p dir="auto"><strong>如果你对本主题进行了一些个性化调整，欢迎在本项目中 <a href="https://github.com/shenweiyan/WebStack-Hugo/issues"><strong>issues</strong></a> 中一起分享交流！</strong></p>\n<p dir="auto"><strong>如果参考本主题构建了属于你自己的网址导航，欢迎在本评论区（或源码 <a href="https://github.com/shenweiyan/WebStack-Hugo/issues"><strong>issues</strong></a> 区）留下你网站的访问链接 &gt;.&lt;</strong></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.3-折腾'}, 'labels': {'nodes': [{'name': '语雀'}, {'name': '1.3.25-静态网站'}]}, 'comments': {'nodes': [{'body': 'Built in 35 ms\r\nEnvironment: "development"\r\nServing pages from memory\r\nRunning in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender\r\nWeb Server is available at http://localhost:1313/ (bind address 127.0.0.1)\r\nPress Ctrl+C to stop\r\n\r\nCMD显示了这个，但是打开http://127.0.0.1:1313/ 显示的是Page Not Found\r\n\r\n我有重命名对应文件夹，但是全部放在E盘，然后下载的是hugo_0.120.4_windows-amd64 （没有）\r\n\r\n重新下载了[hugo_0.89.4_Windows-64bit.zip](https://github.com/gohugoio/hugo/releases/download/v0.89.4/hugo_0.89.4_Windows-64bit.zip) \r\n\r\n名字一模一样 问题 解决', 'author': {'login': 'CharlieLZ'}}, {'body': '非常好，感谢感谢 ', 'author': {'login': 'takayashoshi888'}}, {'body': '用hugo server启动的时候 一切都是正常的，但是hugo -D 生成静态之后左侧、顶部导航栏图标不能显示了，变成了一个方块。大佬这个怎么解决，感谢。', 'author': {'login': 'konglquan'}}, {'body': '希望安装步骤写完整一点，linux 的安装方法写详细一点。生成的网站样式错误，图片文件和样式文件加载全是404。', 'author': {'login': 'jiespring'}}, {'body': '想修改一下网格背景，但是为什么修改了custom-style.css这个文件后，网站样式没有变化啊。', 'author': {'login': 'dsshbz'}}, {'body': '这文档可以写得再清晰一点，看着有点晕啊', 'author': {'login': 'musica2016'}}]}}, {'title': '在 Linux 上给用户赋予指定目录的读写权限', 'number': 9, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/9', 'createdAt': '2023-10-23T05:16:10Z', 'lastEditedAt': '2024-08-27T02:11:37Z', 'updatedAt': '2024-08-27T02:11:37Z', 'body': '在 Linux 上指定目录的读写权限赋予用户，有两种方法可以实现这个目标：第一种是使用 ACL (访问控制列表)，第二种是创建用户组来管理文件权限，下面会一一介绍。为了完成这个教程，我们将使用以下设置：\r\n\r\n- 操作系统：CentOS 7\r\n- 测试目录：/data/share\r\n- 测试用户：shenweiyan\r\n- 文件系统类型：ext4\r\n\r\n请确认所有的命令都是使用 root 用户执行的，或者使用 sudo 命令来享受与之同样的权限。让我们开始吧！下面，先使用 mkdir 命令来创建一个名为 share 的目录。\r\n\r\n```bash\r\n$ mkdir -p /data/share\r\n```\r\n\r\n## 1. ACL 权限设置\r\n\r\n**重要提示：**       \r\n打算使用此方法的话，您需要确认您的 Linux 文件系统类型（如 ext3 和 ext4, NTFS, BTRFS）支持 ACL。\r\n\r\n### 1.1. 查看内核是否支持 ACL\r\n\r\n依照以下命令在您的系统中检查当前文件系统类型，并且查看内核是否支持 ACL：**\r\n\r\n```bash\r\n$ df -T | awk \'{print $1,$2,$NF}\' | grep "^/dev"\r\n$ grep -i acl /boot/config*\r\n```\r\n\r\n从下方的截屏可以看到，文件系统类型是 ext4，并且从 `CONFIG_EXT4_FS_POSIX_ACL=y` 选项可以发现内核是支持 POSIX ACL 的。\r\n![config-ext4-fs-posix-acl](https://kg.weiyan.cc/2024/08/config-ext4-fs-posix-acl.webp)\r\n\r\n### 1.2. 挂载是否使用了 ACL\r\n\r\n使用下面的命令，查看文件系统（分区）挂载时是否使用了 ACL 选项。\r\n\r\n```bash\r\n$ tune2fs -l /dev/vda1 | grep acl\r\n```\r\n\r\n![tune2fs-acl](https://kg.weiyan.cc/2024/08/tune2fs-acl.webp)      \r\n通过上边的输出可以发现，默认的挂载项目中已经对 ACL 进行了支持。如果发现结果不如所愿，你可以通过以下命令对指定分区（此例中使用 /dev/sda3）开启 ACL 的支持）。\r\n\r\n```bash\r\n$ mount -o remount,acl /\r\n$ tune2fs -o acl /dev/sda3\r\n```\r\n\r\n### 1.3. 设置 ACL 权限\r\n\r\n```bash\r\nsetfacl -m m:rx 文件名    # 给 mask 的权限为 r-x ，使用 "m:rx"格式 \r\n\r\nsetfacl -m u:用户名:权限 -R 目录名   # 递归 ACL 权限(针对目录现有的文件设置 ACL) \r\n```\r\n\r\n例如，指定目录 `share` 的读写权限分配给名为 `shenweiyan` 的用户了，依照以下命令执行即可。\r\n\r\n```bash\r\n# 检查目录默认的 ACL 设置（Check the default ACL settings for the directory）\r\n$ getfacl /data/share\r\n\r\n# 指定用户读写权限（Give rw access to user shenweiyan）\r\n# 对于目录必须增加 x (执行)权限, 否则无法进入目录\r\n$ setfacl -m user:shenweiyan:rwx /data/share\r\n\r\n# 再次检查目录 ACL 设置（Check new ACL settings for the directory）\r\n$ getfacl /data/share\r\n```\r\n\r\n![setfacl-m-user](https://kg.weiyan.cc/2024/08/setfacl-m-user.webp)      \r\n在上方的截屏中，通过输出结果的第二行 getfacl 命令可以发现，用户 shenweiyan 已经成功的被赋予了 /data/share 目录的读写权限。\r\n\r\n如果想要获取 ACL 列表的更多信息。请参考：\r\n\r\n- [如何使用访问控制列表（ACL）为用户/组设置磁盘配额](http://www.tecmint.com/set-access-control-lists-acls-and-disk-quotas-for-users-groups/)\r\n- [如何使用访问控制列表（ACL）挂载网络共享](http://www.tecmint.com/rhcsa-exam-configure-acls-and-mount-nfs-samba-shares/)\r\n\r\n### 1.4. 删除 ACL 权限\r\n\r\n如果用户名（组名）已经删除，可以使用 UID（GID）进行删除。\r\n\r\n```bash\r\nsetfacl -x u:用户名 文件名     # 删除指定用户的 ACL 权限\r\nsetfacl -x g:组名   文件名     # 删除指定组的 ACL 权限 \r\nsetfacl -b 文件名              # 删除文件下所有的 ACL 权限 \r\n```\r\n\r\n## 2. 用户组权限设置\r\n\r\n### 2.1. 变更属组\r\n\r\n如果用户已经拥有了默认的用户组（通常组名与用户名相同），就可以简单的通过变更文件夹的所属用户组来完成。\r\n\r\n```python\r\n$ chgrp shenweiyan /data/share\r\n```\r\n\r\n另外，我们也可以通过以下方法为多个用户（需要赋予指定目录读写权限的）新建一个用户组。如此一来，也就创建了一个共享目录。\r\n\r\n```python\r\n$ groupadd dbshare\r\n```\r\n\r\n### 2.2. 把用户添加到属组 \r\n\r\n接下来将用户 `shenweiyan` 添加到 `dbshare` 组中：\r\n\r\n```python\r\n# add user to projects\r\n$ usermod -aG dbshare shenweiyan\r\n\r\n# check users groups\r\n$ groups tecmint\r\n```\r\n\r\n### 2.3. 变更属组\r\n\r\n将目录的所属用户组变更为 `dbshare`：\r\n\r\n```python\r\n$ chgrp projects /data/share\r\n```\r\n\r\n### 2.4. 设置组员权限\r\n\r\n现在，给组成员设置读写权限。\r\n\r\n```bash\r\n$ chmod -R 0760 /data/share\r\n\r\n# check new permissions\r\n$ ls -l /data/share\r\n```\r\n\r\nok，在 Linux 上给用户赋予指定目录的读写权限就介绍到这里 ！\r\n\r\n## 3. 参考资料\r\n\r\n- 高延斌，《[Linux ACL 体验](https://www.ibm.com/developerworks/cn/linux/l-acl/index.html)》，IBM Developer\r\n- Mr-Ping，《在 Linux 上给用户赋予指定目录的读写权限》，Linux 中国\r\n', 'bodyText': '在 Linux 上指定目录的读写权限赋予用户，有两种方法可以实现这个目标：第一种是使用 ACL (访问控制列表)，第二种是创建用户组来管理文件权限，下面会一一介绍。为了完成这个教程，我们将使用以下设置：\n\n操作系统：CentOS 7\n测试目录：/data/share\n测试用户：shenweiyan\n文件系统类型：ext4\n\n请确认所有的命令都是使用 root 用户执行的，或者使用 sudo 命令来享受与之同样的权限。让我们开始吧！下面，先使用 mkdir 命令来创建一个名为 share 的目录。\n$ mkdir -p /data/share\n1. ACL 权限设置\n重要提示：\n打算使用此方法的话，您需要确认您的 Linux 文件系统类型（如 ext3 和 ext4, NTFS, BTRFS）支持 ACL。\n1.1. 查看内核是否支持 ACL\n依照以下命令在您的系统中检查当前文件系统类型，并且查看内核是否支持 ACL：**\n$ df -T | awk \'{print $1,$2,$NF}\' | grep "^/dev"\n$ grep -i acl /boot/config*\n从下方的截屏可以看到，文件系统类型是 ext4，并且从 CONFIG_EXT4_FS_POSIX_ACL=y 选项可以发现内核是支持 POSIX ACL 的。\n\n1.2. 挂载是否使用了 ACL\n使用下面的命令，查看文件系统（分区）挂载时是否使用了 ACL 选项。\n$ tune2fs -l /dev/vda1 | grep acl\n\n通过上边的输出可以发现，默认的挂载项目中已经对 ACL 进行了支持。如果发现结果不如所愿，你可以通过以下命令对指定分区（此例中使用 /dev/sda3）开启 ACL 的支持）。\n$ mount -o remount,acl /\n$ tune2fs -o acl /dev/sda3\n1.3. 设置 ACL 权限\nsetfacl -m m:rx 文件名    # 给 mask 的权限为 r-x ，使用 "m:rx"格式 \n\nsetfacl -m u:用户名:权限 -R 目录名   # 递归 ACL 权限(针对目录现有的文件设置 ACL) \n例如，指定目录 share 的读写权限分配给名为 shenweiyan 的用户了，依照以下命令执行即可。\n# 检查目录默认的 ACL 设置（Check the default ACL settings for the directory）\n$ getfacl /data/share\n\n# 指定用户读写权限（Give rw access to user shenweiyan）\n# 对于目录必须增加 x (执行)权限, 否则无法进入目录\n$ setfacl -m user:shenweiyan:rwx /data/share\n\n# 再次检查目录 ACL 设置（Check new ACL settings for the directory）\n$ getfacl /data/share\n\n在上方的截屏中，通过输出结果的第二行 getfacl 命令可以发现，用户 shenweiyan 已经成功的被赋予了 /data/share 目录的读写权限。\n如果想要获取 ACL 列表的更多信息。请参考：\n\n如何使用访问控制列表（ACL）为用户/组设置磁盘配额\n如何使用访问控制列表（ACL）挂载网络共享\n\n1.4. 删除 ACL 权限\n如果用户名（组名）已经删除，可以使用 UID（GID）进行删除。\nsetfacl -x u:用户名 文件名     # 删除指定用户的 ACL 权限\nsetfacl -x g:组名   文件名     # 删除指定组的 ACL 权限 \nsetfacl -b 文件名              # 删除文件下所有的 ACL 权限 \n2. 用户组权限设置\n2.1. 变更属组\n如果用户已经拥有了默认的用户组（通常组名与用户名相同），就可以简单的通过变更文件夹的所属用户组来完成。\n$ chgrp shenweiyan /data/share\n另外，我们也可以通过以下方法为多个用户（需要赋予指定目录读写权限的）新建一个用户组。如此一来，也就创建了一个共享目录。\n$ groupadd dbshare\n2.2. 把用户添加到属组\n接下来将用户 shenweiyan 添加到 dbshare 组中：\n# add user to projects\n$ usermod -aG dbshare shenweiyan\n\n# check users groups\n$ groups tecmint\n2.3. 变更属组\n将目录的所属用户组变更为 dbshare：\n$ chgrp projects /data/share\n2.4. 设置组员权限\n现在，给组成员设置读写权限。\n$ chmod -R 0760 /data/share\n\n# check new permissions\n$ ls -l /data/share\nok，在 Linux 上给用户赋予指定目录的读写权限就介绍到这里 ！\n3. 参考资料\n\n高延斌，《Linux ACL 体验》，IBM Developer\nMr-Ping，《在 Linux 上给用户赋予指定目录的读写权限》，Linux 中国', 'bodyHTML': '<p dir="auto">在 Linux 上指定目录的读写权限赋予用户，有两种方法可以实现这个目标：第一种是使用 ACL (访问控制列表)，第二种是创建用户组来管理文件权限，下面会一一介绍。为了完成这个教程，我们将使用以下设置：</p>\n<ul dir="auto">\n<li>操作系统：CentOS 7</li>\n<li>测试目录：/data/share</li>\n<li>测试用户：shenweiyan</li>\n<li>文件系统类型：ext4</li>\n</ul>\n<p dir="auto">请确认所有的命令都是使用 root 用户执行的，或者使用 sudo 命令来享受与之同样的权限。让我们开始吧！下面，先使用 mkdir 命令来创建一个名为 share 的目录。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ mkdir -p /data/share"><pre class="notranslate">$ mkdir -p /data/share</pre></div>\n<h2 dir="auto">1. ACL 权限设置</h2>\n<p dir="auto"><strong>重要提示：</strong><br>\n打算使用此方法的话，您需要确认您的 Linux 文件系统类型（如 ext3 和 ext4, NTFS, BTRFS）支持 ACL。</p>\n<h3 dir="auto">1.1. 查看内核是否支持 ACL</h3>\n<p dir="auto">依照以下命令在您的系统中检查当前文件系统类型，并且查看内核是否支持 ACL：**</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ df -T | awk \'{print $1,$2,$NF}\' | grep &quot;^/dev&quot;\n$ grep -i acl /boot/config*"><pre class="notranslate">$ df -T <span class="pl-k">|</span> awk <span class="pl-s"><span class="pl-pds">\'</span>{print $1,$2,$NF}<span class="pl-pds">\'</span></span> <span class="pl-k">|</span> grep <span class="pl-s"><span class="pl-pds">"</span>^/dev<span class="pl-pds">"</span></span>\n$ grep -i acl /boot/config<span class="pl-k">*</span></pre></div>\n<p dir="auto">从下方的截屏可以看到，文件系统类型是 ext4，并且从 <code class="notranslate">CONFIG_EXT4_FS_POSIX_ACL=y</code> 选项可以发现内核是支持 POSIX ACL 的。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/6dc2d0946852db35efd34b058e62f2d286c5b36b8b8685b24faab8fd78312d06/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f636f6e6669672d657874342d66732d706f7369782d61636c2e77656270"><img src="https://camo.githubusercontent.com/6dc2d0946852db35efd34b058e62f2d286c5b36b8b8685b24faab8fd78312d06/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f636f6e6669672d657874342d66732d706f7369782d61636c2e77656270" alt="config-ext4-fs-posix-acl" data-canonical-src="https://kg.weiyan.cc/2024/08/config-ext4-fs-posix-acl.webp" style="max-width: 100%;"></a></p>\n<h3 dir="auto">1.2. 挂载是否使用了 ACL</h3>\n<p dir="auto">使用下面的命令，查看文件系统（分区）挂载时是否使用了 ACL 选项。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ tune2fs -l /dev/vda1 | grep acl"><pre class="notranslate">$ tune2fs -l /dev/vda1 <span class="pl-k">|</span> grep acl</pre></div>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/f1fd187e003c7567129ce3cee5db31bdfd916d01535aba679754e132e0e7b5c5/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f74756e653266732d61636c2e77656270"><img src="https://camo.githubusercontent.com/f1fd187e003c7567129ce3cee5db31bdfd916d01535aba679754e132e0e7b5c5/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f74756e653266732d61636c2e77656270" alt="tune2fs-acl" data-canonical-src="https://kg.weiyan.cc/2024/08/tune2fs-acl.webp" style="max-width: 100%;"></a><br>\n通过上边的输出可以发现，默认的挂载项目中已经对 ACL 进行了支持。如果发现结果不如所愿，你可以通过以下命令对指定分区（此例中使用 /dev/sda3）开启 ACL 的支持）。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ mount -o remount,acl /\n$ tune2fs -o acl /dev/sda3"><pre class="notranslate">$ mount -o remount,acl /\n$ tune2fs -o acl /dev/sda3</pre></div>\n<h3 dir="auto">1.3. 设置 ACL 权限</h3>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="setfacl -m m:rx 文件名    # 给 mask 的权限为 r-x ，使用 &quot;m:rx&quot;格式 \n\nsetfacl -m u:用户名:权限 -R 目录名   # 递归 ACL 权限(针对目录现有的文件设置 ACL) "><pre class="notranslate">setfacl -m m:rx 文件名    <span class="pl-c"><span class="pl-c">#</span> 给 mask 的权限为 r-x ，使用 "m:rx"格式 </span>\n\nsetfacl -m u:用户名:权限 -R 目录名   <span class="pl-c"><span class="pl-c">#</span> 递归 ACL 权限(针对目录现有的文件设置 ACL) </span></pre></div>\n<p dir="auto">例如，指定目录 <code class="notranslate">share</code> 的读写权限分配给名为 <code class="notranslate">shenweiyan</code> 的用户了，依照以下命令执行即可。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# 检查目录默认的 ACL 设置（Check the default ACL settings for the directory）\n$ getfacl /data/share\n\n# 指定用户读写权限（Give rw access to user shenweiyan）\n# 对于目录必须增加 x (执行)权限, 否则无法进入目录\n$ setfacl -m user:shenweiyan:rwx /data/share\n\n# 再次检查目录 ACL 设置（Check new ACL settings for the directory）\n$ getfacl /data/share"><pre class="notranslate"><span class="pl-c"><span class="pl-c">#</span> 检查目录默认的 ACL 设置（Check the default ACL settings for the directory）</span>\n$ getfacl /data/share\n\n<span class="pl-c"><span class="pl-c">#</span> 指定用户读写权限（Give rw access to user shenweiyan）</span>\n<span class="pl-c"><span class="pl-c">#</span> 对于目录必须增加 x (执行)权限, 否则无法进入目录</span>\n$ setfacl -m user:shenweiyan:rwx /data/share\n\n<span class="pl-c"><span class="pl-c">#</span> 再次检查目录 ACL 设置（Check new ACL settings for the directory）</span>\n$ getfacl /data/share</pre></div>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/d0e452cd2cda49d58c1d6fdee6a7eb7e404d810e81512929f1b5da3d75efafcf/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f7365746661636c2d6d2d757365722e77656270"><img src="https://camo.githubusercontent.com/d0e452cd2cda49d58c1d6fdee6a7eb7e404d810e81512929f1b5da3d75efafcf/68747470733a2f2f6b672e77656979616e2e63632f323032342f30382f7365746661636c2d6d2d757365722e77656270" alt="setfacl-m-user" data-canonical-src="https://kg.weiyan.cc/2024/08/setfacl-m-user.webp" style="max-width: 100%;"></a><br>\n在上方的截屏中，通过输出结果的第二行 getfacl 命令可以发现，用户 shenweiyan 已经成功的被赋予了 /data/share 目录的读写权限。</p>\n<p dir="auto">如果想要获取 ACL 列表的更多信息。请参考：</p>\n<ul dir="auto">\n<li><a href="http://www.tecmint.com/set-access-control-lists-acls-and-disk-quotas-for-users-groups/" rel="nofollow">如何使用访问控制列表（ACL）为用户/组设置磁盘配额</a></li>\n<li><a href="http://www.tecmint.com/rhcsa-exam-configure-acls-and-mount-nfs-samba-shares/" rel="nofollow">如何使用访问控制列表（ACL）挂载网络共享</a></li>\n</ul>\n<h3 dir="auto">1.4. 删除 ACL 权限</h3>\n<p dir="auto">如果用户名（组名）已经删除，可以使用 UID（GID）进行删除。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="setfacl -x u:用户名 文件名     # 删除指定用户的 ACL 权限\nsetfacl -x g:组名   文件名     # 删除指定组的 ACL 权限 \nsetfacl -b 文件名              # 删除文件下所有的 ACL 权限 "><pre class="notranslate">setfacl -x u:用户名 文件名     <span class="pl-c"><span class="pl-c">#</span> 删除指定用户的 ACL 权限</span>\nsetfacl -x g:组名   文件名     <span class="pl-c"><span class="pl-c">#</span> 删除指定组的 ACL 权限 </span>\nsetfacl -b 文件名              <span class="pl-c"><span class="pl-c">#</span> 删除文件下所有的 ACL 权限 </span></pre></div>\n<h2 dir="auto">2. 用户组权限设置</h2>\n<h3 dir="auto">2.1. 变更属组</h3>\n<p dir="auto">如果用户已经拥有了默认的用户组（通常组名与用户名相同），就可以简单的通过变更文件夹的所属用户组来完成。</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ chgrp shenweiyan /data/share"><pre class="notranslate">$ <span class="pl-s1">chgrp</span> <span class="pl-s1">shenweiyan</span> <span class="pl-c1">/</span><span class="pl-s1">data</span><span class="pl-c1">/</span><span class="pl-s1">share</span></pre></div>\n<p dir="auto">另外，我们也可以通过以下方法为多个用户（需要赋予指定目录读写权限的）新建一个用户组。如此一来，也就创建了一个共享目录。</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ groupadd dbshare"><pre class="notranslate">$ <span class="pl-s1">groupadd</span> <span class="pl-s1">dbshare</span></pre></div>\n<h3 dir="auto">2.2. 把用户添加到属组</h3>\n<p dir="auto">接下来将用户 <code class="notranslate">shenweiyan</code> 添加到 <code class="notranslate">dbshare</code> 组中：</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# add user to projects\n$ usermod -aG dbshare shenweiyan\n\n# check users groups\n$ groups tecmint"><pre class="notranslate"><span class="pl-c"># add user to projects</span>\n$ <span class="pl-s1">usermod</span> <span class="pl-c1">-</span><span class="pl-s1">aG</span> <span class="pl-s1">dbshare</span> <span class="pl-s1">shenweiyan</span>\n\n<span class="pl-c"># check users groups</span>\n$ <span class="pl-s1">groups</span> <span class="pl-s1">tecmint</span></pre></div>\n<h3 dir="auto">2.3. 变更属组</h3>\n<p dir="auto">将目录的所属用户组变更为 <code class="notranslate">dbshare</code>：</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ chgrp projects /data/share"><pre class="notranslate">$ <span class="pl-s1">chgrp</span> <span class="pl-s1">projects</span> <span class="pl-c1">/</span><span class="pl-s1">data</span><span class="pl-c1">/</span><span class="pl-s1">share</span></pre></div>\n<h3 dir="auto">2.4. 设置组员权限</h3>\n<p dir="auto">现在，给组成员设置读写权限。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ chmod -R 0760 /data/share\n\n# check new permissions\n$ ls -l /data/share"><pre class="notranslate">$ chmod -R 0760 /data/share\n\n<span class="pl-c"><span class="pl-c">#</span> check new permissions</span>\n$ ls -l /data/share</pre></div>\n<p dir="auto">ok，在 Linux 上给用户赋予指定目录的读写权限就介绍到这里 ！</p>\n<h2 dir="auto">3. 参考资料</h2>\n<ul dir="auto">\n<li>高延斌，《<a href="https://www.ibm.com/developerworks/cn/linux/l-acl/index.html" rel="nofollow">Linux ACL 体验</a>》，IBM Developer</li>\n<li>Mr-Ping，《在 Linux 上给用户赋予指定目录的读写权限》，Linux 中国</li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.3-折腾'}, 'labels': {'nodes': [{'name': '1.3.17-服务器配置使用'}]}, 'comments': {'nodes': []}}, {'title': '个人域名跳转至语雀个人主页', 'number': 8, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/8', 'createdAt': '2023-10-23T01:51:34Z', 'lastEditedAt': '2023-10-23T01:54:54Z', 'updatedAt': '2024-01-03T07:58:05Z', 'body': '> 📢 域名 [https://weiyan.cc](https://weiyan.cc) 就是基于本文章中的 "**[无服务器](#pG3U6)**" 步骤实现的个人域名跳转至语雀个人主页！因此，本篇文档你也可以通过以下的链接访问：[https://weiyan.cc/cookbook/301-redirects](https://weiyan.cc/cookbook/301-redirects)！\r\n\r\n语雀的个人使用目前是不支持自定义域名的，虽然空间的使用可以自定义二级域名，如：[weiyan.yuque.com](https://weiyan.yuque.com/)，但是空间知识库必须要先登录，不方便其他人查看，尤其是对于没有注册语雀的用户。\r\n\r\n现在的情况是，我有一个已经备案的个人域名 `www.example.com`，现在我想：\r\n\r\n- 让所有 `www.example.com` 的访问地址都跳转到 <https://www.yuque.com/shenweiyan>，比如 `https://www.example.com/cookbook` 跳转到 <https://www.yuque.com/shenweiyan/cookbook>。\r\n- `www.example.com` 的访问地址跳转同时支持 http/https。\r\n- `example.com/www.example.com` 同时实现以上跳转。\r\n\r\n反正就一句话，让下面的链接都跳转到 <https://www.yuque.com/shenweiyan>：\r\n\r\n- <http://example.com>\r\n- <http://www.example.com>\r\n- <https://example.com>\r\n- <https://www.example.com>\r\n\r\n下面简单记录一下具体的实现过程。\r\n\r\n## 背景知识\r\n\r\n**显性 URL 转发：** 用的是 301 重定向技术，效果为浏览器地址栏输入 [http://a.com](http://a.com/) 回车，打开网站内容是目标地址 <http://cloud.baidu.com/> 的网站内容，且地址栏显示目标地址 [http://cloud.baidu.com/](http://cloud.baidu.com/) 。\r\n\r\n**隐性 URL 转发：** 用的是 iframe 框架技术、非重定向技术，效果为浏览器地址栏输入 [http://a.com](http://a.com/) 回车，打开网站内容是目标地址 <http://cloud.baidu.com/> 的网站内容，但地址栏显示当前地址 [http://a.com](http://a.com/) 。\r\n\r\n**301 重定向是什么？**\r\n\r\n301 重定向表示网页由一个地址永久地移动到了另外一个地址。这里中的 301 是被重定向网页的 HTTP 状态代码。\r\n\r\n**例如：** [blog.ahrefs.com](https://blog.ahrefs.com/) 重定向到了 [ahrefs.com/blog](https://ahrefs.com/blog)。\r\n\r\n简单来说，301 重定向是在告诉浏览器：“这个页面已经永久迁移了。这个是新的地址，我们不打算把它移回去啦。”这时，浏览器会回复：“没问题！我现在（开始）就把用户引向这里！”\r\n\r\n这就是为什么访问 blog.ahrefs.com 已经不可能了。你最后会去到的网页是 ahrefs.com/blog。\r\n\r\n## 前提条件\r\n\r\n前提条件可以分为**有服务器**和**无服务器**两种情况，下面具体说一下。\r\n\r\n1.  有服务器（可以考虑腾讯云或者阿里云的轻量云服务器，双十一优惠价一年也就几十块）；\r\n\r\n    - 阿里云轻量云服务器：[购买链接](https://www.aliyun.com/activity/1111?userCode=mx65q35j)\r\n    - 腾讯云轻量云服务器：[购买链接](https://curl.qcloud.com/0Sy0R0AX)\r\n    - 域名（域名需要已经完成备案）；\r\n    - SSL 证书（可以使用阿里云或者腾讯云的免费域名证书）；\r\n\r\n2.  无服务器\r\n    - 可以考虑使用 [Cloudflare Page Rules](https://support.cloudflare.com/hc/zh-cn/articles/218411427)（页面规则）；当然，其他的平台也可以；\r\n    - 域名（有些域名可以不用备案）；\r\n    - SSL 证书（如果你用的是 [Cloudflare Page Rules](https://support.cloudflare.com/hc/zh-cn/articles/218411427)，可以不用 SSL 证书 ）。\r\n\r\n## 操作步骤：有服务器\r\n\r\n本操作以 **ncbix.com** 域名为示例。\r\n\r\n### 1. 域名解析\r\n\r\n在你的域名供应商后台点击“添加记录”，分别输入 www 和 @，记录类型“A”，记录值就是你虚拟主机或 VPS 服务器的 IP 地址，最后保存。以 DNSPOD 为例。\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FqvWUx6cyUz-O8d1avOdFZ1aDIWF.png)\r\n\r\n### 2. SSL 证书\r\n\r\n申请免费证书，具体操作可以自行百度。以腾讯云为例：<https://console.cloud.tencent.com/ssl>。\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fo4XBIRStXxx27kvjKULIjHazdJ9.png)\r\n根据截图，一步步点击操作。申请完成后，把证书下载并上传到你的服务器。\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FqamrO4EBSQuO6wsJ28y8g-AH63E.png)\r\n\r\n### 3. 安装 Nginx\r\n\r\n可以直接使用 **yum/apt** 的方式直接安装；源码方式的安装，参考：《[CentOS 7 下编译安装 Nginx · 语雀](https://www.yuque.com/shenweiyan/cookbook/centos-install-nginx)》。\r\n\r\n```bash\r\n# Debian/Ubuntu\r\napt update\r\napt install nginx\r\n\r\n# CentOS/RHEL\r\nyum install nginx\r\n```\r\n\r\n### 4. 配置 Nginx\r\n\r\n通过 **yum/apt** 安装的 Nginx 默认的置文件在 **/etc/nginx/nginx.conf**，编辑该文件。\r\n\r\n```nginx\r\nhttp {\r\n    ##\r\n    # Basic Settings\r\n    ##\r\n    ......\r\n\r\n    ##\r\n    # Virtual Host Configs\r\n    ##\r\nserver {\r\n    listen 80;\r\n    listen 443 ssl;\r\n    server_name ncbix.com www.ncbix.com;\r\n    ssl_certificate /etc/nginx/ssl/nginx/www.ncbix.com_bundle.crt;\r\n    ssl_certificate_key /etc/nginx/ssl/nginx/www.ncbix.com.key;\r\n    index  index.php index.html index.htm;\r\n\r\n    if ( $scheme = "http" ) {\r\n        return 301 https://www.yuque.com/shenweiyan$request_uri; #确保跳转到新域名HTTPS如果没有HTTPS可以去掉\r\n    }\r\n    location / {\r\n        rewrite /.* https://www.yuque.com/shenweiyan$uri redirect; #跳转到新域名并重写为新域名\r\n    }\r\n  }\r\n\r\ninclude /etc/nginx/conf.d/*.conf;\r\n    include /etc/nginx/sites-enabled/*;\r\n}\r\n```\r\n\r\n### 5. 重启 Nginx\r\n\r\n最后，通过下面的命令重启 Nginx 服务即可。\r\n\r\n```bash\r\nservice nginx restart\r\n```\r\n\r\n## 操作步骤：无服务器\r\n\r\n我们以 [Cloudflare Page Rules](https://support.cloudflare.com/hc/zh-cn/articles/218411427) 为例，说明一下具体怎么操作。\r\n\r\n### 1. Cloudflare 中添加站点\r\n\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fjd2wS9yVs0ZiBBalZQVOuPQHbU1.png)\r\n\r\n添加完站点后，可以选择 **Free 计划**，然后点击继续：\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FumaUELUaIJnv9s0Q4paKUDIAWTL.png)\r\n\r\n点击继续后，Cloudflare 会自动扫描你对应域名的一些解析记录：\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FtQZKAyQd_6dd5d7A_ZLCVp4NUEg.png)\r\n\r\n我们可以直接选择 **"继续"**。\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fvkt0gHVP7lmiqapWf3pM7Zx4YwN.png)\r\n\r\n### 2. 修改域名 DNS\r\n\r\n首先，我的域名是在腾讯云注册的，可以去腾讯云控制台 **"我的域名"** 中直接修改 DNS：\r\n\r\n```\r\n# 添加 Cloudflare 名称服务器\r\nimani.ns.cloudflare.com\r\ncaroline.dnspod.net\r\n```\r\n\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FlKyYHHLGHwD9IPKYvLtPorghBpr.png)\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FmRwodrlbkBt6SkX7RsG2ec1iruc.png)\r\n\r\n### 3. 完成 Cloudflare 添加站点\r\n\r\n可以把后面快速指南的这几个配置都勾选。\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FtULJ4uM_TuPjPkkMtdXAhxpyDes.png)\r\n\r\n等待几分钟就可以看到你的域名站点已经添加到 Cloudflare 上了！\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fk8Hv5dkW8kHd1IorhNfT427RliQ.png)\r\n\r\n### 4. 设置 DNS 记录\r\n\r\n> The first thing you will need is a DNS record for **@**, **www** and any other subdomains you want to redirect, set to ![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FjjhP041Zj-aZVPAHpQ-YnHIzMA6.png). This can point to any IP address as the redirection page rule will execute first. I would recommend pointing them to 192.0.2.1 , a dummy IP.\r\n>\r\n> From：<https://community.cloudflare.com/t/redirecting-one-domain-to-another/81960>\r\n\r\n在配置 Cloudflare 站点的页面规则前，你需要把该域名的 **@**，**www** 或者其他你想要进行重定向的子域名添加到 DNS 记录中，这个记录的值可以指向任何 IP 地址，因为重定向页面规则将首先执行。我建议将它们指向 192.0.2.1 ，一个虚拟 IP。\r\n\r\n在这里，我们以 **@** 和 **note** 子域名为例，添加 DNS 记录，先让它们指向一个虚拟 IP。\r\n![images](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fk08ydFuPukTv88AAa0V27T4xTBh.png "以 ncbix.com 和 note.ncbix.com 为例，均重定向到 https://www.yuque.com/shenweiyan 页面")\r\n\r\n### 5. 配置 Cloudflare 站点页面规则\r\n\r\n首先，在 Cloudflare 的主页上点击对应的站点，选择 **"页面规则"**，点击。\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FqolXaSzUdkgtKo66yRC3xRkV7mv.png)\r\n\r\n点击 **"创建页面规则"**：\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FnF2bk6hzYvulCtXdLSQSUiV1Z44.png)\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fp5DSLxKInn25a591hjYjDNpUeRn.png)\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FiFuRSizKlmkmJ5LxiBfkIGreBdm.png)\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FtNPR2rLIFDKMYz3N8gqkLBcQFnG.png)\r\n\r\n#### 什么是页面规则？\r\n\r\n> 页面规则为 Cloudflare 设置提供基于 URL 的粒度控制。关于页面规则需要了解的最重要事情是，针对一个 URL 仅触发一个页面规则，因此一定要按照优先级顺序对页面规则进行排序并将最具体的页面规则放在顶部。\r\n\r\n##### 页面规则中允许哪些模式？\r\n\r\n> 如果使用的是转发页面规则，则可以将这些通配符映射到变量。在转发 URL 中，可以按照从左到右的顺序指定与原始 URL 中的通配符相匹配的 $1、$2，以此类推。\r\n>\r\n> 例如，可以将 `http://.example.com/` 转发到 `http://$2.example.com/$1.jpg`。此规则将与 <http://cloud.example.com/flare> 相匹配，这最终将转发到 <http://flare.example.com/cloud.jpg>。\r\n\r\n##### 一些有用的提示：\r\n\r\n> 1.  如果要同时匹配 http 和 https，只需编写 example.com 即可。无需编写 example.com。\r\n> 2.  如果要匹配域中的每个页面，则需要编写 example.com/，仅编写 example.com 是不够的。\r\n> 3.  请参阅 [了解和配置 Cloudflare 页面规则](https://support.cloudflare.com/hc/articles/218411427) 了解有关页面规则模式的更多详细信息。\r\n\r\n### 6. 配置 SSL(不必要)\r\n\r\n**📢 Update 2022.09.05：这一步不是必要的，这里仅供参考！**\r\n\r\n1.  申请 [www.example.com](http://www.example.com) 域名的 SSL 证书；\r\n2.  把 DNS 验证域名的记录添加到 Cloudfare 的 DNS 中；\r\n\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FiEmXujpQKK0j0p2GxzaOgTC3xwN.png)\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FnOHAmNIAcEmwBD_fv3eIUBzxmiB.png)\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FtxcA4iXJhT029vkw35EVkDN-2QG.png)\r\n\r\n**注意：**\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FgrIb03h7Inot6k7fa1BHGH4G3HO.png)\r\n\r\n## 参考资料\r\n\r\n1. [nginx 实现两个域名之间跳转配置 - SegmentFault 思否](https://segmentfault.com/q/1010000015157572)\r\n2. [智能云解析 DNS - 通过 Nginx 实现 URL 转发 | 百度智能云文档](https://cloud.baidu.com/doc/DNS/s/ukq4w1pji)\r\n3. [SEO 的 301 重定向：你需要知道的一切](https://ahrefs.com/blog/zh/301-redirects/)\r\n', 'bodyText': '📢 域名 https://weiyan.cc 就是基于本文章中的 "无服务器" 步骤实现的个人域名跳转至语雀个人主页！因此，本篇文档你也可以通过以下的链接访问：https://weiyan.cc/cookbook/301-redirects！\n\n语雀的个人使用目前是不支持自定义域名的，虽然空间的使用可以自定义二级域名，如：weiyan.yuque.com，但是空间知识库必须要先登录，不方便其他人查看，尤其是对于没有注册语雀的用户。\n现在的情况是，我有一个已经备案的个人域名 www.example.com，现在我想：\n\n让所有 www.example.com 的访问地址都跳转到 https://www.yuque.com/shenweiyan，比如 https://www.example.com/cookbook 跳转到 https://www.yuque.com/shenweiyan/cookbook。\nwww.example.com 的访问地址跳转同时支持 http/https。\nexample.com/www.example.com 同时实现以上跳转。\n\n反正就一句话，让下面的链接都跳转到 https://www.yuque.com/shenweiyan：\n\nhttp://example.com\nhttp://www.example.com\nhttps://example.com\nhttps://www.example.com\n\n下面简单记录一下具体的实现过程。\n背景知识\n显性 URL 转发： 用的是 301 重定向技术，效果为浏览器地址栏输入 http://a.com 回车，打开网站内容是目标地址 http://cloud.baidu.com/ 的网站内容，且地址栏显示目标地址 http://cloud.baidu.com/ 。\n隐性 URL 转发： 用的是 iframe 框架技术、非重定向技术，效果为浏览器地址栏输入 http://a.com 回车，打开网站内容是目标地址 http://cloud.baidu.com/ 的网站内容，但地址栏显示当前地址 http://a.com 。\n301 重定向是什么？\n301 重定向表示网页由一个地址永久地移动到了另外一个地址。这里中的 301 是被重定向网页的 HTTP 状态代码。\n例如： blog.ahrefs.com 重定向到了 ahrefs.com/blog。\n简单来说，301 重定向是在告诉浏览器：“这个页面已经永久迁移了。这个是新的地址，我们不打算把它移回去啦。”这时，浏览器会回复：“没问题！我现在（开始）就把用户引向这里！”\n这就是为什么访问 blog.ahrefs.com 已经不可能了。你最后会去到的网页是 ahrefs.com/blog。\n前提条件\n前提条件可以分为有服务器和无服务器两种情况，下面具体说一下。\n\n\n有服务器（可以考虑腾讯云或者阿里云的轻量云服务器，双十一优惠价一年也就几十块）；\n\n阿里云轻量云服务器：购买链接\n腾讯云轻量云服务器：购买链接\n域名（域名需要已经完成备案）；\nSSL 证书（可以使用阿里云或者腾讯云的免费域名证书）；\n\n\n\n无服务器\n\n可以考虑使用 Cloudflare Page Rules（页面规则）；当然，其他的平台也可以；\n域名（有些域名可以不用备案）；\nSSL 证书（如果你用的是 Cloudflare Page Rules，可以不用 SSL 证书 ）。\n\n\n\n操作步骤：有服务器\n本操作以 ncbix.com 域名为示例。\n1. 域名解析\n在你的域名供应商后台点击“添加记录”，分别输入 www 和 @，记录类型“A”，记录值就是你虚拟主机或 VPS 服务器的 IP 地址，最后保存。以 DNSPOD 为例。\n\n2. SSL 证书\n申请免费证书，具体操作可以自行百度。以腾讯云为例：https://console.cloud.tencent.com/ssl。\n\n根据截图，一步步点击操作。申请完成后，把证书下载并上传到你的服务器。\n\n3. 安装 Nginx\n可以直接使用 yum/apt 的方式直接安装；源码方式的安装，参考：《CentOS 7 下编译安装 Nginx · 语雀》。\n# Debian/Ubuntu\napt update\napt install nginx\n\n# CentOS/RHEL\nyum install nginx\n4. 配置 Nginx\n通过 yum/apt 安装的 Nginx 默认的置文件在 /etc/nginx/nginx.conf，编辑该文件。\nhttp {\n    ##\n    # Basic Settings\n    ##\n    ......\n\n    ##\n    # Virtual Host Configs\n    ##\nserver {\n    listen 80;\n    listen 443 ssl;\n    server_name ncbix.com www.ncbix.com;\n    ssl_certificate /etc/nginx/ssl/nginx/www.ncbix.com_bundle.crt;\n    ssl_certificate_key /etc/nginx/ssl/nginx/www.ncbix.com.key;\n    index  index.php index.html index.htm;\n\n    if ( $scheme = "http" ) {\n        return 301 https://www.yuque.com/shenweiyan$request_uri; #确保跳转到新域名HTTPS如果没有HTTPS可以去掉\n    }\n    location / {\n        rewrite /.* https://www.yuque.com/shenweiyan$uri redirect; #跳转到新域名并重写为新域名\n    }\n  }\n\ninclude /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\n5. 重启 Nginx\n最后，通过下面的命令重启 Nginx 服务即可。\nservice nginx restart\n操作步骤：无服务器\n我们以 Cloudflare Page Rules 为例，说明一下具体怎么操作。\n1. Cloudflare 中添加站点\n\n添加完站点后，可以选择 Free 计划，然后点击继续：\n\n点击继续后，Cloudflare 会自动扫描你对应域名的一些解析记录：\n\n我们可以直接选择 "继续"。\n\n2. 修改域名 DNS\n首先，我的域名是在腾讯云注册的，可以去腾讯云控制台 "我的域名" 中直接修改 DNS：\n# 添加 Cloudflare 名称服务器\nimani.ns.cloudflare.com\ncaroline.dnspod.net\n\n\n\n3. 完成 Cloudflare 添加站点\n可以把后面快速指南的这几个配置都勾选。\n\n等待几分钟就可以看到你的域名站点已经添加到 Cloudflare 上了！\n\n4. 设置 DNS 记录\n\nThe first thing you will need is a DNS record for @, www and any other subdomains you want to redirect, set to . This can point to any IP address as the redirection page rule will execute first. I would recommend pointing them to 192.0.2.1 , a dummy IP.\nFrom：https://community.cloudflare.com/t/redirecting-one-domain-to-another/81960\n\n在配置 Cloudflare 站点的页面规则前，你需要把该域名的 @，www 或者其他你想要进行重定向的子域名添加到 DNS 记录中，这个记录的值可以指向任何 IP 地址，因为重定向页面规则将首先执行。我建议将它们指向 192.0.2.1 ，一个虚拟 IP。\n在这里，我们以 @ 和 note 子域名为例，添加 DNS 记录，先让它们指向一个虚拟 IP。\n\n5. 配置 Cloudflare 站点页面规则\n首先，在 Cloudflare 的主页上点击对应的站点，选择 "页面规则"，点击。\n\n点击 "创建页面规则"：\n\n\n\n\n什么是页面规则？\n\n页面规则为 Cloudflare 设置提供基于 URL 的粒度控制。关于页面规则需要了解的最重要事情是，针对一个 URL 仅触发一个页面规则，因此一定要按照优先级顺序对页面规则进行排序并将最具体的页面规则放在顶部。\n\n页面规则中允许哪些模式？\n\n如果使用的是转发页面规则，则可以将这些通配符映射到变量。在转发 URL 中，可以按照从左到右的顺序指定与原始 URL 中的通配符相匹配的 $1、$2，以此类推。\n例如，可以将 http://.example.com/ 转发到 http://$2.example.com/$1.jpg。此规则将与 http://cloud.example.com/flare 相匹配，这最终将转发到 http://flare.example.com/cloud.jpg。\n\n一些有用的提示：\n\n\n如果要同时匹配 http 和 https，只需编写 example.com 即可。无需编写 example.com。\n如果要匹配域中的每个页面，则需要编写 example.com/，仅编写 example.com 是不够的。\n请参阅 了解和配置 Cloudflare 页面规则 了解有关页面规则模式的更多详细信息。\n\n\n6. 配置 SSL(不必要)\n📢 Update 2022.09.05：这一步不是必要的，这里仅供参考！\n\n申请 www.example.com 域名的 SSL 证书；\n把 DNS 验证域名的记录添加到 Cloudfare 的 DNS 中；\n\n\n\n\n注意：\n\n参考资料\n\nnginx 实现两个域名之间跳转配置 - SegmentFault 思否\n智能云解析 DNS - 通过 Nginx 实现 URL 转发 | 百度智能云文档\nSEO 的 301 重定向：你需要知道的一切', 'bodyHTML': '<blockquote>\n<p dir="auto">📢 域名 <a href="https://weiyan.cc" rel="nofollow">https://weiyan.cc</a> 就是基于本文章中的 "<strong><a href="#pG3U6">无服务器</a></strong>" 步骤实现的个人域名跳转至语雀个人主页！因此，本篇文档你也可以通过以下的链接访问：<a href="https://weiyan.cc/cookbook/301-redirects" rel="nofollow">https://weiyan.cc/cookbook/301-redirects</a>！</p>\n</blockquote>\n<p dir="auto">语雀的个人使用目前是不支持自定义域名的，虽然空间的使用可以自定义二级域名，如：<a href="https://weiyan.yuque.com/" rel="nofollow">weiyan.yuque.com</a>，但是空间知识库必须要先登录，不方便其他人查看，尤其是对于没有注册语雀的用户。</p>\n<p dir="auto">现在的情况是，我有一个已经备案的个人域名 <code class="notranslate">www.example.com</code>，现在我想：</p>\n<ul dir="auto">\n<li>让所有 <code class="notranslate">www.example.com</code> 的访问地址都跳转到 <a href="https://www.yuque.com/shenweiyan" rel="nofollow">https://www.yuque.com/shenweiyan</a>，比如 <code class="notranslate">https://www.example.com/cookbook</code> 跳转到 <a href="https://www.yuque.com/shenweiyan/cookbook" rel="nofollow">https://www.yuque.com/shenweiyan/cookbook</a>。</li>\n<li><code class="notranslate">www.example.com</code> 的访问地址跳转同时支持 http/https。</li>\n<li><code class="notranslate">example.com/www.example.com</code> 同时实现以上跳转。</li>\n</ul>\n<p dir="auto">反正就一句话，让下面的链接都跳转到 <a href="https://www.yuque.com/shenweiyan" rel="nofollow">https://www.yuque.com/shenweiyan</a>：</p>\n<ul dir="auto">\n<li><a href="http://example.com" rel="nofollow">http://example.com</a></li>\n<li><a href="http://www.example.com" rel="nofollow">http://www.example.com</a></li>\n<li><a href="https://example.com" rel="nofollow">https://example.com</a></li>\n<li><a href="https://www.example.com" rel="nofollow">https://www.example.com</a></li>\n</ul>\n<p dir="auto">下面简单记录一下具体的实现过程。</p>\n<h2 dir="auto">背景知识</h2>\n<p dir="auto"><strong>显性 URL 转发：</strong> 用的是 301 重定向技术，效果为浏览器地址栏输入 <a href="http://a.com/" rel="nofollow">http://a.com</a> 回车，打开网站内容是目标地址 <a href="http://cloud.baidu.com/" rel="nofollow">http://cloud.baidu.com/</a> 的网站内容，且地址栏显示目标地址 <a href="http://cloud.baidu.com/" rel="nofollow">http://cloud.baidu.com/</a> 。</p>\n<p dir="auto"><strong>隐性 URL 转发：</strong> 用的是 iframe 框架技术、非重定向技术，效果为浏览器地址栏输入 <a href="http://a.com/" rel="nofollow">http://a.com</a> 回车，打开网站内容是目标地址 <a href="http://cloud.baidu.com/" rel="nofollow">http://cloud.baidu.com/</a> 的网站内容，但地址栏显示当前地址 <a href="http://a.com/" rel="nofollow">http://a.com</a> 。</p>\n<p dir="auto"><strong>301 重定向是什么？</strong></p>\n<p dir="auto">301 重定向表示网页由一个地址永久地移动到了另外一个地址。这里中的 301 是被重定向网页的 HTTP 状态代码。</p>\n<p dir="auto"><strong>例如：</strong> <a href="https://blog.ahrefs.com/" rel="nofollow">blog.ahrefs.com</a> 重定向到了 <a href="https://ahrefs.com/blog" rel="nofollow">ahrefs.com/blog</a>。</p>\n<p dir="auto">简单来说，301 重定向是在告诉浏览器：“这个页面已经永久迁移了。这个是新的地址，我们不打算把它移回去啦。”这时，浏览器会回复：“没问题！我现在（开始）就把用户引向这里！”</p>\n<p dir="auto">这就是为什么访问 blog.ahrefs.com 已经不可能了。你最后会去到的网页是 ahrefs.com/blog。</p>\n<h2 dir="auto">前提条件</h2>\n<p dir="auto">前提条件可以分为<strong>有服务器</strong>和<strong>无服务器</strong>两种情况，下面具体说一下。</p>\n<ol dir="auto">\n<li>\n<p dir="auto">有服务器（可以考虑腾讯云或者阿里云的轻量云服务器，双十一优惠价一年也就几十块）；</p>\n<ul dir="auto">\n<li>阿里云轻量云服务器：<a href="https://www.aliyun.com/activity/1111?userCode=mx65q35j" rel="nofollow">购买链接</a></li>\n<li>腾讯云轻量云服务器：<a href="https://curl.qcloud.com/0Sy0R0AX" rel="nofollow">购买链接</a></li>\n<li>域名（域名需要已经完成备案）；</li>\n<li>SSL 证书（可以使用阿里云或者腾讯云的免费域名证书）；</li>\n</ul>\n</li>\n<li>\n<p dir="auto">无服务器</p>\n<ul dir="auto">\n<li>可以考虑使用 <a href="https://support.cloudflare.com/hc/zh-cn/articles/218411427" rel="nofollow">Cloudflare Page Rules</a>（页面规则）；当然，其他的平台也可以；</li>\n<li>域名（有些域名可以不用备案）；</li>\n<li>SSL 证书（如果你用的是 <a href="https://support.cloudflare.com/hc/zh-cn/articles/218411427" rel="nofollow">Cloudflare Page Rules</a>，可以不用 SSL 证书 ）。</li>\n</ul>\n</li>\n</ol>\n<h2 dir="auto">操作步骤：有服务器</h2>\n<p dir="auto">本操作以 <strong>ncbix.com</strong> 域名为示例。</p>\n<h3 dir="auto">1. 域名解析</h3>\n<p dir="auto">在你的域名供应商后台点击“添加记录”，分别输入 www 和 @，记录类型“A”，记录值就是你虚拟主机或 VPS 服务器的 IP 地址，最后保存。以 DNSPOD 为例。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/44b1f52cbf0efa14f4ed939d0180673fd4d71add7b4c4321b44a73c39a557a05/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f467176575578366379557a2d4f38643161764f64465a3161444957462e706e67"><img src="https://camo.githubusercontent.com/44b1f52cbf0efa14f4ed939d0180673fd4d71add7b4c4321b44a73c39a557a05/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f467176575578366379557a2d4f38643161764f64465a3161444957462e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FqvWUx6cyUz-O8d1avOdFZ1aDIWF.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">2. SSL 证书</h3>\n<p dir="auto">申请免费证书，具体操作可以自行百度。以腾讯云为例：<a href="https://console.cloud.tencent.com/ssl" rel="nofollow">https://console.cloud.tencent.com/ssl</a>。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/bb566223e062832cc9ebc619be102576b6922ee39603d0f0e10e0cd32532ed69/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466f3458424952537458787832376b766a4b554c496a48617a644a392e706e67"><img src="https://camo.githubusercontent.com/bb566223e062832cc9ebc619be102576b6922ee39603d0f0e10e0cd32532ed69/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466f3458424952537458787832376b766a4b554c496a48617a644a392e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fo4XBIRStXxx27kvjKULIjHazdJ9.png" style="max-width: 100%;"></a><br>\n根据截图，一步步点击操作。申请完成后，把证书下载并上传到你的服务器。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/528774315048f20ad05c5544b497cb6193459194ea979c4dd58e78491b76c9d4/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4671616d724f3445425351754f3677734a32387938672d41483633452e706e67"><img src="https://camo.githubusercontent.com/528774315048f20ad05c5544b497cb6193459194ea979c4dd58e78491b76c9d4/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4671616d724f3445425351754f3677734a32387938672d41483633452e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FqamrO4EBSQuO6wsJ28y8g-AH63E.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">3. 安装 Nginx</h3>\n<p dir="auto">可以直接使用 <strong>yum/apt</strong> 的方式直接安装；源码方式的安装，参考：《<a href="https://www.yuque.com/shenweiyan/cookbook/centos-install-nginx" rel="nofollow">CentOS 7 下编译安装 Nginx · 语雀</a>》。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Debian/Ubuntu\napt update\napt install nginx\n\n# CentOS/RHEL\nyum install nginx"><pre class="notranslate"><span class="pl-c"><span class="pl-c">#</span> Debian/Ubuntu</span>\napt update\napt install nginx\n\n<span class="pl-c"><span class="pl-c">#</span> CentOS/RHEL</span>\nyum install nginx</pre></div>\n<h3 dir="auto">4. 配置 Nginx</h3>\n<p dir="auto">通过 <strong>yum/apt</strong> 安装的 Nginx 默认的置文件在 <strong>/etc/nginx/nginx.conf</strong>，编辑该文件。</p>\n<div class="highlight highlight-source-nginx notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="http {\n    ##\n    # Basic Settings\n    ##\n    ......\n\n    ##\n    # Virtual Host Configs\n    ##\nserver {\n    listen 80;\n    listen 443 ssl;\n    server_name ncbix.com www.ncbix.com;\n    ssl_certificate /etc/nginx/ssl/nginx/www.ncbix.com_bundle.crt;\n    ssl_certificate_key /etc/nginx/ssl/nginx/www.ncbix.com.key;\n    index  index.php index.html index.htm;\n\n    if ( $scheme = &quot;http&quot; ) {\n        return 301 https://www.yuque.com/shenweiyan$request_uri; #确保跳转到新域名HTTPS如果没有HTTPS可以去掉\n    }\n    location / {\n        rewrite /.* https://www.yuque.com/shenweiyan$uri redirect; #跳转到新域名并重写为新域名\n    }\n  }\n\ninclude /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}"><pre class="notranslate"><span class="pl-k">http</span> {\n    <span class="pl-c">##</span>\n    <span class="pl-c"># Basic Settings</span>\n    <span class="pl-c">##</span>\n    ......\n\n    <span class="pl-c">##</span>\n    <span class="pl-c"># Virtual Host Configs</span>\n    <span class="pl-c">##</span>\n<span class="pl-k">server</span> {\n    <span class="pl-k">listen</span> <span class="pl-s">80</span>;\n    <span class="pl-k">listen</span> <span class="pl-s">443</span> ssl;\n    <span class="pl-k">server_name</span> ncbix.com www.ncbix.com;\n    <span class="pl-k">ssl_certificate</span> /etc/nginx/ssl/nginx/www.ncbix.com_bundle.crt;\n    <span class="pl-k">ssl_certificate_key</span> /etc/nginx/ssl/nginx/www.ncbix.com.key;\n    <span class="pl-k">index</span>  index.php index.html index.htm;\n\n    <span class="pl-k">if</span> ( <span class="pl-smi">$scheme</span> = <span class="pl-s">"http"</span> ) {\n        <span class="pl-c1">return</span> <span class="pl-s">301</span> https://www.yuque.com/shenweiyan<span class="pl-smi">$request_uri</span>; <span class="pl-c">#确保跳转到新域名HTTPS如果没有HTTPS可以去掉</span>\n    }\n    <span class="pl-k">location</span> <span class="pl-en">/ </span>{\n        <span class="pl-k">rewrite</span> <span class="pl-sr">/.* </span>https://www.yuque.com/shenweiyan<span class="pl-smi">$uri</span> redirect; <span class="pl-c">#跳转到新域名并重写为新域名</span>\n    }\n  }\n\n<span class="pl-k">include</span> /etc/nginx/conf.d/*.conf;\n    <span class="pl-k">include</span> /etc/nginx/sites-enabled/*;\n}</pre></div>\n<h3 dir="auto">5. 重启 Nginx</h3>\n<p dir="auto">最后，通过下面的命令重启 Nginx 服务即可。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="service nginx restart"><pre class="notranslate">service nginx restart</pre></div>\n<h2 dir="auto">操作步骤：无服务器</h2>\n<p dir="auto">我们以 <a href="https://support.cloudflare.com/hc/zh-cn/articles/218411427" rel="nofollow">Cloudflare Page Rules</a> 为例，说明一下具体怎么操作。</p>\n<h3 dir="auto">1. Cloudflare 中添加站点</h3>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/00554fc2a0eeff306c9eacfada7d78c8a2bddce057f659885165f974930ea188/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466a6432775339795673305a694242616c5a51564f755051486255312e706e67"><img src="https://camo.githubusercontent.com/00554fc2a0eeff306c9eacfada7d78c8a2bddce057f659885165f974930ea188/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466a6432775339795673305a694242616c5a51564f755051486255312e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fjd2wS9yVs0ZiBBalZQVOuPQHbU1.png" style="max-width: 100%;"></a></p>\n<p dir="auto">添加完站点后，可以选择 <strong>Free 计划</strong>，然后点击继续：<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/518743db2074814fdf4e714a232883c127061371509533a4b5ada641cbbc086f/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46756d6155454c5561494a6e76397330513470614b5544494157544c2e706e67"><img src="https://camo.githubusercontent.com/518743db2074814fdf4e714a232883c127061371509533a4b5ada641cbbc086f/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46756d6155454c5561494a6e76397330513470614b5544494157544c2e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FumaUELUaIJnv9s0Q4paKUDIAWTL.png" style="max-width: 100%;"></a></p>\n<p dir="auto">点击继续后，Cloudflare 会自动扫描你对应域名的一些解析记录：<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/7b3dbc9f52a5e724f5da658505a51fe0f6f40b9ef1e6fd47c5f5155df3ee1223/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4674515a4b417951645f366464356437415f5a4c435670344e5545672e706e67"><img src="https://camo.githubusercontent.com/7b3dbc9f52a5e724f5da658505a51fe0f6f40b9ef1e6fd47c5f5155df3ee1223/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4674515a4b417951645f366464356437415f5a4c435670344e5545672e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FtQZKAyQd_6dd5d7A_ZLCVp4NUEg.png" style="max-width: 100%;"></a></p>\n<p dir="auto">我们可以直接选择 <strong>"继续"</strong>。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/37adc11ea42335faaea560675d5780cd48cd8d8c8fef53d10c88dde482c5a1ee/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46766b743067485650376c6d69716170576633704d375a783459774e2e706e67"><img src="https://camo.githubusercontent.com/37adc11ea42335faaea560675d5780cd48cd8d8c8fef53d10c88dde482c5a1ee/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46766b743067485650376c6d69716170576633704d375a783459774e2e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fvkt0gHVP7lmiqapWf3pM7Zx4YwN.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">2. 修改域名 DNS</h3>\n<p dir="auto">首先，我的域名是在腾讯云注册的，可以去腾讯云控制台 <strong>"我的域名"</strong> 中直接修改 DNS：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# 添加 Cloudflare 名称服务器\nimani.ns.cloudflare.com\ncaroline.dnspod.net"><pre class="notranslate"><code class="notranslate"># 添加 Cloudflare 名称服务器\nimani.ns.cloudflare.com\ncaroline.dnspod.net\n</code></pre></div>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/7db4ff12a8118eadaa750baaa939a629de2130f8ee3a227faf5bdc71de97bf07/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466c4b795948484c474877443949504b59764c74506f7267684270722e706e67"><img src="https://camo.githubusercontent.com/7db4ff12a8118eadaa750baaa939a629de2130f8ee3a227faf5bdc71de97bf07/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466c4b795948484c474877443949504b59764c74506f7267684270722e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FlKyYHHLGHwD9IPKYvLtPorghBpr.png" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/82ebc291edfcc6d77b2a9c0080f0a5148fb34c7d8d1523c33b3ac2044f5620d9/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466d52776f64726c626b427436536b583752734732656331697275632e706e67"><img src="https://camo.githubusercontent.com/82ebc291edfcc6d77b2a9c0080f0a5148fb34c7d8d1523c33b3ac2044f5620d9/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466d52776f64726c626b427436536b583752734732656331697275632e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FmRwodrlbkBt6SkX7RsG2ec1iruc.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">3. 完成 Cloudflare 添加站点</h3>\n<p dir="auto">可以把后面快速指南的这几个配置都勾选。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/4d7c317f54e9233307de48878d88cfae671c818f03d1d72d8964c993e8680ed0/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4674554c4a34754d5f5475506a506b6b4d74645841687870794465732e706e67"><img src="https://camo.githubusercontent.com/4d7c317f54e9233307de48878d88cfae671c818f03d1d72d8964c993e8680ed0/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4674554c4a34754d5f5475506a506b6b4d74645841687870794465732e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FtULJ4uM_TuPjPkkMtdXAhxpyDes.png" style="max-width: 100%;"></a></p>\n<p dir="auto">等待几分钟就可以看到你的域名站点已经添加到 Cloudflare 上了！<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/52e8c5b9fb10ef315879d3f60a5b9c812ef618392cc4dc082fce39e069725933/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466b38487635646b57386b486431496f72684e6654343237526c69512e706e67"><img src="https://camo.githubusercontent.com/52e8c5b9fb10ef315879d3f60a5b9c812ef618392cc4dc082fce39e069725933/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466b38487635646b57386b486431496f72684e6654343237526c69512e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fk8Hv5dkW8kHd1IorhNfT427RliQ.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">4. 设置 DNS 记录</h3>\n<blockquote>\n<p dir="auto">The first thing you will need is a DNS record for <strong>@</strong>, <strong>www</strong> and any other subdomains you want to redirect, set to <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/72a68d1e2838f828e77df3cfdd0d9ce2c776db499b65e84aa7cc324d3d020cf4/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466a6a68503034315a6a2d615a5650414870512d596e48497a4d41362e706e67"><img src="https://camo.githubusercontent.com/72a68d1e2838f828e77df3cfdd0d9ce2c776db499b65e84aa7cc324d3d020cf4/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466a6a68503034315a6a2d615a5650414870512d596e48497a4d41362e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FjjhP041Zj-aZVPAHpQ-YnHIzMA6.png" style="max-width: 100%;"></a>. This can point to any IP address as the redirection page rule will execute first. I would recommend pointing them to 192.0.2.1 , a dummy IP.</p>\n<p dir="auto">From：<a href="https://community.cloudflare.com/t/redirecting-one-domain-to-another/81960" rel="nofollow">https://community.cloudflare.com/t/redirecting-one-domain-to-another/81960</a></p>\n</blockquote>\n<p dir="auto">在配置 Cloudflare 站点的页面规则前，你需要把该域名的 <strong>@</strong>，<strong>www</strong> 或者其他你想要进行重定向的子域名添加到 DNS 记录中，这个记录的值可以指向任何 IP 地址，因为重定向页面规则将首先执行。我建议将它们指向 192.0.2.1 ，一个虚拟 IP。</p>\n<p dir="auto">在这里，我们以 <strong>@</strong> 和 <strong>note</strong> 子域名为例，添加 DNS 记录，先让它们指向一个虚拟 IP。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/bb11144490e2fdb2e3130617aa71f388c29f9da64b4a6e46bcba0699a1b83e32/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466b30387964467550756b54763838414161305632375434785442682e706e67"><img src="https://camo.githubusercontent.com/bb11144490e2fdb2e3130617aa71f388c29f9da64b4a6e46bcba0699a1b83e32/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466b30387964467550756b54763838414161305632375434785442682e706e67" alt="images" title="以 ncbix.com 和 note.ncbix.com 为例，均重定向到 https://www.yuque.com/shenweiyan 页面" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fk08ydFuPukTv88AAa0V27T4xTBh.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">5. 配置 Cloudflare 站点页面规则</h3>\n<p dir="auto">首先，在 Cloudflare 的主页上点击对应的站点，选择 <strong>"页面规则"</strong>，点击。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/628754371dc05782344862f929808cda81b5795ef2531342d3187803a1f4dfed/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46716f6c5861537a55646b67744b6f36367952433378526b56376d762e706e67"><img src="https://camo.githubusercontent.com/628754371dc05782344862f929808cda81b5795ef2531342d3187803a1f4dfed/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46716f6c5861537a55646b67744b6f36367952433378526b56376d762e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FqolXaSzUdkgtKo66yRC3xRkV7mv.png" style="max-width: 100%;"></a></p>\n<p dir="auto">点击 <strong>"创建页面规则"</strong>：<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/00219a109ddb2b3a1273f9fcb90ac0e80f8acc5128bbc770758a3efcb950f27b/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466e4632626b36687a5976756c437458644c535153556956315a34342e706e67"><img src="https://camo.githubusercontent.com/00219a109ddb2b3a1273f9fcb90ac0e80f8acc5128bbc770758a3efcb950f27b/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466e4632626b36687a5976756c437458644c535153556956315a34342e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FnF2bk6hzYvulCtXdLSQSUiV1Z44.png" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/4bfa72e9686237de0995c160b3527a17585ddbd46ec6caf10eb3794ef91e9839/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46703544534c784b496e6e323561353931686a596a444e705565526e2e706e67"><img src="https://camo.githubusercontent.com/4bfa72e9686237de0995c160b3527a17585ddbd46ec6caf10eb3794ef91e9839/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46703544534c784b496e6e323561353931686a596a444e705565526e2e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fp5DSLxKInn25a591hjYjDNpUeRn.png" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/808f78c48daf1df3a96195abe33f7636f52a8979d6f77fb2b8fea4f2c4052c97/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466946755253697a4b6c6d6b6d4a354c786942666b4947726542646d2e706e67"><img src="https://camo.githubusercontent.com/808f78c48daf1df3a96195abe33f7636f52a8979d6f77fb2b8fea4f2c4052c97/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466946755253697a4b6c6d6b6d4a354c786942666b4947726542646d2e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FiFuRSizKlmkmJ5LxiBfkIGreBdm.png" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/35ac110ceee60bfb5245718361a9d28eeed01bd01dc08ca39a52731f66810475/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46744e505232724c4946444b4d597a334e3867716b4c426351466e472e706e67"><img src="https://camo.githubusercontent.com/35ac110ceee60bfb5245718361a9d28eeed01bd01dc08ca39a52731f66810475/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46744e505232724c4946444b4d597a334e3867716b4c426351466e472e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FtNPR2rLIFDKMYz3N8gqkLBcQFnG.png" style="max-width: 100%;"></a></p>\n<h4 dir="auto">什么是页面规则？</h4>\n<blockquote>\n<p dir="auto">页面规则为 Cloudflare 设置提供基于 URL 的粒度控制。关于页面规则需要了解的最重要事情是，针对一个 URL 仅触发一个页面规则，因此一定要按照优先级顺序对页面规则进行排序并将最具体的页面规则放在顶部。</p>\n</blockquote>\n<h5 dir="auto">页面规则中允许哪些模式？</h5>\n<blockquote>\n<p dir="auto">如果使用的是转发页面规则，则可以将这些通配符映射到变量。在转发 URL 中，可以按照从左到右的顺序指定与原始 URL 中的通配符相匹配的 $1、$2，以此类推。</p>\n<p dir="auto">例如，可以将 <code class="notranslate">http://.example.com/</code> 转发到 <code class="notranslate">http://$2.example.com/$1.jpg</code>。此规则将与 <a href="http://cloud.example.com/flare" rel="nofollow">http://cloud.example.com/flare</a> 相匹配，这最终将转发到 <a href="http://flare.example.com/cloud.jpg" rel="nofollow">http://flare.example.com/cloud.jpg</a>。</p>\n</blockquote>\n<h5 dir="auto">一些有用的提示：</h5>\n<blockquote>\n<ol dir="auto">\n<li>如果要同时匹配 http 和 https，只需编写 example.com 即可。无需编写 example.com。</li>\n<li>如果要匹配域中的每个页面，则需要编写 example.com/，仅编写 example.com 是不够的。</li>\n<li>请参阅 <a href="https://support.cloudflare.com/hc/articles/218411427" rel="nofollow">了解和配置 Cloudflare 页面规则</a> 了解有关页面规则模式的更多详细信息。</li>\n</ol>\n</blockquote>\n<h3 dir="auto">6. 配置 SSL(不必要)</h3>\n<p dir="auto"><strong>📢 Update 2022.09.05：这一步不是必要的，这里仅供参考！</strong></p>\n<ol dir="auto">\n<li>申请 <a href="http://www.example.com" rel="nofollow">www.example.com</a> 域名的 SSL 证书；</li>\n<li>把 DNS 验证域名的记录添加到 Cloudfare 的 DNS 中；</li>\n</ol>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/a40061a184251a5416485d1e70c32e3c3aa22770737a0c07deda38150d90da9a/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4669456d58756a70514b4b306a30703247787a614f6754433378774e2e706e67"><img src="https://camo.githubusercontent.com/a40061a184251a5416485d1e70c32e3c3aa22770737a0c07deda38150d90da9a/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4669456d58756a70514b4b306a30703247787a614f6754433378774e2e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FiEmXujpQKK0j0p2GxzaOgTC3xwN.png" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/1258cc4d4d88c7b802437078562a50471fa0875098e960a1ce60cb4dff729931/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466e4f48416d4e494163456d7742445f667633654955427a786d69422e706e67"><img src="https://camo.githubusercontent.com/1258cc4d4d88c7b802437078562a50471fa0875098e960a1ce60cb4dff729931/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466e4f48416d4e494163456d7742445f667633654955427a786d69422e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FnOHAmNIAcEmwBD_fv3eIUBzxmiB.png" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/e63de12ef5f6e14453b3655782ecbaca53e2806614606abefdc825789da0afc0/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46747863413469584a6854303239766b77333545566b444e2d3251472e706e67"><img src="https://camo.githubusercontent.com/e63de12ef5f6e14453b3655782ecbaca53e2806614606abefdc825789da0afc0/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46747863413469584a6854303239766b77333545566b444e2d3251472e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FtxcA4iXJhT029vkw35EVkDN-2QG.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><strong>注意：</strong><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/5806fc4a26ca19fa5c79b35a69b88f5b803a4e5819202e7b6b3f9e54f90b8b9a/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466772496230336837496e6f74366b3766613142484748344733484f2e706e67"><img src="https://camo.githubusercontent.com/5806fc4a26ca19fa5c79b35a69b88f5b803a4e5819202e7b6b3f9e54f90b8b9a/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466772496230336837496e6f74366b3766613142484748344733484f2e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FgrIb03h7Inot6k7fa1BHGH4G3HO.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">参考资料</h2>\n<ol dir="auto">\n<li><a href="https://segmentfault.com/q/1010000015157572" rel="nofollow">nginx 实现两个域名之间跳转配置 - SegmentFault 思否</a></li>\n<li><a href="https://cloud.baidu.com/doc/DNS/s/ukq4w1pji" rel="nofollow">智能云解析 DNS - 通过 Nginx 实现 URL 转发 | 百度智能云文档</a></li>\n<li><a href="https://ahrefs.com/blog/zh/301-redirects/" rel="nofollow">SEO 的 301 重定向：你需要知道的一切</a></li>\n</ol>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.3-折腾'}, 'labels': {'nodes': [{'name': '语雀'}]}, 'comments': {'nodes': []}}, {'title': 'Python 导出公众号文章为 Markdown', 'number': 7, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/7', 'createdAt': '2023-10-19T03:21:58Z', 'lastEditedAt': '2023-10-19T03:32:09Z', 'updatedAt': '2023-10-19T03:32:09Z', 'body': '记录一下个人使用 Python3 爬取个人公众号的所有文章，并把文章保存为 Markdown 格式的一些操作记录，主要介绍一下思路和一些简单的代码。\r\n\r\n<!-- more -->\r\n\r\n## 前提条件与思路\r\n\r\n1. 需要登录网页端微信公众号，获取对应 Cookies；\r\n2. 通过获取的 Cookies 爬取所有的文章 url 以及其他信息；\r\n3. 通过文章 url 获取对应文章的 HTML；\r\n4. 最后，把 HTML 转化为 Markdown。\r\n\r\n之所以选择通过文章公开访问的 url 爬取对应文章的 HTML，而不是直接沿用 Cookies，主要是怕 Cookies 滥用导致其他不可预知的问题，例如封号之类。截止本文章发布前，个人公众号全部已发表的文章大约有 400 多篇，通过这个方法都能正常爬取下来。\r\n\r\n## 获取已发表文章数\r\n\r\n登录公众号，按下 F12 打开开发者工具，在 `网络` 栏中找到 `appmsgpublish` 名称的请求。\r\n\r\n- 查看请求地址\r\n  ![appmsgpublish url](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/Gitbook/wechat_url.png)\r\n\r\n- 获取 cookie\r\n  ![wecaht cookie](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/Gitbook/wecaht_cookie.png)\r\n\r\n```python\r\nimport requests, json\r\n\r\n#注意把 <Your Cookie> 替换成你自己的 cookie\r\nheaders = {\'Content-type\': \'application/json\', \'User-Agent\': \'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36\',\r\n           \'Cookie\': <Your Cookie>}\r\n\r\n#这个 url 即截图中的请求地址\r\nurl = \'https://mp.weixin.qq.com/cgi-bin/appmsgpublish?sub=list&search_field=null&begin=0&count=5&query=&type=101_1&free_publish_type=1&sub_action=list_ex&token=<token>&lang=zh_CN&f=json&ajax=1\'\r\nreq = requests.get(url, headers=headers)\r\nreq_json = json.loads(req.content.decode("utf-8"))\r\nreq_json\r\n# total_count 即为已发表文章的总数\r\n```\r\n![Wecaht posts total_count](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/Gitbook/total_count.png)\r\n\r\n## 获取所有的文章信息\r\n\r\n以下程序的 `mp.txt` 就是得到的该公众号所有文章信息的列表。\r\n\r\n```python\r\nallPostList = []\r\n\r\nfor number in range(0, 420, 20):\r\n    #注意 begin={number}&count=20，即按照每页20篇文章，分页进行爬取\r\n    #根据测试每页最多只支持20篇文章\r\n    url = f"https://mp.weixin.qq.com/cgi-bin/appmsgpublish?sub=list&search_field=null&begin={number}&count=20&query=&type=101_1&free_publish_type=1&sub_action=list_ex&token=<token>&lang=zh_CN&f=json&ajax=1\', headers=headers)"\r\n    x = requests.get(url, headers=headers)\r\n    posts_list  = json.loads(json.loads(x.content.decode("utf-8"))[\'publish_page\'])["publish_list"]\r\n    allPostList = allPostList + posts_list  \r\n    time.sleep(5)\r\n\r\nwith open("mp.txt", "w") as OUT:\r\n    OUT.write(str(allPostList))\r\n```\r\n\r\n## HTML to Markdown\r\n\r\nPython 导出公众号文章为 Markdown 最后的一步工作就是解析上一步骤得到的 `mp.txt` 文件，然后通过 url 去逐一爬取对应的文章 HTML，然后把 Html 转化成 Markdown 即可。\r\n\r\n这些步骤都很简单，网上搜一下就有一大堆教程，感兴趣的可以去搜一下，这里文章就不写了。 \r\n\r\n', 'bodyText': '记录一下个人使用 Python3 爬取个人公众号的所有文章，并把文章保存为 Markdown 格式的一些操作记录，主要介绍一下思路和一些简单的代码。\n\n前提条件与思路\n\n需要登录网页端微信公众号，获取对应 Cookies；\n通过获取的 Cookies 爬取所有的文章 url 以及其他信息；\n通过文章 url 获取对应文章的 HTML；\n最后，把 HTML 转化为 Markdown。\n\n之所以选择通过文章公开访问的 url 爬取对应文章的 HTML，而不是直接沿用 Cookies，主要是怕 Cookies 滥用导致其他不可预知的问题，例如封号之类。截止本文章发布前，个人公众号全部已发表的文章大约有 400 多篇，通过这个方法都能正常爬取下来。\n获取已发表文章数\n登录公众号，按下 F12 打开开发者工具，在 网络 栏中找到 appmsgpublish 名称的请求。\n\n\n查看请求地址\n\n\n\n获取 cookie\n\n\n\nimport requests, json\n\n#注意把 <Your Cookie> 替换成你自己的 cookie\nheaders = {\'Content-type\': \'application/json\', \'User-Agent\': \'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36\',\n           \'Cookie\': <Your Cookie>}\n\n#这个 url 即截图中的请求地址\nurl = \'https://mp.weixin.qq.com/cgi-bin/appmsgpublish?sub=list&search_field=null&begin=0&count=5&query=&type=101_1&free_publish_type=1&sub_action=list_ex&token=<token>&lang=zh_CN&f=json&ajax=1\'\nreq = requests.get(url, headers=headers)\nreq_json = json.loads(req.content.decode("utf-8"))\nreq_json\n# total_count 即为已发表文章的总数\n\n获取所有的文章信息\n以下程序的 mp.txt 就是得到的该公众号所有文章信息的列表。\nallPostList = []\n\nfor number in range(0, 420, 20):\n    #注意 begin={number}&count=20，即按照每页20篇文章，分页进行爬取\n    #根据测试每页最多只支持20篇文章\n    url = f"https://mp.weixin.qq.com/cgi-bin/appmsgpublish?sub=list&search_field=null&begin={number}&count=20&query=&type=101_1&free_publish_type=1&sub_action=list_ex&token=<token>&lang=zh_CN&f=json&ajax=1\', headers=headers)"\n    x = requests.get(url, headers=headers)\n    posts_list  = json.loads(json.loads(x.content.decode("utf-8"))[\'publish_page\'])["publish_list"]\n    allPostList = allPostList + posts_list  \n    time.sleep(5)\n\nwith open("mp.txt", "w") as OUT:\n    OUT.write(str(allPostList))\nHTML to Markdown\nPython 导出公众号文章为 Markdown 最后的一步工作就是解析上一步骤得到的 mp.txt 文件，然后通过 url 去逐一爬取对应的文章 HTML，然后把 Html 转化成 Markdown 即可。\n这些步骤都很简单，网上搜一下就有一大堆教程，感兴趣的可以去搜一下，这里文章就不写了。', 'bodyHTML': '<p dir="auto">记录一下个人使用 Python3 爬取个人公众号的所有文章，并把文章保存为 Markdown 格式的一些操作记录，主要介绍一下思路和一些简单的代码。</p>\n\n<h2 dir="auto">前提条件与思路</h2>\n<ol dir="auto">\n<li>需要登录网页端微信公众号，获取对应 Cookies；</li>\n<li>通过获取的 Cookies 爬取所有的文章 url 以及其他信息；</li>\n<li>通过文章 url 获取对应文章的 HTML；</li>\n<li>最后，把 HTML 转化为 Markdown。</li>\n</ol>\n<p dir="auto">之所以选择通过文章公开访问的 url 爬取对应文章的 HTML，而不是直接沿用 Cookies，主要是怕 Cookies 滥用导致其他不可预知的问题，例如封号之类。截止本文章发布前，个人公众号全部已发表的文章大约有 400 多篇，通过这个方法都能正常爬取下来。</p>\n<h2 dir="auto">获取已发表文章数</h2>\n<p dir="auto">登录公众号，按下 F12 打开开发者工具，在 <code class="notranslate">网络</code> 栏中找到 <code class="notranslate">appmsgpublish</code> 名称的请求。</p>\n<ul dir="auto">\n<li>\n<p dir="auto">查看请求地址<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/064854b691d92a38e2628827600988e5b7866ac4bffd1f839c176817da0f27e7/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f476974626f6f6b2f7765636861745f75726c2e706e67"><img src="https://camo.githubusercontent.com/064854b691d92a38e2628827600988e5b7866ac4bffd1f839c176817da0f27e7/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f476974626f6f6b2f7765636861745f75726c2e706e67" alt="appmsgpublish url" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/Gitbook/wechat_url.png" style="max-width: 100%;"></a></p>\n</li>\n<li>\n<p dir="auto">获取 cookie<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/f2a9ada63c6754a2f16982e3ca3c20b18ce64360992da35de3561c91cd08b83a/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f476974626f6f6b2f7765636168745f636f6f6b69652e706e67"><img src="https://camo.githubusercontent.com/f2a9ada63c6754a2f16982e3ca3c20b18ce64360992da35de3561c91cd08b83a/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f476974626f6f6b2f7765636168745f636f6f6b69652e706e67" alt="wecaht cookie" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/Gitbook/wecaht_cookie.png" style="max-width: 100%;"></a></p>\n</li>\n</ul>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import requests, json\n\n#注意把 &lt;Your Cookie&gt; 替换成你自己的 cookie\nheaders = {\'Content-type\': \'application/json\', \'User-Agent\': \'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36\',\n           \'Cookie\': &lt;Your Cookie&gt;}\n\n#这个 url 即截图中的请求地址\nurl = \'https://mp.weixin.qq.com/cgi-bin/appmsgpublish?sub=list&amp;search_field=null&amp;begin=0&amp;count=5&amp;query=&amp;type=101_1&amp;free_publish_type=1&amp;sub_action=list_ex&amp;token=&lt;token&gt;&amp;lang=zh_CN&amp;f=json&amp;ajax=1\'\nreq = requests.get(url, headers=headers)\nreq_json = json.loads(req.content.decode(&quot;utf-8&quot;))\nreq_json\n# total_count 即为已发表文章的总数"><pre class="notranslate"><span class="pl-k">import</span> <span class="pl-s1">requests</span>, <span class="pl-s1">json</span>\n\n<span class="pl-c">#注意把 &lt;Your Cookie&gt; 替换成你自己的 cookie</span>\n<span class="pl-s1">headers</span> <span class="pl-c1">=</span> {<span class="pl-s">\'Content-type\'</span>: <span class="pl-s">\'application/json\'</span>, <span class="pl-s">\'User-Agent\'</span>: <span class="pl-s">\'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36\'</span>,\n           <span class="pl-s">\'Cookie\'</span>: <span class="pl-c1">&lt;</span><span class="pl-v">Your</span> <span class="pl-v">Cookie</span><span class="pl-c1">&gt;</span>}\n\n<span class="pl-c">#这个 url 即截图中的请求地址</span>\n<span class="pl-s1">url</span> <span class="pl-c1">=</span> <span class="pl-s">\'https://mp.weixin.qq.com/cgi-bin/appmsgpublish?sub=list&amp;search_field=null&amp;begin=0&amp;count=5&amp;query=&amp;type=101_1&amp;free_publish_type=1&amp;sub_action=list_ex&amp;token=&lt;token&gt;&amp;lang=zh_CN&amp;f=json&amp;ajax=1\'</span>\n<span class="pl-s1">req</span> <span class="pl-c1">=</span> <span class="pl-s1">requests</span>.<span class="pl-c1">get</span>(<span class="pl-s1">url</span>, <span class="pl-s1">headers</span><span class="pl-c1">=</span><span class="pl-s1">headers</span>)\n<span class="pl-s1">req_json</span> <span class="pl-c1">=</span> <span class="pl-s1">json</span>.<span class="pl-c1">loads</span>(<span class="pl-s1">req</span>.<span class="pl-c1">content</span>.<span class="pl-c1">decode</span>(<span class="pl-s">"utf-8"</span>))\n<span class="pl-s1">req_json</span>\n<span class="pl-c"># total_count 即为已发表文章的总数</span></pre></div>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/ee7e7aa0dee76a9345ed432a53da2a4e9e0fc7bedae019ef6ec51909d8b5eb31/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f476974626f6f6b2f746f74616c5f636f756e742e706e67"><img src="https://camo.githubusercontent.com/ee7e7aa0dee76a9345ed432a53da2a4e9e0fc7bedae019ef6ec51909d8b5eb31/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f476974626f6f6b2f746f74616c5f636f756e742e706e67" alt="Wecaht posts total_count" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/Gitbook/total_count.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">获取所有的文章信息</h2>\n<p dir="auto">以下程序的 <code class="notranslate">mp.txt</code> 就是得到的该公众号所有文章信息的列表。</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="allPostList = []\n\nfor number in range(0, 420, 20):\n    #注意 begin={number}&amp;count=20，即按照每页20篇文章，分页进行爬取\n    #根据测试每页最多只支持20篇文章\n    url = f&quot;https://mp.weixin.qq.com/cgi-bin/appmsgpublish?sub=list&amp;search_field=null&amp;begin={number}&amp;count=20&amp;query=&amp;type=101_1&amp;free_publish_type=1&amp;sub_action=list_ex&amp;token=&lt;token&gt;&amp;lang=zh_CN&amp;f=json&amp;ajax=1\', headers=headers)&quot;\n    x = requests.get(url, headers=headers)\n    posts_list  = json.loads(json.loads(x.content.decode(&quot;utf-8&quot;))[\'publish_page\'])[&quot;publish_list&quot;]\n    allPostList = allPostList + posts_list  \n    time.sleep(5)\n\nwith open(&quot;mp.txt&quot;, &quot;w&quot;) as OUT:\n    OUT.write(str(allPostList))"><pre class="notranslate"><span class="pl-s1">allPostList</span> <span class="pl-c1">=</span> []\n\n<span class="pl-k">for</span> <span class="pl-s1">number</span> <span class="pl-c1">in</span> <span class="pl-en">range</span>(<span class="pl-c1">0</span>, <span class="pl-c1">420</span>, <span class="pl-c1">20</span>):\n    <span class="pl-c">#注意 begin={number}&amp;count=20，即按照每页20篇文章，分页进行爬取</span>\n    <span class="pl-c">#根据测试每页最多只支持20篇文章</span>\n    <span class="pl-s1">url</span> <span class="pl-c1">=</span> <span class="pl-s">f"https://mp.weixin.qq.com/cgi-bin/appmsgpublish?sub=list&amp;search_field=null&amp;begin=<span class="pl-s1"><span class="pl-kos">{</span><span class="pl-s1">number</span><span class="pl-kos">}</span></span>&amp;count=20&amp;query=&amp;type=101_1&amp;free_publish_type=1&amp;sub_action=list_ex&amp;token=&lt;token&gt;&amp;lang=zh_CN&amp;f=json&amp;ajax=1\', headers=headers)"</span>\n    <span class="pl-s1">x</span> <span class="pl-c1">=</span> <span class="pl-s1">requests</span>.<span class="pl-c1">get</span>(<span class="pl-s1">url</span>, <span class="pl-s1">headers</span><span class="pl-c1">=</span><span class="pl-s1">headers</span>)\n    <span class="pl-s1">posts_list</span>  <span class="pl-c1">=</span> <span class="pl-s1">json</span>.<span class="pl-c1">loads</span>(<span class="pl-s1">json</span>.<span class="pl-c1">loads</span>(<span class="pl-s1">x</span>.<span class="pl-c1">content</span>.<span class="pl-c1">decode</span>(<span class="pl-s">"utf-8"</span>))[<span class="pl-s">\'publish_page\'</span>])[<span class="pl-s">"publish_list"</span>]\n    <span class="pl-s1">allPostList</span> <span class="pl-c1">=</span> <span class="pl-s1">allPostList</span> <span class="pl-c1">+</span> <span class="pl-s1">posts_list</span>  \n    <span class="pl-s1">time</span>.<span class="pl-c1">sleep</span>(<span class="pl-c1">5</span>)\n\n<span class="pl-k">with</span> <span class="pl-en">open</span>(<span class="pl-s">"mp.txt"</span>, <span class="pl-s">"w"</span>) <span class="pl-k">as</span> <span class="pl-c1">OUT</span>:\n    <span class="pl-c1">OUT</span>.<span class="pl-c1">write</span>(<span class="pl-en">str</span>(<span class="pl-s1">allPostList</span>))</pre></div>\n<h2 dir="auto">HTML to Markdown</h2>\n<p dir="auto">Python 导出公众号文章为 Markdown 最后的一步工作就是解析上一步骤得到的 <code class="notranslate">mp.txt</code> 文件，然后通过 url 去逐一爬取对应的文章 HTML，然后把 Html 转化成 Markdown 即可。</p>\n<p dir="auto">这些步骤都很简单，网上搜一下就有一大堆教程，感兴趣的可以去搜一下，这里文章就不写了。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '2023年下半年的一些乱弹', 'number': 6, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/6', 'createdAt': '2023-10-18T02:46:03Z', 'lastEditedAt': '2023-11-29T01:09:10Z', 'updatedAt': '2023-11-29T01:09:10Z', 'body': '其实写这边文章，主要是想着测试一下使用了 GitHub Actions 的 mkdocs 触发 Discussions to mkdocs blog posts 的一些效果。\r\n\r\n<!-- more -->\r\n\r\n今天的天气真好啊！阳光明媚，微风拂面，仿佛是一幅美丽的画卷。这样的天气让人心情愉悦，忍不住想要出去走走，感受大自然的美丽。无论是散步还是骑自行车，都是不错的选择。我享受着这美好的一天，也期待着未来更多美好的时光。\r\n\r\n从 11 月起，公司也好，家庭也罢，陆陆续续的一些事情让生活变得此起彼伏。缺乏了一些码字的动力，整个人变得有点沮丧，空洞夹杂着混沌的状态让整个人都很显得颓废。生活需要激情，希望接下来的 12 月能回归一个更好的状态吧！', 'bodyText': '其实写这边文章，主要是想着测试一下使用了 GitHub Actions 的 mkdocs 触发 Discussions to mkdocs blog posts 的一些效果。\n\n今天的天气真好啊！阳光明媚，微风拂面，仿佛是一幅美丽的画卷。这样的天气让人心情愉悦，忍不住想要出去走走，感受大自然的美丽。无论是散步还是骑自行车，都是不错的选择。我享受着这美好的一天，也期待着未来更多美好的时光。\n从 11 月起，公司也好，家庭也罢，陆陆续续的一些事情让生活变得此起彼伏。缺乏了一些码字的动力，整个人变得有点沮丧，空洞夹杂着混沌的状态让整个人都很显得颓废。生活需要激情，希望接下来的 12 月能回归一个更好的状态吧！', 'bodyHTML': '<p dir="auto">其实写这边文章，主要是想着测试一下使用了 GitHub Actions 的 mkdocs 触发 Discussions to mkdocs blog posts 的一些效果。</p>\n\n<p dir="auto">今天的天气真好啊！阳光明媚，微风拂面，仿佛是一幅美丽的画卷。这样的天气让人心情愉悦，忍不住想要出去走走，感受大自然的美丽。无论是散步还是骑自行车，都是不错的选择。我享受着这美好的一天，也期待着未来更多美好的时光。</p>\n<p dir="auto">从 11 月起，公司也好，家庭也罢，陆陆续续的一些事情让生活变得此起彼伏。缺乏了一些码字的动力，整个人变得有点沮丧，空洞夹杂着混沌的状态让整个人都很显得颓废。生活需要激情，希望接下来的 12 月能回归一个更好的状态吧！</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': [{'body': 'Hello，Wed Oct 18 10:46:41 CST 2023', 'author': {'login': 'shenweiyan'}}]}}, {'title': '友情链接', 'number': 5, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/5', 'createdAt': '2023-10-16T07:57:49Z', 'lastEditedAt': '2025-05-06T03:49:57Z', 'updatedAt': '2025-05-06T03:49:57Z', 'body': '> 每一个独立博客都是一个信息孤岛。我们没有类似「你可能喜欢其他人写的这些文章」的推荐机制，所以除了搜索引擎、社交网络引荐之外，我们应该还需要通过某种方法将这些信息孤岛连接起来：**交换友情链接就是一种很棒的架桥方式。**\r\n\r\n社交就是不断认识新的人、结交新的朋友，而友链也正是这样一种很棒的交朋友的方式，作为一个不太善于言辞的技术人，我希望结交更多的朋友，来丰富我的社交，一起成长。\r\n\r\n## 站点信息\r\n\r\n**申请前记得先添加本站哦**，站点信息如下。\r\n\r\n- 站点名称: 维燕的数字花园\r\n- 站点链接: <https://weiyan.cc>\r\n- 站点头像: <https://weiyan.cc/assets/logo.png>\r\n- 站点描述: BioIT 爱好者，沉淀生活，记录点滴。\r\n\r\n## 交换友链\r\n\r\n想和我交换友链的，没啥特别需求，只是希望你的博客有足够多的**原创**、**有意义**的内容，并且建站已满半年。\r\n\r\n- 不接受商业性或包含侵入性广告的站点。\r\n- 那种塞满了转载文章的采集站点暂时不考虑。\r\n- 非常反感很多论坛上动不动就来交换友链的帖子，如果是出于 SEO 的一些目的来交换友链其实是没什么意义的。\r\n\r\n## 友链说明\r\n\r\n如需申请，在下方评论区提供你的「博客名称」和「博客地址」即可。或者参考以下格式：\r\n\r\n- 博客名称：xxxxx\r\n- 博客地址：https://xxxx.com\r\n- 博客介绍：xxxxxxxx\r\n\r\n## 友情站点\r\n\r\n以下站点按照添加的时间顺序排列。\r\n\r\n<div class="grid cards flinks" markdown>\r\n\r\n- __[UncleCAT4](https://yuanj.top/)__\r\n\r\n    思绪来得快去得也快，偶尔会在这里停留。\r\n\r\n- __[1874’s Blog](https://blog.1874.cool)__\r\n\r\n    有粤语歌就不会有世界末日。\r\n\r\n- __[望薮](https://ralvines.top)__\r\n\r\n    以我观物，故物皆著我之色彩。\r\n\r\n- __[Jayden\'s site](https://xxu.do/)__\r\n\r\n    为天地立心，为生民立命，为往圣继绝学，为万世开太平。\r\n\r\n- __[Shitao Wu | 吴诗涛](https://shitao5.org/)__\r\n\r\n    喜欢捣鼓电脑，UseR，喜欢[阅读](https://shitao5.org/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/)，重度使用 Kindle。甘愿做一个平庸的人，走在成为我自己的道路上。\r\n\r\n- __[椒盐豆豉](https://blog.douchi.space/)__\r\n\r\n    一个写了二十年博客，现居美国西雅图的女博主+码农。\r\n\r\n- __[墨迹心空](https://www.secondlife.love/)__\r\n\r\n    Life is coding.\r\n\r\n- __[言成的个人博客](https://meethigher.top/)__\r\n\r\n    言成的个人博客网站，寓意为让我们相逢在更高处。\r\n\r\n- __[Pepper 的博客](https://uioqps.github.io/)__\r\n\r\n    生命留给有价值的事物才能创造价值。\r\n\r\n- __[Wanjin Hu (胡万金)](https://wanjinhu.github.io/)__\r\n\r\n    思考人生，探索世界，知行合一。\r\n\r\n- __[Wcowin\'s Blog](https://wcowin.work/)__\r\n\r\n    循此苦旅，以达星辰。\r\n\r\n- __[Goslion 的博客](https://goslion.eu.org/)__\r\n\r\n    一个专注技术与写作的个人博客，记录日常与技术。\r\n\r\n</div>', 'bodyText': "每一个独立博客都是一个信息孤岛。我们没有类似「你可能喜欢其他人写的这些文章」的推荐机制，所以除了搜索引擎、社交网络引荐之外，我们应该还需要通过某种方法将这些信息孤岛连接起来：交换友情链接就是一种很棒的架桥方式。\n\n社交就是不断认识新的人、结交新的朋友，而友链也正是这样一种很棒的交朋友的方式，作为一个不太善于言辞的技术人，我希望结交更多的朋友，来丰富我的社交，一起成长。\n站点信息\n申请前记得先添加本站哦，站点信息如下。\n\n站点名称: 维燕的数字花园\n站点链接: https://weiyan.cc\n站点头像: https://weiyan.cc/assets/logo.png\n站点描述: BioIT 爱好者，沉淀生活，记录点滴。\n\n交换友链\n想和我交换友链的，没啥特别需求，只是希望你的博客有足够多的原创、有意义的内容，并且建站已满半年。\n\n不接受商业性或包含侵入性广告的站点。\n那种塞满了转载文章的采集站点暂时不考虑。\n非常反感很多论坛上动不动就来交换友链的帖子，如果是出于 SEO 的一些目的来交换友链其实是没什么意义的。\n\n友链说明\n如需申请，在下方评论区提供你的「博客名称」和「博客地址」即可。或者参考以下格式：\n\n博客名称：xxxxx\n博客地址：https://xxxx.com\n博客介绍：xxxxxxxx\n\n友情站点\n以下站点按照添加的时间顺序排列。\n\n\n\nUncleCAT4\n思绪来得快去得也快，偶尔会在这里停留。\n\n\n1874’s Blog\n有粤语歌就不会有世界末日。\n\n\n望薮\n以我观物，故物皆著我之色彩。\n\n\nJayden's site\n为天地立心，为生民立命，为往圣继绝学，为万世开太平。\n\n\nShitao Wu | 吴诗涛\n喜欢捣鼓电脑，UseR，喜欢阅读，重度使用 Kindle。甘愿做一个平庸的人，走在成为我自己的道路上。\n\n\n椒盐豆豉\n一个写了二十年博客，现居美国西雅图的女博主+码农。\n\n\n墨迹心空\nLife is coding.\n\n\n言成的个人博客\n言成的个人博客网站，寓意为让我们相逢在更高处。\n\n\nPepper 的博客\n生命留给有价值的事物才能创造价值。\n\n\nWanjin Hu (胡万金)\n思考人生，探索世界，知行合一。\n\n\nWcowin's Blog\n循此苦旅，以达星辰。\n\n\nGoslion 的博客\n一个专注技术与写作的个人博客，记录日常与技术。", 'bodyHTML': '<blockquote>\n<p dir="auto">每一个独立博客都是一个信息孤岛。我们没有类似「你可能喜欢其他人写的这些文章」的推荐机制，所以除了搜索引擎、社交网络引荐之外，我们应该还需要通过某种方法将这些信息孤岛连接起来：<strong>交换友情链接就是一种很棒的架桥方式。</strong></p>\n</blockquote>\n<p dir="auto">社交就是不断认识新的人、结交新的朋友，而友链也正是这样一种很棒的交朋友的方式，作为一个不太善于言辞的技术人，我希望结交更多的朋友，来丰富我的社交，一起成长。</p>\n<h2 dir="auto">站点信息</h2>\n<p dir="auto"><strong>申请前记得先添加本站哦</strong>，站点信息如下。</p>\n<ul dir="auto">\n<li>站点名称: 维燕的数字花园</li>\n<li>站点链接: <a href="https://weiyan.cc" rel="nofollow">https://weiyan.cc</a></li>\n<li>站点头像: <a href="https://weiyan.cc/assets/logo.png" rel="nofollow">https://weiyan.cc/assets/logo.png</a></li>\n<li>站点描述: BioIT 爱好者，沉淀生活，记录点滴。</li>\n</ul>\n<h2 dir="auto">交换友链</h2>\n<p dir="auto">想和我交换友链的，没啥特别需求，只是希望你的博客有足够多的<strong>原创</strong>、<strong>有意义</strong>的内容，并且建站已满半年。</p>\n<ul dir="auto">\n<li>不接受商业性或包含侵入性广告的站点。</li>\n<li>那种塞满了转载文章的采集站点暂时不考虑。</li>\n<li>非常反感很多论坛上动不动就来交换友链的帖子，如果是出于 SEO 的一些目的来交换友链其实是没什么意义的。</li>\n</ul>\n<h2 dir="auto">友链说明</h2>\n<p dir="auto">如需申请，在下方评论区提供你的「博客名称」和「博客地址」即可。或者参考以下格式：</p>\n<ul dir="auto">\n<li>博客名称：xxxxx</li>\n<li>博客地址：<a href="https://xxxx.com" rel="nofollow">https://xxxx.com</a></li>\n<li>博客介绍：xxxxxxxx</li>\n</ul>\n<h2 dir="auto">友情站点</h2>\n<p dir="auto">以下站点按照添加的时间顺序排列。</p>\n<div dir="auto">\n<ul dir="auto">\n<li>\n<p dir="auto"><strong><a href="https://yuanj.top/" rel="nofollow">UncleCAT4</a></strong></p>\n<p dir="auto">思绪来得快去得也快，偶尔会在这里停留。</p>\n</li>\n<li>\n<p dir="auto"><strong><a href="https://blog.1874.cool" rel="nofollow">1874’s Blog</a></strong></p>\n<p dir="auto">有粤语歌就不会有世界末日。</p>\n</li>\n<li>\n<p dir="auto"><strong><a href="https://ralvines.top" rel="nofollow">望薮</a></strong></p>\n<p dir="auto">以我观物，故物皆著我之色彩。</p>\n</li>\n<li>\n<p dir="auto"><strong><a href="https://xxu.do/" rel="nofollow">Jayden\'s site</a></strong></p>\n<p dir="auto">为天地立心，为生民立命，为往圣继绝学，为万世开太平。</p>\n</li>\n<li>\n<p dir="auto"><strong><a href="https://shitao5.org/" rel="nofollow">Shitao Wu | 吴诗涛</a></strong></p>\n<p dir="auto">喜欢捣鼓电脑，UseR，喜欢<a href="https://shitao5.org/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/" rel="nofollow">阅读</a>，重度使用 Kindle。甘愿做一个平庸的人，走在成为我自己的道路上。</p>\n</li>\n<li>\n<p dir="auto"><strong><a href="https://blog.douchi.space/" rel="nofollow">椒盐豆豉</a></strong></p>\n<p dir="auto">一个写了二十年博客，现居美国西雅图的女博主+码农。</p>\n</li>\n<li>\n<p dir="auto"><strong><a href="https://www.secondlife.love/" rel="nofollow">墨迹心空</a></strong></p>\n<p dir="auto">Life is coding.</p>\n</li>\n<li>\n<p dir="auto"><strong><a href="https://meethigher.top/" rel="nofollow">言成的个人博客</a></strong></p>\n<p dir="auto">言成的个人博客网站，寓意为让我们相逢在更高处。</p>\n</li>\n<li>\n<p dir="auto"><strong><a href="https://uioqps.github.io/" rel="nofollow">Pepper 的博客</a></strong></p>\n<p dir="auto">生命留给有价值的事物才能创造价值。</p>\n</li>\n<li>\n<p dir="auto"><strong><a href="https://wanjinhu.github.io/" rel="nofollow">Wanjin Hu (胡万金)</a></strong></p>\n<p dir="auto">思考人生，探索世界，知行合一。</p>\n</li>\n<li>\n<p dir="auto"><strong><a href="https://wcowin.work/" rel="nofollow">Wcowin\'s Blog</a></strong></p>\n<p dir="auto">循此苦旅，以达星辰。</p>\n</li>\n<li>\n<p dir="auto"><strong><a href="https://goslion.eu.org/" rel="nofollow">Goslion 的博客</a></strong></p>\n<p dir="auto">一个专注技术与写作的个人博客，记录日常与技术。</p>\n</li>\n</ul>\n</div>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '0.1-站点'}, 'labels': {'nodes': []}, 'comments': {'nodes': [{'body': '**我的站点信息** \r\n\r\n- 站点名称: 维燕的数字花园\r\n- 站点链接: https://weiyan.cc\r\n- 站点头像: https://weiyan.cc/assets/logo.png\r\n- 站点描述: BioIT 爱好者，沉淀生活，记录点滴。', 'author': {'login': 'shenweiyan'}}, {'body': '博客名称：Jayden\n博客地址：https://xxu.do\n博客介绍为天地立心,为生民立命, 为往圣继绝学,为万世开太平。\n', 'author': {'login': 'Jaaayden'}}, {'body': 'hello', 'author': {'login': 'vbskycn'}}, {'body': '站名：墨迹心空\n站点链接：https://www.secondlife.love\n站点介绍：life is coding', 'author': {'login': 'secondlife1127'}}, {'body': '你好，uioqps.github.io\n可以交流下技术相关的问题吗', 'author': {'login': 'uioQPS'}}, {'body': '博客名称：Wanjin Hu (胡万金)\n博客地址：https://wanjinhu.github.io\n博客介绍：思考人生，探索世界，知行合一。\n\n我的主页比较单调，平时更新的并不是很多，一般是和我专业相关的长文', 'author': {'login': 'wanjinhu'}}, {'body': '博客名称：BioMooc\n博客地址：https://www.biomooc.com/\n博客介绍：R语言可视化为主的生信网站', 'author': {'login': 'DawnEve'}}, {'body': "    \n>名称: Wcowin's Blog  \n>链接: https://wcowin.work/  \n>头像: https://s2.loli.net/2024/02/01/gaE47y5fKM6kosV.png  \n >简介: 循此苦旅，以达星辰\n\n已添加！学习了很多~RSS那篇文章解决了我的疑惑", 'author': {'login': 'Wcowin'}}, {'body': '名称：Goslion的博客\r\n链接：https://goslion.eu.org/\r\n头像：无\r\n简介：一个专注技术与写作的个人博客，记录日常与技术', 'author': {'login': 'ssttyyxxx'}}]}}, {'title': '关于 | 作者与站点', 'number': 4, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/4', 'createdAt': '2023-10-16T05:11:48Z', 'lastEditedAt': '2025-01-22T01:51:23Z', 'updatedAt': '2025-05-06T03:26:46Z', 'body': '聊一聊关于作者和这个站点的一些事情。\r\n\r\n## 缘起\r\n\r\n程序员都有一个博客梦，对我来说，写写字也可以成为我调解压力的一个很好方式。\r\n\r\n在独立博客或者说独立站点前，一直有一种 "背靠大树好乘凉" 的心理把自己的文档建立的大平台的服务上，从开源中国、蚂蚁笔记、博客园、简书、CSDN、语雀上踩过不少坑后终于认识到数据可控和 DIY 的好处，于是有了独立博客站点的想法。\r\n\r\n静态博客站点一直是个人最情有独钟的选择，省去了服务器折腾续费运维的种种麻烦，可以更加专注于文字本身的写作。也曾经纠结过 Jekyll、Hexo、Hugo 的选型，但最终被 Hugo 极快的页面编译生成速度所折服，并深受[谢益辉](https://github.com/yihui)前期的 [ivy-hugo-theme](https://github.com/shenweiyan/ivy-hugo-theme) 博客风格影响，自己倒腾了一个 [ICS-Hugo-Theme](https://github.com/shenweiyan/ICS-Hugo-Theme) 用了好几年。\r\n\r\n## 语雀\r\n\r\n在独立博客站点前不得不把语雀单独拎出来说一下。\r\n\r\n从 2018 到 2023 年，语雀一直都是我重度使用的主力平台，没有之一。我也一度以为语雀会成为了未来 5-10 年的主力平台（由于[语雀天使](https://weiyan.cc/note/2021-10-14-yuque-vip/)的福利，我的语雀会员也延长到了 **2037** 年！），[All in Yuque](https://www.yuque.com/shenweiyan/notebook/all-in-yuque) 也成为了我那一段时间的坚持。不幸的是，语雀在 2023 年发生了非常严重的[宕机事件](https://www.zhihu.com/question/627448953)，加上前一年沸沸扬扬的[收费事件](https://www.zhihu.com/question/562238887)，以及语雀固有的一些问题，对于语雀的信任开始动摇。\r\n\r\n直至 2023 年由于工作地点的变更，加上某些不可描述的原因导致语雀在办公网络下无法直接访问，终于把继续使用语雀的最后一根稻草压垮，逐步开始拥抱 GitHub，并在这个全球最大的开源平台上深入摸索。\r\n\r\n## 当下\r\n\r\n正如个人在[语雀花园](https://www.yuque.com/shenweiyan)所说，2023年7月起个人大部分文章已经转移至 [GitHub](https://github.com/shenweiyan)，并同步至 [Knowledge-Garden](https://github.com/shenweiyan/Digital-Garden/) (后期主要在 [Discussions](https://github.com/shenweiyan/Digital-Garden/discussions) 和 [维燕的数字花园](https://weiyan.cc/) 进行写作与更新)，语雀会保持不定期更新（基本已经停更）！\r\n\r\n现在的这个站点是基于 [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/) 进行部署，并整合了个人 **[语雀知识库](https://www.yuque.com/shenweiyan)** 几个主要知识库文章后形成的独立站点。\r\n\r\n## 未来\r\n\r\n我希望 [WeiYan.CC](https://weiyan.cc/) 能成为我知识管理的最后一站，虽然未来这些文章展现的形式，或者选择用于部署的技术有所改变，但至少域名是不变的（除非我能有幸注册到 com/cn/net/org 其中之一的主流域名），通过这个域名你至少还能找到曾经我写下的那些字。\r\n\r\n不忘初心，方得始终，希望下一个十年，还能在这里遇到一个曾经的我，看到曾经的文字。\r\n\r\n## 作者\r\n\r\n沈维燕（史提芬先森/章鱼猫先生），一个 90 后的广东人，熟悉粤语、国语，略懂英语。\r\n\r\n- 毕业于南方医科大学（原中国人民解放军第一军医大学）基础医学院生物信息学专业。\r\n- 现工作生活于广州，主要从事 BIO & IT 的一些相关工作。\r\n- 平时喜欢逛逛技术论坛，玩玩羽毛球，看看电影，瞎折腾一下技术。\r\n- 不务正业之余喜欢记录一些生活工作学习中的一些想法。\r\n- 乐于分享，喜欢把事情简单化，程序化。\r\n\r\n## 联系\r\n\r\n个人目前用的比较多的沟通工具，一个是**邮箱**，另外一个是**微信**，你可以通过这两种方式直接和我联系。\r\n\r\n- 邮箱：<shen@weiyan.cc>（或者 <shen@weiyan.tech>）\r\n- 微信：ishenweiyan（添加微信好友，请注明真实姓名）\r\n\r\n!!! tip "请备注真名实姓，让我感受到一个真实的人的气息"\r\n    如果给我发**邮件**，或者通过**微信添加好友**，请写上您的**真名实姓**，让我感受到一个**真实的人**的气息。我不太愿意跟**网名**打交道，对于那些不知来路、上来就问问题的微信和邮件，我通常会直接忽略。', 'bodyText': '聊一聊关于作者和这个站点的一些事情。\n缘起\n程序员都有一个博客梦，对我来说，写写字也可以成为我调解压力的一个很好方式。\n在独立博客或者说独立站点前，一直有一种 "背靠大树好乘凉" 的心理把自己的文档建立的大平台的服务上，从开源中国、蚂蚁笔记、博客园、简书、CSDN、语雀上踩过不少坑后终于认识到数据可控和 DIY 的好处，于是有了独立博客站点的想法。\n静态博客站点一直是个人最情有独钟的选择，省去了服务器折腾续费运维的种种麻烦，可以更加专注于文字本身的写作。也曾经纠结过 Jekyll、Hexo、Hugo 的选型，但最终被 Hugo 极快的页面编译生成速度所折服，并深受谢益辉前期的 ivy-hugo-theme 博客风格影响，自己倒腾了一个 ICS-Hugo-Theme 用了好几年。\n语雀\n在独立博客站点前不得不把语雀单独拎出来说一下。\n从 2018 到 2023 年，语雀一直都是我重度使用的主力平台，没有之一。我也一度以为语雀会成为了未来 5-10 年的主力平台（由于语雀天使的福利，我的语雀会员也延长到了 2037 年！），All in Yuque 也成为了我那一段时间的坚持。不幸的是，语雀在 2023 年发生了非常严重的宕机事件，加上前一年沸沸扬扬的收费事件，以及语雀固有的一些问题，对于语雀的信任开始动摇。\n直至 2023 年由于工作地点的变更，加上某些不可描述的原因导致语雀在办公网络下无法直接访问，终于把继续使用语雀的最后一根稻草压垮，逐步开始拥抱 GitHub，并在这个全球最大的开源平台上深入摸索。\n当下\n正如个人在语雀花园所说，2023年7月起个人大部分文章已经转移至 GitHub，并同步至 Knowledge-Garden (后期主要在 Discussions 和 维燕的数字花园 进行写作与更新)，语雀会保持不定期更新（基本已经停更）！\n现在的这个站点是基于 Material for MkDocs 进行部署，并整合了个人 语雀知识库 几个主要知识库文章后形成的独立站点。\n未来\n我希望 WeiYan.CC 能成为我知识管理的最后一站，虽然未来这些文章展现的形式，或者选择用于部署的技术有所改变，但至少域名是不变的（除非我能有幸注册到 com/cn/net/org 其中之一的主流域名），通过这个域名你至少还能找到曾经我写下的那些字。\n不忘初心，方得始终，希望下一个十年，还能在这里遇到一个曾经的我，看到曾经的文字。\n作者\n沈维燕（史提芬先森/章鱼猫先生），一个 90 后的广东人，熟悉粤语、国语，略懂英语。\n\n毕业于南方医科大学（原中国人民解放军第一军医大学）基础医学院生物信息学专业。\n现工作生活于广州，主要从事 BIO & IT 的一些相关工作。\n平时喜欢逛逛技术论坛，玩玩羽毛球，看看电影，瞎折腾一下技术。\n不务正业之余喜欢记录一些生活工作学习中的一些想法。\n乐于分享，喜欢把事情简单化，程序化。\n\n联系\n个人目前用的比较多的沟通工具，一个是邮箱，另外一个是微信，你可以通过这两种方式直接和我联系。\n\n邮箱：shen@weiyan.cc（或者 shen@weiyan.tech）\n微信：ishenweiyan（添加微信好友，请注明真实姓名）\n\n!!! tip "请备注真名实姓，让我感受到一个真实的人的气息"\n如果给我发邮件，或者通过微信添加好友，请写上您的真名实姓，让我感受到一个真实的人的气息。我不太愿意跟网名打交道，对于那些不知来路、上来就问问题的微信和邮件，我通常会直接忽略。', 'bodyHTML': '<p dir="auto">聊一聊关于作者和这个站点的一些事情。</p>\n<h2 dir="auto">缘起</h2>\n<p dir="auto">程序员都有一个博客梦，对我来说，写写字也可以成为我调解压力的一个很好方式。</p>\n<p dir="auto">在独立博客或者说独立站点前，一直有一种 "背靠大树好乘凉" 的心理把自己的文档建立的大平台的服务上，从开源中国、蚂蚁笔记、博客园、简书、CSDN、语雀上踩过不少坑后终于认识到数据可控和 DIY 的好处，于是有了独立博客站点的想法。</p>\n<p dir="auto">静态博客站点一直是个人最情有独钟的选择，省去了服务器折腾续费运维的种种麻烦，可以更加专注于文字本身的写作。也曾经纠结过 Jekyll、Hexo、Hugo 的选型，但最终被 Hugo 极快的页面编译生成速度所折服，并深受<a href="https://github.com/yihui">谢益辉</a>前期的 <a href="https://github.com/shenweiyan/ivy-hugo-theme">ivy-hugo-theme</a> 博客风格影响，自己倒腾了一个 <a href="https://github.com/shenweiyan/ICS-Hugo-Theme">ICS-Hugo-Theme</a> 用了好几年。</p>\n<h2 dir="auto">语雀</h2>\n<p dir="auto">在独立博客站点前不得不把语雀单独拎出来说一下。</p>\n<p dir="auto">从 2018 到 2023 年，语雀一直都是我重度使用的主力平台，没有之一。我也一度以为语雀会成为了未来 5-10 年的主力平台（由于<a href="https://weiyan.cc/note/2021-10-14-yuque-vip/" rel="nofollow">语雀天使</a>的福利，我的语雀会员也延长到了 <strong>2037</strong> 年！），<a href="https://www.yuque.com/shenweiyan/notebook/all-in-yuque" rel="nofollow">All in Yuque</a> 也成为了我那一段时间的坚持。不幸的是，语雀在 2023 年发生了非常严重的<a href="https://www.zhihu.com/question/627448953" rel="nofollow">宕机事件</a>，加上前一年沸沸扬扬的<a href="https://www.zhihu.com/question/562238887" rel="nofollow">收费事件</a>，以及语雀固有的一些问题，对于语雀的信任开始动摇。</p>\n<p dir="auto">直至 2023 年由于工作地点的变更，加上某些不可描述的原因导致语雀在办公网络下无法直接访问，终于把继续使用语雀的最后一根稻草压垮，逐步开始拥抱 GitHub，并在这个全球最大的开源平台上深入摸索。</p>\n<h2 dir="auto">当下</h2>\n<p dir="auto">正如个人在<a href="https://www.yuque.com/shenweiyan" rel="nofollow">语雀花园</a>所说，2023年7月起个人大部分文章已经转移至 <a href="https://github.com/shenweiyan">GitHub</a>，并同步至 <a href="https://github.com/shenweiyan/Digital-Garden/">Knowledge-Garden</a> (后期主要在 <a href="https://github.com/shenweiyan/Digital-Garden/discussions">Discussions</a> 和 <a href="https://weiyan.cc/" rel="nofollow">维燕的数字花园</a> 进行写作与更新)，语雀会保持不定期更新（基本已经停更）！</p>\n<p dir="auto">现在的这个站点是基于 <a href="https://squidfunk.github.io/mkdocs-material/" rel="nofollow">Material for MkDocs</a> 进行部署，并整合了个人 <strong><a href="https://www.yuque.com/shenweiyan" rel="nofollow">语雀知识库</a></strong> 几个主要知识库文章后形成的独立站点。</p>\n<h2 dir="auto">未来</h2>\n<p dir="auto">我希望 <a href="https://weiyan.cc/" rel="nofollow">WeiYan.CC</a> 能成为我知识管理的最后一站，虽然未来这些文章展现的形式，或者选择用于部署的技术有所改变，但至少域名是不变的（除非我能有幸注册到 com/cn/net/org 其中之一的主流域名），通过这个域名你至少还能找到曾经我写下的那些字。</p>\n<p dir="auto">不忘初心，方得始终，希望下一个十年，还能在这里遇到一个曾经的我，看到曾经的文字。</p>\n<h2 dir="auto">作者</h2>\n<p dir="auto">沈维燕（史提芬先森/章鱼猫先生），一个 90 后的广东人，熟悉粤语、国语，略懂英语。</p>\n<ul dir="auto">\n<li>毕业于南方医科大学（原中国人民解放军第一军医大学）基础医学院生物信息学专业。</li>\n<li>现工作生活于广州，主要从事 BIO &amp; IT 的一些相关工作。</li>\n<li>平时喜欢逛逛技术论坛，玩玩羽毛球，看看电影，瞎折腾一下技术。</li>\n<li>不务正业之余喜欢记录一些生活工作学习中的一些想法。</li>\n<li>乐于分享，喜欢把事情简单化，程序化。</li>\n</ul>\n<h2 dir="auto">联系</h2>\n<p dir="auto">个人目前用的比较多的沟通工具，一个是<strong>邮箱</strong>，另外一个是<strong>微信</strong>，你可以通过这两种方式直接和我联系。</p>\n<ul dir="auto">\n<li>邮箱：<a href="mailto:shen@weiyan.cc">shen@weiyan.cc</a>（或者 <a href="mailto:shen@weiyan.tech">shen@weiyan.tech</a>）</li>\n<li>微信：ishenweiyan（添加微信好友，请注明真实姓名）</li>\n</ul>\n<p dir="auto">!!! tip "请备注真名实姓，让我感受到一个真实的人的气息"<br>\n如果给我发<strong>邮件</strong>，或者通过<strong>微信添加好友</strong>，请写上您的<strong>真名实姓</strong>，让我感受到一个<strong>真实的人</strong>的气息。我不太愿意跟<strong>网名</strong>打交道，对于那些不知来路、上来就问问题的微信和邮件，我通常会直接忽略。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '0.1-站点'}, 'labels': {'nodes': []}, 'comments': {'nodes': [{'body': '> 如果给我发邮件，或者通过微信添加好友，请写上您的真名实姓，让我感受到一个真实的人的气息。我不太愿意跟网名打交道，对于那些不知来路、上来就问问题的微信和邮件，我通常会直接忽略。\n\n你这个要求很谢益辉嘛', 'author': {'login': 'chuxinyuan'}}, {'body': '我前两天刚好刷到你的网站。从https://nops.icu 留言过来', 'author': {'login': 'fcatat'}}]}}, {'title': 'Discussions 3', 'number': 3, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/3', 'createdAt': '2023-10-16T05:03:33Z', 'lastEditedAt': '2023-11-08T08:03:02Z', 'updatedAt': '2023-12-06T01:35:06Z', 'body': 'Wed Nov  8 14:39:48 CST 2023', 'bodyText': 'Wed Nov  8 14:39:48 CST 2023', 'bodyHTML': '<p dir="auto">Wed Nov  8 14:39:48 CST 2023</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '公告说明'}, 'labels': {'nodes': []}, 'comments': {'nodes': [{'body': '这里测试一下回复~', 'author': {'login': 'shenweiyan'}}, {'body': '在 Mkdocs 中插入指定的 discussions 以嵌入评论，其中 `data-term` 为对应的 discussions number~\r\n```\r\n<script src="https://giscus.app/client.js"\r\n        data-repo="shenweiyan/Knowledge-Garden"\r\n        data-repo-id="R_kgDOKgxWlg"\r\n        data-mapping="number"\r\n        data-term="3"\r\n        data-reactions-enabled="1"\r\n        data-emit-metadata="0"\r\n        data-input-position="bottom"\r\n        data-theme="light"\r\n        data-lang="zh-CN"\r\n        crossorigin="anonymous"\r\n        async>\r\n</script>\r\n```', 'author': {'login': 'shenweiyan'}}]}}, {'title': '这是一个备用讨论', 'number': 2, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/2', 'createdAt': '2023-10-16T05:03:14Z', 'lastEditedAt': '2023-12-05T06:33:23Z', 'updatedAt': '2023-12-05T06:33:23Z', 'body': '备用讨论', 'bodyText': '备用讨论', 'bodyHTML': '<p dir="auto">备用讨论</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '公告说明'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '使用与说明', 'number': 1, 'url': 'https://github.com/shenweiyan/Digital-Garden/discussions/1', 'createdAt': '2023-10-16T03:18:39Z', 'lastEditedAt': '2025-03-25T06:44:13Z', 'updatedAt': '2025-03-25T06:44:13Z', 'body': '分享一下我的经验。你也可以用 Github Discussions 搭建自己的论坛、博客、个人笔记等。\r\n\r\n## 欢迎订阅\r\n\r\n用户有自主选择权，只看他感兴趣的内容。\r\n\r\n1. 可以点击项目的 Watch 按钮来订阅消息。具体用法请看 [Github - 查看订阅](https://docs.github.com/zh/account-and-profile/managing-subscriptions-and-notifications-on-github/managing-subscriptions-for-activity-on-github/viewing-your-subscriptions)。\r\n    <img alt="watch-discussions" width="" src="https://kg.weiyan.tech/2023/12/watch-github-discussions.png">\r\n\r\n 2. 也可以只订阅某个讨论。进入某个讨论，点击右边 Notifications 的 Subscribe 按钮。\r\n \r\n    用户可以在 https://github.com/notifications 里看到订阅的新消息。\r\n\r\n<!--\r\n    ✏️ Optional: Customize the content below to let your community know what you intend to use Discussions for.\r\n-->\r\n## 👋 Welcome!\r\n  We’re using Discussions as a place to connect with other members of our community. We hope that you:\r\n  * Ask questions you’re wondering about.\r\n  * Share ideas.\r\n  * Engage with other community members.\r\n  * Welcome others and are open-minded. Remember that this is a community we\r\n  build together 💪.\r\n\r\n  To get started, comment below with an introduction of yourself and tell us about what you do with this community.\r\n\r\n<!--\r\n  For the maintainers, here are some tips 💡 for getting started with Discussions. We\'ll leave these in Markdown comments for now, but feel free to take out the comments for all maintainers to see.\r\n\r\n  📢 **Announce to your community** that Discussions is available! Go ahead and send that tweet, post, or link it from the website to drive traffic here.\r\n\r\n  🔗 If you use issue templates, **link any relevant issue templates** such as questions and community conversations to Discussions. Declutter your issues by driving community content to where they belong in Discussions. If you need help, here\'s a [link to the documentation](https://docs.github.com/en/github/building-a-strong-community/configuring-issue-templates-for-your-repository#configuring-the-template-chooser).\r\n\r\n  ➡️ You can **convert issues to discussions** either individually or bulk by labels. Looking at you, issues labeled “question” or “discussion”.\r\n-->\r\n\r\n## 本仓库谈论说明\r\n\r\n这里所有的 `Discussion Format` 都是 `Announcement`：Only maintainers and admins can post new discussions in these categories, but anyone can comment and reply.    \r\n![Discussion Format](https://kg.weiyan.cc/2023/12/discussion-format.png)\r\n\r\n## 使用讨论 (Discussion)\r\n\r\n### 搜索讨论\r\n\r\n- 版块搜索：在 Discussions 页面的搜索框输入搜索词即可。\r\n- 全局搜索：在最上面的 Github 搜索框输入 `org:shenweiyan 搜索词` 就能搜索所有版块的讨论。比如搜["生信"](https://github.com/search?q=org%3Ashenweiyan+%E7%94%9F%E4%BF%A1&type=discussions)。\r\n \r\n### 排序讨论\r\n\r\n- 可以按时间来排序讨论。    \r\n    <img alt="sort-discussions" width="280" src="https://kg.weiyan.cc/2023/12/sort-discussions.png">\r\n \r\n### 使用 Label 筛选讨论\r\n- Label 是可以无限加的。一个讨论可以有多个 Label。    \r\n    <img alt="filter-labels" width="250" src="https://kg.weiyan.cc/2023/12/filter-labels.png">\r\n\r\n- 标记 Label 的好处在于，用户可以在讨论列表里筛选、多选、反选 Label 对应的讨论。    \r\n    <img alt="filter-by-labels" width="250" src="https://kg.weiyan.cc/2023/12/filter-by-labels.png">\r\n \r\n## 评论\r\n\r\n评论有两种。一种是在别人的评论下继续回复评论。一种是最底下的评论框，这会回复到主线里。\r\n \r\n如果你针对某个评论进行回复，建议在别人的评论下回复，不要回复到主线。这样其他订阅这个讨论的人不会收到消息提醒的干扰。\r\n \r\n## 讨论管理\r\n\r\n### 讨论分类\r\n\r\n讨论分类由项目管理员维护。按需创建。分类根据名称排序。所以加个数字前缀用来控制显示顺序。\r\n\r\n### 删除讨论\r\n\r\n点进讨论详情页，在右侧最底下有个 delete discussion。\r\n\r\n### 迁移讨论\r\n\r\n- Transfer this discussion 功能可以把讨论移到同组织的另一个项目下。    \r\n    <img alt="transfer-discussion" width="" src="https://kg.weiyan.cc/2023/12/transfer-discussion.png">\r\n\r\n- 也可以切换讨论分类。    \r\n    <img alt="change-category" width="250" src="https://kg.weiyan.cc/2023/12/change-category.png">\r\n\r\n### 置顶讨论\r\n\r\n在讨论详情页面可以选择置到项目 Discussion 的顶部，或者置到讨论分类的顶部。\r\n<img alt="置顶讨论" width="200" src="https://kg.weiyan.cc/2023/12/pin-discussion.png">\r\n\r\n## 周报月报\r\n可以考虑使用 Github Action 自动跑脚本，通过 Github API 来获取 Discussion 的消息。然后自动创建 release，把简报内容写到 release body 里。这样订阅了项目 release 的人就可以收到。 可以单独创建一个项目来管理，避免订阅的人受到干扰。\r\n\r\nGithub Discussion API:\r\n\r\n* https://docs.github.com/en/search-github/searching-on-github/searching-discussions\r\n* https://docs.github.com/en/graphql/guides/using-the-graphql-api-for-discussions#search\r\n* [Discussions API\xa0community/community#43](https://github.com/orgs/community/discussions/43)\r\n\r\n## 数据备份\r\n\r\n可以考虑使用 Github Action 自动跑脚本，通过 Github API 来获取 Discussion 的消息。\r\n \r\n\r\n## 移动端\r\nGithub 有[移动端 App](https://github.com/mobile)。除了不支持 Polls 功能，其他功能都挺好用的。能查看提醒，也能发布新讨论，也能回复评论。\r\n\r\n## 邮件端\r\n消息提醒同时会发到你绑定的邮箱里。你也可以用邮箱来查收。\r\n\r\n## 博文中加评论\r\n\r\n借助 [giscus](https://giscus.app/zh-CN)，可以非常方便在文章页中插入指定的 discussions —— 在导出 discussions 的时候，在文章尾部增加类似以下 JavaScript 即可：\r\n```javascript\r\n<script src="https://giscus.app/client.js"\r\n        data-repo="shenweiyan/Knowledge-Garden"\r\n        data-repo-id="R_kgDOKgxWlg"\r\n        data-mapping="number"\r\n        data-term="4"\r\n        data-reactions-enabled="1"\r\n        data-emit-metadata="0"\r\n        data-input-position="bottom"\r\n        data-theme="light"\r\n        data-lang="zh-CN"\r\n        crossorigin="anonymous"\r\n        async>\r\n</script>\r\n```\r\n', 'bodyText': '分享一下我的经验。你也可以用 Github Discussions 搭建自己的论坛、博客、个人笔记等。\n欢迎订阅\n用户有自主选择权，只看他感兴趣的内容。\n\n\n可以点击项目的 Watch 按钮来订阅消息。具体用法请看 Github - 查看订阅。\n\n\n\n也可以只订阅某个讨论。进入某个讨论，点击右边 Notifications 的 Subscribe 按钮。\n用户可以在 https://github.com/notifications 里看到订阅的新消息。\n\n\n\n👋 Welcome!\nWe’re using Discussions as a place to connect with other members of our community. We hope that you:\n\nAsk questions you’re wondering about.\nShare ideas.\nEngage with other community members.\nWelcome others and are open-minded. Remember that this is a community we\nbuild together 💪.\n\nTo get started, comment below with an introduction of yourself and tell us about what you do with this community.\n\n本仓库谈论说明\n这里所有的 Discussion Format 都是 Announcement：Only maintainers and admins can post new discussions in these categories, but anyone can comment and reply.\n\n使用讨论 (Discussion)\n搜索讨论\n\n版块搜索：在 Discussions 页面的搜索框输入搜索词即可。\n全局搜索：在最上面的 Github 搜索框输入 org:shenweiyan 搜索词 就能搜索所有版块的讨论。比如搜"生信"。\n\n排序讨论\n\n可以按时间来排序讨论。\n\n\n使用 Label 筛选讨论\n\n\nLabel 是可以无限加的。一个讨论可以有多个 Label。\n\n\n\n标记 Label 的好处在于，用户可以在讨论列表里筛选、多选、反选 Label 对应的讨论。\n\n\n\n评论\n评论有两种。一种是在别人的评论下继续回复评论。一种是最底下的评论框，这会回复到主线里。\n如果你针对某个评论进行回复，建议在别人的评论下回复，不要回复到主线。这样其他订阅这个讨论的人不会收到消息提醒的干扰。\n讨论管理\n讨论分类\n讨论分类由项目管理员维护。按需创建。分类根据名称排序。所以加个数字前缀用来控制显示顺序。\n删除讨论\n点进讨论详情页，在右侧最底下有个 delete discussion。\n迁移讨论\n\n\nTransfer this discussion 功能可以把讨论移到同组织的另一个项目下。\n\n\n\n也可以切换讨论分类。\n\n\n\n置顶讨论\n在讨论详情页面可以选择置到项目 Discussion 的顶部，或者置到讨论分类的顶部。\n\n周报月报\n可以考虑使用 Github Action 自动跑脚本，通过 Github API 来获取 Discussion 的消息。然后自动创建 release，把简报内容写到 release body 里。这样订阅了项目 release 的人就可以收到。 可以单独创建一个项目来管理，避免订阅的人受到干扰。\nGithub Discussion API:\n\nhttps://docs.github.com/en/search-github/searching-on-github/searching-discussions\nhttps://docs.github.com/en/graphql/guides/using-the-graphql-api-for-discussions#search\nDiscussions API\xa0community/community#43\n\n数据备份\n可以考虑使用 Github Action 自动跑脚本，通过 Github API 来获取 Discussion 的消息。\n移动端\nGithub 有移动端 App。除了不支持 Polls 功能，其他功能都挺好用的。能查看提醒，也能发布新讨论，也能回复评论。\n邮件端\n消息提醒同时会发到你绑定的邮箱里。你也可以用邮箱来查收。\n博文中加评论\n借助 giscus，可以非常方便在文章页中插入指定的 discussions —— 在导出 discussions 的时候，在文章尾部增加类似以下 JavaScript 即可：\n<script src="https://giscus.app/client.js"\n        data-repo="shenweiyan/Knowledge-Garden"\n        data-repo-id="R_kgDOKgxWlg"\n        data-mapping="number"\n        data-term="4"\n        data-reactions-enabled="1"\n        data-emit-metadata="0"\n        data-input-position="bottom"\n        data-theme="light"\n        data-lang="zh-CN"\n        crossorigin="anonymous"\n        async>\n</script>', 'bodyHTML': '<p dir="auto">分享一下我的经验。你也可以用 Github Discussions 搭建自己的论坛、博客、个人笔记等。</p>\n<h2 dir="auto">欢迎订阅</h2>\n<p dir="auto">用户有自主选择权，只看他感兴趣的内容。</p>\n<ol dir="auto">\n<li>\n<p dir="auto">可以点击项目的 Watch 按钮来订阅消息。具体用法请看 <a href="https://docs.github.com/zh/account-and-profile/managing-subscriptions-and-notifications-on-github/managing-subscriptions-for-activity-on-github/viewing-your-subscriptions">Github - 查看订阅</a>。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b258072e1319ee0d57f8086a79dc07e830681846b39a3743eb59a2b39297f27f/68747470733a2f2f6b672e77656979616e2e746563682f323032332f31322f77617463682d6769746875622d64697363757373696f6e732e706e67"><img alt="watch-discussions" width="" src="https://camo.githubusercontent.com/b258072e1319ee0d57f8086a79dc07e830681846b39a3743eb59a2b39297f27f/68747470733a2f2f6b672e77656979616e2e746563682f323032332f31322f77617463682d6769746875622d64697363757373696f6e732e706e67" data-canonical-src="https://kg.weiyan.tech/2023/12/watch-github-discussions.png" style="max-width: 100%;"></a></p>\n</li>\n<li>\n<p dir="auto">也可以只订阅某个讨论。进入某个讨论，点击右边 Notifications 的 Subscribe 按钮。</p>\n<p dir="auto">用户可以在 <a href="https://github.com/notifications">https://github.com/notifications</a> 里看到订阅的新消息。</p>\n</li>\n</ol>\n\n<h2 dir="auto">👋 Welcome!</h2>\n<p dir="auto">We’re using Discussions as a place to connect with other members of our community. We hope that you:</p>\n<ul dir="auto">\n<li>Ask questions you’re wondering about.</li>\n<li>Share ideas.</li>\n<li>Engage with other community members.</li>\n<li>Welcome others and are open-minded. Remember that this is a community we<br>\nbuild together 💪.</li>\n</ul>\n<p dir="auto">To get started, comment below with an introduction of yourself and tell us about what you do with this community.</p>\n\n<h2 dir="auto">本仓库谈论说明</h2>\n<p dir="auto">这里所有的 <code class="notranslate">Discussion Format</code> 都是 <code class="notranslate">Announcement</code>：Only maintainers and admins can post new discussions in these categories, but anyone can comment and reply.<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/129788a8e023fa78f0ed06234ec8157a2bc68537445b3cb96264fd8ea2c55a92/68747470733a2f2f6b672e77656979616e2e63632f323032332f31322f64697363757373696f6e2d666f726d61742e706e67"><img src="https://camo.githubusercontent.com/129788a8e023fa78f0ed06234ec8157a2bc68537445b3cb96264fd8ea2c55a92/68747470733a2f2f6b672e77656979616e2e63632f323032332f31322f64697363757373696f6e2d666f726d61742e706e67" alt="Discussion Format" data-canonical-src="https://kg.weiyan.cc/2023/12/discussion-format.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">使用讨论 (Discussion)</h2>\n<h3 dir="auto">搜索讨论</h3>\n<ul dir="auto">\n<li>版块搜索：在 Discussions 页面的搜索框输入搜索词即可。</li>\n<li>全局搜索：在最上面的 Github 搜索框输入 <code class="notranslate">org:shenweiyan 搜索词</code> 就能搜索所有版块的讨论。比如搜<a href="https://github.com/search?q=org%3Ashenweiyan+%E7%94%9F%E4%BF%A1&amp;type=discussions">"生信"</a>。</li>\n</ul>\n<h3 dir="auto">排序讨论</h3>\n<ul dir="auto">\n<li>可以按时间来排序讨论。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/6cace781d9678a18079037e44dc315e5aae4d14a38c2a6a817eefff42a916b30/68747470733a2f2f6b672e77656979616e2e63632f323032332f31322f736f72742d64697363757373696f6e732e706e67"><img alt="sort-discussions" width="280" src="https://camo.githubusercontent.com/6cace781d9678a18079037e44dc315e5aae4d14a38c2a6a817eefff42a916b30/68747470733a2f2f6b672e77656979616e2e63632f323032332f31322f736f72742d64697363757373696f6e732e706e67" data-canonical-src="https://kg.weiyan.cc/2023/12/sort-discussions.png" style="max-width: 100%;"></a></li>\n</ul>\n<h3 dir="auto">使用 Label 筛选讨论</h3>\n<ul dir="auto">\n<li>\n<p dir="auto">Label 是可以无限加的。一个讨论可以有多个 Label。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/38b3f3f979ffd1d639baafbda7d8e54f254d3a8a937257e559fae61ab361a822/68747470733a2f2f6b672e77656979616e2e63632f323032332f31322f66696c7465722d6c6162656c732e706e67"><img alt="filter-labels" width="250" src="https://camo.githubusercontent.com/38b3f3f979ffd1d639baafbda7d8e54f254d3a8a937257e559fae61ab361a822/68747470733a2f2f6b672e77656979616e2e63632f323032332f31322f66696c7465722d6c6162656c732e706e67" data-canonical-src="https://kg.weiyan.cc/2023/12/filter-labels.png" style="max-width: 100%;"></a></p>\n</li>\n<li>\n<p dir="auto">标记 Label 的好处在于，用户可以在讨论列表里筛选、多选、反选 Label 对应的讨论。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/adadb758eb819f2209f98f6c3f8aed5087e420cb573f944a77402fea1b6da866/68747470733a2f2f6b672e77656979616e2e63632f323032332f31322f66696c7465722d62792d6c6162656c732e706e67"><img alt="filter-by-labels" width="250" src="https://camo.githubusercontent.com/adadb758eb819f2209f98f6c3f8aed5087e420cb573f944a77402fea1b6da866/68747470733a2f2f6b672e77656979616e2e63632f323032332f31322f66696c7465722d62792d6c6162656c732e706e67" data-canonical-src="https://kg.weiyan.cc/2023/12/filter-by-labels.png" style="max-width: 100%;"></a></p>\n</li>\n</ul>\n<h2 dir="auto">评论</h2>\n<p dir="auto">评论有两种。一种是在别人的评论下继续回复评论。一种是最底下的评论框，这会回复到主线里。</p>\n<p dir="auto">如果你针对某个评论进行回复，建议在别人的评论下回复，不要回复到主线。这样其他订阅这个讨论的人不会收到消息提醒的干扰。</p>\n<h2 dir="auto">讨论管理</h2>\n<h3 dir="auto">讨论分类</h3>\n<p dir="auto">讨论分类由项目管理员维护。按需创建。分类根据名称排序。所以加个数字前缀用来控制显示顺序。</p>\n<h3 dir="auto">删除讨论</h3>\n<p dir="auto">点进讨论详情页，在右侧最底下有个 delete discussion。</p>\n<h3 dir="auto">迁移讨论</h3>\n<ul dir="auto">\n<li>\n<p dir="auto">Transfer this discussion 功能可以把讨论移到同组织的另一个项目下。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/873d84a844cfbe3d72ef16e4740e0ec9b88a462a4f1b48bd0b3ec5cec60f5a51/68747470733a2f2f6b672e77656979616e2e63632f323032332f31322f7472616e736665722d64697363757373696f6e2e706e67"><img alt="transfer-discussion" width="" src="https://camo.githubusercontent.com/873d84a844cfbe3d72ef16e4740e0ec9b88a462a4f1b48bd0b3ec5cec60f5a51/68747470733a2f2f6b672e77656979616e2e63632f323032332f31322f7472616e736665722d64697363757373696f6e2e706e67" data-canonical-src="https://kg.weiyan.cc/2023/12/transfer-discussion.png" style="max-width: 100%;"></a></p>\n</li>\n<li>\n<p dir="auto">也可以切换讨论分类。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/06ba5e2d0ff9bd13f7bc8746e504a922d6f6bc5129a7e8cbcff7efe34032b242/68747470733a2f2f6b672e77656979616e2e63632f323032332f31322f6368616e67652d63617465676f72792e706e67"><img alt="change-category" width="250" src="https://camo.githubusercontent.com/06ba5e2d0ff9bd13f7bc8746e504a922d6f6bc5129a7e8cbcff7efe34032b242/68747470733a2f2f6b672e77656979616e2e63632f323032332f31322f6368616e67652d63617465676f72792e706e67" data-canonical-src="https://kg.weiyan.cc/2023/12/change-category.png" style="max-width: 100%;"></a></p>\n</li>\n</ul>\n<h3 dir="auto">置顶讨论</h3>\n<p dir="auto">在讨论详情页面可以选择置到项目 Discussion 的顶部，或者置到讨论分类的顶部。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/9d5f3f9f18d63e9f8328b69417839d67b1156ae6f2e0f514fa6ee9281f85fcdc/68747470733a2f2f6b672e77656979616e2e63632f323032332f31322f70696e2d64697363757373696f6e2e706e67"><img alt="置顶讨论" width="200" src="https://camo.githubusercontent.com/9d5f3f9f18d63e9f8328b69417839d67b1156ae6f2e0f514fa6ee9281f85fcdc/68747470733a2f2f6b672e77656979616e2e63632f323032332f31322f70696e2d64697363757373696f6e2e706e67" data-canonical-src="https://kg.weiyan.cc/2023/12/pin-discussion.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">周报月报</h2>\n<p dir="auto">可以考虑使用 Github Action 自动跑脚本，通过 Github API 来获取 Discussion 的消息。然后自动创建 release，把简报内容写到 release body 里。这样订阅了项目 release 的人就可以收到。 可以单独创建一个项目来管理，避免订阅的人受到干扰。</p>\n<p dir="auto">Github Discussion API:</p>\n<ul dir="auto">\n<li><a href="https://docs.github.com/en/search-github/searching-on-github/searching-discussions">https://docs.github.com/en/search-github/searching-on-github/searching-discussions</a></li>\n<li><a href="https://docs.github.com/en/graphql/guides/using-the-graphql-api-for-discussions#search">https://docs.github.com/en/graphql/guides/using-the-graphql-api-for-discussions#search</a></li>\n<li><a href="https://github.com/orgs/community/discussions/43">Discussions API\xa0community/community#43</a></li>\n</ul>\n<h2 dir="auto">数据备份</h2>\n<p dir="auto">可以考虑使用 Github Action 自动跑脚本，通过 Github API 来获取 Discussion 的消息。</p>\n<h2 dir="auto">移动端</h2>\n<p dir="auto">Github 有<a href="https://github.com/mobile">移动端 App</a>。除了不支持 Polls 功能，其他功能都挺好用的。能查看提醒，也能发布新讨论，也能回复评论。</p>\n<h2 dir="auto">邮件端</h2>\n<p dir="auto">消息提醒同时会发到你绑定的邮箱里。你也可以用邮箱来查收。</p>\n<h2 dir="auto">博文中加评论</h2>\n<p dir="auto">借助 <a href="https://giscus.app/zh-CN" rel="nofollow">giscus</a>，可以非常方便在文章页中插入指定的 discussions —— 在导出 discussions 的时候，在文章尾部增加类似以下 JavaScript 即可：</p>\n<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;script src=&quot;https://giscus.app/client.js&quot;\n        data-repo=&quot;shenweiyan/Knowledge-Garden&quot;\n        data-repo-id=&quot;R_kgDOKgxWlg&quot;\n        data-mapping=&quot;number&quot;\n        data-term=&quot;4&quot;\n        data-reactions-enabled=&quot;1&quot;\n        data-emit-metadata=&quot;0&quot;\n        data-input-position=&quot;bottom&quot;\n        data-theme=&quot;light&quot;\n        data-lang=&quot;zh-CN&quot;\n        crossorigin=&quot;anonymous&quot;\n        async&gt;\n&lt;/script&gt;"><pre class="notranslate"><span class="pl-c1">&lt;</span><span class="pl-s1">script</span> <span class="pl-c1">src</span><span class="pl-c1">=</span><span class="pl-s">"https://giscus.app/client.js"</span>\n        <span class="pl-c1">data-repo</span><span class="pl-c1">=</span><span class="pl-s">"shenweiyan/Knowledge-Garden"</span>\n        <span class="pl-c1">data-repo-id</span><span class="pl-c1">=</span><span class="pl-s">"R_kgDOKgxWlg"</span>\n        <span class="pl-c1">data-mapping</span><span class="pl-c1">=</span><span class="pl-s">"number"</span>\n        <span class="pl-c1">data-term</span><span class="pl-c1">=</span><span class="pl-s">"4"</span>\n        <span class="pl-c1">data-reactions-enabled</span><span class="pl-c1">=</span><span class="pl-s">"1"</span>\n        <span class="pl-c1">data-emit-metadata</span><span class="pl-c1">=</span><span class="pl-s">"0"</span>\n        <span class="pl-c1">data-input-position</span><span class="pl-c1">=</span><span class="pl-s">"bottom"</span>\n        <span class="pl-c1">data-theme</span><span class="pl-c1">=</span><span class="pl-s">"light"</span>\n        <span class="pl-c1">data-lang</span><span class="pl-c1">=</span><span class="pl-s">"zh-CN"</span>\n        <span class="pl-c1">crossorigin</span><span class="pl-c1">=</span><span class="pl-s">"anonymous"</span>\n        <span class="pl-c1">async</span><span class="pl-c1">&gt;</span>\n<span class="pl-kos">&lt;/</span><span class="pl-s1">script</span><span class="pl-c1">&gt;</span></pre></div>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '公告说明'}, 'labels': {'nodes': []}, 'comments': {'nodes': [{'body': '测试一下评论！', 'author': {'login': 'ishenwy'}}]}}]}